<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图解机器学习之回归模型性能评估指标</title>
      <link href="/posts/41842/"/>
      <url>/posts/41842/</url>
      
        <content type="html"><![CDATA[<p>一个房价预测的任务，老板说你看看这个模型咋样？<br>我们先绘制一个坐标轴： Y 轴为房价，X 轴为年份。将过去房价数据绘制为绿色，回归模型绘制为蓝色。<br>关键问题是，怎么知道这个模型的好坏呢？<br><img src="https://img-blog.csdnimg.cn/img_convert/7ec41a39d3b0619db80d5d0db85cae9d.png#crop=0&crop=0&crop=1&crop=1&id=u5Yrz&originHeight=365&originWidth=398&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>为了评估该模型的效果，一般会有几个指标：</p><h3 id="一、平均绝对误差-Mean-Absolute-Error，MAE"><a href="#一、平均绝对误差-Mean-Absolute-Error，MAE" class="headerlink" title="一、平均绝对误差 Mean Absolute Error，MAE"></a>一、平均绝对误差 <strong><em>Mean Absolute Error，MAE</em></strong></h3><p><strong>平均绝对误差 MAE</strong>，也叫平均绝对离差。<br>这个指标在计算时，先对真实值与预测值的距离（橙色线段长度）求和，再取平均值。<br><img src="https://img-blog.csdnimg.cn/img_convert/25c57418e7791900599ea43994bad888.png#crop=0&crop=0&crop=1&crop=1&id=UIDxo&originHeight=365&originWidth=398&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>用公式表示：<br>$MAE&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^{m}|f(x_i)-y_i|$<br>其中，</p><ul><li>$f(x_i)$：预测值</li><li>$y_i$：真实值</li><li>$m$：数据量</li></ul><p>平均绝对误差可以准确地反映实际预测误差的大小，但是，MAE 有个致命的缺点。<br>我们现在把左边的 Y 轴缩小 1000 倍，也就是 从 1000 -&gt; 1。<br>接下来，计算 MAE：</p><ul><li>数据集范围大会计算获得较大的 MAE。</li><li>数据集范围小会计算获得较小的 MAE。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/daf4c809392260552b62d0dfe72d591a.png#crop=0&crop=0&crop=1&crop=1&id=PiN3f&originHeight=599&originWidth=1518&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>可以看到，回归模型拟合没有变化，但是MAE 会随着数据的范围有较大的变化，也就说 MAE 指标不能显示回归模型拟合是优还是劣。</p><h3 id="二、平均绝对百分误差-Mean-Absolute-Percentage-Error，MAPE"><a href="#二、平均绝对百分误差-Mean-Absolute-Percentage-Error，MAPE" class="headerlink" title="二、平均绝对百分误差 Mean Absolute Percentage Error，MAPE"></a>二、平均绝对百分误差 <strong><em>Mean Absolute Percentage Error，MAPE</em></strong></h3><p>为了解决以上问题，**平均绝对百分误差 **对 MAE 改进后，通过计算真实值与预测的误差百分比避免了数据范围大小的影响：<br>$MAPE&#x3D;\frac{100}{m}\sum_{i&#x3D;1}{m}|\frac{y_i-f(x_i)}{y_i}|$<br>该指标可以用于评估回归模型的性能优劣，常用于衡量预测准确性指标，一般 MAPE &lt; 10 认为是较好的模型。<br>但是，如果真实值有 0，那么 MAPE 无法正确计算。</p><h3 id="三、均方误差-MSE"><a href="#三、均方误差-MSE" class="headerlink" title="三、均方误差 MSE"></a>三、均方误差 MSE</h3><p>现在对平均绝对误差求平方根，就能得到<strong>均方误差</strong>（<strong>Mean Square Error，MSE</strong>）。<br>这个指标在计算时，先对真实值与预测值的距离平方（橙色面积）后求和，再取平均值。<br><img src="https://img-blog.csdnimg.cn/img_convert/f896aca2dfe19a36c0f016190cb7c921.png#crop=0&crop=0&crop=1&crop=1&id=Qz5dU&originHeight=371&originWidth=402&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>公式表示：<br>$MSE&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^{m}(f(x_i)-y_i)^2$</p><p>该指标避免了 MAE 的绝对值导致函数不能求导的问题，因此均方误差常用于线性回归的损失函数。<br>另一方面，均方误差可以通过平方来放大预测偏差较大的值，提高了检测灵敏度。</p><h3 id="四、均方根误差-Root-Mean-Square-Error，RMSE"><a href="#四、均方根误差-Root-Mean-Square-Error，RMSE" class="headerlink" title="四、均方根误差 Root-Mean-Square Error，RMSE"></a>四、均方根误差 <strong><em>Root-Mean-Square Error，RMSE</em></strong></h3><p><strong>均方根误差</strong>，也称标准误差，是在均方误差的基础上进行开方运算，常用于衡量观测值与真实值间的偏差。<br><img src="https://img-blog.csdnimg.cn/20f8c21c4a4940eea9d1de26309ceb96.png" alt="在这里插入图片描述"></p><p>以上提到的 MAE、MSE、MAPE，RMSE 都会计算均值，它可以消除样本数量对评价指标的影响，使得评估指标的大小不会太依赖于样本数量，而是更多地反映模型的误差。</p><h3 id="五、决定系数-R-2-Score"><a href="#五、决定系数-R-2-Score" class="headerlink" title="五、决定系数$R^2 Score$"></a>五、决定系数$R^2 Score$</h3><p>该指标需要了解另外三个指标：</p><h3 id="Sum-of-Squares-of-the-Regression，SSR"><a href="#Sum-of-Squares-of-the-Regression，SSR" class="headerlink" title="Sum of Squares of the Regression，SSR"></a>Sum of Squares of the Regression，SSR</h3><p>计算预测数据与真实数据均值之差的平方和，反映的是<strong>模型数据相对真实数据均值的离散程度</strong>。<br>$SSR&#x3D;\sum_{i&#x3D;1}^{m}(f(x_i)-\overline y)^2$</p><h3 id="Total-Sum-of-Squares，SST"><a href="#Total-Sum-of-Squares，SST" class="headerlink" title="Total Sum of Squares，SST"></a>Total Sum of Squares，SST</h3><p>计算真实数据和其均值之差的平方和，反映的是<strong>真实数据相对均值的离散程度</strong>。</p><p>$SST&#x3D;\sum_{i&#x3D;1}^{m}(y_i-\overline y)^2$</p><h3 id="Sum-of-Squares-for-Error，SSE"><a href="#Sum-of-Squares-for-Error，SSE" class="headerlink" title="Sum of Squares for Error，SSE"></a>Sum of Squares for Error，SSE</h3><p>真实数据和预测数据之差的平方和<br>$SSE&#x3D;\sum_{i&#x3D;1}^{m}(f(x_i)-y_i)^2$<br>细心的小伙伴可能注意到，<strong>SST &#x3D; SSR + SSE</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/7827a58a372163af7635b5b63539ce42.png#clientId=u508b249f-3519-4&crop=0&crop=0&crop=1&crop=1&height=407&id=p5TzN&name=image.png&originHeight=516&originWidth=671&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27810&status=done&style=none&taskId=uba6b3279-5d78-454c-8931-3cb5b07e4f3&title=&width=529" alt="image.png"></p><h3 id="决定系数-R-2"><a href="#决定系数-R-2" class="headerlink" title="决定系数$R^2$"></a>决定系数$R^2$</h3><p>决定系数$R^2$通过计算SSR 与 SST的比值，反应因变量 y 的全部变异能通过回归模型被自变量 x 解释的比例。比如，$R^2$为0.9，则表示回归关系可以解释因变量 90% 的变异。<br><img src="https://img-blog.csdnimg.cn/de5afd384b4448b59896ca4a09043992.png" alt="在这里插入图片描述"></p><ul><li>决定系数R2越高，越接近于1，模型的拟合效果就越好</li><li>决定系数R2越接近于0，回归直线拟合效果越差。</li></ul><p>$R^2$虽然可以评价回归模型效果，但会随着自变量数量的不断增加而改变。</p><h3 id="六、校正决定系数"><a href="#六、校正决定系数" class="headerlink" title="六、校正决定系数"></a>六、校正决定系数</h3><p><strong>校正决定系数</strong>在决定系数R平方的基础上考虑了样本数量和特征数量的影响。自变量越多，校正决定系数就会对自变量进行处罚，所以一般校正决定系数小于决定系数。</p><p>$\overline R^2 &#x3D; 1- \frac{(1-R^2)(m-1)}{m-n-1}$<br>其中，</p><ul><li>m 表示样本量</li><li>n 表示解释变量总数</li></ul><p>需要注意的是，决定系数和矫正决定系数都是基于均值进行计算，如果数据集中有异常点存在，会对该指标有较大的影响。也就是说，这两个指标对异常点较敏感，因此它们更适用于噪声较少的数据集。<br>对于噪声较多的数据集可以考虑 MAE，MAPE 来作为评估指标。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 回归 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列比对应用场景</title>
      <link href="/posts/17813/"/>
      <url>/posts/17813/</url>
      
        <content type="html"><![CDATA[<h2 id="一、所有物种-x2F-基因都有共同的祖先"><a href="#一、所有物种-x2F-基因都有共同的祖先" class="headerlink" title="一、所有物种&#x2F;基因都有共同的祖先"></a>一、所有物种&#x2F;基因都有共同的祖先</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/a531e0ab4ec628d0160a525a651ee340.png" alt="img"></p><h2 id="二、全基因组比对揭示直系同源片段"><a href="#二、全基因组比对揭示直系同源片段" class="headerlink" title="二、全基因组比对揭示直系同源片段"></a>二、全基因组比对揭示直系同源片段</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/85a803c23ce4287b955ebd26408011b4.png" alt="img"></p><p>通过全基因组扫描，识别功能元件</p><h2 id="三、比较基因组学揭示保守区"><a href="#三、比较基因组学揭示保守区" class="headerlink" title="三、比较基因组学揭示保守区"></a>三、比较基因组学揭示保守区</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/909723336a181738c825332d1dd4dd2f.png" alt="img"></p><h3 id="3-1-比较基因组学揭示功能元件"><a href="#3-1-比较基因组学揭示功能元件" class="headerlink" title="3.1 比较基因组学揭示功能元件"></a>3.1 比较基因组学揭示功能元件</h3><p>例如上图的基因外显子对老鼠、鸡、鱼都非常保守</p><h3 id="3-2-开发估算约束水平的方法"><a href="#3-2-开发估算约束水平的方法" class="headerlink" title="3.2 开发估算约束水平的方法"></a>3.2 开发估算约束水平的方法</h3><ul><li>计算替换和间隙的数量</li><li>估计突变的数量（包括反向突变的估计）</li><li>扫描保守区</li><li>估计受约束的“隐藏状态”的概率：HMM</li><li>使用系统发育来估计树突变率</li><li>允许树的不同部分有不同的比率：系统发育学</li></ul><h2 id="四、不同功能的进化特征"><a href="#四、不同功能的进化特征" class="headerlink" title="四、不同功能的进化特征"></a>四、不同功能的进化特征</h2><h3 id="4-1-蛋白质编码基因"><a href="#4-1-蛋白质编码基因" class="headerlink" title="4.1 蛋白质编码基因"></a>4.1 蛋白质编码基因</h3><ul><li>密码子替换频率</li><li>开放阅读框的保守性</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/a266fe2fbb7572cce7a4e716945bd1e4.png" alt="img"></p><h3 id="4-2-RNA结构"><a href="#4-2-RNA结构" class="headerlink" title="4.2 RNA结构"></a>4.2 RNA结构</h3><ul><li>补偿性变化</li><li>G-U替换</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3b5de2ee94105d9b8b6bd029cbe64441.png" alt="img"></p><h3 id="4-3-microRNAs"><a href="#4-3-microRNAs" class="headerlink" title="4.3 microRNAs"></a>4.3 microRNAs</h3><ul><li>结构特征：loops，pairs</li><li>与3’UTR基序的关系</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e84916d88bb765a35f2ee7351167090c.png" alt="img"></p><h3 id="4-4-调控基序"><a href="#4-4-调控基序" class="headerlink" title="4.4 调控基序"></a>4.4 调控基序</h3><ul><li>突变</li><li>保守性</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9232075b01e7fe603247dcede051fe6e.png" alt="img"></p><h2 id="五、引物设计"><a href="#五、引物设计" class="headerlink" title="五、引物设计"></a>五、引物设计</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/eb0247d8f9084197e9faf561cab6926c.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 序列比对 </tag>
            
            <tag> 进化分析 </tag>
            
            <tag> 引物设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 使用详解</title>
      <link href="/posts/22838/"/>
      <url>/posts/22838/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">cnpm install axios<br></code></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>三种写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-comment">// 第一种写法</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query?name=tom&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// 第二种写法</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/query&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-comment">// 第一种写法</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query?name=tom&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// 第二种写法</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span><br>    &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/query&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>POST请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/query&#x27;</span>, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;img_path&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_"><code class="language-hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/query&#x27;</span>, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;img_path&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>并发请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query?name=tom&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(/role?name=tom<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="hljs-string">    .then(response) &#123;</span><br><span class="hljs-string">    console.log(response);</span><br><span class="hljs-string">    // 两个请求都执行完成后返回，所有的请求结果都在这个res的对象下面</span><br><span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/query?name=tom&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(/role?name=tom<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="hljs-string">    .then(response) &#123;</span><br><span class="hljs-string">    console.log(response);</span><br><span class="hljs-string">    // 两个请求都执行完成后返回，所有的请求结果都在这个res的对象下面</span><br><span class="hljs-string">&#125;));</span><br></code></pre></td></tr></table></figure><h3 id="三、参数配置"><a href="#三、参数配置" class="headerlink" title="三、参数配置"></a>三、参数配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-comment">// 请求的服务器 URL</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br><br>  <span class="hljs-comment">// 创建请求时使用的方法</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-comment">// 默认是 get</span><br><br>  <span class="hljs-comment">// 将自动加在 url 前</span><br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br><br>  <span class="hljs-comment">// 在向服务器发送前，修改请求数据</span><br>  <span class="hljs-comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span><br>  <span class="hljs-comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br>  <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <br>  <span class="hljs-comment">// 在传递给 then/catch 前，修改响应数据</span><br>  <span class="hljs-attr">transformResponse</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br><br>  <span class="hljs-comment">// 自定义请求头</span><br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;,<br><br>  <span class="hljs-comment">// 与请求一起发送的 URL 参数</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 用于 params 的序列化的函数</span><br>  <span class="hljs-attr">paramsSerializer</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(params, &#123;<span class="hljs-attr">arrayFormat</span>: <span class="hljs-string">&#x27;brackets&#x27;</span>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">// 请求发送的数据，适用于 PUT, POST, 和 PATCH</span><br>  <span class="hljs-comment">// 在没有设置 transformRequest 时，必须是以下类型之一：</span><br>  <span class="hljs-comment">// string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  <span class="hljs-comment">// 浏览器专属：FormData, File, Blob</span><br>  <span class="hljs-comment">// Node 专属： Stream</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 指定请求超时毫秒数(0 表示无超时时间)</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br><br>  <span class="hljs-comment">// 表示跨域请求时是否需要使用凭证，默认 false</span><br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, <br><br>  <span class="hljs-comment">// 允许自定义处理请求，常用用于测试</span><br>  <span class="hljs-attr">adapter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 表示应该使用 HTTP 基础验证，并提供凭据，该参数会在 headers 设置 Authorization</span><br>  <span class="hljs-attr">auth</span>: &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;janedoe&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;s00pers3cret&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 表示服务器响应的数据类型，</span><br>  <span class="hljs-comment">// 支持类型：arraybuffer, blob, document, json（默认）, text, stream</span><br>  <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;json&#x27;</span>, <br><br>  <span class="hljs-comment">// 用作 xsrf token 的值的cookie的名称</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>, <br><br>  <span class="hljs-comment">//  xsrf token 值的 HTTP 头的名称</span><br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>, <br><br>  <span class="hljs-comment">// 上传处理进度事件</span><br>  <span class="hljs-attr">onUploadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>  &#125;,<br><br>  <span class="hljs-comment">// 下载处理进度事件</span><br>  <span class="hljs-attr">onDownloadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>  &#125;,<br><br>  <span class="hljs-comment">// 响应内容的最大尺寸</span><br>  <span class="hljs-attr">maxContentLength</span>: <span class="hljs-number">2000</span>,<br><br>  <span class="hljs-comment">// 定义对于给定的HTTP 响应状态码。</span><br>  <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) &#123;<br>    <span class="hljs-keyword">return</span> status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>; <br>  &#125;,<br><br>  <span class="hljs-comment">// 定义在 node.js 中 follow 的最大重定向数目，为0将不会 follow 任何重定向</span><br>  <span class="hljs-attr">maxRedirects</span>: <span class="hljs-number">5</span>, <br><br>  <span class="hljs-comment">// 在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理</span><br>  <span class="hljs-attr">httpAgent</span>: <span class="hljs-keyword">new</span> http.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br>  <span class="hljs-attr">httpsAgent</span>: <span class="hljs-keyword">new</span> https.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br><br>  <span class="hljs-comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span><br>  <span class="hljs-comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">auth</span>: : &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;mikeymike&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;rapunz3l&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-comment">// 请求的服务器 URL</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br><br>  <span class="hljs-comment">// 创建请求时使用的方法</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-comment">// 默认是 get</span><br><br>  <span class="hljs-comment">// 将自动加在 url 前</span><br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br><br>  <span class="hljs-comment">// 在向服务器发送前，修改请求数据</span><br>  <span class="hljs-comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span><br>  <span class="hljs-comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br>  <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <br>  <span class="hljs-comment">// 在传递给 then/catch 前，修改响应数据</span><br>  <span class="hljs-attr">transformResponse</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br><br>  <span class="hljs-comment">// 自定义请求头</span><br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;,<br><br>  <span class="hljs-comment">// 与请求一起发送的 URL 参数</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 用于 params 的序列化的函数</span><br>  <span class="hljs-attr">paramsSerializer</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(params, &#123;<span class="hljs-attr">arrayFormat</span>: <span class="hljs-string">&#x27;brackets&#x27;</span>&#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">// 请求发送的数据，适用于 PUT, POST, 和 PATCH</span><br>  <span class="hljs-comment">// 在没有设置 transformRequest 时，必须是以下类型之一：</span><br>  <span class="hljs-comment">// string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  <span class="hljs-comment">// 浏览器专属：FormData, File, Blob</span><br>  <span class="hljs-comment">// Node 专属： Stream</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 指定请求超时毫秒数(0 表示无超时时间)</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br><br>  <span class="hljs-comment">// 表示跨域请求时是否需要使用凭证，默认 false</span><br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, <br><br>  <span class="hljs-comment">// 允许自定义处理请求，常用用于测试</span><br>  <span class="hljs-attr">adapter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 表示应该使用 HTTP 基础验证，并提供凭据，该参数会在 headers 设置 Authorization</span><br>  <span class="hljs-attr">auth</span>: &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;janedoe&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;s00pers3cret&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 表示服务器响应的数据类型，</span><br>  <span class="hljs-comment">// 支持类型：arraybuffer, blob, document, json（默认）, text, stream</span><br>  <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;json&#x27;</span>, <br><br>  <span class="hljs-comment">// 用作 xsrf token 的值的cookie的名称</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>, <br><br>  <span class="hljs-comment">//  xsrf token 值的 HTTP 头的名称</span><br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>, <br><br>  <span class="hljs-comment">// 上传处理进度事件</span><br>  <span class="hljs-attr">onUploadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>  &#125;,<br><br>  <span class="hljs-comment">// 下载处理进度事件</span><br>  <span class="hljs-attr">onDownloadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>  &#125;,<br><br>  <span class="hljs-comment">// 响应内容的最大尺寸</span><br>  <span class="hljs-attr">maxContentLength</span>: <span class="hljs-number">2000</span>,<br><br>  <span class="hljs-comment">// 定义对于给定的HTTP 响应状态码。</span><br>  <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) &#123;<br>    <span class="hljs-keyword">return</span> status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>; <br>  &#125;,<br><br>  <span class="hljs-comment">// 定义在 node.js 中 follow 的最大重定向数目，为0将不会 follow 任何重定向</span><br>  <span class="hljs-attr">maxRedirects</span>: <span class="hljs-number">5</span>, <br><br>  <span class="hljs-comment">// 在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理</span><br>  <span class="hljs-attr">httpAgent</span>: <span class="hljs-keyword">new</span> http.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br>  <span class="hljs-attr">httpsAgent</span>: <span class="hljs-keyword">new</span> https.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br><br>  <span class="hljs-comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span><br>  <span class="hljs-comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">auth</span>: : &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;mikeymike&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;rapunz3l&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> javascript </tag>
            
            <tag> node.js </tag>
            
            <tag> 前端 </tag>
            
            <tag> axios </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库涉及大量数据查询时的注意事项</title>
      <link href="/posts/57043/"/>
      <url>/posts/57043/</url>
      
        <content type="html"><![CDATA[<ol><li><p>避免频繁连接和关闭数据库，这样会导致IO访问次数太频繁。</p></li><li><p>设计表时要建立适当的索引，尤其要在 where 及 order by 涉及的列上建立索引</p></li><li><p>避免全表扫描，以下情况会导致放弃索引直接进行全部扫描</p></li></ol><ul><li><p>避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符</p></li><li><p>避免在 where 子句中对字段进行 null 值判断</p><p><code>select id from table where num is null</code></p><p>解决方法：建表时设置默认值0，也就是将null用0填充，然后查询：<br><code>select id from table where num=0</code></p></li><li><p>避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</p><p><code>select id from t where num=10 or num=20 </code></p><p>解决方法：使用 union</p><p><code>select id from t where num=10  union all  select id from t where num=20</code></p></li><li><p>避免使用 like</p><p><code>select id from t where name like ‘%abc%’</code></p><p>解决方法：使用全文检索</p></li><li><p>避免使用 in 和 not in</p><p><code>select id from t where num in(1,2,3)</code></p><p>解决方法1：连续值使用 between<br>解决方法2：用 exists 替换 in<br><code>select num from a where exists(select 1 from b where num=a.num)</code></p></li><li><p>避免使用参数</p><p><code>select id from t where num=@num </code></p><p>解决方法：强制查询使用索引</p><p><code>select id from t with(index(index_name)) where num=@num</code></p></li><li><p>避免表达式操作</p><p><code>select id from t where num/2=100 </code></p><p>解决方法：<code>select id from t where num=100*2</code></p></li><li><p>避免函数操作</p><p><code>select id from t where substring(name,1,3)=’abc’ </code> 查询以abc开头的id</p><p>解决方法：全文索引</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 全文检索 </tag>
            
            <tag> 查询优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解机器学习：分类模型性能评估指标</title>
      <link href="/posts/63432/"/>
      <url>/posts/63432/</url>
      
        <content type="html"><![CDATA[<p>人间出现一种怪病，患病人群平时正常，但偶尔暴饮暴食，这种病从外观和现有医学手段无法分辨。</p><p>为了应对疫情，准备派齐天大圣去下界了解情况。事先神官从人间挑选了一些健康人和患病者来对大圣的业务能力进行测试，按下面规则来区分人群：</p><ul><li>健康人站在绿色区域</li><li>患病者站在橙色区域</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/50347f3475e2817ccf2db54ff3b37997.png" alt="img"></p><p>齐天大圣出场用他的火眼金睛识别哪些是健康人，哪些又是患病者。</p><p>随后画一个圈，告诉神官：圈里的是我认为健康的人，圈外的就是患病者。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e708c855164be4cdaf9054ba4cd111c8.png" alt="img"></p><p>接下来，我们画个图来看看大圣火眼金睛的识别效果：</p><p>为了区分识别是否正确，我们让大圣识别正确的人站在深色区域，错误的站浅色区域，也就是：</p><ul><li>深绿色（TP）：正确识别为健康人</li><li>深橙色（TN）：正确识别为患病者</li><li>浅绿色（FN）：健康人错误识别为患者</li><li>浅橙色（FP）：患者错误识别为健康人</li></ul><p>我们发现大圣画的圈里大部分是正确的，但是也有少量错误。话说应该是大圣年纪大了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40d945fc762dd7ff170fa75269f1dfec.png" alt="img"></p><h2 id="一、混淆矩阵-Confusion-Matrix"><a href="#一、混淆矩阵-Confusion-Matrix" class="headerlink" title="一、混淆矩阵 Confusion Matrix"></a>一、混淆矩阵 <em><strong>Confusion Matrix</strong></em></h2><p>现在回到机器学习的监督学习中，为了方便绘制和展示，我们常用表格形式的<strong>混淆矩阵</strong>（<strong>Confusion Matrix</strong>）作为评估模式。这在无监督学习中一般叫做匹配矩阵。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3475b4df36a1413bae79e6326d2c66e7.png" alt="img"></p><p>其中，</p><ul><li>行代表真实数据：包含真实的健康者和患病者数目</li><li>列代表预测数据：包含预测的健康者和患病者数目</li></ul><p>为了方便理解记忆，这里将健康者称为 Positive，患病者称为 Negative：</p><ul><li>True Positive（TP）：本身为健康，预测为健康 （对健康人拿捏了）</li><li>False Negative（FN）：本身为健康，预测为患病（老倒霉蛋了）</li><li>False positive（FP）：本身为患病，预测为健康 （漏网之鱼了属于是）</li><li>True Negative（TN）：本身为患病，预测为患病 （对患病者拿捏了）</li></ul><h2 id="二、准确率-Accuracy"><a href="#二、准确率-Accuracy" class="headerlink" title="二、准确率 Accuracy"></a>二、准确率 <em>Accuracy</em></h2><p><strong>Accuracy</strong>：指模型识别正确的样本数占样本总数的比例。</p><p>也就是，正确识别的健康人和患者占全部人群的比例。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dde6bf6fdcfff0368937dbd5dc13ac7a.png" alt="img"></p><p>用公式表示：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rxkqere4-1651725986989)(<a href="https://cdn.nlark.com/yuque/__latex/148a7f222cf675c78eb886c0b9215065.svg)]">https://cdn.nlark.com/yuque/__latex/148a7f222cf675c78eb886c0b9215065.svg)]</a></p><p>Accuracy 是最常用的评估指标，可以总体上衡量一个预测的性能。</p><p>一般情况在数据类别均衡的情况下，模型的精度越高，说明模型的效果越好。</p><p>需要注意的是，但是在严重不平衡的数据中，这个评估指标并不合理。比如这个病毒的发病率为 0.1％，模型可以把所有人判定为健康人，模型 Accuracy 直接高达99.9%，但这个模型并不适用。</p><p>为了更好地应对上述问题，衍生出了一系列其他评估指标。</p><h2 id="三、精度-Precision"><a href="#三、精度-Precision" class="headerlink" title="三、精度 Precision"></a>三、精度 <em>Precision</em></h2><p>Precision：在模型识别为 Positive 的样本中，真正为 Positive 的样本所占的比例。</p><p>也就是说，在识别为的健康人群中，有多少是真正健康的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ddd9e1cfdc86277713cfc6f2bcf26d2b.png" alt="img"></p><p>公式表示为：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-XoZbeWBo-1651725986990)(<a href="https://cdn.nlark.com/yuque/__latex/cb23f4ec83e30b7e91bb509abe4e2353.svg)]">https://cdn.nlark.com/yuque/__latex/cb23f4ec83e30b7e91bb509abe4e2353.svg)]</a></p><p>如果模型目标是：<strong>宁愿漏掉，不可错杀</strong>，我们应该更关注 Precision 指标。一般情况下，Precision 越高，说明模型的效果越好。</p><p>在识别垃圾邮件时，为了避免正常邮件被误杀，就需要模型有较高的 Percision。</p><h2 id="四、召回率-Recall"><a href="#四、召回率-Recall" class="headerlink" title="四、召回率 Recall"></a>四、召回率 <em>Recall</em></h2><p>Recall：模型正确识别出为 Positive 的样本数量占 Positive 数量的比值。</p><p>也就是说，在实际的健康人中，识别出的健康人比值。</p><p>Recall越高，代表模型从健康人群中识别出的健康人的比例越高。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3a7316a361bd0e32a60b869827860192.png" alt="img"></p><p>公式表示：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-79ZNhZbE-1651725986992)(<a href="https://cdn.nlark.com/yuque/__latex/9f557d7c881df224be1389a6c9408b8f.svg)]">https://cdn.nlark.com/yuque/__latex/9f557d7c881df224be1389a6c9408b8f.svg)]</a></p><p>如果模型目标是：<strong>宁愿错杀，不可漏掉</strong>，我们应该更关注 Recall 指标。一般情况下，Recall 越高，说明模型的效果越好。</p><p>在金融风控领域中，目标是尽可能筛选出所有的风险行为或用户，避免造成灾难性后果。因此，需要更高的 Recall 值。</p><h2 id="五、Fβ-Score-与-F1-Score"><a href="#五、Fβ-Score-与-F1-Score" class="headerlink" title="五、Fβ-Score 与 F1-Score"></a>五、Fβ-Score 与 F1-Score</h2><p>Precision和Recall都是越高越好，但这个两个指标间相互矛盾，此消彼长，因此无法保证二者都很高。</p><p>为了综合考虑 Precision 与 Recall，需要引入一个新指标 <strong>Fβ-Score</strong>：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NcEPCqwP-1651725986993)(<a href="https://cdn.nlark.com/yuque/__latex/25c96bc728f2420cafa058166dbba944.svg)]">https://cdn.nlark.com/yuque/__latex/25c96bc728f2420cafa058166dbba944.svg)]</a></p><p>更具不同的场景来调整 β值。</p><ul><li>β&lt;1 时，更关注Precision。</li><li>β&gt;1 时，更关注Recall。</li><li>β&#x3D;1 时，Fβ-Score 就是 <strong>F1-Score</strong>，</li></ul><p>当 <strong>F1-Score</strong> 值较高时则说明模型性能较好。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WdhLC3Bq-1651725986994)(<a href="https://cdn.nlark.com/yuque/__latex/55e3ddf7d2665455579f509c02dff962.svg)]">https://cdn.nlark.com/yuque/__latex/55e3ddf7d2665455579f509c02dff962.svg)]</a></p><h2 id="六、真正例率-True-Positive-Rate，TPR"><a href="#六、真正例率-True-Positive-Rate，TPR" class="headerlink" title="六、真正例率 True Positive Rate，TPR"></a>六、真正例率 <em>True Positive Rate，TPR</em></h2><p><strong>TPR：</strong>在实际的 Positive 样本中，识别出的 Positive 样本比值。</p><p>也就是说，大圣在实际的健康人群中，识别出的健康人比值。</p><p>TPR 越高，代表模型从健康人群中识别出的健康人的比例越高。</p><p>TPR 值越高，模型性能越好。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/584a393100b6c51b0aac1e9457ac477a.png" alt="img"></p><p>公式表示：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2fKZGuug-1651725986998)(<a href="https://cdn.nlark.com/yuque/__latex/edb477ff28540cb8ca888b131e5f901f.svg)]">https://cdn.nlark.com/yuque/__latex/edb477ff28540cb8ca888b131e5f901f.svg)]</a></p><h2 id="七、假正例率-False-Positive-Rate，FPR"><a href="#七、假正例率-False-Positive-Rate，FPR" class="headerlink" title="七、假正例率 False Positive Rate，FPR"></a>七、假正例率 <em>False Positive Rate，FPR</em></h2><p><strong>FPR：</strong>在实际的 Negative 样本中，错误识别为 Positive 的比值。</p><p>也就是说，在实际的患者中，错误识别为健康人的比值。</p><p>FPR 越高，代表模型从患病人群中识别出的健康人的比例越高。</p><p>FPR 越低，代表模型性能越好。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8cf9d81d0ca6f6f1bdaa07b9dff165fa.png" alt="img"></p><p>公式表示：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-MHYZKdSw-1651725987000)(<a href="https://cdn.nlark.com/yuque/__latex/9edd061fecffd6f8d702216f2cecd33b.svg)]">https://cdn.nlark.com/yuque/__latex/9edd061fecffd6f8d702216f2cecd33b.svg)]</a></p><h2 id="八、ROC-曲线"><a href="#八、ROC-曲线" class="headerlink" title="八、ROC 曲线"></a><strong>八、ROC 曲线</strong></h2><p><strong>ROC曲线</strong>（<strong>Receiver Operating Characteristic Curve</strong>）通过 True Positive Rate（TPR，真正例率）和False Positive Rate（FPR，假正例率）两个指标的反映模型综合性能。</p><p>接下来，我们利用 TPR 和 FPR 绘制 ROC 曲线：</p><ul><li>ROC 不同颜色的曲线代表不同的模型</li><li>对角线的虚线代表随机分类，如果ROC位于左上角代表比随机分类好的模型，右下角为比随机分类差的模型</li><li>四个角分别代表不同的分类效果</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/f7a752c6f69d33aa830d4e18bc1c985f.png" alt="img"></p><h2 id="九、AUC-面积"><a href="#九、AUC-面积" class="headerlink" title="九、AUC 面积"></a>九、AUC 面积</h2><p>ROC 曲线可以直观的反应模型性能，但是难以比较不同模型的差异。</p><p>计算ROC曲线右下角面积得到AUC，该指标可以实现对模型性能的定量化描述。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/70a780189a3122da7f20fcf3fb58e4c0.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 分类模型 </tag>
            
            <tag> 性能评估 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 中变量的多种复制方法（常规拷贝，浅拷贝，深拷贝）</title>
      <link href="/posts/11749/"/>
      <url>/posts/11749/</url>
      
        <content type="html"><![CDATA[<h1 id="常规拷贝"><a href="#常规拷贝" class="headerlink" title="常规拷贝"></a>常规拷贝</h1><p>大家常用的变量复制方法，用“&#x3D;”就行。</p><p>但是！但是！但是！</p><p>在我们复制字典和列表时会和我们预想的不一致</p><p>接下来，做个小实验</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a3e41fbe5cc9bb6136b460154d022a4a.png" alt="img"></p><p>常规拷贝在原始变量 x 的改变后，因为共用同一个内存地址，因此会直接放到被复制的变量 y 上，导致“不知情”的情况下导致 y 变量在没有操作的情况下改变。</p><h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><p>解决办法就是使用浅拷贝</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8feed61ecde6b4727dd4ca1ee1d2b378.png" alt="img"></p><p>浅拷贝会将两个变量分别放在不同的内存地址，解决了常规拷贝的缺点。</p><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>但是，对于字典或列表中有嵌套的情况，浅拷贝同样不会生效。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ed200a972b8b2934b9695e8bf36caebc.png" alt="img"></p><p>这时候就需要用的深拷贝。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/901815f3858e6825f48c992fb7d21bc5.png" alt="img"></p><p>可以看到，深拷贝可以解决嵌套情况下，变量值的有效隔离。</p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息学导师推荐（持续更新）</title>
      <link href="/posts/15351/"/>
      <url>/posts/15351/</url>
      
        <content type="html"><![CDATA[<p>本系列会持续更新，帮助大家找到更适合自己的导师，注意排名不分先后，接下来我们开始介绍：</p><h2 id="陈润生"><a href="#陈润生" class="headerlink" title="陈润生"></a>陈润生</h2> <img src="https://img-blog.csdnimg.cn/img_convert/8de07412ba9dd3e96c5bb70b9c6d786d.png"   width="30%"><p>单位：中国科学院生物物理研究所</p><p>方向：长非编码RNA以及编码小肽的系统发现和功能机制研究</p><p>成果：参加人类基因组1%和水稻基因组工作草图的研究；非编码RNA数据库NONCODE</p><p>主页：<a href="http://people.ucas.ac.cn/~runshengchen">http://people.ucas.ac.cn/~runshengchen</a></p><p>邮箱： <a href="mailto:&#99;&#x72;&#x73;&#x40;&#105;&#x62;&#x70;&#x2e;&#97;&#99;&#46;&#x63;&#x6e;">&#99;&#x72;&#x73;&#x40;&#105;&#x62;&#x70;&#x2e;&#97;&#99;&#46;&#x63;&#x6e;</a></p><h2 id="刘小乐"><a href="#刘小乐" class="headerlink" title="刘小乐"></a>刘小乐</h2> <img src="https://img-blog.csdnimg.cn/img_convert/36bb825b8aadc449643664e89d9d9363.png"   width="30%"><p>单位：Harvard Medical School</p><p>方向：表观遗传，癌症，发育</p><p>成果：MACS（Model-based analysis of ChIP-Seq，通讯） 、Cistrome数据库</p><p>主页：<a href="https://liulab-dfci.github.io/">https://liulab-dfci.github.io/</a></p><h2 id="谢晓亮"><a href="#谢晓亮" class="headerlink" title="谢晓亮"></a>谢晓亮</h2> <img src="https://img-blog.csdnimg.cn/img_convert/00edac5f101d454316fccd969f4d3b1e.png"   width="30%">单位：北京大学<p>方向：单细胞全基因组学；单分子酶学；单分子生物物理化学</p><p>成果：多重退火循环扩增法（MALBAC）</p><p>主页：<a href="https://icg.pku.edu.cn/kxyj/yjtd/269284.htm">https://icg.pku.edu.cn/kxyj/yjtd/269284.htm</a></p><h2 id="任兵"><a href="#任兵" class="headerlink" title="任兵"></a>任兵</h2> <img src="https://img-blog.csdnimg.cn/img_convert/739b22ae3d7dc5dcbbf790cb3ff8b352.png"   width="30%"><p>单位：University of California San Diego</p><p>方向：非编码序列，表观遗传机制</p><p>成果：chip-chip、Paired-seq</p><p>主页：<a href="http://renlab.sdsc.edu/renlab_website/bing/">http://renlab.sdsc.edu/renlab_website/bing/</a></p><h2 id="李蔚"><a href="#李蔚" class="headerlink" title="李蔚"></a>李蔚</h2> <img src="https://img-blog.csdnimg.cn/img_convert/b0e0c7ac9fb056755dd5950646bd479e.png"   width="30%"><p>单位：The Jackson Laboratory</p><p>方向：表观基因组</p><p>成果：RSeQC（quality control of RNA-seq experiments）、MACS（Model-based analysis of ChIP-Seq，通讯） </p><p>主页：<a href="https://www.faculty.uci.edu/profile.cfm?faculty_id=6687">https://www.faculty.uci.edu/profile.cfm?faculty_id=6687</a></p><p>Email: <a href="mailto:wei.li@uci.edu">wei.li@uci.edu</a></p><h2 id="张泽民"><a href="#张泽民" class="headerlink" title="张泽民"></a>张泽民</h2> <img src="https://img-blog.csdnimg.cn/img_convert/2bdd5d798fb5e5844d2ebd356f3d2e2e.png"   width="30%"><p>单位：北京大学</p><p>方向：单细胞技术研究肿瘤生物学</p><p>成果：GEPIA web server、构建多种肿瘤单细胞图谱</p><p>主页：<a href="http://cancer-pku.cn/">http://cancer-pku.cn/</a></p><h2 id="汤富酬"><a href="#汤富酬" class="headerlink" title="汤富酬"></a>汤富酬</h2> <img src="https://img-blog.csdnimg.cn/img_convert/443d80ccd01726f536068332c777443c.png"   width="30%"><p>单位：北京大学</p><p>方向：单细胞功能基因组学</p><p>成果：单细胞测技术第一人</p><p>主页：<a href="https://icg.pku.edu.cn/kxyj/yjtd/269287.htm">https://icg.pku.edu.cn/kxyj/yjtd/269287.htm</a></p><p>邮箱：<a href="mailto:&#x74;&#x61;&#x6e;&#103;&#x66;&#117;&#99;&#x68;&#x6f;&#x75;&#x40;&#x70;&#107;&#117;&#46;&#x65;&#x64;&#x75;&#46;&#99;&#x6e;">&#x74;&#x61;&#x6e;&#103;&#x66;&#117;&#99;&#x68;&#x6f;&#x75;&#x40;&#x70;&#107;&#117;&#46;&#x65;&#x64;&#x75;&#46;&#99;&#x6e;</a></p><h2 id="颉伟"><a href="#颉伟" class="headerlink" title="颉伟"></a>颉伟</h2> <img src="https://img-blog.csdnimg.cn/img_convert/faff3ddb0bcc84a663e166de0357ea27.png"   width="30%"><p>单位：清华大学</p><p>方向：胚胎早期发育过程中的表观遗传调控</p><p>成果：构建哺乳动物胚胎发育过程中表观图谱</p><p>主页：<a href="https://life.tsinghua.edu.cn/info/1034/2439.htm">https://life.tsinghua.edu.cn/info/1034/2439.htm</a></p><h2 id="高歌"><a href="#高歌" class="headerlink" title="高歌"></a>高歌</h2> <img src="https://img-blog.csdnimg.cn/img_convert/7fa790bd7538d25cacf6dd50e0dfb717.png"   width="30%"><p>单位：北京大学</p><p>方向：基于统计建模与机器学习的生物学大数据整合与挖掘、以基因表达为中心的调控通路功能及演化、基于组学大数据的精准医学</p><p>成果：<a href="http://class.cbi.pku.edu.cn/">中英双语生物信息学慕课(MOOC)</a>、Cell BLAST</p><p>主页：<a href="http://www.gao-lab.org/">http://www.gao-lab.org/</a></p><p>邮箱： <a href="mailto:&#99;&#114;&#115;&#64;&#105;&#98;&#112;&#46;&#97;&#x63;&#46;&#x63;&#x6e;">&#99;&#114;&#115;&#64;&#105;&#98;&#112;&#46;&#97;&#x63;&#46;&#x63;&#x6e;</a></p><h2 id="赵可吉"><a href="#赵可吉" class="headerlink" title="赵可吉"></a>赵可吉</h2> <img src="https://img-blog.csdnimg.cn/img_convert/4718f3a2c08aee3fc98d17dfd2996c7b.png"   width="30%"><p>单位：NIH</p><p>方向：哺乳动物发育表观遗传机制研究</p><p>成果：人类组蛋白甲基化图谱构建、人类核小体定位图谱构建</p><p>主页：<a href="https://irp.nih.gov/pi/keji-zhao">https://irp.nih.gov/pi/keji-zhao</a></p><p>邮箱：<a href="mailto:zhaok@nhlbi.nih.gov">zhaok@nhlbi.nih.gov</a></p><h2 id="刘江"><a href="#刘江" class="headerlink" title="刘江"></a>刘江</h2> <img src="https://img-blog.csdnimg.cn/img_convert/611139742cd55a09a83075f398b50098.png"   width="30%">单位：北京基因组所<p>方向：表观遗传学、干细胞和肿瘤</p><p>成果：表观遗传修饰如何从父母遗传到子代的遗传和进化规律</p><p>邮箱：<a href="mailto:&#x6c;&#x69;&#x75;&#x6a;&#x40;&#98;&#x69;&#103;&#x2e;&#x61;&#x63;&#x2e;&#99;&#110;">&#x6c;&#x69;&#x75;&#x6a;&#x40;&#98;&#x69;&#103;&#x2e;&#x61;&#x63;&#x2e;&#99;&#110;</a></p><h2 id="张勇"><a href="#张勇" class="headerlink" title="张勇"></a>张勇</h2> <img src="https://img-blog.csdnimg.cn/img_convert/0f0f0f78834ec5642588f48b08b24139.png"   width="30%"><p>单位：同济大学</p><p>方向：表观遗传组学算法的开发</p><p>成果：MACS（一作）</p><p>主页：<a href="https://zhanglab.tongji.edu.cn/index.htm">https://zhanglab.tongji.edu.cn/index.htm</a></p><p>邮箱：<a href="mailto:&#108;&#105;&#117;&#106;&#64;&#x62;&#105;&#103;&#46;&#97;&#99;&#x2e;&#x63;&#x6e;">&#108;&#105;&#117;&#106;&#64;&#x62;&#105;&#103;&#46;&#97;&#99;&#x2e;&#x63;&#x6e;</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="郭国骥"><a href="#郭国骥" class="headerlink" title="郭国骥"></a>郭国骥</h2> <img src="https://img-blog.csdnimg.cn/img_convert/aa2d10b39a177d9be9f5eb80bce556b3.png"   width="30%"><p>单位：浙江大学</p><p>方向：单细胞组学</p><p>成果：人与鼠的单细胞图谱</p><p>主页：<a href="https://person.zju.edu.cn/ggj#0">https://person.zju.edu.cn/ggj#0</a></p><p>邮箱：<a href="mailto:&#x67;&#x67;&#106;&#64;&#122;&#106;&#117;&#x2e;&#101;&#x64;&#x75;&#x2e;&#99;&#110;">&#x67;&#x67;&#106;&#64;&#122;&#106;&#117;&#x2e;&#101;&#x64;&#x75;&#x2e;&#99;&#110;</a></p><h2 id="韩敬东"><a href="#韩敬东" class="headerlink" title="韩敬东"></a>韩敬东</h2> <img src="https://img-blog.csdnimg.cn/img_convert/67bdd33806196e582dca51c2564c0ea2.png"   width="30%"><p>单位：北京大学</p><p>方向：衰老的系统生物学研究</p><p>成果：Geo-seq、衰老图谱</p><p>主页：<a href="http://www.aais.pku.edu.cn/duiwu/showproduct.php?id=214">http://www.aais.pku.edu.cn/duiwu/showproduct.php?id=214</a></p><p>邮箱：<a href="mailto:&#x6a;&#x61;&#99;&#x6b;&#x69;&#101;&#46;&#x68;&#97;&#x6e;&#64;&#112;&#x6b;&#x75;&#46;&#101;&#x64;&#x75;&#46;&#99;&#110;">&#x6a;&#x61;&#99;&#x6b;&#x69;&#101;&#46;&#x68;&#97;&#x6e;&#64;&#112;&#x6b;&#x75;&#46;&#101;&#x64;&#x75;&#46;&#99;&#110;</a></p><h2 id="阮一俊"><a href="#阮一俊" class="headerlink" title="阮一俊"></a>阮一俊</h2> <img src="https://img-blog.csdnimg.cn/img_convert/72784cf417e9ff81f2d8e9ea210901f3.png"   width="30%"><p>单位：The Jackson Laboratory</p><p>方向：三维基因组</p><p>成果：ChIA-PET；参与ENCODE计划</p><p>主页：<a href="https://scholar.google.com/citations?user=pGiG2REAAAAJ&hl=en">https://scholar.google.com/citations?user=pGiG2REAAAAJ&amp;hl=en</a></p><h2 id="李恒"><a href="#李恒" class="headerlink" title="李恒"></a>李恒</h2> <img src="https://img-blog.csdnimg.cn/img_convert/ed881214eee0635e459d940093902297.png"   width="30%"><p>单位：Dana-Farber Cancer Institute and Harvard Medical School</p><p>方向：生信算法开发</p><p>成果：SAM格式设计、SAMtools、bwa</p><p>主页：<a href="http://www.liheng.org/">http://www.liheng.org/</a></p><h2 id="李程"><a href="#李程" class="headerlink" title="李程"></a>李程</h2> <img src="https://img-blog.csdnimg.cn/img_convert/6f840ccac45043497542f5a04bd2de55.png"   width="30%"><p>单位：北京大学</p><p>方向：肿瘤突变的检测以及基因组突变和基因表达的调控关系</p><p>成果：Combat；3Disease Browser；突变图谱的构建</p><p>主页：<a href="https://www.stat-center.pku.edu.cn/zxry/zxjy/lc/1227408.htm">https://www.stat-center.pku.edu.cn/zxry/zxjy/lc/1227408.htm</a></p><h2 id="张学工"><a href="#张学工" class="headerlink" title="张学工"></a>张学工</h2> <img src="https://img-blog.csdnimg.cn/img_convert/740622685487c74504bf0e9792f18fb7.png"   width="30%"><p>单位：清华大学</p><p>方向：单细胞生物信息学分析</p><p>成果：机器学习与生物和医学大数据分析</p><p>主页：<a href="https://www.au.tsinghua.edu.cn/info/1110/1569.htm">https://www.au.tsinghua.edu.cn/info/1110/1569.htm</a></p><p>邮箱：<a href="mailto:&#x7a;&#104;&#x61;&#110;&#103;&#x78;&#x67;&#x40;&#116;&#115;&#x69;&#110;&#103;&#104;&#117;&#97;&#x2e;&#x65;&#100;&#x75;&#x2e;&#x63;&#x6e;">&#x7a;&#104;&#x61;&#110;&#103;&#x78;&#x67;&#x40;&#116;&#115;&#x69;&#110;&#103;&#104;&#117;&#97;&#x2e;&#x65;&#100;&#x75;&#x2e;&#x63;&#x6e;</a></p><h2 id="龙漫远"><a href="#龙漫远" class="headerlink" title="龙漫远"></a>龙漫远</h2> <img src="https://img-blog.csdnimg.cn/img_convert/d9c1a7f525360c2cabe3b76dc90623a4.png"   width="30%"><p>单位：University of Chicago</p><p>方向：基因进化</p><p>成果：基因与新基因相互作用的进化分析</p><p>主页：<a href="https://ecologyandevolution.uchicago.edu/faculty/manyuan-long-phd">https://ecologyandevolution.uchicago.edu/faculty/manyuan-long-phd</a></p><p>邮箱：<a href="mailto:mlong@uchicago.edu">mlong@uchicago.edu</a></p><h2 id="阮珏"><a href="#阮珏" class="headerlink" title="阮珏"></a>阮珏</h2> <img src="https://img-blog.csdnimg.cn/img_convert/9cecfae2a7e5e82a7589365976ba7af3.png"   width="30%"><p>单位：中国农业科学院农业基因组研究所</p><p>方向：基因组组装算法、极低频点突变检测、基因组结构变异检测</p><p>成果：Pseudo-sanger、wtdbg2、SMARTdenovo</p><p>主页：<a href="https://www.cs.cmu.edu/~jianma/">https://www.cs.cmu.edu/~jianma/</a></p><p>邮箱：<a href="mailto:&#x6a;&#105;&#x61;&#x6e;&#x6d;&#x61;&#64;&#99;&#115;&#x2e;&#99;&#x6d;&#x75;&#46;&#101;&#x64;&#117;">&#x6a;&#105;&#x61;&#x6e;&#x6d;&#x61;&#64;&#99;&#115;&#x2e;&#99;&#x6d;&#x75;&#46;&#101;&#x64;&#117;</a></p><h2 id="马坚"><a href="#马坚" class="headerlink" title="马坚"></a>马坚</h2> <img src="https://img-blog.csdnimg.cn/img_convert/58c01066a3627f2ad24f2feb027facd0.png"   width="30%"><p>单位：Carnegie Mellon University</p><p>方向：机器学习算法的开发；多模态数据整合</p><p>成果：Infinite Sites Model、InferCARs、Nucleome Browser</p><p>主页：<a href="https://www.cs.cmu.edu/~jianma/">https://www.cs.cmu.edu/~jianma/</a></p><p>邮箱：<a href="mailto:&#x6a;&#105;&#x61;&#110;&#x6d;&#x61;&#64;&#x63;&#x73;&#46;&#99;&#109;&#117;&#46;&#x65;&#x64;&#117;">&#x6a;&#105;&#x61;&#110;&#x6d;&#x61;&#64;&#x63;&#x73;&#46;&#99;&#109;&#117;&#46;&#x65;&#x64;&#117;</a></p><hr><p>参考：</p><p><a href="https://github.com/WWXkenmo/Bioinfor_researchers_atlas">https://github.com/WWXkenmo/Bioinfor_researchers_atlas</a></p><p><a href="https://www.au.tsinghua.edu.cn/">https://www.au.tsinghua.edu.cn</a></p><p><a href="https://www.cs.cmu.edu/">https://www.cs.cmu.edu</a></p><p><a href="https://ecologyandevolution.uchicago.edu/">https://ecologyandevolution.uchicago.edu</a></p><p><a href="https://www.stat-center.pku.edu.cn/">https://www.stat-center.pku.edu.cn</a></p><p><a href="http://www.liheng.org/">http://www.liheng.org/</a></p><p><a href="https://scholar.google.com/">https://scholar.google.com</a></p><p><a href="http://www.aais.pku.edu.cn/">http://www.aais.pku.edu.cn</a></p><p><a href="https://person.zju.edu.cn/">https://person.zju.edu.cn</a></p><p><a href="https://zhanglab.tongji.edu.cn/">https://zhanglab.tongji.edu.cn</a></p><p><a href="https://irp.nih.gov/">https://irp.nih.gov</a></p><p><a href="http://www.gao-lab.org/">http://www.gao-lab.org</a></p><p><a href="https://life.tsinghua.edu.cn/">https://life.tsinghua.edu.cn</a></p><p><a href="https://icg.pku.edu.cn/">https://icg.pku.edu.cn</a></p><p><a href="http://cancer-pku.cn/">http://cancer-pku.cn</a></p><p><a href="https://www.faculty.uci.edu/">https://www.faculty.uci.edu</a></p><p><a href="http://renlab.sdsc.edu/">http://renlab.sdsc.edu</a></p><p><a href="https://icg.pku.edu.cn/">https://icg.pku.edu.cn</a></p><p><a href="https://liulab-dfci.github.io/">https://liulab-dfci.github.io</a></p><p><a href="http://people.ucas.ac.cn/">http://people.ucas.ac.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> 导师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 中 Json 数据的快速排序</title>
      <link href="/posts/45506/"/>
      <url>/posts/45506/</url>
      
        <content type="html"><![CDATA[<h1 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-comment">// 升序排列</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">up</span>(<span class="hljs-params">a, b</span>) &#123;<br>     <span class="hljs-keyword">return</span> a.<span class="hljs-property">val</span>-b.<span class="hljs-property">val</span><br> &#125;,<br> <span class="hljs-comment">// 降序排列</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">down</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> b.<span class="hljs-property">val</span>-a.<span class="hljs-property">val</span><br>&#125;,<br><br><span class="hljs-comment">// sort 会直接对原数据排序</span><br>testJson.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-comment">// 升序排列</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">up</span>(<span class="hljs-params">a, b</span>) &#123;<br>     <span class="hljs-keyword">return</span> a.<span class="hljs-property">val</span>-b.<span class="hljs-property">val</span><br> &#125;,<br> <span class="hljs-comment">// 降序排列</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">down</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> b.<span class="hljs-property">val</span>-a.<span class="hljs-property">val</span><br>&#125;,<br><br><span class="hljs-comment">// sort 会直接对原数据排序</span><br>testJson.<span class="hljs-title function_">sort</span>(up)<br></code></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>主角为 <code>sort(sortby)</code><br>参数 <code>sortby</code> 是一个比较函数，该函数要比较两个值（a，b），返回值用来描述两个值的大小，具体规则为：</p><ul><li>a &lt; b，返回负值，排序后， a 在 b 之前</li><li>a &#x3D; b，返回 0</li><li>a &gt; b，返回正值，排序后， a 在 b 之后</li></ul><h1 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h1><h3 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h3><p><img src="https://img-blog.csdnimg.cn/d0ddd236626e46539764fba7a459a3f0.png"></p><h3 id="up-函数排序"><a href="#up-函数排序" class="headerlink" title="up 函数排序"></a>up 函数排序</h3><p><img src="https://img-blog.csdnimg.cn/2094306fcea3442db45b879053112592.png" alt="在这里插入图片描述"></p><h3 id="down-函数排序"><a href="#down-函数排序" class="headerlink" title="down 函数排序"></a>down 函数排序</h3><p><img src="https://img-blog.csdnimg.cn/a938aceb5f39440c8dedbfeb0673a463.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> javascript </tag>
            
            <tag> json </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置详解</title>
      <link href="/posts/36288/"/>
      <url>/posts/36288/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>整体结构为嵌套结构：</p><ul><li><code>全局块</code>：配置影响全局，包括运行 nginx 的用户组，进程存放，日志，配置文件等</li><li><code>events</code>：配置影响 nginx 服务器与客户端的网络连接，包括进程最大连接数，数据驱动模型，序列化等</li><li><code>http</code>：配置代理，缓存，日志，第三方模块等，可嵌套多个 server<ul><li><code>server</code>：配置虚拟主机的参数<ul><li><code>location</code>：配置请求路由，页面处理</li></ul></li></ul></li></ul><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置------------------------------------------------------------------------</span><br>...              <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">events 配置--------------------------------------------------------------------</span><br>events &#123;<br>   ...<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">http 配置----------------------------------------------------------------------</span><br>http<br>&#123;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置------------------------------------------------------------------------</span><br>...              <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">events 配置--------------------------------------------------------------------</span><br>events &#123;<br>   ...<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">http 配置----------------------------------------------------------------------</span><br>http<br>&#123;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">http 全局配置</span><br>    ...<br>    #server 全局配置<br>    server<br>    &#123; <br>    #server全局配置<br>        ...       <br>        #location配置<br>        location [PATTERN]   <br>        &#123;<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。 </p></blockquote><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置-------------------------------------------------------------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定nginx运行的用户及用户组,默认为nobody</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">user  nobody nobody;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启线程数，最大值可设逻辑CPU核数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">worker_processes  1;</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定进程<span class="hljs-built_in">id</span>的存储文件位置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">worker_rlimit_nofile 65535</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">envents 配置----------------------------------------------------------</span><br>events &#123;<br>    ...<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置-------------------------------------------------------------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定nginx运行的用户及用户组,默认为nobody</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">user  nobody nobody;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启线程数，最大值可设逻辑CPU核数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">worker_processes  1;</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定进程<span class="hljs-built_in">id</span>的存储文件位置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">worker_rlimit_nofile 65535</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">envents 配置----------------------------------------------------------</span><br>events &#123;<br>    ...<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http 配置-------------------------------------------------------------</span><br>http &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="events-配置"><a href="#events-配置" class="headerlink" title="events 配置"></a>events 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">events &#123;<br>    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式<br>    use epoll;<br>    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制<br>    worker_connections  1024;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="http-配置"><a href="#http-配置" class="headerlink" title="http 配置"></a>http 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">http &#123;<br>    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度<br>    include       mime.types;<br>    <br>    #核心模块指令，默认设置为二进制流，也就是当文件类型未定义时使用这种方式<br>    default_type  application/octet-stream;<br>    <br>    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用<br>log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><code class="language-hljs shell">http &#123;<br>    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度<br>    include       mime.types;<br>    <br>    #核心模块指令，默认设置为二进制流，也就是当文件类型未定义时使用这种方式<br>    default_type  application/octet-stream;<br>    <br>    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用<br>log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">引用日志main格式</span><br>access_log  logs/access.log  main;<br><br>    #设置允许客户端请求的最大的单个文件字节数<br>    client_max_body_size 20M;<br>    #指定来自客户端请求头的headebuffer大小<br>    client_header_buffer_size  32k;<br>    #指定连接请求试图写入缓存文件的目录路径<br>    client_body_temp_path /dev/shm/client_body_temp;<br>    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB<br>    large client_header_buffers 4 32k;<br><br>    #开启高效文件传输模式<br>    sendfile        on;<br>    #开启防止网络阻塞<br>    tcp_nopush     on;<br>    #开启防止网络阻塞<br>    tcp_nodelay    on;<br><br>    #设置客户端连接保存活动的超时时间<br>    #keepalive_timeout  0; # 无限时间<br>    keepalive_timeout  65;<br><br>    #设置客户端请求读取header超时时间<br>    client_header_timeout 10;<br>    #设置客户端请求body读取超时时间<br>    client_body_timeout 10;<br><br>    #HttpGZip模块配置<br>    #开启gzip压缩<br>    gzip  on;<br>    #设置允许压缩的页面最小字节数<br>    gzip_min_length 1k;<br>    #申请4个单位为16K的内存作为压缩结果流缓存<br>    gzip_buffers 4 16k;<br>    #设置识别http协议的版本，默认为1.1<br>    gzip_http_version 1.1;<br>    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快<br>    gzip_comp_level 2;<br>    #指定压缩的类型<br>    gzip_types text/plain application/x-javascript text/css application/xml;<br>    #让前端的缓存服务器进过gzip压缩的页面<br>    gzip_vary on; <br>    <br>    # server配置<br>    server &#123;<br>        <br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="server-配置"><a href="#server-配置" class="headerlink" title="server 配置"></a>server 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">server &#123;<br>    #单连接请求上限次数<br>    keepalive_requests 120; <br>    #监听端口<br>    listen       88;<br>    #监听地址，可以是ip，最好是域名<br>    server_name  111.222.333.123;<br>    #server_name  www.123.com;<br>    #设置访问的语言编码<br>    charset utf-8;<br>    #设置虚拟主机访问日志的存放路径及日志的格式为main<br>    access_log  /www/wwwlogs/111.222.333.123.log main; #响应日志<br>    error_log  /www/wwwlogs/111.222.333.123.log main; #错误日志<br>    <br>    #PHP-INFO-START  PHP引用配置，可以注释或修改<br>    include enable-php-74.conf;<br>    #PHP-INFO-END<br>    <br>    #REWRITE-START URL重写规则引用<br>    include /www/server/panel/vhost/rewrite/111.222.333.123.conf;<br>    #REWRITE-END<br>    <br>    #设置主机基本信息<br>    #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。<br>    location  ~*^.+$ &#123;<br>    #根目录<br>        root html;  <br>        #设置默认页<br>        index  index.html index.htm;<br>        #拒绝的ip,黑名单<br>        deny 127.0.0.1;  <br>        #允许的ip，白名单<br>        allow 172.18.5.54; <br>    &#125; <br>    <br>    #禁止访问的文件或目录<br>    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)<br>    &#123;<br>        return 404;<br>    &#125;<br>    <br>    #SSL证书验证目录相关设置<br>    location ~ \.well-known&#123;<br>        allow all;<br>    &#125;<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><code class="language-hljs shell">server &#123;<br>    #单连接请求上限次数<br>    keepalive_requests 120; <br>    #监听端口<br>    listen       88;<br>    #监听地址，可以是ip，最好是域名<br>    server_name  111.222.333.123;<br>    #server_name  www.123.com;<br>    #设置访问的语言编码<br>    charset utf-8;<br>    #设置虚拟主机访问日志的存放路径及日志的格式为main<br>    access_log  /www/wwwlogs/111.222.333.123.log main; #响应日志<br>    error_log  /www/wwwlogs/111.222.333.123.log main; #错误日志<br>    <br>    #PHP-INFO-START  PHP引用配置，可以注释或修改<br>    include enable-php-74.conf;<br>    #PHP-INFO-END<br>    <br>    #REWRITE-START URL重写规则引用<br>    include /www/server/panel/vhost/rewrite/111.222.333.123.conf;<br>    #REWRITE-END<br>    <br>    #设置主机基本信息<br>    #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。<br>    location  ~*^.+$ &#123;<br>    #根目录<br>        root html;  <br>        #设置默认页<br>        index  index.html index.htm;<br>        #拒绝的ip,黑名单<br>        deny 127.0.0.1;  <br>        #允许的ip，白名单<br>        allow 172.18.5.54; <br>    &#125; <br>    <br>    #禁止访问的文件或目录<br>    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)<br>    &#123;<br>        return 404;<br>    &#125;<br>    <br>    #SSL证书验证目录相关设置<br>    location ~ \.well-known&#123;<br>        allow all;<br>    &#125;<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">图片资源配置</span><br>    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$<br>    &#123;<br>        expires      30d;<br>        error_log /dev/null;<br>        access_log off;<br>    &#125;<br>    <br>    #网站js与css资源配置<br>    location ~ .*\.(js|css)?$<br>    &#123;<br>        expires      12h;<br>        error_log /dev/null;<br>        access_log off; <br>    &#125;<br>    <br>    #访问异常页面配置<br>    error_page  404              /404.html;<br>    error_page  500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>root   html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h1><h3 id="一、地址重写，地址转发，重定向"><a href="#一、地址重写，地址转发，重定向" class="headerlink" title="一、地址重写，地址转发，重定向"></a>一、地址重写，地址转发，重定向</h3><p>地址重写：为了标准化网址，比如输入baidu.com和<a href="http://www.baidu.com,都会被重写到www.baidu.com,而且我们在浏览器看到的也会是/">www.baidu.com，都会被重写到www.baidu.com，而且我们在浏览器看到的也会是</a> <a href="http://www.baidu.com/">www.baidu.com</a></p><p>地址转发：指在网络数据传输过程中数据分组到达路由器或桥接器后，该设备通过检查分组地址并将数据转发到最近的局域网的过程。 </p><p>不同点：</p><ul><li>地址重写会改变浏览器中的地址，使之变成重写成浏览器最新的地址。而地址转发他是不会改变浏览器的地址的。 </li><li>地址重写会产生两次请求，而地址转发只会有一次请求。 </li><li>地址转发一般发生在同一站点项目内部，而地址重写且不受限制。 </li><li>地址转发的速度比地址重定向快。</li></ul><h3 id="二、URL-重写"><a href="#二、URL-重写" class="headerlink" title="二、URL 重写"></a>二、URL 重写</h3><p>在 Nginx 中通过在 server 或 location 中配置 rewrite 指令实现：</p><h6 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h6><p><code>rewrite regex replacement [flag];</code></p><ul><li><strong>rewrite</strong>：该指令是实现URL重写的指令</li><li><strong>regex</strong>：用于匹配URI的正则表达式</li><li><strong>replacement</strong>：将regex正则匹配到的内容替换成 replacement。</li><li><strong>flag</strong>:标记<ul><li><strong>last:</strong> 本条规则匹配完成后，继续向下匹配新的location URI 规则。(不常用) </li><li><strong>break:</strong> 本条规则匹配完成即终止，不再匹配后面的任何规则(不常用)。 </li><li><strong>redirect:</strong> 返回302临时重定向，浏览器地址会显示跳转新的URL地址。</li><li><strong>permanent:</strong> 返回301永久重定向。浏览器地址会显示跳转新的URL地址。</li></ul></li></ul><h6 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h6><p><code>rewrite ^/(.*) http://www.baidu.com/$1 permanent;</code></p><ul><li><strong>rewrite</strong> ：指令。</li><li><strong>regex</strong>：正则表达式，匹配完整的域名和后面的路径地址。</li><li><strong>replacement</strong>：$1是取regex部分()里面的内容。如果匹配成功后跳转到的URL。</li><li><strong>flag；</strong>permanent，代表永久重定向的含义，即跳转到 <a href="http://www.baidu.com/$1">http://www.baidu.com/$1</a> 地址上。</li></ul><p>正则表达式</p><table><thead><tr><th><strong>字符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>\</td><td>转义字符标记，如 <code>\n</code>匹配一个换行符，而<code>\$</code>则匹配<code>$</code></td></tr><tr><td>^</td><td>匹配输入字符串的起始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的字符零次或多次。如<code>ol*</code>能匹配<code>o</code>及<code>ol</code>、<code>oll</code></td></tr><tr><td>+</td><td>匹配前面的字符一次或多次。如<code>ol+</code>能匹配<code>ol</code>及<code>oll</code>、<code>oll</code>，但不能匹配<code>o</code></td></tr><tr><td>?</td><td>匹配前面的字符零次或一次，例如<code>do(es)?</code>能匹配<code>do</code>或者<code>does</code>，<code>?</code>等效于<code>&#123;0,1&#125;</code></td></tr><tr><td>.</td><td>匹配除“<code>\n</code>之外的任何单个字符，若要匹配包括“\n”在内的任意字符，请使用诸如<code>[.\n]</code>之类的模式。</td></tr><tr><td>(pattern)</td><td>匹配括号内pattern并可以在后面获取对应的匹配，常用<code>$0...$9</code>属性获取小括号中的匹配内容，要匹配圆括号字符需要<code>\(Content\)</code></td></tr></tbody></table><h3 id="三、if-指令使用"><a href="#三、if-指令使用" class="headerlink" title="三、if 指令使用"></a>三、if 指令使用</h3><p>语法：</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">if (condition) &#123;<br>  // ....<br>&#125;<br></code></pre></td></tr></table></figure><p>Rewrite 可以使用的全局变量</p><ul><li><strong>$args</strong>: 该变量中存放了请求URL中的请求指令。比如 <code>http://127.0.0.1:3001?arg1=value1&amp;arg2=value2</code> 中的 <code>arg1=value1&amp;arg2=value2</code></li><li><strong>$content_length</strong>: 该变量中存放了请求头中的Content-length字段</li><li><strong>$content_type</strong>: 该变量中存放了请求头中的 Content-type字段</li><li><strong>$document_root</strong>: 该变量中存放了针对当前请求的根路径</li><li><strong>$document_uri</strong>: 该变量中存放了请求的当前URI, 但是不包括请求指令。比如 <code>http://xxx.abc.com/home/1?arg1=value1&amp; arg2=value2;</code> 中的 <code>/home/1</code> </li><li><strong>$host:</strong> 变量中存放了请求的URL中的主机部分字段，比如<code>http://xxx.abc.com:8080/home</code>中的 <code>xxx.abc.com</code></li><li><strong>$http_host</strong>: 该变量与$host唯一区别带有端口号：比如上面的是 <code>xxx.abc.com:8080 </code></li><li><strong>$http_user_agent</strong>: 变量中存放客户端的代理信息</li><li><strong>$http_cookie</strong>, 该变量中存放客户端的cookie信息</li><li><strong>$remote_addr</strong> 该变量中存放客户端的地址</li><li><strong>$remote_port</strong> 该变量中存放了客户端与服务器建立连接的端口号 </li><li><strong>$remote_user</strong> 变量中存放客户端的用户名</li><li><strong>$request_body_file</strong> 变量中存放了发给后端服务器的本地文件资源的名称 </li><li><strong>$request_method</strong> 变量中存放了客户端的请求方式，比如 ‘GET’、’POST’等</li><li><strong>$request_filename</strong> 变量中存放了当前请求的资源文件的路径名</li><li><strong>$request_uri</strong> 变量中存放了当前请求的URI，并且带请求指令</li><li><strong>$query_string</strong> 和变量$args含义一样</li><li><strong>$scheme</strong> 变量中存放了客户端请求使用的协议，比如 ‘http’, ‘https’等</li><li><strong>$server_protocol</strong> 变量中存放了客户端请求协议的版本, 比如 ‘HTTP&#x2F;1.0’、’HTTP&#x2F;1.1’ 等</li></ul><p>正则表达式：</p><h5 id="1、变量匹配"><a href="#1、变量匹配" class="headerlink" title="1、变量匹配"></a>1、变量匹配</h5><ul><li><code>~</code>：表示匹配过程中对大小写敏感</li><li><code>~*</code>：表示匹配过程中对大小写不敏感</li><li><code>!~</code> ：如果<code>~</code>匹配失败时，那么该条件就为true</li><li><code>!~*&#39;</code>：如果 <code>~*</code> 匹配失败时，那么该条件就为true</li></ul><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">if ($http_user_agent ~ MSIE) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>含义：$http_user_agent值中是否含有 MSIE 字符串，如果包含为true，否则为false</p><h5 id="2、判断请求的文件是否存在"><a href="#2、判断请求的文件是否存在" class="headerlink" title="2、判断请求的文件是否存在"></a>2、判断请求的文件是否存在</h5><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">if (-f $request_filename) &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">判断请求的文件是否存在</span><br>&#125;<br><br>if (!-f $request_filename) &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><code class="language-hljs shell">if (-f $request_filename) &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">判断请求的文件是否存在</span><br>&#125;<br><br>if (!-f $request_filename) &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">判断请求的文件是否不存在</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其他指令： </p><ul><li>-f和!-f用来判断请求文件是否存在 </li><li>-d和!-d用来判断请求目录是否存在 </li><li>-e和!-e用来判断是请求的文件或者目录否存在 </li><li>-x和!-x用来判断请求的文件是否可执行</li></ul><h5 id="3、判断手机访问"><a href="#3、判断手机访问" class="headerlink" title="3、判断手机访问"></a>3、判断手机访问</h5><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">if ( $http_user_agent ~* "(Android)|(iPhone)|(Mobile)|(WAP)|(UCWEB)" )&#123;<br>  rewrite ^/$  http://www.cnblogs.com  permanent；<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h5><p>现在我们使用if指令来对nginx加一些判断；比如说我们访问<a href="http://xxx.abc.com:8080/home%E6%97%B6%E5%80%99%EF%BC%8C%E5%A6%82%E6%9E%9C$host">http://xxx.abc.com:8080/home时候，如果$host</a> &#x3D; ‘xxx.abc.com’ 的时候，就做重定向跳转，nginx配置代码如下： </p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">server &#123;<br>  listen 8088;<br>  server_name xxx.abc.com;<br>  location / &#123;<br>    proxy_pass http://127.0.0.1:3001;<br>    if ($host = &#x27;xxx.abc.com&#x27;) &#123;<br>      rewrite ^/(.*) http://www.cnblogs.com redirect;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、防盗链"><a href="#四、防盗链" class="headerlink" title="四、防盗链"></a>四、防盗链</h3><p><a href="https://www.cnblogs.com/tugenhua0707/p/10798762.html">https://www.cnblogs.com/tugenhua0707/p/10798762.html</a></p><p><strong>什么是防盗链？</strong></p><p>盗链可以理解盗图链接，也就是说把别人的图片偷过来用在自己的服务器上，那么防盗链可以理解为防止其他人把我的图片盗取过去。</p><p><strong>防盗链的实现原理：</strong></p><p>客户端向服务器端请求资源时，为了减少网络带宽，提高响应时间，服务器一般不会一次将所有资源完整地传回客户端。比如请求一个网页时，首先会传回该网页的文本内容，当客户端浏览器在解析文本的过程中发现有图片存在时，会再次向服务器发起对该图片资源的请求，服务器将存储的图片资源再发送给客户端。但是如果这个图片是链接到其他站点的服务器上去了呢，比如在我项目中，我引用了的是淘宝中的一张图片的话，那么当我们网站重新加载的时候，就会请求淘宝的服务器，那么这就很有可能造成淘宝服务器负担。因此这个就是盗链行为。因此我们要实现防盗链。</p><p><strong>实现防盗链：</strong></p><p>使用http协议中请求头部的Referer头域来判断当前访问的网页或文件的源地址。通过该头域的值，我们可以检测访问目标资源的源地址。如果目标源地址不是我们自己站内的URL的话，那么这种情况下，我们采取阻止措施，实现防盗链。但是注意的是：Referer头域中的值是可以被更改的。因此该方法也不能完全安全阻止防盗链。 </p><p><strong>使用Nginx服务器的Rewrite功能实现防盗链。</strong></p><p>Nginx中有一个指令 valid_referers. 该指令可以用来获取 Referer 头域中的值，并且根据该值的情况给 Nginx全局变量 invalidreferer赋值。如果Referer头域中没有符合validreferers指令的值的话，invalidreferer赋值。如果Referer头域中没有符合validreferers指令的值的话，invalid_referer变量将会赋值为</p><p>valid_referers 指令基本语法如下：</p><p><code>valid_referers  none | blocked | server_names | string</code></p><p><strong>none:</strong> 检测Referer头域不存在的情况。</p><p><strong>blocked：</strong> 检测Referer头域的值被防火墙或者代理服务器删除或伪装的情况。那么在这种情况下，该头域的值不以”http:&#x2F;&#x2F;“ 或 “https:&#x2F;&#x2F;“ 开头。</p><p><strong>server_names:</strong> 设置一个或多个URL，检测Referer头域的值是否是URL中的某个。</p><p>因此我们有了 valid_referers指令和$invalid_referer变量的话，我们就可以通过 Rewrite功能来实现防盗链。<br>下面我们介绍两种方案：第一：根据请求资源的类型。第二：根据请求目录。</p><h5 id="1-根据请求文件类型实现防盗链配置实列如下："><a href="#1-根据请求文件类型实现防盗链配置实列如下：" class="headerlink" title="1. 根据请求文件类型实现防盗链配置实列如下："></a>1. 根据请求文件类型实现防盗链配置实列如下：</h5><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">server &#123;<br>  listen 8080;<br>  server_name xxx.abc.com<br>  location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ &#123;<br>    valid_referers none blocked www.xxx.com www.yyy.com *.baidu.com  *.tabobao.com;<br>    if ($invalid_referer) &#123;<br>      rewrite ^/ http://www.xxx.com/images/forbidden.png;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上基本配置，当有网络连接对以 gif、jpg、png为后缀的图片资源时候、当有以swf、flv为后缀的媒体资源时、或以 rar、zip为后缀的压缩资源发起请求时，如果检测到Referer头域中没有符合 valid_referers指令的话，那么说明不是本站的资源请求。</p><p>location ~* ^.+.(gif|jpg|png|swf|flv|rar|zip)$ 该配置的含义是 设置防盗链的文件类型。</p><p>valid_referers none blocked <a href="http://www.xxx.com/">www.xxx.com</a> <a href="http://www.yyy.com/">www.yyy.com</a> *.baidu.com *.tabobao.com; 可以理解为白名单，允许文件链出的域名白名单，如果请求的资源文件不是以这些域名开头的话，就说明请求的资源文件不是该域下的请求，因此可以判断它是盗链。因此如果不是该域下的请求，就会使用 Rewrite进行重定向到 <a href="http://www.xxx.com/images/forbidden.png">http://www.xxx.com/images/forbidden.png</a> 这个图片，比如这张图片是一个x或其他的标识，然后其他的网站就访问不了你这个图片哦。</p><ol start="2"><li>根据请求目录实现防盗链的配置实列如下：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">server &#123;<br>  listen 8080;<br>  server_name xxx.abc.com<br>  location /file/ &#123;<br>    root /server/file/;<br>    valid_referers none blocked www.xxx.com www.yyy.com *.baidu.com  *.tabobao.com;<br>    if ($invalid_referer) &#123;<br>      rewrite ^/ http://www.xxx.com/images/forbidden.png;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他栗子</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">例子一（域名跳转）:<br>    server &#123;<br>            listen 80;<br>            server_name   abc.com;<br>            rewrite   ^/(.*)     http://www.ab c.com/$1 permanent;  # 跳转到www.abc.com网址上<br>        &#125;<br>例子二：<br>  server &#123;<br>            listen 80;<br>            server_name   www.myweb.com www.web.info<br>            if($host ~ myweb\.info)&#123;                        #"."需要使用“\”转义，这里是匹配到www.web.info时<br>                     rewrite ^(.*)  http://www.myweb.com/&1 permanent;   #永久重定向到http://www.myweb.com网址上&1是匹配的uri<br>            &#125;<br>        &#125;<br>例子三(防盗链)：<br>location ~* \.(gif|jpg|png|swf|flv)$ &#123;<br>    valid_referers none blocked www.vison.com www.wsvison.com;  #这里表示Referer头域中的值是none或者blocked或者后面这些网址才会返回去正常的gif|jpg|png|swf|flv文件，否则执行下面if块代码<br>    if ($invalid_referer) &#123;  #上面没有匹配成功，$invalid_referer值为1，否则为0<br>        return 404;<br>    &#125; //防盗链<br>&#125;       <br>其他例子：    <br>if ($http_user_agent ~ MSIE) &#123;<br>    rewrite ^(.*)$ /msie/$1 break;<br>&#125; //如果UA包含"MSIE"，rewrite请求到/msid/目录下<br><br>if ($http_cookie ~* "id=([^;]+)(?:;|$)") &#123;<br>    set $id $1;<br> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分<br><br>if ($request_method = POST) &#123;<br>    return 405;<br>&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302<br><br>if ($slow) &#123;<br>    limit_rate 10k;<br>&#125; //限速，$slow可以通过 set 指令设置<br><br>if (!-f $request_filename)&#123;<br>    break;<br>    proxy_pass  http://127.0.0.1; <br>&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查<br><br>if ($args ~ post=140)&#123;<br>    rewrite ^ http://example.com/ permanent;<br>&#125; //如果query string中包含"post=140"，永久重定向到example.com<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 1024程序员节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从水果连连看到两条序列比对</title>
      <link href="/posts/7999/"/>
      <url>/posts/7999/</url>
      
        <content type="html"><![CDATA[<h2 id="一、序列比对-Sequence-Alignment"><a href="#一、序列比对-Sequence-Alignment" class="headerlink" title="一、序列比对 Sequence Alignment"></a>一、序列比对 <em>Sequence Alignment</em></h2><p>序列比对（sequence alignment），目前是生物信息学的基本研究方法。</p><p>算法类似于连连看，规则是上下两个水果一样，就可以连起来，计如得分：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fb1b51322a070ac73a40cecc5d613889.png" alt="img"></p><p>现在如果上下两行代表两条序列，把水果换成碱基，可消除的碱基中间连线，就像下面这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">AACGGGGTG<br> | ||| |<br>CATGGGATT<br></code></pre></td></tr></table></figure><p>到目前为止，我们已经实现了一个简单的序列比对。</p><p>序列比对最终结果可以用比对得分来评估，然后通过统计学分析后，得到序列间的相似性与同源性，以及它们的显著性水平即可进行下一步生物信息分析。</p><p>在应用上，如果找到了不同序列之间的相似性，那就可以推断功能或建立进化关系，以此更好地了解基因的起源和功能。</p><p>反之，如果找到序列间的不相似性，就能推断插入，突变，缺失等生物学过程，比如推断新冠病毒的突变位点。</p><p>根据序列比对范围和目的，分为两种：</p><h3 id="1、全局比对-Global-Alignment"><a href="#1、全局比对-Global-Alignment" class="headerlink" title="1、全局比对 Global Alignment"></a>1、全局比对 <em>Global Alignment</em></h3><p>顾名思义，就是对两条序列的全长都进行比对</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">AACGGGGTG<br> | ||| |<br>CATGGGATT<br></code></pre></td></tr></table></figure><p>当然有时候序列比对时会不尽人意，类似于这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">AACTGAGTGA<br> |<br>CATGAGTGA<br></code></pre></td></tr></table></figure><p>细心的小伙伴可能会发现只有在其中空一格就会“连”到更多的碱基</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">AACTGAGTGA<br> | |||||||<br>CA TGAGTGA<br></code></pre></td></tr></table></figure><p>其中引入的空格，也叫空位（Gap），在生物学中也有依据：DNA 序列在进化过程中会发生的碱基删除事件。但更多的是一种算法规则，即在计算打分时，需要遵循以下规则：</p><ul><li><p>碱基匹配加分：+1，也就是中间有连线的碱基对</p></li><li><p>碱基错配罚分：-1，也就是没有连线的碱基对</p></li><li><p>碱基空位罚分：-3，也就是空位，不组成碱基对</p></li></ul><p>根据规则，上述的比对结果为：8-1-3&#x3D;4</p><p>这种比对常常用于基因家族分析，系统发育树构建等</p><h3 id="2、局部比对-Local-Alignment"><a href="#2、局部比对-Local-Alignment" class="headerlink" title="2、局部比对 Local Alignment"></a>2、局部比对 <em>Local Alignment</em></h3><p>目的是在两条序列比对后，获取序列比对分数或置信度最高的匹配序列片段。我们拿刚刚的全局比对结果举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">AACTGAGTGA<br> | |||||||<br>CA TGAGTGA<br></code></pre></td></tr></table></figure><p>最佳的片段为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">TGAGTGA<br>|||||||<br>TGAGTGA<br></code></pre></td></tr></table></figure><p>根据规则计算比对分数为：7，显然这就是我们要找的最佳匹配序列。</p><p>这种比对常常用于功能域查找，转录因子足迹搜索等等。</p><p>！！！</p><p>但是有个坏消息是，现实中的序列是要长的多，比如癌基因 p53 的序列长度为 25760 个碱基。</p><p>而且也要复杂的多，比如氨基酸之间的错配，由于氨基酸之间的物化性质，虽然是不同的氨基酸，但是介于错配与匹配分数之间，这就不能用简单的规则来计算比对分数啦。</p><p>为了获得最佳的比对序列，就需要比较序列间的比对得分大小。那么现在有两个需要解决的问题：</p><ul><li>设计一种规则，用于计算最真实的比对得分</li><li>设计一种算法，来快速精准的比对序列</li></ul><p>这时，有大牛提出计分矩阵和最优比对算法来解决这两个问题。</p><p>这篇我们先来探讨比对的得分的计算，也就是计分矩阵的由来与计算方法：</p><h2 id="二、计分矩阵-Scoring-Matrix"><a href="#二、计分矩阵-Scoring-Matrix" class="headerlink" title="二、计分矩阵 Scoring Matrix"></a>二、计分矩阵 Scoring Matrix</h2><p>在序列比对过程中，需要一个计分规则来对匹配到的每个位置的碱基，氨基酸，错配等进行打分，因此该矩阵也叫替换矩阵（substitution matrix）。</p><h3 id="2-1-碱基计分矩阵"><a href="#2-1-碱基计分矩阵" class="headerlink" title="2.1 碱基计分矩阵"></a>2.1 碱基计分矩阵</h3><p>比如我们来计算下面两条 DNA 序列的分值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ATGCGAT<br>|| ||||<br>ATCCGAT<br></code></pre></td></tr></table></figure><p>一个常用与DNA序列的计分矩阵</p><table><thead><tr><th></th><th>A</th><th>T</th><th>C</th><th>G</th></tr></thead><tbody><tr><td>A</td><td>0.9</td><td>-0.1</td><td>-0.1</td><td>-0.1</td></tr><tr><td>T</td><td>-0.1</td><td>0.9</td><td>-0.1</td><td>-0.1</td></tr><tr><td>C</td><td>-0.1</td><td>-0.1</td><td>0.9</td><td>-0.1</td></tr><tr><td>G</td><td>-0.1</td><td>-0.1</td><td>-0.1</td><td>0.9</td></tr></tbody></table><p>这个矩阵的意思就是，只有匹配一样计分 0.9，但凡不一致扣分 0.1。根据这个计分规则，我们可以很骄傲地拿出我们幼儿园学到的数学，得出：</p><p>$0.9\times6 + 1\times(-0.1) &#x3D; 5.3$</p><p>同源性：代表两条序列间有进化关系，也就是进化中的突变概率也会被考虑在内。</p><p>相似性：只代表两条序列的相似度</p><h4 id="空位问题-Gap"><a href="#空位问题-Gap" class="headerlink" title="空位问题 Gap"></a>空位问题 <em>Gap</em></h4><p>对于序列在进化过程中，插入或缺失造成的序列空位，可能是一个或多个碱基，氨基酸，甚至功能域。</p><p>在进行序列比对时，就需要考虑到这些问题，一般用空位罚分（Gap penalty）来处理。</p><p>用公式表示：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EtIziru2-1635057569192)(<a href="https://cdn.nlark.com/yuque/__latex/525b352e7a54a951ffcc86e433a2f25b.svg)]">https://cdn.nlark.com/yuque/__latex/525b352e7a54a951ffcc86e433a2f25b.svg)]</a></p><p>这里的参数代表：</p><ul><li><p><strong>a 空位设置 Gap opening</strong>：只要有一个空位出现，就以空位设置罚分</p></li><li><p><strong>b 空位扩展 Gap extension</strong>：任一空位的扩大，以空位扩展罚分，一般长度越大，罚分越重</p></li><li><p><strong>k 空位数</strong></p></li></ul><p>很容易可以得到</p><table><thead><tr><th>空位设置</th><th>空位扩展</th><th>用途</th></tr></thead><tbody><tr><td>大</td><td>大</td><td>用于非常相似的蛋白质序列的比对，也就是序列间极少有插入，缺失</td></tr><tr><td>大</td><td>小</td><td>用于功能域插入或缺失的蛋白质序列比对，序列间少量的长片段空缺</td></tr><tr><td>小</td><td>大</td><td>用于亲缘关系较远的蛋白质同源性分析，序列间有大量的短片段空缺</td></tr></tbody></table><h3 id="2-2-氨基酸计分矩阵"><a href="#2-2-氨基酸计分矩阵" class="headerlink" title="2.2 氨基酸计分矩阵"></a>2.2 氨基酸计分矩阵</h3><p>蛋白质序列的计分矩阵相较于只有 4 个碱基的 DNA 序列要复杂的多。对于蛋白质序列的分析可以避免在翻译时的简并性问题（几个三联体可能编码同一个氨基酸），而且也是最接近执行生物学功能和自然选择的分子，因此蛋白质分析在同源家族，基因进化等方面更具研究意义。</p><h4 id="2-2-1-PAM-矩阵"><a href="#2-2-1-PAM-矩阵" class="headerlink" title="2.2.1 PAM 矩阵"></a>2.2.1 PAM 矩阵</h4><p>各种氨基酸在进化过程中，由于其自身的物化性质，一种氨基酸替换为另一种氨基酸的概率并不一样。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3c7375fe6a208c24d07373f57e797f41.png" alt="img"></p><p>1978年，以 Dayhoff 为首的科学家，对大量蛋白质家族进行统计学分析，观测到 1572 次氨基酸替换，构建了最原始的 <strong>PAM 矩阵（Percent Accepted Mutation，PAM）</strong>，也叫 MDM 矩阵（Mutation Data Matrix）或 Dayhoff 矩阵。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7d048f5a20bf910e60a1a3e0c9ae1bff.png" alt="img"></p><p>根据该表可以计算突变概率矩阵，其中每个矩阵元素代表在进化过程中氨基酸之间的替换频率。</p><p>接下来将观测到的突变百分率作为一种进化时间单位，现在假设同一位点不会发生两次以上的突变，我们对 PAM 进行次方处理，比如 PAM 的 100 次方，意味着进化了 100 次，时间尺度也会更大。</p><p>在Dayhoff 和她的小伙伴研究过程中，发现将突变概率矩阵进行 250 次方处理后得到的 PAM 250，适合用于研究远缘蛋白质进化，换句话说这是一个研究这种蛋白质最合适的时间尺度。</p><p>然后再将 PAM 250 矩阵进行对数处理，得到 PAM250 的对数概率矩阵，该矩阵用于表示氨基酸间互相替换的观测规律。</p><p>经过前人的不懈努力，我们终于拿到了最终的计分矩阵，可以计算比对得分啦。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9cef2ad57068fc2dc87d4a50c3acc8c5.png" alt="img"></p><p>后来随着蛋白质序列的增加，有人扩大了统计样本，新构建了 JTT 矩阵等，但最终效果都与 PAM 类似。因此，目前使用最为广泛的还是 PAM。</p><p>不清楚选择哪种矩阵怎么办？</p><p>需要注意，由于不同的蛋白质家族进化速度并不相同，因此选用的 PAM 也会不一样。</p><p>总的来说，如果研究进化关系远的蛋白质序列，最好选 &gt; 100 PAM。</p><p>如果蛋白质序列本身相似度高，PAM 的影响会比较小，默认 PAM250 就行。</p><h4 id="2-2-2-BLOSUM-矩阵"><a href="#2-2-2-BLOSUM-矩阵" class="headerlink" title="2.2.2 BLOSUM 矩阵"></a>2.2.2 BLOSUM 矩阵</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/28cb012de7b2189cb2579db40e7ae1fc.png" alt="img"></p><p>1992 年，Steve Henikoff 和他的妻子 Jorja Henikoff 一起引入了 BLOSUM 替换矩阵。</p><p>BLOSUM(Blocks Substitution Matrix)，不同于 PAM 直接用全序列对统计氨基酸替换规律，Henikoff 先对区域保守的蛋白质家族进行局部对比，得到蛋白质序列的高度保守区域，也就是 Blocks，然后基于局部比对块获得每个位置的替换分数。</p><p>在计算时首先要构建一个蛋白质家族最保守区域的序列比对数据库，得到局部比对块，计算块中的氨基酸对。</p><p>现在计算每个氨基酸对的替换分数：</p><p><strong>a. 计算观察概率</strong></p><p>假设 $f_{ij}$ 代表 i，j 氨基酸对，$q_{ij}$ 代表观察到的氨基酸频率:<br>$q_{ij}&#x3D;\frac{f_{ij}}{\sum{f_{ij}}}$</p><p><strong>b. 计算期望概率</strong></p><p>在完全独立情况下，$p_i, p_j$ 代表 i，j 氨基酸频率，该氨基酸替换频率的期望值 $e_{ij}$</p><p>$e_{ij}&#x3D;\begin{cases}<br>p_i^2 &amp; i&#x3D;j \<br>2p_ip_j &amp; i≠j \<br>\end{cases}$</p><p>其中，</p><p>$p_i&#x3D;q_{ii}+\frac{1}{2}\sum_{i≠j}{q_{ij}}$</p><p><strong>c. 计算氨基酸替换分数</strong></p><p>$score_{ij}&#x3D;2log2(\frac{q_{ij}}{e_{ij}})$</p><p>也就是，$q_{ij}$ 代表观察到的可能性，$e_{ij}$ 代表预料之中的可能性。每个氨基酸对的出现与该对出现的预期值的比率，再被四舍五入并用于替换矩阵中，得到这样一种矩阵，类似于 PAM 矩阵：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9e8824eda659e1c92897c475941cf2f4.png" alt="img"></p><p>其中，</p><ul><li><p>零分表示在数据库中发现给定的两个氨基酸比对的频率是偶然的</p></li><li><p>正分表示比对被发现的频率高于偶然</p></li><li><p>负分表示比对被发现的频率低于偶然</p></li></ul><p>根据构建数据库时， Block 的最小相似比例，可以定义不同的 BLOSUM。</p><p>比如上图所示的是 BLOSUM 62， 代表使用局部序列比对相似度为至少为 62%的 Block 构建的替换矩阵。</p><p>不难理解，BOLSUM 后的数字越大，代表进化关系越近。</p><p>不清楚选择哪种矩阵怎么办？</p><p>BLOSUM 80：进化关系近的蛋白质</p><p>BLOSUM 62：大部分蛋白质，默认</p><p>BLOSUM 45：进化关系远的蛋白质</p><p>目前 BLOSUM 矩阵就是我们使用 BLAST 算法经常用的一种计分矩阵。</p><h4 id="2-2-3-PSSM-位置特异性矩阵"><a href="#2-2-3-PSSM-位置特异性矩阵" class="headerlink" title="2.2.3 PSSM 位置特异性矩阵"></a>2.2.3 PSSM 位置特异性矩阵</h4><p>位置特异性矩阵（PSSM，Position-Specific Scoring Matrix），计算每种碱基或氨基酸，在特定位置的频率矩阵。一般常用于保守序列的搜索，比如PSI-BLAST，DELTA-BLAST等。</p><p>计算举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">TGAGTGAT<br>TCAGCGAT<br>TGGGCGAT<br>TGGGTGAA<br></code></pre></td></tr></table></figure><p><strong>a. 计算频数矩阵</strong></p><p>对每条序列中的 ATCG 计算频数</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>总</th></tr></thead><tbody><tr><td>A</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>0</td><td>4</td><td>1</td><td>7</td></tr><tr><td>T</td><td>4</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>3</td><td>9</td></tr><tr><td>C</td><td>0</td><td>1</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>0</td><td>3</td></tr><tr><td>G</td><td>0</td><td>3</td><td>2</td><td>4</td><td>0</td><td>4</td><td>0</td><td>0</td><td>13</td></tr></tbody></table><p><strong>b. 计算频率矩阵</strong></p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>总</th></tr></thead><tbody><tr><td>A</td><td>0</td><td>0</td><td>0.5</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0.25</td><td>0.22</td></tr><tr><td>T</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0.5</td><td>0</td><td>0</td><td>0.75</td><td>0.28</td></tr><tr><td>C</td><td>0</td><td>0.25</td><td>0</td><td>0</td><td>0.5</td><td>0</td><td>0</td><td>0</td><td>0.09</td></tr><tr><td>G</td><td>0</td><td>0.75</td><td>0.5</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0.41</td></tr></tbody></table><p><strong>c. 标准化矩阵</strong></p><p>碱基背景频率&#x2F;位置频率</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>总</th></tr></thead><tbody><tr><td>A</td><td>0</td><td>0</td><td>2.27</td><td>0</td><td>0</td><td>0</td><td>4.55</td><td>1.14</td><td>0.22</td></tr><tr><td>T</td><td>3.57</td><td>0</td><td>0</td><td>0</td><td>1.79</td><td>0</td><td>0</td><td>2.68</td><td>0.28</td></tr><tr><td>C</td><td>0</td><td>2.78</td><td>0</td><td>0</td><td>5.56</td><td>0</td><td>0</td><td>0</td><td>0.09</td></tr><tr><td>G</td><td>0</td><td>1.83</td><td>1.22</td><td>2.44</td><td>0</td><td>2.44</td><td>0</td><td>0</td><td>0.41</td></tr></tbody></table><p><strong>d. 对数转换矩阵</strong></p><p>$score&#x3D;log_2(p_{ij})$，其中 $p_{ij}$ 代表标准化矩阵中对应的频率，如果 $p_{ij}$ 为 0，则取 $p_{ij}$ 伪值 0.1</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>A</td><td>-3.3</td><td>-3.3</td><td>1.18</td><td>-3.3</td><td>-3.3</td><td>-3.3</td><td>2.19</td><td>0.19</td></tr><tr><td>T</td><td>1.84</td><td>-3.3</td><td>-3.3</td><td>-3.3</td><td>0.84</td><td>-3.3</td><td>-3.3</td><td>1.42</td></tr><tr><td>C</td><td>-3.3</td><td>1.48</td><td>-3.3</td><td>-3.3</td><td>2.48</td><td>-3.3</td><td>-3.3</td><td>-3.3</td></tr><tr><td>G</td><td>-3.3</td><td>0.87</td><td>0.29</td><td>1.29</td><td>-3.3</td><td>1.29</td><td>-3.3</td><td>-3.3</td></tr></tbody></table><p>实际应用中，可以用该 PSSM 矩阵作为打分矩阵，去搜索未知序列中与该 PSSM 相似的保守序列片段。当然也可以计算并绘制基序 Logo。</p><p>下一篇我们详细探究序列比对算法：</p><ul><li>Needleman-Wunsch 算法</li><li>Smith-Waterman 算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 序列比对 </tag>
            
            <tag> 1024程序员节 </tag>
            
            <tag> 计分矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看并关闭占用端口</title>
      <link href="/posts/8526/"/>
      <url>/posts/8526/</url>
      
        <content type="html"><![CDATA[<h2 id="查看占用端口"><a href="#查看占用端口" class="headerlink" title="查看占用端口"></a>查看占用端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo lsof -i:8888<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b27c4fe2852849108670813d946f4fd5.png" alt="在这里插入图片描述"></p><h1 id="关闭占用端口"><a href="#关闭占用端口" class="headerlink" title="关闭占用端口"></a>关闭占用端口</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo kill -9 2558243<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 1024程序员节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Zotero 高效管理文献（图文详解）</title>
      <link href="/posts/52364/"/>
      <url>/posts/52364/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载与安装"><a href="#一、下载与安装" class="headerlink" title="一、下载与安装"></a>一、下载与安装</h2><p>下载网址：<a href="https://www.zotero.org/download/">https://www.zotero.org/download</a></p><p>注册网址：<a href="https://www.zotero.org/user/register">https://www.zotero.org/user/register</a></p><h2 id="二、同步设置"><a href="#二、同步设置" class="headerlink" title="二、同步设置"></a>二、同步设置</h2><p>这一步极其重要，是 Zotero 强大功能的起点，我们可以将感兴趣的论文的 PDF，文献信息存放在云端，结合PDF 阅读器，甚至可以把 PDF 上的笔记一起保存到云端。</p><p>当有需要的时候，可以从浏览器，电脑，手机，平板来访问这些信息。</p><p>1、进入首选项</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e4fcb24514be78146c0d18a79b3d456c.png" alt="img"></p><p>2、输入刚刚注册信息，登录电脑版 Zotero，点击设置同步</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e7af92787a15baa4bf361c24baa2e4ca.png" alt="img"></p><p>3、同步完成，显示如下信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/13d6fb38b37e5cbff40450889079b12a.png" alt="img"></p><p>4、云同步设置</p><p>遗憾的是 Zotero 官方只提供 300 M的存放空间，因此我们要绑定一个更大的云盘来存储数据。比较推荐免费的坚果云作为存储云盘。</p><p>5、登录坚果云：<a href="https://www.jianguoyun.com/">https://www.jianguoyun.com/</a></p><p>进入账户信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fde60b0a66ae9536ff093dbda488e65f.png" alt="img"></p><p>6、进入安全选项，添加应用并生成密码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c7ff56a790db0a951ea442617cff6075.png" alt="img"></p><p>7、接下来，进入 Zoteor 进行设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/11623f59fd4828e4f863b913d120ea56.png" alt="img"></p><p>8、按照下图填写信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f7a1e8e6b205cfe66298e3cb01a11006.png" alt="img"></p><p>9、点击验证服务器完成服务器同步设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9018856d6891035fa6c70f2278c5f425.png" alt="img"></p><p>10、现在，同步目前本地的信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac9176246a5f570e27490282a90f89ad.png" alt="img"></p><p>11、可以看到在坚果云上已经建好一个 zotero 的文件夹，用于同步本地信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bcdb87d05cd5f2f8c1813f4ac61f5518.png" alt="img"></p><h2 id="三、添加文献资源"><a href="#三、添加文献资源" class="headerlink" title="三、添加文献资源"></a>三、添加文献资源</h2><h4 id="1、本地文献"><a href="#1、本地文献" class="headerlink" title="1、本地文献"></a>1、本地文献</h4><p>如图，直接拖动就行，Zotero 会自动搜索相关的文献信息</p><h4 id="2、添加在线论文"><a href="#2、添加在线论文" class="headerlink" title="2、添加在线论文"></a><img src="https://img-blog.csdnimg.cn/img_convert/9d6a388d68ff2c49d7abe18415179a50.png" alt="img">2、添加在线论文</h4><p><a href="https://www.zotero.org/download/">https://www.zotero.org/download/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/55aa95493946a27f4bf372b45f9753ce.png" alt="img"></p><p>如果看到感兴趣的文章，直接点击插件按钮，添加文献</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7f6cd064a561692b855e3c2d47d21fee.png" alt="img"></p><p>也可以通过 DOI，PMID 等等进行添加</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40a56c53f0fbc3bcb92bd6e3c192f946.png" alt="img"></p><h4 id="3、添加更多资源"><a href="#3、添加更多资源" class="headerlink" title="3、添加更多资源"></a>3、添加更多资源</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/55fae1ab9947991dd192d3cde43954b1.png" alt="img"></p><h2 id="四、管理文件库"><a href="#四、管理文件库" class="headerlink" title="四、管理文件库"></a>四、管理文件库</h2><h4 id="1、添加分组"><a href="#1、添加分组" class="headerlink" title="1、添加分组"></a>1、添加分组</h4><p>可以添加分组，也可以进一步添加子分组</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcb238e27582951de67e28e583a96dba.png" alt="img"></p><h4 id="2、添加标签"><a href="#2、添加标签" class="headerlink" title="2、添加标签"></a>2、添加标签</h4><p>需要点击文献，进入 Tags，添加标签，可以设置颜色，文本等信息。筛选通过点击左下角的标签就可以找到打标签的文献。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0cbb6065e10fcc6e438e08ce253ec059.png" alt="img"></p><h2 id="五、引用文献"><a href="#五、引用文献" class="headerlink" title="五、引用文献"></a>五、引用文献</h2><h4 id="1、一般引用"><a href="#1、一般引用" class="headerlink" title="1、一般引用"></a>1、一般引用</h4><p>选中文献，直接拖动就行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ab412d0420cc94dc52b95b57ea06970d.png" alt="img"></p><h4 id="2、sci-引用"><a href="#2、sci-引用" class="headerlink" title="2、sci 引用"></a>2、sci 引用</h4><p>综合来看推荐用 endnote，引用时，只需要把 Zotero 中的文献数据导入 endnote 即可。</p><h2 id="五、安装插件"><a href="#五、安装插件" class="headerlink" title="五、安装插件"></a>五、安装插件</h2><p>官网插件：<a href="https://www.zotero.org/support/plugins">https://www.zotero.org/support/plugins</a></p><p>下载好插件后，进入 Tools -&gt; Add-ons</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7a1ce7cf6fd9646962ff8485f8813437.png" alt="img"></p><p>找到刚刚下载的插件安装即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/869f51ba9e3a0692dfeb854cb90dd5a5.png" alt="img"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 闲聊杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 论文相关 </tag>
            
            <tag> 文献 </tag>
            
            <tag> Zotero </tag>
            
            <tag> 文献管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 服务器安装远程 Rstudio（图文详解）</title>
      <link href="/posts/34866/"/>
      <url>/posts/34866/</url>
      
        <content type="html"><![CDATA[<p>相信大家都用过本地版的 Rstudio，也时常被电脑卡死所困扰，也有用自己笔记本处理单细胞数据内存不够的 error，怎么解决？</p><p>Rstudio 官方其实有个可以在本地服务器安装的 server 版，也就是使用服务器的硬件配置，用自己的工作电脑登录浏览器就可以使用，避免以上问题。</p><p>那么接下来，和我一起配置起来：</p><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><p>系统：Debian 10 &#x2F; Ubuntu 18 &#x2F; Ubuntu 20</p><p>R版本：&gt; 3.0</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo apt-get install r-base<br>sudo apt-get install gdebi-core<br>wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2021.09.0-351-amd64.deb<br>sudo gdebi rstudio-server-2021.09.0-351-amd64.deb<br></code></pre></td></tr></table></figure><p>安装完成后如图所示：<img src="https://img-blog.csdnimg.cn/img_convert/1d97d6442c94d0cf32969b4e7b17d0ef.png" alt="img"></p><p>现在回到你的浏览器中输入：<code>your_id:8787</code></p><p>即可看到登录页面，这里输入用户名和密码即可登录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/30875adfc680b2e03038fa35dd1548bd.png" alt="img"></p><p>登录后，与本地版 Rstudio 界面与用法相同</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b422abbc5a742f751a8dcd631d2e9de1.png" alt="img"></p><p>如果登录不了，可能原因是防火墙拦截端口</p><p>需要安装</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo apt-get update <br>sudo apt-get install iptables<br>sudo apt-get install iptables-persistent<br></code></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><span class="hljs-comment"># 开放端口</span><br>iptables -I INPUT -p tcp --dport 8787 -j ACCEPT<br>iptables -I OUTPUT -p udp --dport 8787 -j ACCEPT<br><span class="hljs-comment"><code class="language-hljs bash"><span class="hljs-comment"># 开放端口</span><br>iptables -I INPUT -p tcp --dport 8787 -j ACCEPT<br>iptables -I OUTPUT -p udp --dport 8787 -j ACCEPT<br><span class="hljs-comment"># 保存防火墙规则, /etc/iptables/rules.v4</span><br>sudo netfilter-persistent save<br></code></pre></td></tr></table></figure><h2 id="三、常用操作"><a href="#三、常用操作" class="headerlink" title="三、常用操作"></a>三、常用操作</h2><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rstudio-server restart<br></code></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rstudio-server stop<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rstudio-server start<br></code></pre></td></tr></table></figure><h4 id="检测配置文件"><a href="#检测配置文件" class="headerlink" title="检测配置文件"></a>检测配置文件</h4><p>配置文件后，用于文件自检</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rstudio-server verify-installation<br></code></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p>按 q 退出</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rstudio-server status<br></code></pre></td></tr></table></figure><p>正在运行状态</p><p><img src="https://img-blog.csdnimg.cn/img_convert/69a038c977467746288f58f6ce55cc86.png" alt="img"></p><p>停止运行或运行错误状态</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e244c45829990a29c6da17820c98027.png" alt="img"></p><h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><p>安装完成后，会有两个 Rstudio-server 配置文件，如果不存在手动创建即可</p><p>！！！如果不清楚配置选项意义，请勿更改，可以会引起 Rstudio server 运行异常</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">/etc/rstudio/rserver.conf<br>/etc/rstudio/rsession.conf<br></code></pre></td></tr></table></figure><h4 id="rserver-conf-配置清单"><a href="#rserver-conf-配置清单" class="headerlink" title="rserver.conf 配置清单"></a><code>rserver.conf</code> 配置清单</h4><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><span class="hljs-comment"># 监听端口,默认为 8787</span><br>www-port=8787<br><span class="hljs-comment"># 地址，默认为0.0.0.0，会接收任何IP连接</span><br>www-address=0.0.0.0<br><span class="hljs-comment"># 指定库文件路径，一般不需要改动，可以用于添加系统标准库，第三方外部库文件依赖</span><br>rsession-ld-library-path=/opt/local/lib:/opt/local/someapp/lib<br><span class="hljs-comment"># 指定 R 路径</span><br>rsession-which-r=/usr/local/bin/R<br><span class="hljs-comment"><code class="language-hljs bash"><span class="hljs-comment"># 监听端口,默认为 8787</span><br>www-port=8787<br><span class="hljs-comment"># 地址，默认为0.0.0.0，会接收任何IP连接</span><br>www-address=0.0.0.0<br><span class="hljs-comment"># 指定库文件路径，一般不需要改动，可以用于添加系统标准库，第三方外部库文件依赖</span><br>rsession-ld-library-path=/opt/local/lib:/opt/local/someapp/lib<br><span class="hljs-comment"># 指定 R 路径</span><br>rsession-which-r=/usr/local/bin/R<br><span class="hljs-comment"># 设置用户权限</span><br>auth-required-user-group=rstudio_users<br></code></pre></td></tr></table></figure><h4 id="rsession-conf-配置清单"><a href="#rsession-conf-配置清单" class="headerlink" title="rsession.conf 配置清单"></a><code>rsession.conf</code> 配置清单</h4><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash"><span class="hljs-comment"># 会话超时，默认 2 小时 Rstudio 没有操作就会断开服务器连接，如果有任务运行这不会断开</span><br>session-timeout-minutes=120<br><span class="hljs-comment"># 设置R包路径，默认在~/R/packages</span><br>r-libs-user=~/R/packages<br><span class="hljs-comment"><code class="language-hljs bash"><span class="hljs-comment"># 会话超时，默认 2 小时 Rstudio 没有操作就会断开服务器连接，如果有任务运行这不会断开</span><br>session-timeout-minutes=120<br><span class="hljs-comment"># 设置R包路径，默认在~/R/packages</span><br>r-libs-user=~/R/packages<br><span class="hljs-comment"># 镜像设置</span><br>r-cran-repos=https://mirrors.nics.utk.edu/cran/<br></code></pre></td></tr></table></figure><hr><p>参考</p><p><a href="https://support.rstudio.com/hc/en-us/articles/200552316-Configuring-the-Server">https://support.rstudio.com/hc/en-us/articles/200552316-Configuring-the-Server</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> ubuntu </tag>
            
            <tag> r语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析 Ensembl 的数据库服务器</title>
      <link href="/posts/21034/"/>
      <url>/posts/21034/</url>
      
        <content type="html"><![CDATA[<p>Ensembl 对于学习生物信息学的我们来说应该是如数家珍了，但是我们平时常用到的操作一般是去查基因，下载基因组，这些都是通过网页端来完成：<a href="http://uswest.ensembl.org/index.html">http://uswest.ensembl.org/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6cea6989656e24e7c79ce3b454336506.png" alt="img"></p><p>上面网页展示的就像大家进入某宝商店中的商品展示图，而真正的货物是存放在仓库的。Ensemble 则是将其“货物”是存放在数据库服务器中。</p><p>理解 Ensembl 的数据库存储结构与架构，对于我们的今后的生信研究工作大有裨益。</p><p>接下来，我们进入 Ensembl 的数据仓库世界，去看看它的货物有哪些，我们怎么来使用这些数据。</p><h3 id="一、Ensembl-数据库服务器介绍"><a href="#一、Ensembl-数据库服务器介绍" class="headerlink" title="一、Ensembl 数据库服务器介绍"></a>一、Ensembl 数据库服务器介绍</h3><p>Ensembl 一共提供四个数据库服务器访问地址：</p><ul><li><p>ensembldb.ensembl.org：欧洲服务器，只有该服务器可访问 GRCh37 数据集</p></li><li><p>useastdb.ensembl.org：美洲服务器</p></li><li><p>asiadb.ensembl.org：亚洲服务器</p></li><li><p>martdb.ensembl.org：提供对 BioMart 数据库的公共访问</p></li></ul><p>这里提供了数据库匿名访问权限，不同于网页端僵硬的访问操作，数据库中我们可以更灵活地获取更细粒度的信息。</p><p>Ensemble 用到的数据库管理系统包括为人熟知的 MySQL 和 MariaDB。</p><p>这里说个小故事，便于理解 MySQL 和 MariaDB 的渊源：</p><p>MySQL 率先由麦克尔·维德纽斯主导开发，后来以 10 亿美元卖给了 SUN 公司。SUN公司就是那个拥有 java 语言版权的大佬，但经营不善由甲骨文公司收购。甲骨文公司的产品 Oracle 本身也是数据库管理软件，和 MySQL 有竞争。收购后，MySQL 开发社区马上意识到他们的软件 MySQL 有潜在闭源风险。于是，迈克尔率领社区成员构建新分支，并以自己女儿的名字玛利亚命名，即 MariaDB。</p><p>总的来看，二者师出同门，在使用方面方面并无本质区别。在存储引擎方面，MariaDB 10.0.9版起使用XtraDB 代替了 MySQL 的 InnoDB。</p><p>依据下面的请求信息，我们就可以登录 Ensemble 的数据库服务器。</p><table><thead><tr><th><strong>Server</strong></th><th><strong>User</strong></th><th><strong>Password</strong></th><th><strong>Port(s)</strong></th><th><strong>Version</strong></th><th><strong>Notes</strong></th></tr></thead><tbody><tr><td>ensembldb.ensembl.org</td><td>anonymous</td><td>-</td><td>3306 &amp; 5306</td><td>MySQL 5.6.33</td><td>From Ensembl <strong>48</strong> onwards only</td></tr><tr><td>useastdb.ensembl.org</td><td>anonymous</td><td>-</td><td>3306 &amp; 5306</td><td>MariaDB 10.0.30</td><td><strong>Current</strong> and <strong>previous</strong> Ensembl version only</td></tr><tr><td>asiadb.ensembl.org</td><td>anonymous</td><td>-</td><td>3306 &amp; 5306</td><td>MariaDB 10.0.30</td><td><strong>Current</strong> and <strong>previous</strong> Ensembl version only</td></tr><tr><td>martdb.ensembl.org</td><td>anonymous</td><td>-</td><td>5316</td><td>MariaDB 10.0.30</td><td>From Ensembl <strong>48</strong> onwards only</td></tr><tr><td>ensembldb.ensembl.org</td><td>anonymous</td><td>-</td><td>3337</td><td>MySQl 5.6.33</td><td>Databases for <strong>archive GRCh37</strong> - <strong>release 79 onwards</strong></td></tr><tr><td>ensembldb.ensembl.org</td><td>anonymous</td><td>-</td><td>4306</td><td>MySQL 4.1.20</td><td>Up to Ensembl <strong>47</strong> only</td></tr><tr><td>martdb.ensembl.org</td><td>anonymous</td><td>-</td><td>3316</td><td>MySQL 4.1.20</td><td>Up to Ensembl <strong>47</strong> only</td></tr></tbody></table><h3 id="二、连接数据库服务器"><a href="#二、连接数据库服务器" class="headerlink" title="二、连接数据库服务器"></a>二、连接数据库服务器</h3><p>1、这里使用 Navicat 作为连接工具，下载地址：</p><p><a href="https://www.navicat.com/en/download/navicat-premium">https://www.navicat.com/en/download/navicat-premium</a></p><p>2、左上角使用 MySQL 连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac7a3ceff2ddb70049b781eacaa9c416.png" alt="img"></p><p>3、填写连接信息</p><p>在国内推荐填写亚洲服务器地址，提高访问速度</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f40a6f8801db0bafe39341e5bf8fbb6a.png" alt="img"></p><p>4、打开连接，即可看到其中的数据库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9115d88511ce6d7598dc7ac03fb07582.png" alt="img"></p><p>5、打开人类最新数据库</p><p>数据库命名规则：<em>物种拉丁名_功能库名_架构版本_基因组版本</em></p><p>比如：homo_sapiens_core_104_38</p><p>代表：人类 hg38基因组的 Ensembl 104 版本架构数据库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e8e418e23917b44034bd8da43c78fbd.png" alt="img"></p><h3 id="三、Ensemble-Core-数据库维度模型"><a href="#三、Ensemble-Core-数据库维度模型" class="headerlink" title="三、Ensemble Core 数据库维度模型"></a>三、Ensemble Core 数据库维度模型</h3><p>这里我们以 Ensemble 的核心数据库为例，来简单看下它的架构，作为 Ensemble 最基本的库，它承担着序列，基因，与注释信息的记录任务。</p><p>为了方便理解，从逻辑上分为六种数据表：</p><ul><li><p>Assembly Tables</p></li><li><p>External References</p></li><li><p>Features</p></li><li><p>Fundamental Tables</p></li><li><p>ID Mapping</p></li><li><p>Misc</p></li></ul><p>如下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2bd6206c271f523e282d8d307af7f4c6.png" alt="img"></p><p>我们以其中最重要的 Fundamental Tables 为例，从数据维度模型的角度，由易到难来看看 Ensemble 是怎样组织数据的，便于我们今后利用其进行研究工作。</p><h3 id="1、星型"><a href="#1、星型" class="headerlink" title="1、星型"></a>1、星型</h3><p>这应该是最基本的维度模型，由简单事实和维度表构成。</p><p>以事实表为核心，所有维度度表关联到事实表，呈现星型分布。一般是构建数据库的基础模型。下图中展示了简化后的 Fundamental Tables 的 ER 图。</p><p><strong>gene</strong></p><p>该表记录有关基因名，序列类型，序列起止等信息，以 gene_id 为主键</p><p><strong>alt_allele</strong></p><p>可能是直系同源的等位基因的信息存储在这里，与 gene 表以 alt_allele_id 连接</p><p><strong>gene_attrib</strong></p><p>用于启用基因属性表</p><p>可以看到所有基因信息并不是用一张表存储，而是用主键，外键链接，用于降低冗余，符合范式要求</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3670bdd86c8d25781edfea56b1630079.png" alt="img"></p><h3 id="2、雪花型"><a href="#2、雪花型" class="headerlink" title="2、雪花型"></a>2、雪花型</h3><p>在星型基础上，进一步分解维度表，有点“套娃维度表”那味儿。</p><p>但是，这种模型会增加代码量，维护成本高，性能也差，尤其使用 Hadoop 时，性能差距会加大，因此如果做库时一般不推荐单独使用。</p><p>这里的表同样与上述结构类似，由于等位基因还需要更多维度的信息，因此加入一个新表用于解释 alt_allele 表。</p><p><strong>alt_allele_attrib</strong></p><p>这里会标注了等位基因的所有不同属性，增加了 alt_allele 信息维度，使信息更清晰全面。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e782e565480e3b17931d6b3ee671659c.png" alt="img"></p><h3 id="3、星系型"><a href="#3、星系型" class="headerlink" title="3、星系型"></a>3、星系型</h3><p>多个事实表的雪花型的组合。</p><p>特征就是多个事实表会共享维度表，也是构建数据库的常用模型。</p><p>在这里利用上面的逻辑理一理，大概就能看懂下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/43a1fdea9251b18c1abb47b4e9d5f18e.png" alt="img"></p><p>而实际上，Ensemble 也就是使用这样的星系型维度模型构建。</p><p>对于生信数据分析人员来说，使用时只要找到我们关心的事实表，依次找到维度表，从而快速拿到全面，清晰的即时数据，便于我们用到今后的生信数据分析工作中。</p><p>更多生信数据库知识会更新于：<a href="https://zhenglei.blog.csdn.net/">https://zhenglei.blog.csdn.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> big data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归一化与标准化</title>
      <link href="/posts/56013/"/>
      <url>/posts/56013/</url>
      
        <content type="html"><![CDATA[<h2 id="一、归一化"><a href="#一、归一化" class="headerlink" title="一、归一化"></a>一、归一化</h2><p>对原始数据缩放到 0-1 之间，是线性变换。也叫最大最小标准化，离散标准化。</p><p>区间也可以设置为其他，一般为 0 - 1。</p><h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><p>$$ X &#x3D; \frac{x-min}{max-min } $$</p><p>min 为数据最小值，max 为数据最大值，x 为原始数据值，X 为归一化后的值。</p><p>$$ x &#x3D; X^{\prime}(max-min)+min $$</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>虽然归一化可以保留原始数据中存在的关系，但是计算用到的最大值与最小值非常容易受异常点影响，所以只适合精确小数据量。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>使用 sklearn 包来实现归一化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">from sklearn.preprocessing import MinMaxScaler<br>preprocess = MinMaxScaler()<br>raw_data = [[10, 10, 100, 1000],<br>            [5, 1, 21, 5],<br>            [1, 2, 15, 1]]<br>data = preprocess.fit_transform(raw_data)<br></code></pre></td></tr></table></figure><p>会输出 array 数据格式，可以看到最后一列中的 1000 由于数据值太大，导致 5 相对其来说只能得到 0.004，在实际数据中，如果 1000 为噪声数据就会极大的影响最终的分析结果。当然，如果数据准确且数据较少的情况下，推荐使用该方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Out[3]: <br>array([[1.        , 1.        , 1.        , 1.        ],<br>       [0.44444444, 0.        , 0.07058824, 0.004004  ],<br>       [0.        , 0.11111111, 0.        , 0.        ]])<br></code></pre></td></tr></table></figure><p>使用 pandas 包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">import pandas as pd<br>df = pd.DataFrame([[10, 10, 100, 1000],<br>            [5, 1, 21, 5],<br>            [1, 2, 15, 1]])<br># 方法一：<br>df1 = df.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)), axis=0)<br># 方法二：<br>df2 = (df - df.min()) / (df.max() - df.min())<br></code></pre></td></tr></table></figure><p>方法一输出，与 sklearn 结果一致，格式为 dataframe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">          0         1         2         3<br>0  1.000000  1.000000  1.000000  1.000000<br>1  0.444444  0.000000  0.070588  0.004004<br>2  0.000000  0.111111  0.000000  0.000000<br></code></pre></td></tr></table></figure><p>方法二输出，与 sklearn 结果一致，格式为 dataframe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">          0         1         2         3<br>0  1.000000  1.000000  1.000000  1.000000<br>1  0.444444  0.000000  0.070588  0.004004<br>2  0.000000  0.111111  0.000000  0.000000<br></code></pre></td></tr></table></figure><h2 id="二、z-score-标准化"><a href="#二、z-score-标准化" class="headerlink" title="二、z-score 标准化"></a>二、z-score 标准化</h2><p>标准化方法很多，今天先介绍使用最多的 z-score 标准化。</p><p>这种方法是将原始数据变换到均值为 0，方差为 1 的范围内。</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>$$ X&#x3D;\frac{x-mean}{\sigma} $$<br>$$ \sigma&#x3D;\sqrt{std}&#x3D;\sqrt{\frac{(x_1-mean)^2+(x_2-mean)^2+{\cdots}+(x_n-mean)^2}{n}} $$</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>对于大数据样本量，如果出现异常点，少量异常点对于平均值影响小，方差也小，对最终结果影响不大。因此，该方法适合样本量大，数据噪点多的数据集</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">from sklearn.preprocessing import StandardScaler<br>preprocess = StandardScaler()<br>raw_data = [[10, 10, 100, 1000],<br>            [5, 1, 21, 5],<br>            [1, 2, 15, 1]]<br>data = preprocess.fit_transform(raw_data)<br>data.mean_<br>data.std_<br># 标准差<br>df.std()<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">array([[ 1.26750044,  1.40693001,  1.41138272,  1.41420503],<br>       [-0.09053575, -0.82760589, -0.62823743, -0.70284713],<br>       [-1.1769647 , -0.57932412, -0.78314529, -0.71135789]])<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> sklearn </tag>
            
            <tag> 归一化 </tag>
            
            <tag> 标准化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex 监听数组或对象</title>
      <link href="/posts/28640/"/>
      <url>/posts/28640/</url>
      
        <content type="html"><![CDATA[<p><code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: Zheng Lei</span><br><span class="hljs-comment"> * @Email: baimoc@163.com</span><br><span class="hljs-comment"> * @Date: 2020-06-14 09:47:03</span><br><span class="hljs-comment"> * @LastEditTime: 2021-08-12 17:20:02</span><br><span class="hljs-comment"> * @FilePath: \EmAtlas\src\store.js</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">obj_data</span>: [],<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">objMutation</span>(<span class="hljs-params">state, data</span>)&#123;<br>            state.<span class="hljs-property">obj_data</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: Zheng Lei</span><br><span class="hljs-comment"> * @Email: baimoc@163.com</span><br><span class="hljs-comment"> * @Date: 2020-06-14 09:47:03</span><br><span class="hljs-comment"> * @LastEditTime: 2021-08-12 17:20:02</span><br><span class="hljs-comment"> * @FilePath: \EmAtlas\src\store.js</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">obj_data</span>: [],<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">objMutation</span>(<span class="hljs-params">state, data</span>)&#123;<br>            state.<span class="hljs-property">obj_data</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>        &#125;,<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>A组件</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;objMutation&#x27;</span>, current_obj_data);<br></code></pre></td></tr></table></figure><p><code>B组件</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-string">&#x27;$store.state.obj_data&#x27;</span>(val)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-string">&#x27;$store.state.obj_data&#x27;</span>(val)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);<br>    &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保姆级 IGV 基因组浏览器使用指南（图文详解）</title>
      <link href="/posts/6657/"/>
      <url>/posts/6657/</url>
      
        <content type="html"><![CDATA[<h2 id="一、软件下载"><a href="#一、软件下载" class="headerlink" title="一、软件下载"></a>一、软件下载</h2><p><a href="http://software.broadinstitute.org/software/igv/download">http://software.broadinstitute.org/software/igv/download</a></p><p>这里以下载 Windows 版本为例，下载带有 Java 的版本，方便安装。 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/8234dd228056163e31498c4d38df7488.png" alt="img"></p><blockquote><p>由于大部分数据是通过服务器跑出的结果，所以也有小伙伴有在 Linux 服务器端使用的需求。这里推荐几种方式：</p><ul><li>配合远程控制软件来使用，国产推荐 Todesk，向日葵</li><li>话说目前有部分单位禁止远程软件，推荐结合 Jupyter 来使用</li><li>建立 FTP 来通过 url 访问</li></ul></blockquote><p>建议最好安装在固态硬盘所在分区，提高加载速度。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/848d9a74c1d8d289d757a4f0a4003577.png" alt="img"></p><p>如果没有在桌面找到 IGV 软件，按住 <code>Win</code> 键，搜索 <code>igv</code> 可以找到并运行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cc28405d37dd51e1e2382aa073f07873.png" alt="img"></p><p>IGV 有下载文件的需求，所以通过网络访问权限</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8bec1ea679364d2554eb3eeab70411d0.png" alt="img"></p><h2 id="二、软件介绍"><a href="#二、软件介绍" class="headerlink" title="二、软件介绍"></a>二、软件介绍</h2><h3 id="1、数据载入"><a href="#1、数据载入" class="headerlink" title="1、数据载入"></a>1、数据载入</h3><p>为了方便介绍功能，我们需要先下载几个测试数据：</p><p>测试数据下载：</p><p>下面的数据来自人肝脏的 DNaseq 数据，分别为bigbed 文件与 bigwig 文件：</p><p>bigbed 文件：<a href="https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE172690&format=file&file=GSE172690_ENCFF812QNX_peaks_mm10.bigBed">https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE172690&format=file&file=GSE172690%5FENCFF812QNX%5Fpeaks%5Fmm10%2EbigBed</a></p><p>bigwig 文件：<a href="https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE172690&format=file&file=GSE172690_ENCFF705ESF_read-depth_normalized_signal_mm10.bigWig">https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE172690&format=file&file=GSE172690%5FENCFF705ESF%5Fread%2Ddepth%5Fnormalized%5Fsignal%5Fmm10%2EbigWig</a></p><blockquote><p>想了解更多基因组相关文件格式：<a href="https://blog.csdn.net/u011262253/article/details/109367884">https://blog.csdn.net/u011262253/article/details/109367884</a></p></blockquote><p>载入数据：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5058db400fc1edde4fe4c847f3b4a82b.png" alt="img"></p><p>成功载入数据</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92db19599f0b5da825e1672a6b1912f0.png" alt="img"></p><p>切换其中一个染色体：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/142b9f1fe7ac36c10b076e69fa5cde08.png" alt="img"></p><h3 id="2、软件面板"><a href="#2、软件面板" class="headerlink" title="2、软件面板"></a>2、软件面板</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/28589b2143f54ad948c817b8b077296f.png" alt="img"></p><p>这里分五大部分来介绍：</p><ul><li><p>工具栏</p></li><li><p>轨迹信息栏</p></li><li><p>基因组窗口</p></li><li><p>轨迹窗口</p></li><li><p>基因窗口</p></li></ul><h4 id="1、工具栏"><a href="#1、工具栏" class="headerlink" title="1、工具栏"></a>1、工具栏</h4><p>从左到右依次为划分为三个小工具：</p><p><strong>参考基因组工具</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5d5645680f72f554318211579e28409d.png" alt="img"></p><p>a. 选择参考基因组物种及版本，如果没有本地版本，需要联网下载</p><p>b. 选择染色体编号</p><p>c. 搜索染色体区间，格式如图所示，最常用的功能还是输入感兴趣的基因，直接跳转到对应的位置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e3d43c009e06986c2cb71a8f0b6c80ba.png" alt="img"></p><p><strong>视图操作工具</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ef0a9b31ecbb726d4d41f9c8a0c87e72.png" alt="img"></p><p>依次为主页面，前一步，后一步，刷新，定义区域，Trace适屏，弹出信息显示</p><p><strong>缩放工具</strong></p><p>用于控制整个视图的缩放比例，快捷键</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3d3ab0a73fd302ccab7856d41694b73.png" alt="img"></p><h3 id="2、轨迹信息栏"><a href="#2、轨迹信息栏" class="headerlink" title="2、轨迹信息栏"></a>2、轨迹信息栏</h3><p>右键可以打开菜单，进一步修改，后面详细来研究。</p><h3 id="3、基因组窗口"><a href="#3、基因组窗口" class="headerlink" title="3、基因组窗口"></a>3、基因组窗口</h3><p>上部分为整条染色体，点击即可跳转该位置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/08f2043b050fb9bb18540ec6488af973.png" alt="img"></p><p>下半部分为目前染色体可见部分对于的染色体位置，用刻度线标识，单位为碱基数。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9bc5eeb2453bc1ac28d711b31aaea7c.png" alt="img"></p><h3 id="4、轨迹窗口"><a href="#4、轨迹窗口" class="headerlink" title="4、轨迹窗口"></a>4、轨迹窗口</h3><p>每一行代表一个样本的 Trace</p><h3 id="5、基因窗口"><a href="#5、基因窗口" class="headerlink" title="5、基因窗口"></a>5、基因窗口</h3><p>显示基因的特征区域，可以与 Trace 面板配合，来查看研究区域的生物学信号。</p><h2 id="三、常用操作"><a href="#三、常用操作" class="headerlink" title="三、常用操作"></a>三、常用操作</h2><h3 id="1、下载参考基因组及注释"><a href="#1、下载参考基因组及注释" class="headerlink" title="1、下载参考基因组及注释"></a>1、下载参考基因组及注释</h3><ul><li>左上角点击 <code>More</code>:</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/816407834d7424a58a01a4c55a348962.png" alt="img"></p><ul><li><p>搜索物种名及其参考基因组版本：</p><blockquote><p>更多参考基因组知识：<a href="https://blog.csdn.net/u011262253/article/details/117486244">https://blog.csdn.net/u011262253/article/details/117486244</a></p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/79e326cc5d013a99fb86581416d8a14f.png" alt="img"></p><ul><li>进入下载进度，这一步比较慢，建议科学上网或晚上挂着下载</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/23a8a5d71fe3ee2c043bce431f20a75a.png" alt="img"></p><h3 id="2、数据加载"><a href="#2、数据加载" class="headerlink" title="2、数据加载"></a>2、数据加载</h3><p>目前支持的格式包括：</p><ul><li>序列比对：bam，cram</li><li>基因组注释：bed, gtf, gff3, psl, bigbed</li><li>信号数据：wig, bedgraph, bigwig, tdf</li><li>拷贝数：seg</li></ul><p><strong>拖动文件到轨迹窗口</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5058db400fc1edde4fe4c847f3b4a82b.png" alt="img"></p><p><strong>本地文件载入</strong></p><p>右上角点击 <code>File</code> -&gt; <code>Load from File</code>，选择本地文件即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2e50997ce6f4ace8d8e20cfbefb81e4.png" alt="img"></p><p><strong>通过 URL 加载</strong></p><p>如谷歌的数据<code>gs://genomics-public-data/platinum-genomes/bam/NA12877_S1.bam</code>，自己有服务器最好建立 ftp 站点，方便查看</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d0dc420eae75e24d2ba911d8f970ed8.png" alt="img"></p><p><strong>通过官方服务器加载</strong></p><p>这里有一些公共项目的数据集，有兴趣的小伙伴可以多浏览</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2049ac1f129ad5cf4155085e534a4d0f.png" alt="img"></p><h3 id="3、搜索"><a href="#3、搜索" class="headerlink" title="3、搜索"></a>3、搜索</h3><p>在工具栏的搜索框输入，图中 C 的位置：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5d5645680f72f554318211579e28409d.png" alt="img"></p><p>有几种搜索方式：</p><ul><li>按基因组坐标搜索：<code>chr6:64,664,854-64,666,044</code></li><li>按基因名搜索：如 <code>pou5f1</code>，但是不支持别名等其他名称搜索</li><li>按突变搜索，支持两种格式：<ul><li>如<code>KRAS:G12C</code>，搜索 KRAS 第 12 个氨基酸上，从G 到 C 的突变。<code>*</code> 表示终止密码子</li><li>如 <code>123A&gt;T</code>，搜索 KRAS 第 123 个氨基酸，从 A 到 T 的突变</li></ul></li></ul><h3 id="4、放大缩小"><a href="#4、放大缩小" class="headerlink" title="4、放大缩小"></a>4、放大缩小</h3><ul><li>放大：<ul><li>双击轨迹窗口</li><li>按住 <code>Shift</code> 健，单击轨迹窗口</li><li>点击缩放工具 <code>+</code></li><li>在基因组标尺窗口按住左键滑动，选中区域便会放大</li></ul></li><li>缩小：按住 <code>Alt</code> 健，单击轨迹窗口</li></ul><h3 id="5、滚动平移"><a href="#5、滚动平移" class="headerlink" title="5、滚动平移"></a>5、滚动平移</h3><ul><li>水平移动<ul><li>按住左键在轨迹窗口左右拖动</li><li>点击基因组标尺或染色体图</li><li><code>←</code> 和 <code>→</code>键</li><li><code>Home</code> 和 <code>End</code> 键</li></ul></li><li>垂直滚动<ul><li>按住左键在轨迹窗口上下拖动</li><li><code>↑</code> 和 <code>↓</code> 键</li><li><code>Page Up</code> 和 <code>Page Down</code> 键</li></ul></li></ul><h3 id="6、右键菜单"><a href="#6、右键菜单" class="headerlink" title="6、右键菜单"></a>6、右键菜单</h3><p>在轨迹信息栏和基因窗口都可以右键呼出如下菜单栏，我们在出图时会依次用到<br><img src="https://img-blog.csdnimg.cn/img_convert/cec6dd7fa85a204984426012dfdb3027.png" alt="img"></p><h2 id="四、绘图"><a href="#四、绘图" class="headerlink" title="四、绘图"></a>四、绘图</h2><h3 id="1、折线图"><a href="#1、折线图" class="headerlink" title="1、折线图"></a>1、折线图</h3><p>右键选择折线图选项</p><p><img src="https://img-blog.csdnimg.cn/img_convert/263280618a148c3ed1e16a8f9de91c40.png" alt="img"></p><p>修改颜色</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4b6f1ead08c5cf08d889fb067462d46.png" alt="img"></p><p>设置颜色</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1fdfc50ac0675bf2ba934453c4fc987a.png" alt="img"></p><p>设置数据值域</p><p><img src="https://img-blog.csdnimg.cn/img_convert/be18525de6edeecccdaffc24c764cbab.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5b532489f236a7d895ae12a08f0b7efa.png" alt="img"></p><p>这里试试设置不同的数据范围，也就是值域，这里注意 Y 轴变化</p><ul><li><p>设置<code>Min</code>,<code>Mid</code>,<code>Max</code> 依次为 <code>0</code>,<code>0</code>,<code>0.2</code>，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/697c9f9cc550f92947dff0e8187964c1.png" alt="img"></p></li><li><p>设置<code>Min</code>,<code>Mid</code>,<code>Max</code> 依次为 <code>-0.2</code>,<code>0</code>,<code>0.2</code>，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f5d02de40c4fa67835550b2693bedd3e.png" alt="img"></p></li><li><p>设置<code>Min</code>,<code>Mid</code>,<code>Max</code> 依次为 <code>-1</code>,<code>0</code>,<code>1</code>，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7e64bf034d2f6e47a660800038e6f658.png" alt="img"></p></li></ul><p>最终效果如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a536ff797fa946f0e9197a8805d4451c.png" alt="img"></p><h3 id="2、散点图"><a href="#2、散点图" class="headerlink" title="2、散点图"></a>2、散点图</h3><p>切换到散点图选项</p><p><img src="https://img-blog.csdnimg.cn/img_convert/379bd547d565e6ecaccacb7575d66e96.png" alt="img"></p><p>设置同折线图，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ad587610e8114642e72f5e90b3b87b08.png" alt="img"></p><h3 id="3、条形图"><a href="#3、条形图" class="headerlink" title="3、条形图"></a>3、条形图</h3><p>切换到条形图</p><p><img src="https://img-blog.csdnimg.cn/img_convert/50b8aeaee8f379ba78bc06d6f18da4d2.png" alt="img"></p><p>设置同折线图，最终效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9907d287b0fb81cfc5c5e43de16ff2c.png" alt="img"></p><h3 id="4、热图"><a href="#4、热图" class="headerlink" title="4、热图"></a>4、热图</h3><p>选择热图选项</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4a0f2fe1136279cd94b6dec18b80928e.png" alt="img"></p><p>配置参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cfd7244ae75df7ffd1c830c28672c912.png" alt="img"></p><p>设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57b3b369f38a11dd3f61060c79990b4.png" alt="img"></p><p>效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5408879c899bba7d1f8a8bd74ed767e.png" alt="img"></p><p>总结一下，一共可以绘制四种图，包括：</p><p><strong>热图</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/201329409b4afb3d664fe24429b8d81d.png" alt="img"></p><p><strong>折线图</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/006d5816b158e0220ec551e497f53687.png" alt="img"></p><p><strong>条形图</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f65412790513a7c05b8f75d33dd80056.png" alt="img"></p><p><strong>散点图</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/65914b401dbacbde29f255668c7c4aeb.png" alt="img"></p><h3 id="5、基因"><a href="#5、基因" class="headerlink" title="5、基因"></a>5、基因</h3><p>右键可以打开设置菜单，一共有三种形式选择：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6e06f90bd76325a0fe6d82018dd80677.png" alt="img"></p><p><strong>堆叠形式</strong></p><p>多个转录本堆叠在一起显示</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1fdd2451b8ba8d64b6503c1d733229b9.png" alt="img"></p><p><strong>展开形式</strong></p><p>分别显示多条转录本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a90126bc9a304e372e75bd905cec334c.png" alt="img"></p><p><strong>压缩形式</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/eef9c702aedc0d00db603821d5cae1cc.png" alt="img"></p><h4 id="样本参数设置"><a href="#样本参数设置" class="headerlink" title="样本参数设置"></a>样本参数设置</h4><p><strong>基因特征显示</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/75c9ea916df05579f1ca1d06d0213d84.png" alt="img"></p><h3 id="6、保存图片"><a href="#6、保存图片" class="headerlink" title="6、保存图片"></a>6、<strong>保存图片</strong></h3><p>支持格式两种 png，svg。这两种格式导出后，用 PS 和 AI 修改后就是论文中常见的图啦。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ecbcf31abd449de80aa2c5764c070b4b.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 基因组浏览器 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> IGV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 命令 argument list too long 错误解决</title>
      <link href="/posts/50203/"/>
      <url>/posts/50203/</url>
      
        <content type="html"><![CDATA[<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ls | xargs -n 100 gunzip -f<br></code></pre></td></tr></table></figure><p>xargs 命令会将文件以每 100 个为一组来使用 gunzip 解压，同理 cp，mv，rm 等命令同样适用</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>使用以下命令解压了超过三十万个压缩文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">gunzip -f ./*.gz<br></code></pre></td></tr></table></figure><p>命令后的文件夹数量太多，导致命令行过长就会报该错</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ls *.fasta | xargs -n 10 sudo rm -rf<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | STAR（测序序列与参考序列比对）</title>
      <link href="/posts/33025/"/>
      <url>/posts/33025/</url>
      
        <content type="html"><![CDATA[<h2 id="零、介绍"><a href="#零、介绍" class="headerlink" title="零、介绍"></a>零、介绍</h2><ul><li>STAR （Spliced Transcripts Alignment to a Reference），用于将测序的 Read 对齐到参考基因组的比对软件，常用于 <strong>RNAseq</strong>。</li><li>因其具有<strong>较高的准确率</strong>，<strong>映射速度</strong>较其他比对软件高 50 多倍，因此作为 ENCODE 项目的御用 pipeline 工具。</li><li>它需要占用<strong>大量内存</strong>，对计算资源有较高的要求。</li><li>STAR 的默认参数针对<strong>哺乳动物基因组</strong>进行了优化</li></ul><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">conda install -c bioconda star<br></code></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1、建立索引"><a href="#1、建立索引" class="headerlink" title="1、建立索引"></a>1、建立索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">STAR --runMode genomeGenerate \<br>--runThreadN 50 \<br>--genomeDir ./hg38_index \<br>--genomeFastaFiles ./genome.fa \<br>--sjdbGTFfile ./genes.gtf \<br>--sjdbOverhang 99<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>–runMode genomeGenerate：基因组生成模式</li><li>–runThreadN：启用线程数</li><li>–genomeDir：索引输出路径</li><li>–genomeFastaFiles：参考基因组路径</li><li>–sjdbGTFfile：参考基因组注释文件</li><li>–sjdbOverhang：对于不同长度的读取，理想值为<code>--sjdbOverhang</code>max(ReadLength)-1。在大多数情况下，默认值 100 与理想值类似。</li></ul><h3 id="2、STAR-比对"><a href="#2、STAR-比对" class="headerlink" title="2、STAR 比对"></a>2、STAR 比对</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">STAR --outSAMtype BAM SortedByCoordinate \<br>--runThreadN 20 \<br>--genomeDir ./hg38_index \<br>--readFilesIn  seq_data_1.fastq seq_data_2.fastq \<br>--outFileNamePrefix ./seq_data<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>–runThreadN：启用线程数</li><li>–genomeDir：索引路径</li><li>–readFilesIn：输入 fastq 的文件路径</li><li>–outSAMtype BAM SortedByCoordinate：输出排序的 bam 文件</li><li>–outFileNamePrefix：输出文件前缀</li></ul><blockquote><p>STAR 的默认参数针对哺乳动物基因组进行了优化。**其他物种可能需要对某些对齐参数进行重大修改，尤其具有较小内含子的生物，必须减小最大和最小内含子大小</p></blockquote><h2 id="三、原理"><a href="#三、原理" class="headerlink" title="三、原理"></a>三、原理</h2><p>STAR 的比对算法需要两步：</p><ul><li>种子搜索</li><li>聚类，拼接，评分</li></ul><p><strong>种子搜索</strong></p><p>STAR 先搜索与参考基因组上，一个或多个位置完全匹配的最长序列。这些最长的匹配序列称为最大可映射前缀 (<em>Maximal Mappable Prefix，**MMP</em>)：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4638f0e21a8f4829ed1dddf982ca0cbb.png" alt="image"></p><p>匹配到的 Read 的不同部分称为“seed”。所以对齐到基因组的第一个 MMP 称为<em>seed1</em>。</p><p>随后 STAR 将再次仅搜索读数的未映射部分，以找到与参考基因组完全匹配的下一个最长序列 MMP，即<em>seed2，以此类推。</em></p><p><img src="https://img-blog.csdnimg.cn/img_convert/190cc489c12399ed9c1d77015fbb5045.png" alt="image"></p><p>这种 Read 顺序搜索是 STAR 算法效率的基础。</p><p>STAR 使用未压缩的后缀数组 (Suffix Array，SA) 来有效搜索 MMP，这允许针对最大的参考基因组进行快速搜索。其他较慢的比对软件使用的算法通常在拆分 Read 和执行比对之前搜索整个 Read 序列。</p><p><strong>意外情况是：</strong></p><ul><li>由于不匹配或缺失，STAR 没有为 Read 的每个部分找到精确匹配的序列，则之前的 MMP 将被扩展。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/6788b616a99862af240b527b0a6a12bd.png" alt="image"></p><ul><li>如果延伸没有给出良好的比对，那么质量差或接头序列（或其他污染序列）将被软剪切。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3b5fe398351f9341304d77691bd5fe39.png" alt="image"></p><h3 id="聚类、拼接和评分"><a href="#聚类、拼接和评分" class="headerlink" title="聚类、拼接和评分"></a>聚类、拼接和评分</h3><p>基于与一组‘anchor’种子或非多重映射种子的接近程度将种子聚集在一起，将单独的种子聚集在一起以创建完整的读取。</p><p>然后根据读取的最佳对齐方式将种子拼接在一起（基于不匹配、插入缺失、间隙等进行评分）。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/04a0ad3a449129419ad5f90921062e4c.png" alt="image"></p><hr><p><a href="https://github.com/alexdobin/STAR">https://github.com/alexdobin/STAR</a></p><p><a href="https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf">https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf</a></p><p><a href="https://academic.oup.com/bioinformatics/article/29/1/15/272537">https://academic.oup.com/bioinformatics/article/29/1/15/272537</a></p><p><a href="https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html">https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> 生信分析 </tag>
            
            <tag> STAR </tag>
            
            <tag> 比对软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单细胞分析的 Python 包 Scanpy（图文详解）</title>
      <link href="/posts/38214/"/>
      <url>/posts/38214/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>如果没有conda 基础，参考： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解（2021版）</a> </p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">pip install scanpy<br>conda install -y -c conda-forge leidenalg<br></code></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 载入包</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> scanpy <span class="hljs-keyword">as</span> sc<br><br><span class="hljs-comment"># 设置</span><br>sc.settings.verbosity = <span class="hljs-number">3</span>             <span class="hljs-comment"># 设置日志等级: errors (0), warnings (1), info (2), hints (3)</span><br>sc.logging.print_header()<br>sc.settings.set_figure_params(dpi=<span class="hljs-number">80</span>, facecolor=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br><span class="hljs-comment"># 用于存储分析结果文件的路径</span><br>results_file = <span class="hljs-string">&#x27;write/pbmc3k.h5ad&#x27;</span><br><br><span class="hljs-comment"># 载入文件</span><br>adata = sc.read_10x_mtx(<br>    <span class="hljs-string">&#x27;./filtered_gene_bc_matrices/hg19/&#x27;</span>,  <span class="hljs-comment"># mtx 文件目录</span><br>    var_names=<span class="hljs-string">&#x27;gene_symbols&#x27;</span>,             <span class="hljs-comment"># 使用 gene_symbols 作为变量名</span><br>    cache=<span class="hljs-literal">True</span>)                           <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 载入包</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> scanpy <span class="hljs-keyword">as</span> sc<br><br><span class="hljs-comment"># 设置</span><br>sc.settings.verbosity = <span class="hljs-number">3</span>             <span class="hljs-comment"># 设置日志等级: errors (0), warnings (1), info (2), hints (3)</span><br>sc.logging.print_header()<br>sc.settings.set_figure_params(dpi=<span class="hljs-number">80</span>, facecolor=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br><span class="hljs-comment"># 用于存储分析结果文件的路径</span><br>results_file = <span class="hljs-string">&#x27;write/pbmc3k.h5ad&#x27;</span><br><br><span class="hljs-comment"># 载入文件</span><br>adata = sc.read_10x_mtx(<br>    <span class="hljs-string">&#x27;./filtered_gene_bc_matrices/hg19/&#x27;</span>,  <span class="hljs-comment"># mtx 文件目录</span><br>    var_names=<span class="hljs-string">&#x27;gene_symbols&#x27;</span>,             <span class="hljs-comment"># 使用 gene_symbols 作为变量名</span><br>    cache=<span class="hljs-literal">True</span>)                           <span class="hljs-comment"># 写入缓存，可以更快的读取文件</span><br></code></pre></td></tr></table></figure><h3 id="2、预处理"><a href="#2、预处理" class="headerlink" title="2、预处理"></a>2、预处理</h3><p><strong>显示在所有细胞中在每个单细胞中产生最高计数分数的基因</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.highest_expr_genes(adata, n_top=<span class="hljs-number"><code class="language-hljs python">sc.pl.highest_expr_genes(adata, n_top=<span class="hljs-number">20</span>, )<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ccb384e0df583dd3a9723662482d1ce7.png" alt="image.png"></p><h4 id="过滤低质量细胞样本"><a href="#过滤低质量细胞样本" class="headerlink" title="过滤低质量细胞样本"></a>过滤低质量细胞样本</h4><p>过滤在少于三个细胞中表达，或一个细胞中表达少于200个基因的细胞样本</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pp.filter_cells(adata, min_genes=<span class="hljs-number">200</span>)<br>sc.pp.filter_genes(adata, min_cells=<span class="hljs-number"><code class="language-hljs python">sc.pp.filter_cells(adata, min_genes=<span class="hljs-number">200</span>)<br>sc.pp.filter_genes(adata, min_cells=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>过滤包含线粒体基因和表达基因过多的细胞</strong></p><p>线粒体基因的转录本比单个转录物分子大，并且不太可能通过细胞膜逃逸。因此，检测出高比例的线粒体基因，表明细胞质量差（Islam et al. 2014; Ilicic et al. 2016）。</p><p>表达基因过多可能是由于一个油滴包裹多个细胞，从而检测出比正常检测要多的基因数，因此要过滤这些细胞。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata.var[<span class="hljs-string">&#x27;mt&#x27;</span>] = adata.var_names.<span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;MT-&#x27;</span>)  <span class="hljs-comment"># 将线粒体基因标记为 mt</span><br>sc.pp.calculate_qc_metrics(adata, qc_vars=[<span class="hljs-string">&#x27;mt&#x27;</span>], percent_top=<span class="hljs-literal">None</span>, log1p=<span class="hljs-literal">False</span>, inplace=<span class="hljs-literal">True</span>)<br>sc.pl.violin(adata, [<span class="hljs-string">&#x27;n_genes_by_counts&#x27;</span>, <span class="hljs-string">&#x27;total_counts&#x27;</span>, <span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>],<br>             jitter=<span class="hljs-number">0.4</span>, multi_panel=<span class="hljs-literal"><code class="language-hljs python">adata.var[<span class="hljs-string">&#x27;mt&#x27;</span>] = adata.var_names.<span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;MT-&#x27;</span>)  <span class="hljs-comment"># 将线粒体基因标记为 mt</span><br>sc.pp.calculate_qc_metrics(adata, qc_vars=[<span class="hljs-string">&#x27;mt&#x27;</span>], percent_top=<span class="hljs-literal">None</span>, log1p=<span class="hljs-literal">False</span>, inplace=<span class="hljs-literal">True</span>)<br>sc.pl.violin(adata, [<span class="hljs-string">&#x27;n_genes_by_counts&#x27;</span>, <span class="hljs-string">&#x27;total_counts&#x27;</span>, <span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>],<br>             jitter=<span class="hljs-number">0.4</span>, multi_panel=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/35b0d7d405f47da9e81aa50327f75722.png" alt="image.png"></p><p>生成的三张小提琴图代表：表达基因的数量，每个细胞包含的表达量，线粒体基因表达量的百分比。</p><p>过滤</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.scatter(adata, x=<span class="hljs-string">&#x27;total_counts&#x27;</span>, y=<span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>)<br>sc.pl.scatter(adata, x=<span class="hljs-string">&#x27;total_counts&#x27;</span>, y=<span class="hljs-string"><code class="language-hljs python">sc.pl.scatter(adata, x=<span class="hljs-string">&#x27;total_counts&#x27;</span>, y=<span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>)<br>sc.pl.scatter(adata, x=<span class="hljs-string">&#x27;total_counts&#x27;</span>, y=<span class="hljs-string">&#x27;n_genes_by_counts&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fb77729c38ef08aa595a50b7b2fa1abb.png" alt="image.png"></p><p>过滤线粒体基因表达过多或总数过多的细胞，也就是红框标识的样本。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 获取线粒体基因占比在 5% 以下的细胞样本</span><br>adata = adata[adata.obs.pct_counts_mt &lt; <span class="hljs-number">5</span>, :]<br><span class="hljs-comment"># 获取表达基因数在 2500 以下的细胞样本</span><br>adata = adata[adata.obs.n_genes_by_counts &lt; <span class="hljs-number"><code class="language-hljs python"><span class="hljs-comment"># 获取线粒体基因占比在 5% 以下的细胞样本</span><br>adata = adata[adata.obs.pct_counts_mt &lt; <span class="hljs-number">5</span>, :]<br><span class="hljs-comment"># 获取表达基因数在 2500 以下的细胞样本</span><br>adata = adata[adata.obs.n_genes_by_counts &lt; <span class="hljs-number">2500</span>, :]<br></code></pre></td></tr></table></figure><h3 id="3、检测特异性基因"><a href="#3、检测特异性基因" class="headerlink" title="3、检测特异性基因"></a>3、检测特异性基因</h3><p><strong>归一化</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 归一化，使得不同细胞样本间可比</span><br>sc.pp.normalize_total(adata, target_sum=<span class="hljs-number"><code class="language-hljs python"><span class="hljs-comment"># 归一化，使得不同细胞样本间可比</span><br>sc.pp.normalize_total(adata, target_sum=<span class="hljs-number">1e4</span>)<br>sc.pp.log1p(adata)<br></code></pre></td></tr></table></figure><p><strong>存储数据</strong></p><p>将 AnnData 对象的 .raw 属性设置为归一化和对数化的原始基因表达，以便以后用于基因表达的差异测试和可视化。这只是冻结了 AnnData 对象的状态。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">adata.raw = adata<br></code></pre></td></tr></table></figure><p><strong>识别特异性基因</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 计算<br>sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)<br># 绘制特异性基因散点图<br>sc.pl.highly_variable_genes(adata)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bad51d40d3206ae25d099c87d955d0db.png" alt="image.png"></p><p><strong>获取只有特异性基因的数据集</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 获取只有特异性基因的数据集</span><br>adata = adata[:, adata.var.highly_variable]<br><span class="hljs-comment"># 回归每个细胞的总计数和表达的线粒体基因的百分比的影响。</span><br>sc.pp.regress_out(adata, [<span class="hljs-string">&#x27;total_counts&#x27;</span>, <span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>])<br><span class="hljs-comment"># 将每个基因缩放到单位方差。阈值超过标准偏差 10。</span><br>sc.pp.scale(adata, max_value=<span class="hljs-number"><code class="language-hljs python"><span class="hljs-comment"># 获取只有特异性基因的数据集</span><br>adata = adata[:, adata.var.highly_variable]<br><span class="hljs-comment"># 回归每个细胞的总计数和表达的线粒体基因的百分比的影响。</span><br>sc.pp.regress_out(adata, [<span class="hljs-string">&#x27;total_counts&#x27;</span>, <span class="hljs-string">&#x27;pct_counts_mt&#x27;</span>])<br><span class="hljs-comment"># 将每个基因缩放到单位方差。阈值超过标准偏差 10。</span><br>sc.pp.scale(adata, max_value=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="4、主成分分析（Principal-component-analysis）"><a href="#4、主成分分析（Principal-component-analysis）" class="headerlink" title="4、主成分分析（Principal component analysis）"></a>4、主成分分析（Principal component analysis）</h3><p>通过运行主成分分析 (PCA) 来降低数据的维数，可以对数据进行去噪并揭示不同分群的主因素。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 绘制 PCA 图</span><br>sc.tl.pca(adata, svd_solver=<span class="hljs-string">&#x27;arpack&#x27;</span>)<br>sc.pl.pca(adata, color=<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 绘制 PCA 图</span><br>sc.tl.pca(adata, svd_solver=<span class="hljs-string">&#x27;arpack&#x27;</span>)<br>sc.pl.pca(adata, color=<span class="hljs-string">&#x27;CST3&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d720be5662e63db031fd08aeabb59405.png" alt="image.png"></p><p>检查单个 PC 对数据总方差的贡献，这可以提供给我们应该考虑多少个 PC 以计算细胞的邻域关系的信息，例如用于后续的聚类函数 sc.tl.louvain() 或 tSNE 聚类 sc.tl.tsne()。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.pca_variance_ratio(adata, log=<span class="hljs-literal"><code class="language-hljs python">sc.pl.pca_variance_ratio(adata, log=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6aaaba49e4f3dd2c36f915ac77d0081d.png" alt="image.png"></p><h3 id="5、领域图，聚类图（Neighborhood-graph）"><a href="#5、领域图，聚类图（Neighborhood-graph）" class="headerlink" title="5、领域图，聚类图（Neighborhood graph）"></a>5、领域图，聚类图（Neighborhood graph）</h3><p>使用数据矩阵的 PCA 表示来计算细胞的邻域图。为了重现 Seurat 的结果，我们采用以下值。</p><p>建议使用 UMAP ，它可能比 tSNE 更忠实于流形的全局连通性，因此能更好地保留轨迹。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pp.neighbors(adata, n_neighbors=<span class="hljs-number">10</span>, n_pcs=<span class="hljs-number">40</span>)<br>sc.tl.umap(adata)<br><span class="hljs-comment"># 如果设置了 adata 的 .raw 属性时，下图显示了“raw”（标准化、对数化但未校正）基因表达矩阵。</span><br>sc.pl.umap(adata, color=[<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string"><code class="language-hljs python">sc.pp.neighbors(adata, n_neighbors=<span class="hljs-number">10</span>, n_pcs=<span class="hljs-number">40</span>)<br>sc.tl.umap(adata)<br><span class="hljs-comment"># 如果设置了 adata 的 .raw 属性时，下图显示了“raw”（标准化、对数化但未校正）基因表达矩阵。</span><br>sc.pl.umap(adata, color=[<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>])<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c6698f89e430e9bd18a3e5ed198c5665.png" alt="image.png"></p><p>为了绘制缩放矫正的基因表达聚类图，需要使用 use_raw&#x3D;False 参数。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.umap(adata, color=[<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>], use_raw=<span class="hljs-literal"><code class="language-hljs python">sc.pl.umap(adata, color=[<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>], use_raw=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e44ee97e0dc6278b92ad8d144462dd6a.png" alt="image.png"></p><p>目前还没有计算出各个细胞类群，下面进行聚类</p><p><strong>Leiden 图聚类</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 计算</span><br>sc.tl.leiden(adata)<br><span class="hljs-comment"># 绘制</span><br>sc.pl.umap(adata, color=[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 计算</span><br>sc.tl.leiden(adata)<br><span class="hljs-comment"># 绘制</span><br>sc.pl.umap(adata, color=[<span class="hljs-string">&#x27;leiden&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="6、检索标记基因"><a href="#6、检索标记基因" class="headerlink" title="6、检索标记基因"></a>6、检索标记基因</h3><p>先计算每个 leiden 分群中高度差异基因的排名，取排名前 25 的基因。</p><p>默认情况下，使用 AnnData 的 .raw 属性。</p><p><strong>T-test</strong></p><p>最简单和最快的方法是 t 检验。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;t-test&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal"><code class="language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;t-test&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5749da2aee0b774e074fb6f2e3e0a096.png" alt="image.png"></p><p><strong>Wilcoxon rank-sum</strong></p><p>Wilcoxon rank-sum (Mann-Whitney-U) 检验的结果非常相似，还可以使用其他的差异分析包，如 MAST、limma、DESeq2 和 diffxpy。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;wilcoxon&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"><code class="language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;wilcoxon&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存这次的数据结果</span><br>adata.write(results_file)<br></code></pre></td></tr></table></figure><p><strong>逻辑回归</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;logreg&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal"><code class="language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, method=<span class="hljs-string">&#x27;logreg&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, n_genes=<span class="hljs-number">25</span>, sharey=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>使用逻辑回归对基因进行排名 Natranos et al. (2018)，这里使用多变量方法，而传统的差异测试是单变量 Clark et al. (2014)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb6e86b96f6370844c891463a59286b8.png" alt="image.png"></p><p>除了仅由 t 检验发现的 IL7R 和由其他两种方法发现的 FCER1A 之外，所有标记基因都在所有方法中都得到了重现。</p><table><thead><tr><th>Louvain Group</th><th>Markers</th><th>Cell Type</th></tr></thead><tbody><tr><td>0</td><td>IL7R</td><td>CD4 T cells</td></tr><tr><td>1</td><td>CD14, LYZ</td><td>CD14+ Monocytes</td></tr><tr><td>2</td><td>MS4A1</td><td>B cells</td></tr><tr><td>3</td><td>CD8A</td><td>CD8 T cells</td></tr><tr><td>4</td><td>GNLY, NKG7</td><td>NK cells</td></tr><tr><td>5</td><td>FCGR3A, MS4A7</td><td>FCGR3A+ Monocytes</td></tr><tr><td>6</td><td>FCER1A, CST3</td><td>Dendritic Cells</td></tr><tr><td>7</td><td>PPBP</td><td>Megakaryocytes</td></tr></tbody></table><p>根据已知的标记基因，定义一个标记基因列表供以后参考：</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">marker_genes = [<span class="hljs-string">&#x27;IL7R&#x27;</span>, <span class="hljs-string">&#x27;CD79A&#x27;</span>, <span class="hljs-string">&#x27;MS4A1&#x27;</span>, <span class="hljs-string">&#x27;CD8A&#x27;</span>, <span class="hljs-string">&#x27;CD8B&#x27;</span>, <span class="hljs-string">&#x27;LYZ&#x27;</span>, <span class="hljs-string">&#x27;CD14&#x27;</span>,<br>                <span class="hljs-string">&#x27;LGALS3&#x27;</span>, <span class="hljs-string">&#x27;S100A8&#x27;</span>, <span class="hljs-string">&#x27;GNLY&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;KLRB1&#x27;</span>,<br>                <span class="hljs-string">&#x27;FCGR3A&#x27;</span>, <span class="hljs-string">&#x27;MS4A7&#x27;</span>, <span class="hljs-string">&#x27;FCER1A&#x27;</span>, <span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string"><code class="language-hljs python">marker_genes = [<span class="hljs-string">&#x27;IL7R&#x27;</span>, <span class="hljs-string">&#x27;CD79A&#x27;</span>, <span class="hljs-string">&#x27;MS4A1&#x27;</span>, <span class="hljs-string">&#x27;CD8A&#x27;</span>, <span class="hljs-string">&#x27;CD8B&#x27;</span>, <span class="hljs-string">&#x27;LYZ&#x27;</span>, <span class="hljs-string">&#x27;CD14&#x27;</span>,<br>                <span class="hljs-string">&#x27;LGALS3&#x27;</span>, <span class="hljs-string">&#x27;S100A8&#x27;</span>, <span class="hljs-string">&#x27;GNLY&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;KLRB1&#x27;</span>,<br>                <span class="hljs-string">&#x27;FCGR3A&#x27;</span>, <span class="hljs-string">&#x27;MS4A7&#x27;</span>, <span class="hljs-string">&#x27;FCER1A&#x27;</span>, <span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>]<br></code></pre></td></tr></table></figure><p>载入数据</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 使用 Wilcoxon Rank-Sum 测试结果重新加载已保存的对象</span><br>adata = sc.read(results_file)<br></code></pre></td></tr></table></figure><p>获取聚类分组和分数</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">result = adata.uns[<span class="hljs-string">&#x27;rank_genes_groups&#x27;</span>]<br>groups = result[<span class="hljs-string">&#x27;names&#x27;</span>].dtype.names<br>pd.DataFrame(<br>    &#123;group + <span class="hljs-string">&#x27;_&#x27;</span> + key[:<span class="hljs-number">1</span>]: result[key][group]<br>    <span class="hljs-keyword">for</span> group <span class="hljs-keyword">in</span> groups <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;names&#x27;</span>, <span class="hljs-string">&#x27;pvals&#x27;</span>]&#125;).head(<span class="hljs-number"><code class="language-hljs python">result = adata.uns[<span class="hljs-string">&#x27;rank_genes_groups&#x27;</span>]<br>groups = result[<span class="hljs-string">&#x27;names&#x27;</span>].dtype.names<br>pd.DataFrame(<br>    &#123;group + <span class="hljs-string">&#x27;_&#x27;</span> + key[:<span class="hljs-number">1</span>]: result[key][group]<br>    <span class="hljs-keyword">for</span> group <span class="hljs-keyword">in</span> groups <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;names&#x27;</span>, <span class="hljs-string">&#x27;pvals&#x27;</span>]&#125;).head(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d6488b91572f511fb988bd08cf0898ac.png" alt="image.png"></p><p><strong>Group 1 与 Group 2 比较，进行差异分析</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, groups=[<span class="hljs-string">&#x27;0&#x27;</span>], reference=<span class="hljs-string">&#x27;1&#x27;</span>, method=<span class="hljs-string">&#x27;wilcoxon&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, groups=[<span class="hljs-string">&#x27;0&#x27;</span>], n_genes=<span class="hljs-number"><code class="language-hljs python">sc.tl.rank_genes_groups(adata, <span class="hljs-string">&#x27;leiden&#x27;</span>, groups=[<span class="hljs-string">&#x27;0&#x27;</span>], reference=<span class="hljs-string">&#x27;1&#x27;</span>, method=<span class="hljs-string">&#x27;wilcoxon&#x27;</span>)<br>sc.pl.rank_genes_groups(adata, groups=[<span class="hljs-string">&#x27;0&#x27;</span>], n_genes=<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8935d2f5d522e9646e0fb8624970c834.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.rank_genes_groups_violin(adata, groups=<span class="hljs-string">&#x27;0&#x27;</span>, n_genes=<span class="hljs-number"><code class="language-hljs python">sc.pl.rank_genes_groups_violin(adata, groups=<span class="hljs-string">&#x27;0&#x27;</span>, n_genes=<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/256241c8c285944d164535f76f226023.png" alt="image.png"></p><p><strong>Group 0 与其余组的比较进行差异分析</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata = sc.read(results_file)<br>sc.pl.rank_genes_groups_violin(adata, groups=<span class="hljs-string">&#x27;0&#x27;</span>, n_genes=<span class="hljs-number"><code class="language-hljs python">adata = sc.read(results_file)<br>sc.pl.rank_genes_groups_violin(adata, groups=<span class="hljs-string">&#x27;0&#x27;</span>, n_genes=<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d5e4e3f2a0e2c92b4598db2d51b187f5.png" alt="image.png"></p><p><strong>跨类群比较基因</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.violin(adata, [<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>], groupby=<span class="hljs-string"><code class="language-hljs python">sc.pl.violin(adata, [<span class="hljs-string">&#x27;CST3&#x27;</span>, <span class="hljs-string">&#x27;NKG7&#x27;</span>, <span class="hljs-string">&#x27;PPBP&#x27;</span>], groupby=<span class="hljs-string">&#x27;leiden&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1cd9aa0d89d0e1166b1b11a6bde26224.png" alt="image.png"></p><p><strong>根据已知的细胞标记，注释细胞类型</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">new_cluster_names = [<br>    <span class="hljs-string">&#x27;CD4 T&#x27;</span>, <span class="hljs-string">&#x27;CD14 Monocytes&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;CD8 T&#x27;</span>,<br>    <span class="hljs-string">&#x27;NK&#x27;</span>, <span class="hljs-string">&#x27;FCGR3A Monocytes&#x27;</span>,<br>    <span class="hljs-string">&#x27;Dendritic&#x27;</span>, <span class="hljs-string">&#x27;Megakaryocytes&#x27;</span>]<br>adata.rename_categories(<span class="hljs-string">&#x27;leiden&#x27;</span>, new_cluster_names)<br>sc.pl.umap(adata, color=<span class="hljs-string">&#x27;leiden&#x27;</span>, legend_loc=<span class="hljs-string">&#x27;on data&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span>, frameon=<span class="hljs-literal">False</span>, save=<span class="hljs-string"><code class="language-hljs python">new_cluster_names = [<br>    <span class="hljs-string">&#x27;CD4 T&#x27;</span>, <span class="hljs-string">&#x27;CD14 Monocytes&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;CD8 T&#x27;</span>,<br>    <span class="hljs-string">&#x27;NK&#x27;</span>, <span class="hljs-string">&#x27;FCGR3A Monocytes&#x27;</span>,<br>    <span class="hljs-string">&#x27;Dendritic&#x27;</span>, <span class="hljs-string">&#x27;Megakaryocytes&#x27;</span>]<br>adata.rename_categories(<span class="hljs-string">&#x27;leiden&#x27;</span>, new_cluster_names)<br>sc.pl.umap(adata, color=<span class="hljs-string">&#x27;leiden&#x27;</span>, legend_loc=<span class="hljs-string">&#x27;on data&#x27;</span>, title=<span class="hljs-string">&#x27;&#x27;</span>, frameon=<span class="hljs-literal">False</span>, save=<span class="hljs-string">&#x27;.pdf&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f6ab7056c8db2b739d56ea0ce21bf24d.png" alt="image.png"></p><p><strong>可视化每个类群的标记基因</strong></p><p>气泡图显示：</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.dotplot(adata, marker_genes, groupby=<span class="hljs-string"><code class="language-hljs python">sc.pl.dotplot(adata, marker_genes, groupby=<span class="hljs-string">&#x27;leiden&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/73db633aaeaf8acff19d5626b929628f.png" alt="image.png"></p><p>小提琴图显示</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">sc.pl.stacked_violin(adata, marker_genes, groupby=<span class="hljs-string">&#x27;leiden&#x27;</span>, rotation=<span class="hljs-number"><code class="language-hljs python">sc.pl.stacked_violin(adata, marker_genes, groupby=<span class="hljs-string">&#x27;leiden&#x27;</span>, rotation=<span class="hljs-number">90</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4b7fb5f91b1f811bb2982f1f236420e0.png" alt="image.png"></p><h3 id="7、保存数据"><a href="#7、保存数据" class="headerlink" title="7、保存数据"></a>7、保存数据</h3><p><strong>保存压缩文件</strong></p><p>如果只想将其用于可视化的人共享此文件，减少文件大小的一种简单方法是删除缩放和校正的数据矩阵。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata.write(results_file, compression=<span class="hljs-string"><code class="language-hljs python">adata.write(results_file, compression=<span class="hljs-string">&#x27;gzip&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>保存为 h5ad 数据</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata.raw.to_adata().write(<span class="hljs-string"><code class="language-hljs python">adata.raw.to_adata().write(<span class="hljs-string">&#x27;./write/pbmc3k_withoutX.h5ad&#x27;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>读取使用 adata &#x3D; sc.read_h5ad(‘.&#x2F;write&#x2F;pbmc3k_withoutX.h5ad’)</p></blockquote><p><strong>导出数据子集</strong></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 导出聚类数据</span><br>adata.obs[[<span class="hljs-string">&#x27;n_counts&#x27;</span>, <span class="hljs-string">&#x27;louvain_groups&#x27;</span>]].to_csv(<span class="hljs-string">&#x27;./write/pbmc3k_corrected_louvain_groups.csv&#x27;</span>)<br><span class="hljs-comment"># 导出PCA数据</span><br>adata.obsm.to_df()[[<span class="hljs-string">&#x27;X_pca1&#x27;</span>, <span class="hljs-string">&#x27;X_pca2&#x27;</span>]].to_csv(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 导出聚类数据</span><br>adata.obs[[<span class="hljs-string">&#x27;n_counts&#x27;</span>, <span class="hljs-string">&#x27;louvain_groups&#x27;</span>]].to_csv(<span class="hljs-string">&#x27;./write/pbmc3k_corrected_louvain_groups.csv&#x27;</span>)<br><span class="hljs-comment"># 导出PCA数据</span><br>adata.obsm.to_df()[[<span class="hljs-string">&#x27;X_pca1&#x27;</span>, <span class="hljs-string">&#x27;X_pca2&#x27;</span>]].to_csv(<span class="hljs-string">&#x27;./write/pbmc3k_corrected_X_pca.csv&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="8、番外"><a href="#8、番外" class="headerlink" title="8、番外"></a>8、番外</h3><p>我之前在处理较多数据量的时候，会有些地方不一样，具体每个数据集的处理也会有比较大的自由度，比如：</p><p>在检测线粒体基因时，这里在质控时，已经把线粒体基因直接剔除。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/41c0439c4cc2d863f2dce5c47e0ad5d0.png" alt="image.png"></p><p>在做 UMAP 时，可以看到一些类群间的联系和轨迹。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cc84826e43089b3e89230802c4a48447.png" alt="image.png"></p><p>做 TSNE时，可以看到类群间比较干净利索，整体比较“饱满”。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3c6b0d6411c88b8476da145ce09c7706.png" alt="image.png"></p><p>其他 Scanpy 的使用教程：<br><a href="https://blog.csdn.net/u011262253/article/details/116070697">scanpy 单细胞分析包图文详解 01 | 深入理解 AnnData 数据结构</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 单细胞分析 </tag>
            
            <tag> Scanpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看并关闭端口</title>
      <link href="/posts/5273/"/>
      <url>/posts/5273/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">netstat -ap | grep 8002  # 8002端口号<br></code></pre></td></tr></table></figure><p>显示<br><img src="https://img-blog.csdnimg.cn/20210610221557679.png" alt="在这里插入图片描述"><br>关闭</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">kill -9 659044  # PID号  <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂参考基因组和基因组注释+最全下载方法</title>
      <link href="/posts/62598/"/>
      <url>/posts/62598/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是参考基因组和基因组注释？"><a href="#一、什么是参考基因组和基因组注释？" class="headerlink" title="一、什么是参考基因组和基因组注释？"></a>一、什么是参考基因组和基因组注释？</h2><p>先来理一理参考基因组，基因组注释文件间的关系。</p><p>自从 1990 启动的家喻户晓的人类基因组计划开始，全世界的科学家竭尽全力破译了第一个完整的人类基因组，从那时开始人类拿到了一本只有 ATCG 四个碱基书写的天书。后续人们逐步完善了基因组序列信息，并写在 Fasta 格式的文本文件“天书”中，这本<strong>天书</strong>就叫做<strong>参考基因组</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ccd6eb2e126c9efb7e0a8dc356676921.png" alt="image.png"></p><p>但是，直接拿天书来看是一脸懵逼的，于是大家开始利用实验技术手段开始着手解密这本天书，随后大量的基因以及非编码序列被人们详细的标记在参考基因组对应的位置。同时对该位置加入大量的注释细节，最终将这些信息写在 BED，GTF，GFF 格式的<strong>基因组注释</strong>文件 。所以也可以把基因组注释文件理解为<strong>字典</strong>，看不懂天书，翻翻字典就懂了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/69ee6dcaffc01df2ab3eede75809afb0.png" alt="image.png"><br>随着时间的推移，在更先进技术的加持下，在已经构建好的基因组和注释信息上不断增加，删减，修改，就有了不同的版本。而每一个版本的参考基因组都会对应有一个基因组注释文件（天书和字典一一对应），接下来我们看看参考基因组版本是怎么指定的。</p><h2 id="二、参考基因组版本命名"><a href="#二、参考基因组版本命名" class="headerlink" title="二、参考基因组版本命名"></a>二、参考基因组版本命名</h2><p>在讲参考基因组之前，需要提到一个组织参考基因组联盟（<strong>G</strong>enome <strong>R</strong>eference <strong>C</strong>onsortium），它是由 NCBI，EBI，桑格研究所等机构组成。GRC 利用最佳的技术装配，纠正，增加基因组序列，以此作为在生信分析领域作为参考的基因组。目前，该机构构建了人，小鼠，大鼠，斑马鱼，鸡的参考基因组。</p><p>人基因组官名叫 <code>GRCh38</code> （Genome Reference Consortium Human Build 38），GRCh38 在UCSC基因组浏览器中还有个小名 hg38，这个小名对于大多数人来说是更亲切熟悉的。GRCh38 在 GenBank 中叫 GCA_000001405.15，在 RefSeq 中叫 GCF_000001405.26，虽然 GRC 组织建议在所有出版物和工具中使用该编号，但事实是前两种 GRCh38 和 hg38 对生信分析更常见。</p><p>在不更改染色体坐标的情况下，向参考基因组添加或替换新序列，这种打补丁的方式，会在基因组版本后加 <code>.p</code> （patch）来命名。</p><p>这就像在王者荣耀，英雄联盟中，为了维持游戏热度，会大幅修改游戏架构，流程，世界观，图片，叫大版本更新，而定期对某些英雄的面板属性修正，作为补丁。</p><p>举个例子，GRCh38 的第九个补丁，正式版本叫做 Genome Reference Consortium Human Build 38 patch release 9，简称 GRCh38.p9。在 GenBank 编号为 GCA_000001405.24，RefSeq 编号为 GCF_000001405.35。在 Ensemble 编号为 GRCh38，NCBI 编号为 GRCh38。</p><h3 id="1、常用人参考基因组对应表"><a href="#1、常用人参考基因组对应表" class="headerlink" title="1、常用人参考基因组对应表"></a>1、常用人参考基因组对应表</h3><table><thead><tr><th>发布时间</th><th>2013</th><th>2009</th><th>2006</th></tr></thead><tbody><tr><td>GRC 官名</td><td>GRCh38</td><td>GRCh37</td><td>GRCh36</td></tr><tr><td>UCSC</td><td>hg38</td><td>hg19</td><td>hg18</td></tr><tr><td>Ensemble</td><td>GRCh38</td><td>GRCh37</td><td>GRCh36</td></tr><tr><td>GENCODE</td><td>38</td><td>19</td><td>3c</td></tr><tr><td>NCBI</td><td>GRCh38</td><td>GRCh37</td><td>GRCh36</td></tr><tr><td>GenBank</td><td>GCA_000001405</td><td></td><td></td></tr><tr><td>RefSeq</td><td>GCF_000001405</td><td></td><td></td></tr></tbody></table><p>根据 GRC 官网信息，GRCh39 大版本将会无限停更，他们在考虑用新模型和序列来构建人类的参考基因组，细节不清楚，猜测有可能会有泛基因组内容。</p><h3 id="2、常用小鼠参考基因组对应表"><a href="#2、常用小鼠参考基因组对应表" class="headerlink" title="2、常用小鼠参考基因组对应表"></a>2、常用小鼠参考基因组对应表</h3><table><thead><tr><th>发布时间</th><th>2020</th><th>2011</th><th>2007</th></tr></thead><tbody><tr><td>GRC 官名</td><td>GRCm39</td><td>GRCm38</td><td></td></tr><tr><td>UCSC</td><td>m39</td><td>mm10</td><td>mm9</td></tr><tr><td>Ensemble</td><td>GRCm39</td><td>GRCm38</td><td></td></tr><tr><td>GENCODE</td><td>M27</td><td>M25</td><td>M1</td></tr><tr><td>NCBI</td><td>GRCm39</td><td>GRCm38</td><td>NCBIM37</td></tr></tbody></table><h2 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h2><h3 id="1、NCBI"><a href="#1、NCBI" class="headerlink" title="1、NCBI"></a>1、NCBI</h3><p>这里提供两种下载方式，一种为网页界面下载，另一种为FTP下载。</p><p><strong>可视化下载</strong></p><ul><li>进入网址</li></ul><p><a href="https://www.ncbi.nlm.nih.gov/genome/browse#!/overview/">https://www.ncbi.nlm.nih.gov/genome/browse#!/overview/</a></p><ul><li>搜索物种</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/2e3c1ef04c05abb7f5616dde2043021f.png" alt="image.png"></p><ul><li>下载界面</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/b18afddb8d058c3a300c7b4fed229500.png" alt="image.png"></p><p><strong>FTP下载</strong></p><blockquote><p>随便提一下，Chrome 浏览器在18版本后由于安全原因已经不支持 ftp 协议，改用 https 协议，可以看到链接已经与之前的不同。</p></blockquote><p>这里以下载人的参考基因组 GRCh38 为例：</p><p><a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/reference/GCF_000001405.39_GRCh38.p13/">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian&#x2F;Homo_sapiens&#x2F;reference&#x2F;GCF_000001405.39_GRCh38.p13</a></p><p>人类基因组注释文件：</p><p>GTF 格式：<a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gtf.gz">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gtf.gz</a></p><p>GFF 格式：</p><p><a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gff.gz</a></p><p>如果以这种方式下载，其实已经可以路径中大概看出相关物种的下载地址，可以自行查询及下载其他物种。</p><h3 id="2、Ensemble"><a href="#2、Ensemble" class="headerlink" title="2、Ensemble"></a>2、Ensemble</h3><p><strong>可视化下载</strong></p><ul><li>网址：<a href="http://asia.ensembl.org/">http://asia.ensembl.org</a></li><li>点击物种名，进入下载界面</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/a8c077b0f5a440c0a427ed28da5b4731.png" alt="image.png"></p><ul><li>点击对应名称，下载参考基因组和基因组注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/396a1dcf91806028db1b47022ce8d336.png" alt="image.png"></p><p><strong>FTP下载</strong></p><p>同样以下载人参考基因组 GRCh38 为例：</p><p><a href="http://ftp.ensembl.org/pub/current_fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.toplevel.fa.gz">http://ftp.ensembl.org/pub/current_fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.toplevel.fa.gz</a></p><p>GTF 文件：<a href="http://ftp.ensembl.org/pub/current_gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz">http://ftp.ensembl.org/pub/current_gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz</a></p><p>GTT 文件：<a href="http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/Homo_sapiens.GRCh38.104.gff3.gz">http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/Homo_sapiens.GRCh38.104.gff3.gz</a></p><h3 id="3、GENCODE"><a href="#3、GENCODE" class="headerlink" title="3、GENCODE"></a>3、GENCODE</h3><p>如果小伙伴研究的物种只涉及人类和小鼠，极力推荐 GENCOE，这里有着相较其他数据库，最新最全的基因组和其注释信息。</p><ul><li>网址：<a href="https://www.gencodegenes.org/">https://www.gencodegenes.org/</a></li><li>点击人类的最新版</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/04e9d2d248eff86645f35bc5b0ae624c.png" alt="image.png"></p><ul><li>点击下载基因组注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/8d8945546bcab1ceacccb6c79ae9a0cf.png" alt="image.png"></p><ul><li>点击下载参考基因组文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9b44df3dda1e3d1653586c4a09056a43.png" alt="image.png"></p><h3 id="4、UCSC"><a href="#4、UCSC" class="headerlink" title="4、UCSC"></a>4、UCSC</h3><p>相对其他下载方式，UCSC 本职的工作是做基因组浏览器的，因此也可以从下图看到，在这里可以根据自己定义来下载相对于的基因组区域，比如 prime，exon，gene，transcript等等。</p><ul><li>网址：<a href="http://genome.ucsc.edu/cgi-bin/hgTables">http://genome.ucsc.edu/cgi-bin/hgTables</a></li><li>下载：设置参数如下，然后点击下载参考基因组及注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/835956085051350cf86fc3beec9f92df.png" alt="image.png"></p><h3 id="5、iGenomes"><a href="#5、iGenomes" class="headerlink" title="5、iGenomes"></a>5、iGenomes</h3><p>iGenomes是常见分析生物的参考序列和注释文件的集合。这些文件已从Ensembl，NCBI或UCSC下载。染色体名称已更改为简单且与下载源一致。每个iGenome都可以作为压缩文件使用，其中包含生物体的单个基因组构建的序列和注释文件。</p><p>网址：<a href="https://support.illumina.com/sequencing/sequencing_software/igenome.html">https://support.illumina.com/sequencing/sequencing_software/igenome.html</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/19712a471e44969c273c91b8ba2ff5a3.png" alt="image.png"></p><p>由亚马逊资助的生物信息参考基因组下载站点，有各种参考基因组，注释文件，软件索引等常用文件，并且有着极快的下载速度，但是缺点是只有常用的物种。</p><p><strong>站点：</strong><a href="https://ewels.github.io/AWS-iGenomes/">https://ewels.github.io/AWS-iGenomes/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0387a13f1c694ccd3461a975460e2909.png" alt="image.png"></p><h2 id="四、其他参考基因组信息"><a href="#四、其他参考基因组信息" class="headerlink" title="四、其他参考基因组信息"></a>四、其他参考基因组信息</h2><table><thead><tr><th>SPECIES</th><th>UCSC VERSION</th><th>RELEASE DATE</th><th>RELEASE NAME</th><th>STATUS</th></tr></thead><tbody><tr><td><strong>MAMMALS</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>Human</td><td>hg38</td><td>Dec. 2013</td><td>Genome Reference Consortium GRCh38</td><td>Available</td></tr><tr><td></td><td>hg19</td><td>Feb. 2009</td><td>Genome Reference Consortium GRCh37</td><td>Available</td></tr><tr><td></td><td>hg18</td><td>Mar. 2006</td><td>NCBI Build 36.1</td><td>Available</td></tr><tr><td></td><td>hg17</td><td>May 2004</td><td>NCBI Build 35</td><td>Available</td></tr><tr><td></td><td>hg16</td><td>Jul. 2003</td><td>NCBI Build 34</td><td>Available</td></tr><tr><td></td><td>hg15</td><td>Apr. 2003</td><td>NCBI Build 33</td><td>Archived</td></tr><tr><td></td><td>hg13</td><td>Nov. 2002</td><td>NCBI Build 31</td><td>Archived</td></tr><tr><td></td><td>hg12</td><td>Jun. 2002</td><td>NCBI Build 30</td><td>Archived</td></tr><tr><td></td><td>hg11</td><td>Apr. 2002</td><td>NCBI Build 29</td><td>Archived (data only)</td></tr><tr><td></td><td>hg10</td><td>Dec. 2001</td><td>NCBI Build 28</td><td>Archived (data only)</td></tr><tr><td></td><td>hg8</td><td>Aug. 2001</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg7</td><td>Apr. 2001</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg6</td><td>Dec. 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg5</td><td>Oct. 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg4</td><td>Sep. 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg3</td><td>Jul. 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg2</td><td>Jun. 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td></td><td>hg1</td><td>May 2000</td><td>UCSC-assembled</td><td>Archived (data only)</td></tr><tr><td>Alpaca</td><td>vicPac2</td><td>Mar. 2013</td><td>Broad Institute Vicugna_pacos-2.0.1</td><td>Available</td></tr><tr><td></td><td>vicPac1</td><td>Jul. 2008</td><td>Broad Institute VicPac1.0</td><td>Available</td></tr><tr><td>Armadillo</td><td>dasNov3</td><td>Dec. 2011</td><td>Broad Institute DasNov3</td><td>Available</td></tr><tr><td>Baboon</td><td>papAnu4</td><td>Apr. 2017</td><td>Human Genome Sequencing Center</td><td>Available</td></tr><tr><td></td><td>papAnu2</td><td>Mar. 2012</td><td>Baylor College of Medicine Panu_2.0</td><td>Available</td></tr><tr><td></td><td>papHam1</td><td>Nov. 2008</td><td>Baylor College of Medicine HGSC Pham_1.0</td><td>Available</td></tr><tr><td>Bison</td><td>bisBis1</td><td>Oct. 2014</td><td>Univ. of Maryland Bison_UMD1.0</td><td>Available</td></tr><tr><td>Bonobo</td><td>panPan3</td><td>May 2020</td><td>University of Washington</td><td>Available</td></tr><tr><td></td><td>panPan2</td><td>Dec. 2015</td><td>Max-Planck Institute for Evolutionary Anthropology panpan1.1</td><td>Available</td></tr><tr><td></td><td>panPan1</td><td>May 2012</td><td>Max-Planck Institute panpan1</td><td>Available</td></tr><tr><td>Brown kiwi</td><td>aptMan1</td><td>Jun. 2015</td><td>Max-Planck Institute for Evolutionary Anthropology AptMant0</td><td>Available</td></tr><tr><td>Bushbaby</td><td>otoGar3</td><td>Mar. 2011</td><td>Broad Institute OtoGar3</td><td>Available</td></tr><tr><td>Cat</td><td>felCat9</td><td>Nov. 2017</td><td>Genome Sequencing Center (GSC) at Washington University (WashU) School of Medicine Felis_catus_9.0</td><td>Available</td></tr><tr><td></td><td>felCat8</td><td>Nov. 2014</td><td>ICGSC Felis_catus_8.0</td><td>Available</td></tr><tr><td></td><td>felCat5</td><td>Sep. 2011</td><td>ICGSC Felis_catus-6.2</td><td>Available</td></tr><tr><td></td><td>felCat4</td><td>Dec. 2008</td><td>NHGRI catChrV17e</td><td>Available</td></tr><tr><td></td><td>felCat3</td><td>Mar. 2006</td><td>Broad Institute Release 3</td><td>Available</td></tr><tr><td>Chimp</td><td>panTro6</td><td>Jan. 2018</td><td>Clint_PTRv2</td><td>Available</td></tr><tr><td></td><td>panTro5</td><td>May 2016</td><td>CGSC Build 3.0</td><td>Available</td></tr><tr><td></td><td>panTro4</td><td>Feb. 2011</td><td>CGSC Build 2.1.4</td><td>Available</td></tr><tr><td></td><td>panTro3</td><td>Oct. 2010</td><td>CGSC Build 2.1.3</td><td>Available</td></tr><tr><td></td><td>panTro2</td><td>Mar. 2006</td><td>CGSC Build 2.1</td><td>Available</td></tr><tr><td></td><td>panTro1</td><td>Nov. 2003</td><td>CGSC Build 1.1</td><td>Available</td></tr><tr><td>Chinese hamster</td><td>criGri1</td><td>Jul. 2013</td><td>Beijing Genomics Institution-Shenzhen C_griseus_v1.0</td><td>Available</td></tr><tr><td>Chinese hamster ovary cell line</td><td>criGriChoV2</td><td>Jun. 2017</td><td>Eagle Genomics Ltd CHOK1S_HZDv1</td><td>Available</td></tr><tr><td></td><td>criGriChoV1</td><td>Aug. 2011</td><td>Beijing Genomics Institute CriGri_1.0</td><td>Available</td></tr><tr><td>Chinese pangolin</td><td>manPen1</td><td>Aug. 2014</td><td>Washington University (WashU) M_pentadactyla-1.1.1</td><td>Available</td></tr><tr><td>Cow</td><td>bosTau9</td><td>Apr. 2018</td><td>USDA ARS</td><td>Available</td></tr><tr><td></td><td>bosTau8</td><td>Jun. 2014</td><td>University of Maryland v3.1.1</td><td>Available</td></tr><tr><td></td><td>bosTau7</td><td>Oct. 2011</td><td>Baylor College of Medicine HGSC Btau_4.6.1</td><td>Available</td></tr><tr><td></td><td>bosTau6</td><td>Nov. 2009</td><td>University of Maryland v3.1</td><td>Available</td></tr><tr><td></td><td>bosTau4</td><td>Oct. 2007</td><td>Baylor College of Medicine HGSC Btau_4.0</td><td>Available</td></tr><tr><td></td><td>bosTau3</td><td>Aug. 2006</td><td>Baylor College of Medicine HGSC Btau_3.1</td><td>Available</td></tr><tr><td></td><td>bosTau2</td><td>Mar. 2005</td><td>Baylor College of Medicine HGSC Btau_2.0</td><td>Available</td></tr><tr><td></td><td>bosTau1</td><td>Sep. 2004</td><td>Baylor College of Medicine HGSC Btau_1.0</td><td>Archived</td></tr><tr><td>Crab-eating macaque</td><td>macFas5</td><td>Jun. 2013</td><td>Washington University Macaca_fascicularis_5.0</td><td>Available</td></tr><tr><td>Dog</td><td>canFam5</td><td>May 2019</td><td>University of Michigan</td><td>Available</td></tr><tr><td></td><td>canFam4</td><td>Mar. 2020</td><td>Uppsala University</td><td>Available</td></tr><tr><td></td><td>canFam3</td><td>Sep. 2011</td><td>Broad Institute v3.1</td><td>Available</td></tr><tr><td></td><td>canFam2</td><td>May 2005</td><td>Broad Institute v2.0</td><td>Available</td></tr><tr><td></td><td>canFam1</td><td>Jul. 2004</td><td>Broad Institute v1.0</td><td>Available</td></tr><tr><td>Dolphin</td><td>turTru2</td><td>Oct. 2011</td><td>Baylor College of Medicine Ttru_1.4</td><td>Available</td></tr><tr><td>Elephant</td><td>loxAfr3</td><td>Jul. 2009</td><td>Broad Institute LoxAfr3</td><td>Available</td></tr><tr><td>Ferret</td><td>musFur1</td><td>Apr. 2011</td><td>Ferret Genome Sequencing Consortium MusPutFur1.0</td><td>Available</td></tr><tr><td>Garter snake</td><td>thaSir1</td><td>Jun. 2015</td><td>Washington University Thamnophis_sirtalis-6.0</td><td>Available</td></tr><tr><td>Gibbon</td><td>nomLeu3</td><td>Oct. 2012</td><td>Gibbon Genome Sequencing Consortium Nleu3.0</td><td>Available</td></tr><tr><td></td><td>nomLeu2</td><td>Jun. 2011</td><td>Gibbon Genome Sequencing Consortium Nleu1.1</td><td>Available</td></tr><tr><td></td><td>nomLeu1</td><td>Jan. 2010</td><td>Gibbon Genome Sequencing Consortium Nleu1.0</td><td>Available</td></tr><tr><td>Golden eagle</td><td>aquChr2</td><td>Oct. 2014</td><td>University of Washington aquChr2-1.0.2</td><td>Available</td></tr><tr><td>Golden snub-nosed monkey</td><td>rhiRox1</td><td>Oct. 2014</td><td>Novogene Rrox_v1</td><td>Available</td></tr><tr><td>Gorilla</td><td>gorGor6</td><td>Aug. 2019</td><td>University of Washington</td><td>Available</td></tr><tr><td></td><td>gorGor5</td><td>Mar. 2016</td><td>University of Washington GSMRT3</td><td>Available</td></tr><tr><td></td><td>gorGor4</td><td>Dec. 2014</td><td>Wellcome Trust Sanger Institute gorGor4</td><td>Available</td></tr><tr><td></td><td>gorGor3</td><td>May 2011</td><td>Wellcome Trust Sanger Institute gorGor3.1</td><td>Available</td></tr><tr><td>Green Monkey</td><td>chlSab2</td><td>Mar. 2014</td><td>Vervet Genomics Consortium 1.1</td><td>Available</td></tr><tr><td>Guinea pig</td><td>cavPor3</td><td>Feb. 2008</td><td>Broad Institute cavPor3</td><td>Available</td></tr><tr><td>Hawaiian monk seal</td><td>neoSch1</td><td>Jun. 2017</td><td>Johns Hopkins University ASM220157v1</td><td>Available</td></tr><tr><td>Hedgehog</td><td>eriEur2</td><td>May 2012</td><td>Broad Institute EriEur2.0</td><td>Available</td></tr><tr><td></td><td>eriEur1</td><td>Jun. 2006</td><td>Broad Institute Draft_v1</td><td>Available</td></tr><tr><td>Horse</td><td>equCab3</td><td>Jan. 2018</td><td>University of Louisville</td><td>Available</td></tr><tr><td></td><td>equCab2</td><td>Sep. 2007</td><td>Broad Institute EquCab2</td><td>Available</td></tr><tr><td></td><td>equCab1</td><td>Jan. 2007</td><td>Broad Institute EquCab1</td><td>Available</td></tr><tr><td>Kangaroo rat</td><td>dipOrd1</td><td>Jul. 2008</td><td>Baylor&#x2F;Broad Institute DipOrd1.0</td><td>Available</td></tr><tr><td>Malayan flying lemur</td><td>galVar1</td><td>Jul. 2014</td><td>WashU G_variegatus-3.0.2</td><td>Available</td></tr><tr><td>Manatee</td><td>triMan1</td><td>Oct. 2011</td><td>Broad Institute TriManLat1.0</td><td>Available</td></tr><tr><td>Marmoset</td><td>calJac4</td><td>May 2020</td><td>Washington University Callithrix_jacchus_cj1700_1.1</td><td>Available</td></tr><tr><td>Marmoset</td><td>calJac3</td><td>Mar. 2009</td><td>WUSTL Callithrix_jacchus-v3.2</td><td>Available</td></tr><tr><td></td><td>calJac1</td><td>Jun. 2007</td><td>WUSTL Callithrix_jacchus-v2.0.2</td><td>Available</td></tr><tr><td>Megabat</td><td>pteVam1</td><td>Jul. 2008</td><td>Broad Institute Ptevap1.0</td><td>Available</td></tr><tr><td>Microbat</td><td>myoLuc2</td><td>Jul. 2010</td><td>Broad Institute MyoLuc2.0</td><td>Available</td></tr><tr><td>Minke whale</td><td>balAcu1</td><td>Oct. 2013</td><td>KORDI BalAcu1.0</td><td>Available</td></tr><tr><td>Mouse</td><td>mm39</td><td>Jun. 2020</td><td>Genome Reference Consortium Mouse Build 39</td><td>Available</td></tr><tr><td></td><td>mm10</td><td>Dec. 2011</td><td>Genome Reference Consortium GRCm38</td><td>Available</td></tr><tr><td></td><td>mm9</td><td>Jul. 2007</td><td>NCBI Build 37</td><td>Available</td></tr><tr><td></td><td>mm8</td><td>Feb. 2006</td><td>NCBI Build 36</td><td>Available</td></tr><tr><td></td><td>mm7</td><td>Aug. 2005</td><td>NCBI Build 35</td><td>Available</td></tr><tr><td></td><td>mm6</td><td>Mar. 2005</td><td>NCBI Build 34</td><td>Archived</td></tr><tr><td></td><td>mm5</td><td>May 2004</td><td>NCBI Build 33</td><td>Archived</td></tr><tr><td></td><td>mm4</td><td>Oct. 2003</td><td>NCBI Build 32</td><td>Archived</td></tr><tr><td></td><td>mm3</td><td>Feb. 2003</td><td>NCBI Build 30</td><td>Archived</td></tr><tr><td></td><td>mm2</td><td>Feb. 2002</td><td>MGSCv3</td><td>Archived</td></tr><tr><td></td><td>mm1</td><td>Nov. 2001</td><td>MGSCv2</td><td>Archived (data only)</td></tr><tr><td>Mouse lemur</td><td>micMur2</td><td>May 2015</td><td>Baylor&#x2F;Broad Institute Mmur_2.0</td><td>Available</td></tr><tr><td></td><td>micMur1</td><td>Jul. 2007</td><td>Broad Institute MicMur1.0</td><td>Available</td></tr><tr><td>Naked mole-rat</td><td>hetGla2</td><td>Jan. 2012</td><td>Broad Institute HetGla_female_1.0</td><td>Available</td></tr><tr><td></td><td>hetGla1</td><td>Jul. 2011</td><td>Beijing Genomics Institute HetGla_1.0</td><td>Available</td></tr><tr><td>Opossum</td><td>monDom5</td><td>Oct. 2006</td><td>Broad Institute release MonDom5</td><td>Available</td></tr><tr><td></td><td>monDom4</td><td>Jan. 2006</td><td>Broad Institute release MonDom4</td><td>Available</td></tr><tr><td></td><td>monDom1</td><td>Oct. 2004</td><td>Broad Institute release MonDom1</td><td>Available</td></tr><tr><td>Orangutan</td><td>ponAbe2</td><td>Jul. 2007</td><td>WUSTL Pongo_albelii-2.0.2</td><td>Available</td></tr><tr><td></td><td>ponAbe3</td><td>Jan. 2018</td><td>Susie_PABv2&#x2F;ponAbe3</td><td>Available</td></tr><tr><td>Panda</td><td>ailMel1</td><td>Dec. 2009</td><td>BGI-Shenzhen AilMel 1.0</td><td>Available</td></tr><tr><td>Pig</td><td>susScr11</td><td>Feb. 2017</td><td>Swine Genome Sequencing Consortium Sscrofa11.1</td><td>Available</td></tr><tr><td></td><td>susScr3</td><td>Aug. 2011</td><td>Swine Genome Sequencing Consortium Sscrofa10.2</td><td>Available</td></tr><tr><td></td><td>susScr2</td><td>Nov. 2009</td><td>Swine Genome Sequencing Consortium Sscrofa9.2</td><td>Available</td></tr><tr><td>Pika</td><td>ochPri3</td><td>May 2012</td><td>Broad Institute OchPri3.0</td><td>Available</td></tr><tr><td></td><td>ochPri2</td><td>Jul. 2008</td><td>Broad Institute OchPri2</td><td>Available</td></tr><tr><td>Platypus</td><td>ornAna2</td><td>Feb. 2007</td><td>WUSTL v5.0.1</td><td>Available</td></tr><tr><td></td><td>ornAna1</td><td>Mar. 2007</td><td>WUSTL v5.0.1</td><td>Available</td></tr><tr><td>Proboscis Monkey</td><td>nasLar1</td><td>Nov. 2014</td><td>Proboscis Monkey Functional Genome Consortium Charlie1.0</td><td>Available</td></tr><tr><td>Rabbit</td><td>oryCun2</td><td>Apr. 2009</td><td>Broad Institute release OryCun2</td><td>Available</td></tr><tr><td>Rat</td><td>rn7</td><td>Nov. 2020</td><td>Wellcome Sanger Institute mRatBN7.2</td><td>Available</td></tr><tr><td></td><td>rn6</td><td>Jul. 2014</td><td>RGSC Rnor_6.0</td><td>Available</td></tr><tr><td></td><td>rn5</td><td>Mar. 2012</td><td>RGSC Rnor_5.0</td><td>Available</td></tr><tr><td></td><td>rn4</td><td>Nov. 2004</td><td>Baylor College of Medicine HGSC v3.4</td><td>Available</td></tr><tr><td></td><td>rn3</td><td>Jun. 2003</td><td>Baylor College of Medicine HGSC v3.1</td><td>Available</td></tr><tr><td></td><td>rn2</td><td>Jan. 2003</td><td>Baylor College of Medicine HGSC v2.1</td><td>Archived</td></tr><tr><td></td><td>rn1</td><td>Nov. 2002</td><td>Baylor College of Medicine HGSC v1.0</td><td>Archived</td></tr><tr><td>Rhesus</td><td>rheMac10</td><td>Feb. 2019</td><td>The Genome Institute at Washington University School of Medicine Mmul_10</td><td>Available</td></tr><tr><td></td><td>rheMac8</td><td>Nov. 2015</td><td>Baylor College of Medicine HGSC Mmul_8.0.1</td><td>Available</td></tr><tr><td></td><td>rheMac3</td><td>Oct. 2010</td><td>Beijing Genomics Institute CR_1.0</td><td>Available</td></tr><tr><td></td><td>rheMac2</td><td>Jan. 2006</td><td>Baylor College of Medicine HGSC v1.0 Mmul_051212</td><td>Available</td></tr><tr><td></td><td>rheMac1</td><td>Jan. 2005</td><td>Baylor College of Medicine HGSC Mmul_0.1</td><td>Archived</td></tr><tr><td>Rock hyrax</td><td>proCap1</td><td>Jul. 2008</td><td>Baylor College of Medicine HGSC Procap1.0</td><td>Available</td></tr><tr><td>Sheep</td><td>oviAri4</td><td>Dec. 2015</td><td>ISGC Oar_v4.0</td><td>Available</td></tr><tr><td></td><td>oviAri3</td><td>Aug. 2012</td><td>ISGC Oar_v3.1</td><td>Available</td></tr><tr><td></td><td>oviAri1</td><td>Feb. 2010</td><td>ISGC Ovis aries 1.0</td><td>Available</td></tr><tr><td>Shrew</td><td>sorAra2</td><td>Aug. 2008</td><td>Broad Institute SorAra2.0</td><td>Available</td></tr><tr><td></td><td>sorAra1</td><td>Jun. 2006</td><td>Broad Institute SorAra1.0</td><td>Available</td></tr><tr><td>Sloth</td><td>choHof1</td><td>Jul. 2008</td><td>Broad Institute ChoHof1.0</td><td>Available</td></tr><tr><td>Squirrel</td><td>speTri2</td><td>Nov. 2011</td><td>Broad Institute SpeTri2.0</td><td>Available</td></tr><tr><td>Squirrel monkey</td><td>saiBol1</td><td>Oct. 2011</td><td>Broad Institute SaiBol1.0</td><td>Available</td></tr><tr><td>Tarsier</td><td>tarSyr2</td><td>Sep. 2013</td><td>WashU Tarsius_syrichta-2.0.1</td><td>Available</td></tr><tr><td></td><td>tarSyr1</td><td>Aug. 2008</td><td>WUSTL&#x2F;Broad Institute Tarsyr1.0</td><td>Available</td></tr><tr><td>Tasmanian devil</td><td>sarHar1</td><td>Feb. 2011</td><td>Wellcome Trust Sanger Institute Devil_refv7.0</td><td>Available</td></tr><tr><td>Tenrec</td><td>echTel2</td><td>Nov. 2012</td><td>Broad Institute EchTel2.0</td><td>Available</td></tr><tr><td></td><td>echTel1</td><td>Jul. 2005</td><td>Broad Institute echTel1</td><td>Available</td></tr><tr><td>Tree shrew</td><td>tupBel1</td><td>Dec. 2006</td><td>Broad Institute Tupbel1.0</td><td>Available</td></tr><tr><td>Wallaby</td><td>macEug2</td><td>Sep. 2009</td><td>Tammar Wallaby Genome Sequencing Consortium Meug_1.1</td><td>Available</td></tr><tr><td>White rhinoceros</td><td>cerSim1</td><td>May 2012</td><td>Broad Institute CerSimSim1.0</td><td>Available</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>VERTEBRATES</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>African clawed frog</td><td>xenLae2</td><td>Aug. 2016</td><td>Int. Xenopus Sequencing Consortium</td><td>Available</td></tr><tr><td>American alligator</td><td>allMis1</td><td>Aug. 2012</td><td>Int. Crocodilian Genomes Working Group allMis0.2</td><td>Available</td></tr><tr><td>Atlantic cod</td><td>gadMor1</td><td>May 2010</td><td>Genofisk GadMor_May2010</td><td>Available</td></tr><tr><td>Budgerigar</td><td>melUnd1</td><td>Sep. 2011</td><td>WUSTL v6.3</td><td>Available</td></tr><tr><td>Chicken</td><td>galGal6</td><td>Mar. 2018</td><td>GRCg6 Gallus-gallus-6.0</td><td>Available</td></tr><tr><td></td><td>galGal5</td><td>Dec. 2015</td><td>ICGC Gallus-gallus-5.0</td><td>Available</td></tr><tr><td></td><td>galGal4</td><td>Nov. 2011</td><td>ICGC Gallus-gallus-4.0</td><td>Available</td></tr><tr><td></td><td>galGal3</td><td>May 2006</td><td>WUSTL Gallus-gallus-2.1</td><td>Available</td></tr><tr><td></td><td>galGal2</td><td>Feb. 2004</td><td>WUSTL Gallus-gallus-1.0</td><td>Available</td></tr><tr><td>Coelacanth</td><td>latCha1</td><td>Aug. 2011</td><td>Broad Institute LatCha1</td><td>Available</td></tr><tr><td>Elephant shark</td><td>calMil1</td><td>Dec. 2013</td><td>IMCB Callorhinchus_milli_6.1.3</td><td>Available</td></tr><tr><td>Fugu</td><td>fr3</td><td>Oct. 2011</td><td>JGI v5.0</td><td>Available</td></tr><tr><td></td><td>fr2</td><td>Oct. 2004</td><td>JGI v4.0</td><td>Available</td></tr><tr><td></td><td>fr1</td><td>Aug. 2002</td><td>JGI v3.0</td><td>Available</td></tr><tr><td>Lamprey</td><td>petMar3</td><td>Dec. 2017</td><td>University of Kentucky Pmar_germline 1.0</td><td>Available</td></tr><tr><td></td><td>petMar2</td><td>Sep. 2010</td><td>WUGSC 7.0</td><td>Available</td></tr><tr><td></td><td>petMar1</td><td>Mar. 2007</td><td>WUSTL v3.0</td><td>Available</td></tr><tr><td>Lizard</td><td>anoCar2</td><td>May 2010</td><td>Broad Institute AnoCar2</td><td>Available</td></tr><tr><td></td><td>anoCar1</td><td>Feb. 2007</td><td>Broad Institute AnoCar1</td><td>Available</td></tr><tr><td>Medaka</td><td>oryLat2</td><td>Oct. 2005</td><td>NIG v1.0</td><td>Available</td></tr><tr><td>Medium ground finch</td><td>geoFor1</td><td>Apr. 2012</td><td>BGI GeoFor_1.0 &#x2F; NCBI 13302</td><td>Available</td></tr><tr><td>Nile tilapia</td><td>oreNil2</td><td>Jan. 2011</td><td>Broad Institute Release OreNil1.1</td><td>Available</td></tr><tr><td>Painted turtle</td><td>chrPic1</td><td>Dec. 2011</td><td>IPTGSC Chrysemys_picta_bellii-3.0.1</td><td>Available</td></tr><tr><td>Stickleback</td><td>gasAcu1</td><td>Feb. 2006</td><td>Broad Institute Release 1.0</td><td>Available</td></tr><tr><td>Tetraodon</td><td>tetNig2</td><td>Mar. 2007</td><td>Genoscope v7</td><td>Available</td></tr><tr><td></td><td>tetNig1</td><td>Feb. 2004</td><td>Genoscope v7</td><td>Available</td></tr><tr><td>Tibetan frog</td><td>nanPar1</td><td>Mar. 2015</td><td>Beijing Genomics Institute BGI_ZX_20015</td><td>Available</td></tr><tr><td>Turkey</td><td>melGal5</td><td>Nov. 2014</td><td>Turkey Genome Consortium v5.0</td><td>Available</td></tr><tr><td></td><td>melGal1</td><td>Dec. 2009</td><td>Turkey Genome Consortium v2.01</td><td>Available</td></tr><tr><td><em>X. tropicalis</em></td><td>xenTro9</td><td>Jul. 2016</td><td>JGI v.9.1</td><td>Available</td></tr><tr><td></td><td>xenTro7</td><td>Sep. 2012</td><td>JGI v.7.0</td><td>Available</td></tr><tr><td></td><td>xenTro3</td><td>Nov. 2009</td><td>JGI v.4.2</td><td>Available</td></tr><tr><td></td><td>xenTro2</td><td>Aug. 2005</td><td>JGI v.4.1</td><td>Available</td></tr><tr><td></td><td>xenTro1</td><td>Oct. 2004</td><td>JGI v.3.0</td><td>Available</td></tr><tr><td>Zebra finch</td><td>taeGut2</td><td>Feb. 2013</td><td>WashU taeGut324</td><td>Available</td></tr><tr><td></td><td>taeGut1</td><td>Jul. 2008</td><td>WUSTL v3.2.4</td><td>Available</td></tr><tr><td>Zebrafish</td><td>danRer11</td><td>May 2017</td><td>Genome Reference Consortium GRCz11</td><td>Available</td></tr><tr><td></td><td>danRer10</td><td>Sep. 2014</td><td>Genome Reference Consortium GRCz10</td><td>Available</td></tr><tr><td></td><td>danRer7</td><td>Jul. 2010</td><td>Sanger Institute Zv9</td><td>Available</td></tr><tr><td></td><td>danRer6</td><td>Dec. 2008</td><td>Sanger Institute Zv8</td><td>Available</td></tr><tr><td></td><td>danRer5</td><td>Jul. 2007</td><td>Sanger Institute Zv7</td><td>Available</td></tr><tr><td></td><td>danRer4</td><td>Mar. 2006</td><td>Sanger Institute Zv6</td><td>Available</td></tr><tr><td></td><td>danRer3</td><td>May 2005</td><td>Sanger Institute Zv5</td><td>Available</td></tr><tr><td></td><td>danRer2</td><td>Jun. 2004</td><td>Sanger Institute Zv4</td><td>Archived</td></tr><tr><td></td><td>danRer1</td><td>Nov. 2003</td><td>Sanger Institute Zv3</td><td>Archived</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>DEUTEROSTOMES</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><em>C. intestinalis</em></td><td>ci3</td><td>Apr. 2011</td><td>Kyoto KH</td><td>Available</td></tr><tr><td><em>C. intestinalis</em></td><td>ci2</td><td>Mar. 2005</td><td>JGI v2.0</td><td>Available</td></tr><tr><td></td><td>ci1</td><td>Dec. 2002</td><td>JGI v1.0</td><td>Available</td></tr><tr><td>Lancelet</td><td>braFlo1</td><td>Mar. 2006</td><td>JGI v1.0</td><td>Available</td></tr><tr><td><em>S. purpuratus</em></td><td>strPur2</td><td>Sep. 2006</td><td>Baylor College of Medicine HGSC v. Spur 2.1</td><td>Available</td></tr><tr><td></td><td>strPur1</td><td>Apr. 2005</td><td>Baylor College of Medicine HGSC v. Spur_0.5</td><td>Available</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>INSECTS</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><em>A. mellifera</em></td><td>apiMel2</td><td>Jan. 2005</td><td>Baylor College of Medicine HGSC v.Amel_2.0</td><td>Available</td></tr><tr><td></td><td>apiMel1</td><td>Jul. 2004</td><td>Baylor College of Medicine HGSC v.Amel_1.2</td><td>Available</td></tr><tr><td><em>A. gambiae</em></td><td>anoGam3</td><td>Oct. 2006</td><td>International Consortium for the Sequencing of Anopheles Genome AgamP3</td><td>Available</td></tr><tr><td></td><td>anoGam1</td><td>Feb. 2003</td><td>IAGP v.MOZ2</td><td>Available</td></tr><tr><td><em>D. ananassae</em></td><td>droAna2</td><td>Aug. 2005</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td></td><td>droAna1</td><td>Jul. 2004</td><td>TIGR Celera release</td><td>Available</td></tr><tr><td><em>D. erecta</em></td><td>droEre1</td><td>Aug. 2005</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td><em>D. grimshawi</em></td><td>droGri1</td><td>Aug. 2005</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td><em>D. melanogaster</em></td><td>dm6</td><td>Aug. 2014</td><td>BDGP Release 6 + ISO1 MT</td><td>Available</td></tr><tr><td></td><td>dm3</td><td>Apr. 2006</td><td>BDGP Release 5</td><td>Available</td></tr><tr><td></td><td>dm2</td><td>Apr. 2004</td><td>BDGP Release 4</td><td>Available</td></tr><tr><td></td><td>dm1</td><td>Jan. 2003</td><td>BDGP Release 3</td><td>Available</td></tr><tr><td><em>D. mojavensis</em></td><td>droMoj2</td><td>Aug. 2005</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td></td><td>droMoj1</td><td>Aug. 2004</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td><em>D. persimilis</em></td><td>droPer1</td><td>Oct. 2005</td><td>Broad Institute release</td><td>Available</td></tr><tr><td><em>D. pseudoobscura</em></td><td>dp3</td><td>Nov. 2004</td><td>FlyBase Release 1.0</td><td>Available</td></tr><tr><td></td><td>dp2</td><td>Aug. 2003</td><td>Baylor College of Medicine HGSC Freeze 1</td><td>Available</td></tr><tr><td><em>D. sechellia</em></td><td>droSec1</td><td>Oct. 2005</td><td>Broad Institute Release 1.0</td><td>Available</td></tr><tr><td><em>D. simulans</em></td><td>droSim1</td><td>Apr. 2005</td><td>WUSTL Release 1.0</td><td>Available</td></tr><tr><td><em>D. virilis</em></td><td>droVir2</td><td>Aug. 2005</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td></td><td>droVir1</td><td>Jul. 2004</td><td>Agencourt Arachne release</td><td>Available</td></tr><tr><td><em>D. yakuba</em></td><td>droYak2</td><td>Nov. 2005</td><td>WUSTL Release 2.0</td><td>Available</td></tr><tr><td></td><td>droYak1</td><td>Apr. 2004</td><td>WUSTL Release 1.0</td><td>Available</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>NEMATODES</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><em>C. brenneri</em></td><td>caePb2</td><td>Feb. 2008</td><td>WUSTL 6.0.1</td><td>Available</td></tr><tr><td></td><td>caePb1</td><td>Jan. 2007</td><td>WUSTL 4.0</td><td>Available</td></tr><tr><td><em>C. briggsae</em></td><td>cb3</td><td>Jan. 2007</td><td>WUSTL Cb3</td><td>Available</td></tr><tr><td></td><td>cb1</td><td>Jul. 2002</td><td>WormBase v. cb25.agp8</td><td>Available</td></tr><tr><td><em>C. elegans</em></td><td>ce11</td><td>Feb. 2013</td><td>C. elegans Sequencing Consortium WBcel235</td><td>Available</td></tr><tr><td></td><td>ce10</td><td>Oct. 2010</td><td>WormBase v. WS220</td><td>Available</td></tr><tr><td></td><td>ce6</td><td>May 2008</td><td>WormBase v. WS190</td><td>Available</td></tr><tr><td></td><td>ce4</td><td>Jan. 2007</td><td>WormBase v. WS170</td><td>Available</td></tr><tr><td></td><td>ce2</td><td>Mar. 2004</td><td>WormBase v. WS120</td><td>Available</td></tr><tr><td></td><td>ce1</td><td>May 2003</td><td>WormBase v. WS100</td><td>Archived</td></tr><tr><td><em>C. japonica</em></td><td>caeJap1</td><td>Mar. 2008</td><td>WUSTL 3.0.2</td><td>Available</td></tr><tr><td><em>C. remanei</em></td><td>caeRem3</td><td>May 2007</td><td>WUSTL 15.0.1</td><td>Available</td></tr><tr><td></td><td>caeRem2</td><td>Mar. 2006</td><td>WUSTL 1.0</td><td>Available</td></tr><tr><td><em>P. pacificus</em></td><td>priPac1</td><td>Feb. 2007</td><td>WUSTL 5.0</td><td>Available</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>OTHER</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>Sea Hare</td><td>aplCal1</td><td>Sep. 2008</td><td>Broad Release Aplcal2.0</td><td>Available</td></tr><tr><td>Yeast</td><td>sacCer3</td><td>April 2011</td><td>SGD April 2011 sequence</td><td>Available</td></tr><tr><td></td><td>sacCer2</td><td>June 2008</td><td>SGD June 2008 sequence</td><td>Available</td></tr><tr><td></td><td>sacCer1</td><td>Oct. 2003</td><td>SGD 1 Oct 2003 sequence</td><td>Available</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>VIRUSES</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>Ebola Virus</td><td>eboVir3</td><td>June 2014</td><td>Sierra Leone 2014 (G3683&#x2F;KM034562.1)</td><td>Available</td></tr><tr><td>SARS-CoV-2</td><td>wuhCor1</td><td>Jan. 2020</td><td>SARS-CoV-2 ASM985889v3</td><td>Available</td></tr></tbody></table><p><a href="https://www.ncbi.nlm.nih.gov/grc/human">https://www.ncbi.nlm.nih.gov/grc</a></p><p><a href="http://genomeref.blogspot.com/">http://genomeref.blogspot.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 二代测序 </tag>
            
            <tag> 参考基因组 </tag>
            
            <tag> 基因组注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scanpy 单细胞分析包图文详解 01 | 深入理解 AnnData 数据结构</title>
      <link href="/posts/47655/"/>
      <url>/posts/47655/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备："><a href="#一、环境准备：" class="headerlink" title="一、环境准备："></a>一、环境准备：</h2><p><a href="https://blog.csdn.net/u011262253/article/details/105902060">搭建 Python 高效开发环境： Pycharm + Anaconda</a> </p><h2 id="二、安装-scanpy"><a href="#二、安装-scanpy" class="headerlink" title="二、安装 scanpy"></a>二、安装 scanpy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">pip install scanpy<br></code></pre></td></tr></table></figure><h2 id="三、AnnData"><a href="#三、AnnData" class="headerlink" title="三、AnnData"></a>三、AnnData</h2><h4 id="1、AnnData-介绍与结构"><a href="#1、AnnData-介绍与结构" class="headerlink" title="1、AnnData 介绍与结构"></a>1、AnnData 介绍与结构</h4><p>AnnData 是用于存储数据的对象，一般作为 scanpy 的数据存储格式。 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/585b168d6cd2af08418e8c1643282461.png" alt="image.png"></p><p>主要由以下几部分构成：</p><table><thead><tr><th></th><th>功能</th><th>数据类型</th></tr></thead><tbody><tr><td>adata.X</td><td>矩阵数据</td><td>numpy，scipy sparse，matrix</td></tr><tr><td>adata.obs</td><td>观察值数据</td><td>pandas dataframe</td></tr><tr><td>adata.var</td><td>特征和高可变基因数据</td><td>pandas dataframe</td></tr><tr><td>adata.uns</td><td>非结构化数据</td><td>dict</td></tr></tbody></table><p>下面我们动手构建一个用于创建 AnnoData 的虚拟数据</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> anndata <span class="hljs-keyword">as</span> ad<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_uppercase<br><br><span class="hljs-comment"># 设置观测值数量</span><br>n_obs = <span class="hljs-number">1000</span><br><span class="hljs-comment"># 生成观察时间</span><br>obs = pd.DataFrame()<br>obs[<span class="hljs-string">&#x27;time&#x27;</span>] = np.random.choice([<span class="hljs-string">&#x27;day 1&#x27;</span>, <span class="hljs-string">&#x27;day 2&#x27;</span>, <span class="hljs-string">&#x27;day 4&#x27;</span>, <span class="hljs-string">&#x27;day 8&#x27;</span>], n_obs)<br><span class="hljs-comment"># 设置特征名</span><br>var_names = [i*letter <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> ascii_uppercase]<br><span class="hljs-comment"># 特征数量</span><br>n_vars = <span class="hljs-built_in">len</span>(var_names)<br><span class="hljs-comment"># 特征注释数据框</span><br>var = pd.DataFrame(index=var_names)<br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> anndata <span class="hljs-keyword">as</span> ad<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_uppercase<br><br><span class="hljs-comment"># 设置观测值数量</span><br>n_obs = <span class="hljs-number">1000</span><br><span class="hljs-comment"># 生成观察时间</span><br>obs = pd.DataFrame()<br>obs[<span class="hljs-string">&#x27;time&#x27;</span>] = np.random.choice([<span class="hljs-string">&#x27;day 1&#x27;</span>, <span class="hljs-string">&#x27;day 2&#x27;</span>, <span class="hljs-string">&#x27;day 4&#x27;</span>, <span class="hljs-string">&#x27;day 8&#x27;</span>], n_obs)<br><span class="hljs-comment"># 设置特征名</span><br>var_names = [i*letter <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> ascii_uppercase]<br><span class="hljs-comment"># 特征数量</span><br>n_vars = <span class="hljs-built_in">len</span>(var_names)<br><span class="hljs-comment"># 特征注释数据框</span><br>var = pd.DataFrame(index=var_names)<br><span class="hljs-comment"># 生成数据矩阵</span><br>X = np.arange(n_obs*n_vars).reshape(n_obs, n_vars)<br></code></pre></td></tr></table></figure><h4 id="2、AnnoData-初始化"><a href="#2、AnnoData-初始化" class="headerlink" title="2、AnnoData 初始化"></a>2、AnnoData 初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 初始化 AnnoData 对象</span><br><span class="hljs-comment"># AnnoData 对象默认使用数据类型为 `float32`, 可以更精确的存储数据</span><br><span class="hljs-comment"># 这里设置为整数，为了演示方便</span><br>adata = ad.AnnData(X, obs=obs, var=var, dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)<br><span class="hljs-comment"># 一般默认将变量或特征存储在数据框的行</span><br><span class="hljs-comment"># 查看数据</span><br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-comment"># 初始化 AnnoData 对象</span><br><span class="hljs-comment"># AnnoData 对象默认使用数据类型为 `float32`, 可以更精确的存储数据</span><br><span class="hljs-comment"># 这里设置为整数，为了演示方便</span><br>adata = ad.AnnData(X, obs=obs, var=var, dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)<br><span class="hljs-comment"># 一般默认将变量或特征存储在数据框的行</span><br><span class="hljs-comment"># 查看数据</span><br><span class="hljs-built_in">print</span>(adata)<br></code></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/7593650dd482fef9b05ae76f98f1eba8.png" alt="image.png"></h5><h5 id="3、AnnoData-切片特性"><a href="#3、AnnoData-切片特性" class="headerlink" title="3、AnnoData 切片特性"></a>3、AnnoData 切片特性</h5><p>可以看到 AnnData 具有和 dataframe 或 Array 相似的长相，同样具备相似的特性，比如切片：</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 通过切片查看观测值和变量</span><br><span class="hljs-built_in">print</span>(adata.obs_names[:<span class="hljs-number">10</span>].tolist())<br><span class="hljs-built_in">print</span>(adata.obs_names[-<span class="hljs-number">10</span>:].tolist())<br><span class="hljs-built_in">print</span>(adata.var_names[:<span class="hljs-number">10</span>].tolist())<br><span class="hljs-built_in">print</span>(adata.var_names[-<span class="hljs-number">10</span>:].tolist())<br><span class="hljs-comment"># 查看矩阵</span><br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-comment"># 通过切片查看观测值和变量</span><br><span class="hljs-built_in">print</span>(adata.obs_names[:<span class="hljs-number">10</span>].tolist())<br><span class="hljs-built_in">print</span>(adata.obs_names[-<span class="hljs-number">10</span>:].tolist())<br><span class="hljs-built_in">print</span>(adata.var_names[:<span class="hljs-number">10</span>].tolist())<br><span class="hljs-built_in">print</span>(adata.var_names[-<span class="hljs-number">10</span>:].tolist())<br><span class="hljs-comment"># 查看矩阵</span><br><span class="hljs-built_in">print</span>(X)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/78bf1c4146e6c3358673ad460de28562.png" alt="image.png"></p><h4 id="3、AnnoData-的-view-特性"><a href="#3、AnnoData-的-view-特性" class="headerlink" title="3、AnnoData 的 view 特性"></a>3、AnnoData 的 view 特性</h4><p>AnnoData 可以实现与 numpy 中的 view 相似的功能。</p><p>换句话说就是，我们每次操作 AnnoData 时，并不是再新建一个 AnnoData 来存储数据，而是直接找到已经之前初始化好的 AnnoData 的内存地址，通过内存地址来直接改变 AnnoData 的值。这样做的好处是：</p><ul><li>无需分配多余的内存</li><li>可以直接修改已经初始化后的 AnnoData 对象</li></ul><p>view 可以使用 .copy() 来得到 AnnoData 对象。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 查看 &#x27;A&#x27; 列的头三个元素</span><br><span class="hljs-built_in">print</span>(adata[:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>].X)<br><span class="hljs-comment"># 设置 &#x27;A&#x27; 列的头三个元素</span><br>adata[:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>].X = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment"># 查看 &#x27;A&#x27; 列的头五个元素</span><br><span class="hljs-built_in">print</span>(adata[:<span class="hljs-number">5</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 查看 &#x27;A&#x27; 列的头三个元素</span><br><span class="hljs-built_in">print</span>(adata[:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>].X)<br><span class="hljs-comment"># 设置 &#x27;A&#x27; 列的头三个元素</span><br>adata[:<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>].X = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment"># 查看 &#x27;A&#x27; 列的头五个元素</span><br><span class="hljs-built_in">print</span>(adata[:<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;A&#x27;</span>].X)<br></code></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/2645faf9f0740d294d4814b68c8282bf.png" alt="image.png"></h5><p>其实我们在调用 .[] 时，AnnoData已经在内部实现了该操作，也就是说该 view 会成为保存数据的 AnnoData 对象。</p><p>但是，如果将 AnnoData 对象的 view 中的一部分赋值，该内容会复制一份并生成新的数据存储对象。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata_subset = adata[:<span class="hljs-number">5</span>, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]]<br><span class="hljs-built_in">print</span>(adata_subset)<br>adata_subset.obs[<span class="hljs-string">&#x27;foo&#x27;</span>] = <span class="hljs-built_in">range</span>(<span class="hljs-number"><code class="language-hljs python">adata_subset = adata[:<span class="hljs-number">5</span>, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]]<br><span class="hljs-built_in">print</span>(adata_subset)<br>adata_subset.obs[<span class="hljs-string">&#x27;foo&#x27;</span>] = <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/ea5301589d451fbfa67234d22343da77.png" alt="image.png"></h5><p>可以看到，这时赋值会直接将 AnnoData 对象复制一份。现在 adata_subset 会重新得到一块内存用于存储实际数据，而不再仅仅是对 adata 的内存地址引用。</p><h5 id="4、备份到本地"><a href="#4、备份到本地" class="headerlink" title="4、备份到本地"></a>4、备份到本地</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 计算对象大小的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_size_in_MB</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.3&#125; MB&#x27;</span>.<span class="hljs-built_in">format</span>(x.__sizeof__()/<span class="hljs-number">1e6</span>))<br><span class="hljs-comment"># 查看 adata 对象大小</span><br>print_size_in_MB(adata)<br><span class="hljs-comment"># 查看是否备份</span><br>adata.isbacked<br><span class="hljs-comment"># 设置备份地址</span><br>adata.filename = <span class="hljs-string">&#x27;./write/test.h5ad&#x27;</span><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 计算对象大小的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_size_in_MB</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:.3&#125; MB&#x27;</span>.<span class="hljs-built_in">format</span>(x.__sizeof__()/<span class="hljs-number">1e6</span>))<br><span class="hljs-comment"># 查看 adata 对象大小</span><br>print_size_in_MB(adata)<br><span class="hljs-comment"># 查看是否备份</span><br>adata.isbacked<br><span class="hljs-comment"># 设置备份地址</span><br>adata.filename = <span class="hljs-string">&#x27;./write/test.h5ad&#x27;</span><br><span class="hljs-comment"># 查看是否备份成功</span><br>adata.isbacked<br></code></pre></td></tr></table></figure><h5 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/07aa254d09438f29a22b70e859f384dc.png" alt="image.png"></h5><p>可以看到，我们的 adata 对象已经备份成功，而且就在本地 ‘.&#x2F;write&#x2F;test.h5ad’ 目录。</p><p>前边提到的 view 特性在这里同样适用，我们来看看 adata_subset 是否备份成功。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata_subset.isbacked<br>adata_subset.filename = <span class="hljs-string"><code class="language-hljs python">adata_subset.isbacked<br>adata_subset.filename = <span class="hljs-string">&#x27;./write/adata_subset_test.h5ad&#x27;</span><br>adata_subset.isbacked<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6354c0cf1bfe52a5b07c2b58163fd397.png" alt="image.png"></p><p>adata_subset 并没有被启用备份模式，重新设置备份模式。</p><p>需要注意的是：备份仅影响数据矩阵 X，所有注释信息都保留在内存中。如果想对全部数据的更改保存，则必须将导出到本地。</p><h4 id="5、导出到本地"><a href="#5、导出到本地" class="headerlink" title="5、导出到本地"></a>5、导出到本地</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">adata.write(<span class="hljs-string">&quot;./write/my_results.h5ad&quot;</span>)<br>adata.write_csvs(<span class="hljs-string"><code class="language-hljs python">adata.write(<span class="hljs-string">&quot;./write/my_results.h5ad&quot;</span>)<br>adata.write_csvs(<span class="hljs-string">&#x27;./write/my_results_csvs&#x27;</span>, )<br></code></pre></td></tr></table></figure><h4 id="6、读取数据"><a href="#6、读取数据" class="headerlink" title="6、读取数据"></a>6、读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> scanpy <span class="hljs-keyword">as</span> sc<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 初始化数据</span><br>adata = sc.read(filename)<br><span class="hljs-comment"># 加入数据</span><br>anno = pd.read_csv(filename_sample_annotation)<br><span class="hljs-comment"># 加入样本分组信息</span><br>adata.obs[<span class="hljs-string">&#x27;cell_groups&#x27;</span>] = anno[<span class="hljs-string">&#x27;cell_groups&#x27;</span>]  <span class="hljs-comment"># categorical annotation of type pandas.Categorical</span><br><span class="hljs-comment"># 加入时间信息</span><br>adata.obs[<span class="hljs-string">&#x27;time&#x27;</span>] = anno[<span class="hljs-string">&#x27;time&#x27;</span>]                <span class="hljs-comment"># numerical annotation of type float</span><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">import</span> scanpy <span class="hljs-keyword">as</span> sc<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 初始化数据</span><br>adata = sc.read(filename)<br><span class="hljs-comment"># 加入数据</span><br>anno = pd.read_csv(filename_sample_annotation)<br><span class="hljs-comment"># 加入样本分组信息</span><br>adata.obs[<span class="hljs-string">&#x27;cell_groups&#x27;</span>] = anno[<span class="hljs-string">&#x27;cell_groups&#x27;</span>]  <span class="hljs-comment"># categorical annotation of type pandas.Categorical</span><br><span class="hljs-comment"># 加入时间信息</span><br>adata.obs[<span class="hljs-string">&#x27;time&#x27;</span>] = anno[<span class="hljs-string">&#x27;time&#x27;</span>]                <span class="hljs-comment"># numerical annotation of type float</span><br><span class="hljs-comment"># 甚至可以直接赋值 dataframe</span><br>adata.obs = anno<br></code></pre></td></tr></table></figure><p>官网：<a href="https://anndata.readthedocs.io/en/latest/">https://anndata.readthedocs.io/en/latest/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 单细胞 </tag>
            
            <tag> scanpy </tag>
            
            <tag> AnnData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解 R 语言的 PCA 与 TSNE 的降维聚类</title>
      <link href="/posts/18040/"/>
      <url>/posts/18040/</url>
      
        <content type="html"><![CDATA[<p>为了查看降维聚类的可视化效果，我们先用相似样本降维聚类，然后使用具有差异的样本查看聚类效果。</p><p>同时使用 PCA 与 TSNE 来观察两种不同方法的聚类效果。</p><h2 id="一、相似样本的降维聚类"><a href="#一、相似样本的降维聚类" class="headerlink" title="一、相似样本的降维聚类"></a>一、相似样本的降维聚类</h2><h4 id="1、载入所需的包"><a href="#1、载入所需的包" class="headerlink" title="1、载入所需的包"></a>1、载入所需的包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">rm(list=ls())<br>library(pheatmap)<br>library(Rtsne)<br>library(ggfortify)<br>library(mvtnorm)<br></code></pre></td></tr></table></figure><h4 id="2、构建两个相似样本数据集"><a href="#2、构建两个相似样本数据集" class="headerlink" title="2、构建两个相似样本数据集"></a>2、构建两个相似样本数据集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 生成数据（随机）================================<br># 设置基因数和细胞数<br>gene_num=100<br>cell_num=50<br># 设置两个正态分布的随机矩阵(100*50)  作为两个样本矩阵<br>sample1=rnorm(gene_num*cell_num);<br># 生成 100 基因，50 细胞的表达矩阵<br>dim(sample1)=c(gene_num,cell_num)<br># 生成第二个样本<br>sample2=rnorm(gene_num*cell_num);dim(sample2)=c(gene_num,cell_num)<br># 将两个样本合并为一个表达矩阵<br>sample_all=cbind(sample1,sample2)<br># 添加列名<br>colnames(sample_all)=c(paste0(&#x27;sample1_cell_&#x27;,1:cell_num),<br>               paste0(&#x27;sample2_cell_&#x27;,1:cell_num))<br># 添加行名<br>rownames(sample_all)=paste(&#x27;gene_&#x27;,1:gene_num,sep = &#x27;&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0a360f8ba5e7dd64dfa0fecceff7a970.png" alt="image.png"></p><h4 id="3、绘制热图"><a href="#3、绘制热图" class="headerlink" title="3、绘制热图"></a>3、绘制热图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">pheatmap(sample_all)<br></code></pre></td></tr></table></figure><p>可以看到，由于数据随机分布，绘制热图发现两种数据并没有明显分组。<br><img src="https://img-blog.csdnimg.cn/img_convert/e173c493fc640807e4ed73578c334ec1.png" alt="image.png"></p><h4 id="4、绘制PCA"><a href="#4、绘制PCA" class="headerlink" title="4、绘制PCA"></a>4、绘制PCA</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 画pca===============================================<br># 转置，让行为样本<br>sample_all=t(sample_all)<br># 添加样本分组信息<br>df=cbind(as.data.frame(sample_all),group=c(rep(&#x27;group1&#x27;,20),rep(&#x27;group2&#x27;,20)))<br># prcomp()主成分分析<br>pca_dat <- prcomp( df[,1:(ncol(df)-1)] )<br>autoplot(pca_dat, data=df,colour = &#x27;group&#x27;)+theme_bw()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/78cc5c325672fcde41b80a02ade786d6.png" alt="image.png"><br>同样可以看到，两组数据的随机分布，导致组间数据并不能有效的分为两群，而是你中有我，我中有你的状态。<br><img src="https://img-blog.csdnimg.cn/img_convert/a488d78c20f258518f0c20692040b201.png" alt="image.png"></p><h4 id="5、绘制TSNE"><a href="#5、绘制TSNE" class="headerlink" title="5、绘制TSNE"></a>5、绘制TSNE</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">set.seed(123123)<br>sample_all=t(sample_all)<br>tsne_out <- Rtsne(sample_all,pca=FALSE,perplexity=10,theta=0.0)<br># 获取tSNE的坐标值<br>str(tsne_out)<br># 其中在Y中存储了画图坐标<br>tsnes=tsne_out$Y<br>colnames(tsnes) <- c("tSNE1", "tSNE2") #为坐标添加列名<br># 在此基础上添加颜色分组信息，首先还是将tsnes这个矩阵变成数据框，然后增加一列group信息，最后映射在geom_point中<br>tsnes=as.data.frame(tsnes)<br>group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num))<br>tsnes$group=group<br>ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(aes(col=group))<br></code></pre></td></tr></table></figure><p>TSNE 与 PCA 是同样的展示效果，也就是说如果分析数据的变量之间没有明显的区别，利用不用的聚类手段或可视化方法，我们也不能将其分为不同群体。</p><blockquote><p>在机器学习中，我们可以利用一些特征挑选手段实现相似数据间的分类，今后再讨论这种情况。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/ca10c809446498bdca50360dd1ae2c8d.png" alt="image.png"></p><h2 id="二、差异样本的降维聚类"><a href="#二、差异样本的降维聚类" class="headerlink" title="二、差异样本的降维聚类"></a>二、差异样本的降维聚类</h2><h4 id="1、构建第三个具有差异的数据集"><a href="#1、构建第三个具有差异的数据集" class="headerlink" title="1、构建第三个具有差异的数据集"></a>1、构建第三个具有差异的数据集</h4><p>为了查看并比较数据间的差异，我们构建一个随机分布，为每个值加 2，也就是说，中轴线向X轴正方向移动 2 个单位，得到一个新的数据集。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 第三个样本中表达量每个值加2<br>sample3=rnorm(gene_num*cell_num)+2;dim(sample3)=c(gene_num,cell_num)<br><br>sample_all=cbind(sample_all,sample3)<br>colnames(a3)=c(paste0(&#x27;cell_01_&#x27;,1:nc),paste0(&#x27;cell_02_&#x27;,1:nc))<br>rownames(a3)=paste(&#x27;gene_&#x27;,1:ng,sep = &#x27;&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/746e85c9c5c893440b17649a025f84a9.png" alt="image.png"></p><h4 id="2、绘制热图"><a href="#2、绘制热图" class="headerlink" title="2、绘制热图"></a>2、绘制热图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">pheatmap(sample_all)<br></code></pre></td></tr></table></figure><p>绘制热图，可以明显发现第三个数据集区别与我们之间构建的那两个数据集。这种图应用于实际中就显示出该组数据的异质性。比如，左图是癌症患者的某些基因表达值，区别于右边两个患者的正常表达基因。<br><img src="https://img-blog.csdnimg.cn/img_convert/1c101fb1cc31996528ba8664a14f223b.png" alt="image.png"></p><h4 id="3、绘制PCA"><a href="#3、绘制PCA" class="headerlink" title="3、绘制PCA"></a>3、绘制PCA</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sample_all=t(sample_all);<br>dim(sample_all)<br>df=cbind(as.data.frame(a3),group=c(rep(&#x27;group1&#x27;,20),rep(&#x27;group2&#x27;,20)))<br>autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = &#x27;group&#x27;)+theme_bw()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/16d3f7853e3523321276b00276fc6b8e.png" alt="image.png"><br>PCA 后我们可以看到，分组极其明显。与前两组相比，新构建的第三个数据集明显分在另一组。比如，该图用于查看测序数据组间是否有差异，样本是否有污染等。而且由于是根据距离公式计算，因此在图中，点之间的距离一定程度也展示了组内或组间不同样本的相似性或异质性。<br><img src="https://img-blog.csdnimg.cn/img_convert/4d8d73ce259e5b015a4621e364903bf6.png" alt="image.png"></p><h4 id="4、绘制TSNE"><a href="#4、绘制TSNE" class="headerlink" title="4、绘制TSNE"></a>4、绘制TSNE</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">set.seed(123123)<br>tsne_out <- Rtsne(sample_all,pca=FALSE,perplexity=10,theta=0.0)<br>tsnes=tsne_out$Y<br>colnames(tsnes) <- c("tSNE1", "tSNE2")<br>tsnes=as.data.frame(tsnes)<br>group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num),rep(&#x27;group3&#x27;,cell_num))<br>tsnes$group=group<br>ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(aes(col=group))<br></code></pre></td></tr></table></figure><p>TSNE 图与 PCA 图同样展示出三组样本间的差异。一般用于单细胞测序的细胞聚类，但是与 PCA 不同的是，TSNE 图一般是由三维空间映射到二维平面的成像，所以，组间的距离并不能真实反映样本数据间的差异性。<br><img src="https://img-blog.csdnimg.cn/img_convert/140c5cc36df037acc1d9909803ad8125.png" alt="image.png"></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">rm(list=ls())<br>library(pheatmap)<br>library(Rtsne)<br>library(mvtnorm)<br><br># 生成数据（随机）================================<br># 设置基因数和细胞数<br>gene_num=100<br>cell_num=50<br># 设置两个正态分布的随机矩阵(100*50)  作为两个样本矩阵<br>sample1=rnorm(gene_num*cell_num);<br># 生成 100 基因，50 细胞的表达矩阵<br>dim(sample1)=c(gene_num,cell_num)<br># 生成第二个样本<br>sample2=rnorm(gene_num*cell_num);dim(sample2)=c(gene_num,cell_num)<br># 将两个样本合并为一个表达矩阵<br>sample_all=cbind(sample1,sample2)<br># 添加列名<br>colnames(sample_all)=c(paste0(&#x27;sample1_cell_&#x27;,1:cell_num),<br>               paste0(&#x27;sample2_cell_&#x27;,1:cell_num))<br># 添加行名<br>rownames(sample_all)=paste(&#x27;gene_&#x27;,1:gene_num,sep = &#x27;&#x27;)<br><br># 绘制热图==============================================<br>pheatmap(sample_all)<br><br># 绘制pca===============================================<br># 转置，让行为样本<br>sample_all=t(sample_all)<br># 添加样本分组信息<br>df=cbind(as.data.frame(sample_all),group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num)))<br># prcomp()主成分分析<br>pca_dat <- prcomp( df[,1:(ncol(df)-1)] )<br>autoplot(pca_dat, data=df,colour = &#x27;group&#x27;)+theme_bw()<br><br><br># 绘制tsne=============================================<br># 进行tSNE<br>set.seed(123123)<br>sample_all=t(sample_all)<br>tsne_out <- Rtsne(sample_all,pca=FALSE,perplexity=10,theta=0.0)<br># 获取tSNE的坐标值<br>str(tsne_out)<br># 其中在Y中存储了绘制图坐标<br>tsnes=tsne_out$Y<br>colnames(tsnes) <- c("tSNE1", "tSNE2") #为坐标添加列名<br># 在此基础上添加颜色分组信息，首先还是将tsnes这个矩阵变成数据框，然后增加一列group信息，最后映射在geom_point中<br>tsnes=as.data.frame(tsnes)<br>group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num))<br>tsnes$group=group<br>ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(aes(col=group))<br>dev.off()<br>dev.new()<br><br># 构建随机数据集==================================================<br># 第三个样本中表达量每个值加2<br>sample3=rnorm(gene_num*cell_num)+2;dim(sample3)=c(gene_num,cell_num)<br>colnames(sample3)=c(paste0(&#x27;sample3_cell_&#x27;,1:cell_num))<br>rownames(sample3)=paste(&#x27;gene_&#x27;,1:gene_num,sep = &#x27;&#x27;)<br>sample_all=cbind(sample_all,sample3)<br># 绘制热图 =========================================================<br>pheatmap(sample_all)<br><br># 绘制PCA ==========================================================<br>sample_all=t(sample_all);<br>dim(sample_all)<br>df=cbind(as.data.frame(sample_all),group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num),rep(&#x27;group3&#x27;,cell_num)))<br>autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = &#x27;group&#x27;)+theme_bw()<br><br># 绘制tSNE=========================================================<br>set.seed(123123)<br>tsne_out <- Rtsne(sample_all,pca=FALSE,perplexity=10,theta=0.0)<br>tsnes=tsne_out$Y<br>colnames(tsnes) <- c("tSNE1", "tSNE2")<br>tsnes=as.data.frame(tsnes)<br>group=c(rep(&#x27;group1&#x27;,cell_num),rep(&#x27;group2&#x27;,cell_num),rep(&#x27;group3&#x27;,cell_num))<br>tsnes$group=group<br>ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(aes(col=group))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> R </tag>
            
            <tag> 降维 </tag>
            
            <tag> PCA </tag>
            
            <tag> TSNE </tag>
            
            <tag> 聚类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新 NCBI 上传测序数据教程 （图文详解）</title>
      <link href="/posts/28714/"/>
      <url>/posts/28714/</url>
      
        <content type="html"><![CDATA[<p>在做完测序后，一般期刊会要求提供公共数据ID，可以上传的数据库可以是 NCBI，EBI，DDBJ，以及国内的 NGDC。今天我们以 NCBI 上传数据为例。</p><h5 id="0、基础知识"><a href="#0、基础知识" class="headerlink" title="0、基础知识"></a>0、基础知识</h5><p>NCBI 的其中一个数据库 GEO 用于管理和存储我们的测序数据。GEO 构建之初用于存放芯片数据，后来成为随着测序技术的快速发展，逐渐成为高通量测序数据的主要存储库之一。</p><p>其中每个项目都可以包含有测序后原始数据信息，如 sra，fastq 等文件信息等，以及上游分析后的数据，如count，bam，bw 等文件。</p><p>需要注意的是上面提到的原始数据是存储的文件信息，真正的 raw data 文件是由 Sequence Read Archive (SRA) 库来管理。接下来的工作就是去 SRA 上传我们的数据。</p><h5 id="1、登录或注册用户"><a href="#1、登录或注册用户" class="headerlink" title="1、登录或注册用户"></a>1、登录或注册用户</h5><p>网址：<a href="https://www.ncbi.nlm.nih.gov/account/">https://www.ncbi.nlm.nih.gov/account/</a><br><img src="https://img-blog.csdnimg.cn/img_convert/8bb69f6732ba92770f8958ff83fe9ba7.png" alt="img"></p><h5 id="2、进入SRA"><a href="#2、进入SRA" class="headerlink" title="2、进入SRA"></a>2、进入SRA</h5><p>网址：<a href="https://submit.ncbi.nlm.nih.gov/">https://submit.ncbi.nlm.nih.gov/</a></p><p>向下滚动，找到<code>Sequence Read Archive (SRA)</code>工具，点击<code>Submit</code><br><img src="https://img-blog.csdnimg.cn/img_convert/22ae54dd8d5869f84c45ccd315cda0a0.png" alt="img"></p><h5 id="2、新建提交"><a href="#2、新建提交" class="headerlink" title="2、新建提交"></a>2、新建提交</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/376771c485f46eab3b7b13f75410a045.png" alt="img"></p><h5 id="3、按要求填写信息"><a href="#3、按要求填写信息" class="headerlink" title="3、按要求填写信息"></a>3、按要求填写信息</h5><p>这一步需要的信息比较多，建议下载表格后，直接上传即可。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c50961541f19ad04d0b19f8148569293.png" alt="img"></p><h5 id="4、使用ascp"><a href="#4、使用ascp" class="headerlink" title="4、使用ascp"></a>4、使用ascp</h5><p>可以使用 ftp 上传，但 NCBI 提供了更为快速的上传工具 aspera ，这里实测是在 100 Mb&#x2F;s 左右浮动，安装参考：<a href="https://blog.csdn.net/u011262253/article/details/107190684"><strong>https://blog.csdn.net/u011262253/article/details/107190684</strong></a></p><blockquote><p>希望在不久的将来，我们国家 NGDC 的 GSA 数据库也能有类似的工具，而不是只提供 ftp 上传。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ascp -i /mnt/h/work/aspera.openssh -QT -l100m -k1 -d /mnt/h/work/ncbi_upload/raw/ subasp@upload.ncbi.nlm.nih.gov:uploads/your_email_id<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9eb4bca1559a584e1ef188d42eb574d8.png" alt="img"></p><h5 id="5、等待上传完成"><a href="#5、等待上传完成" class="headerlink" title="5、等待上传完成"></a>5、等待上传完成</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/86ed31141c6e40e5f3ff0edaa750d852.png" alt="img"></p><h5 id="6、确认是否上传完成"><a href="#6、确认是否上传完成" class="headerlink" title="6、确认是否上传完成"></a>6、确认是否上传完成</h5><p>重复以上命令，ascp 会检测文件上传是否完整，如果上传完成，会直接 skipped<br><img src="https://img-blog.csdnimg.cn/img_convert/cc05fad96662e3aa88fe29fa9921b657.png" alt="img"></p><h5 id="7、检测上传数据是否正确"><a href="#7、检测上传数据是否正确" class="headerlink" title="7、检测上传数据是否正确"></a>7、检测上传数据是否正确</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/6aac3afa78d8f1d3c7d7bcc21a73b055.png" alt="img"></p><p>确认无误后，确定公开时间等信息，等待审核通过后，会获得官方提供的唯一 GSE 标识符。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> ncbi </tag>
            
            <tag> 测序 </tag>
            
            <tag> SRA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转录组自动化分析流程搭建及使用</title>
      <link href="/posts/23219/"/>
      <url>/posts/23219/</url>
      
        <content type="html"><![CDATA[<p>这次分析流程搭建使用基于Nextflow 的 nf-core，该工具可以实现自动化的转录组上游分析。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载最新版：<a href="https://github.com/nextflow-io/nextflow/releases">https://github.com/nextflow-io/nextflow/releases</a></p><p>我安装时最新版为 nextflow-21.04.0-edge-all</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wegt https://github.com/nextflow-io/nextflow/releases/download/v21.04.0-edge/nextflow-21.04.0-edge-all<br>mv nextflow-21.04.0-edge-all nextflow<br></code></pre></td></tr></table></figure><h4 id="安装-nf-core-rnaseq"><a href="#安装-nf-core-rnaseq" class="headerlink" title="安装 nf-core rnaseq"></a>安装 nf-core rnaseq</h4><p>可以使用Git clone，也可以下载好解压到流程目录</p><p>官网：<a href="https://nf-co.re/rnaseq">https://nf-co.re/rnaseq</a></p><p>GitHub：<a href="https://github.com/nf-core/rnaseq">https://github.com/nf-core/rnaseq</a></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">```<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"><code class="language-hljs shell">```<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 安装aws</span></span><br><br>```shell<br>curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"<br>unzip awscliv2.zip<br>sudo ./aws/install<br></code></pre></td></tr></table></figure><h4 id="下载参考基因组"><a href="#下载参考基因组" class="headerlink" title="下载参考基因组"></a>下载参考基因组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/ ./references/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/ --exclude "*" --include "genes.gtf"<br>aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/ ./references/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/<br>aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/STARIndex/ ./references/Homo_sapiens/Ensembl/GRCh37/Sequence/STARIndex/<br>aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/BWAIndex/ ./references/Homo_sapiens/Ensembl/GRCh37/Sequence/BWAIndex/<br>aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/Bowtie2Index/ ./references/Homo_sapiens/Ensembl/GRCh37/Sequence/Bowtie2Index/<br>aws s3 --no-sign-request --region eu-west-1 sync s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/ ./references/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/ --exclude "*" --include "genes.bed"<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://ewels.github.io/AWS-iGenomes/">https://ewels.github.io/AWS-iGenomes/</a></p></blockquote><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><p>数据来源<a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE101571">GSE101571</a></p><p>构建测试数据信息表，<code>rnaseq-test.csv</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs csv"><code class="language-hljs csv">group,replicate,fastq_1,fastq_2,strandedness<br>2cell,1,/data/baimoc/data/rnaseq-test/SRR5837392_1.fastq.gz,/data/baimoc/data/rnaseq-test/SRR5837392_2.fastq.gz,unstranded<br>2cell,1,/data/baimoc/data/rnaseq-test/SRR5837393_1.fastq.gz,/data/baimoc/data/rnaseq-test/SRR5837393_2.fastq.gz,unstranded<br>8cell,1,/data/baimoc/data/rnaseq-test/SRR5837402_1.fastq.gz,/data/baimoc/data/rnaseq-test/SRR5837402_2.fastq.gz,unstranded<br>8cell,1,/data/baimoc/data/rnaseq-test/SRR5837403_1.fastq.gz,/data/baimoc/data/rnaseq-test/SRR5837403_2.fastq.gz,unstranded<br></code></pre></td></tr></table></figure><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/1e0f98aa0c4490293b67dc21edd189fc.png" alt="mark"></p><h4 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">../../nextflow run ../../rnaseq --input /data/baimoc/data/rnaseq-test/rnaseq-test.csv --genome GRCh37 --igenomes_base /data/baimoc/references/ -profile docker<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 转录组 </tag>
            
            <tag> nfcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel 做统计学分析</title>
      <link href="/posts/61108/"/>
      <url>/posts/61108/</url>
      
        <content type="html"><![CDATA[<h4 id="数据分析插件"><a href="#数据分析插件" class="headerlink" title="数据分析插件"></a>数据分析插件</h4><p>1、进入 Excel 点击<code>选项</code><br><img src="https://img-blog.csdnimg.cn/img_convert/691f359b68854af3392c5315486d5f90.png" alt="mark"></p><p>2、在加载项中点击转到<br><img src="https://img-blog.csdnimg.cn/img_convert/fef6ace96ab58f6abb57a97963e7ded4.png" alt="mark"></p><p>3、打开分析工具库扩展<br><img src="https://img-blog.csdnimg.cn/img_convert/25d6aa98f87d7860d757f03132404666.png" alt="mark"></p><p>4、选择<code>数据</code>标签页，点击数据分析<br><img src="https://img-blog.csdnimg.cn/img_convert/2e807c13cd7f1c8aa2d5f64bfc082088.png" alt="mark"></p><p>5、选择适合数据的分析方法，这里以方差分析为例<br><img src="https://img-blog.csdnimg.cn/img_convert/31413b003a77c61b79d41b0dfa98696d.png" alt="mark"></p><p>6、配置分析需要的选项</p><ul><li><p>在输入区域输入对应的数据，<br><img src="https://img-blog.csdnimg.cn/img_convert/76e0362c3429a3ad14fec4fbd62bad94.png" alt="mark"></p></li><li><p>利用鼠标指针框选带有样本分组标志的数据集，比如下图这样<br><img src="https://img-blog.csdnimg.cn/img_convert/adf26884052e1cb5cd5f8f789abe5891.png" alt="mark"></p></li><li><p>选中标志位于第一行，用于标记分组名称</p><p>α(A)是显著性水平，0.05代表95%的可信度</p><p><img src="https://img-blog.csdnimg.cn/img_convert/17e7e36d706433634e6640c9203f53f1.png" alt="mark"></p></li><li><p>选中输出区域，将输出结果打印在Excel中，或者可以选新建工具表组</p></li></ul><p>7、最后，生成对应的分析结果<br><img src="https://img-blog.csdnimg.cn/img_convert/f75b15a06ec7e2effe3abec1417528cd.png" alt="mark"></p><h4 id="表里的统计值"><a href="#表里的统计值" class="headerlink" title="表里的统计值"></a>表里的统计值</h4><ul><li>组：分组名称</li><li>观测数：每组样本数量</li><li>求和：总值</li><li>平均：平均值</li><li>方差：方差值</li><li>SS：平方和</li><li>df：自由度，用于其他统计量计算</li><li>MS：均方，由于各误差平方和的大小与观测值的多少有关，为了消除观测值多少对误差平方和大小的影响，需要将其平均。</li><li>F：检验统计量，用于假设检验计算的统计量 </li><li>P value：显著性水平，估计总体参数落在某一区间内，可能犯错误的概率 </li><li>F crit：临界值，在相应显著水平下的<em>F</em>临界值</li></ul><h4 id="查看组间有无差异"><a href="#查看组间有无差异" class="headerlink" title="查看组间有无差异"></a>查看组间有无差异</h4><p>代表两组数据有差异：F &gt; Fcrit</p><p>代表两组数据无差异：F &lt; Fcrit</p><h4 id="查看差异显著性（可信度）"><a href="#查看差异显著性（可信度）" class="headerlink" title="查看差异显著性（可信度）"></a>查看差异显著性（可信度）</h4><p>差异显著：0.01 &lt; P value &lt; 0.05</p><p>差异极显著：P value &lt; 0.01 </p><p>后续更新其他分析方法。</p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发路线图（2020）</title>
      <link href="/posts/4285/"/>
      <url>/posts/4285/</url>
      
        <content type="html"><![CDATA[<h2 id="通用技能"><a href="#通用技能" class="headerlink" title="通用技能"></a>通用技能</h2><p><img src="https://img-blog.csdnimg.cn/2021030909353215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><p><img src="https://img-blog.csdnimg.cn/20210309093549789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><p><img src="https://img-blog.csdnimg.cn/20210309093659597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="DevOps-路线图"><a href="#DevOps-路线图" class="headerlink" title="DevOps 路线图"></a>DevOps 路线图</h2><p><img src="https://img-blog.csdnimg.cn/20210309093724735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原文：<a href="https://github.com/ccloli/developer-roadmap-zh-CN">https://github.com/ccloli/developer-roadmap-zh-CN</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解三代测序（SMRT_Sequencing）</title>
      <link href="/posts/48766/"/>
      <url>/posts/48766/</url>
      
        <content type="html"><![CDATA[<p>目前主流三代测序平台除了Oxford 家的 Nanopore，还有 Pacific Biosciences（简称 PacBio）公司的 Single Molecule Real-Time（SMRT）Sequencing。 该平台的优势在于： </p><ul><li><p>在不会影响吞吐量和准确性的前提下，提供目前最长的读取长度</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7863e6d57f73521066babb02d970d419.png" alt="mark"></p></li><li><p>如果不含系统误差，准确度可达 99.999％</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb69e8efcab7cd1ad50a712a4f8627c0.png" alt="mark"></p></li><li><p>可测取富含AT或GC区域，高度重复序列，回文序列等，不会产生GC的较大偏差</p></li><li><p>可以直接测取化学修饰，在表观遗传学中有重要应用</p></li></ul><blockquote><p>吃个瓜，2018年11月1日，Illumina 同意以12亿美元现金收购 PacBio 和其三代测序技术。</p><p>但是，今年Illumina放弃了收购计划，摊手。</p></blockquote><h3 id="一、基本原理"><a href="#一、基本原理" class="headerlink" title="一、基本原理"></a>一、基本原理</h3><p>边合成边测序，与前文我们说的 Illumina 的基本测序原理一样。</p><h3 id="二、构建文库"><a href="#二、构建文库" class="headerlink" title="二、构建文库"></a>二、构建文库</h3><p>将样本中的DNA或RNA分子提取后，构建如下的哑铃状分子结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ed80d7bd2b62c732b1d89b46fb69aa70.png" alt="mark"></p><ul><li>黄色，紫色：双链DNA分子</li><li>蓝色：接头（Adapter）</li></ul><p>将文库分子展开，一个完整的圆环出现在我们眼前：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/642a39aa2d235b992879fbd3b81959cf.png" alt="mark"></p><p>这种结构有利于进行周而复始的滚环复制，我们后文会讲这种复制方式的好处。</p><p>将样本中所有的DNA片段都构建哑铃状分子结构，组成的集合就叫文库（SMRTbell Library），随后，它们会被放到测序芯片中。</p><h3 id="三、测序芯片"><a href="#三、测序芯片" class="headerlink" title="三、测序芯片"></a>三、测序芯片</h3><p>以 RSII 测序平台为例，测序仪芯片（SMRT Cell）长这样：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e95b6e4d4d230ea6d12226f02cb3c5b0.png" alt="mark"></p><p>放大后：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/01d02f8a1ff012e56f2b656c53c720a6.png" alt="mark"></p><p>上面整齐排列着15万个直径为70纳米的测序微孔（Zero-Model Waveguides，ZMWs）。</p><h3 id="四、上机测序"><a href="#四、上机测序" class="headerlink" title="四、上机测序"></a>四、上机测序</h3><p><strong>1、构建测序复合物</strong></p><p>测序复合物：聚合酶，测序模板，测序引物</p><p><img src="https://img-blog.csdnimg.cn/img_convert/18ec2de2355aaeee5806263ce45b59f9.png" alt="mark"></p><p><strong>2、复合物撒入测序小孔</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/75475edd10862e2ed05df7b685ac122f.png" alt="mark"></p><p><strong>3、固定测序复合物</strong></p><p>由于聚合酶加了生物素，在芯片玻璃底板有链酶亲和素。利用生物素和链酶亲和素的亲和力，包含聚合酶的测序复合物会被固定在玻璃底板。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e5c1950d27ba22d89ef82fcc469b6f4b.png" alt="mark"></p><p><strong>4、构建带有荧光基团的dNTP</strong></p><p>在芯片溶液中含有许多游离dNTP，所谓游离dNTP就是随机飘在溶液中的dNTP。</p><p>ATGC四种碱基的dNTP，在磷酸基团上分别带有四种颜色的荧光基团。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4490147a36b808c1d351f36b5cf24fbd.png" alt="mark"></p><p><strong>5、边合成边测序</strong></p><p>在合成时，游离的dNTP被固定在底板上的酶捕获，激发光会从玻璃板底部发出。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/317d84efc1f087cb7e55707b3958ee7c.gif" alt="mark"></p><blockquote><p><strong>怎么保证每次测取一个碱基？</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/192e645f681ba2abc453425bc374ed93.png" alt="mark"></p><p>由于测序小孔直径很小，激发光的穿透能力会逐渐衰减，只能在小孔中传输很短的距离，所以只有当dNTP足够靠近底部，荧光基团才会被激发光照到，发出荧光。当然，其他的游离dNTP，虽然也有可能飘到小孔底部被激发光照到，但这种情况极少。</p><p>在一个碱基合成结束后，带有荧光基团的磷酸基团会从dNTP上掉落，发生猝灭，不影响其他碱基的信号检测。</p></blockquote><p>在发生测序的小孔有各自的DNA片段和测序复合物，同一时间发出不同颜色的激发光，机器会检测到如下的光信号，实际同时会得到多达几万个光点。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/72b495ed9598b5d5e6e503a80d95a33b.png" alt="mark"></p><p>重复上述步骤，经过计算机分析光谱，最终我们拿到样本的测序文件。SMRT Sequencing  测序过程中，每秒读取三个碱基，一个小时可检测大约一万多碱基。</p><p><strong>6、检测碱基甲基化</strong></p><p>有意思的是，在SMRT Sequencing测序过程中，可以直接测到碱基被修饰的状态，聚合酶遇到碱基上带有甲基化的碱基，合成速度会明显变慢，而且光谱也会发生改变。</p><p>因此，SMRT Sequencing 可以检测到碱基的甲基化修饰情况。</p><h3 id="五、测序模型"><a href="#五、测序模型" class="headerlink" title="五、测序模型"></a>五、测序模型</h3><p>SMRT 测序有如下两种测序模式：</p><h5 id="1、Circular-Consensus-Sequencing-CCS"><a href="#1、Circular-Consensus-Sequencing-CCS" class="headerlink" title="1、Circular Consensus Sequencing (CCS)"></a>1、Circular Consensus Sequencing (CCS)</h5><p>说这种测序模型前，就不得不提三代测序最大的缺点：碱基读取不准，错误率在12.5%，也就是说，每读取八个碱基，就会读错一个。</p><p>好在碱基读取错误是随机的，如果重新读一遍同样位置的碱基，不一定会发生同样的错误。</p><p>如果对同一个序列，多测几遍，那么这些读错的碱基就能矫正过来。</p><p>前边提到的滚环复制的优势就来了，我们可以利用测序复合物在环状文库分子循环测序同一个片段来消除错误率。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/feb4d3d30030ee961c967a82808b9a2d.gif" alt="mark"></p><p>这种测序模型，复制出的 Reads叫 HiFi Reads，测序准确率 &gt; 99%。</p><h5 id="2、Continuous-Long-Read-CLR-Sequencing"><a href="#2、Continuous-Long-Read-CLR-Sequencing" class="headerlink" title="2、Continuous Long Read (CLR) Sequencing"></a>2、Continuous Long Read (CLR) Sequencing</h5><p>这种测序的优势在于可以读取更长的 Reads。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/784236312e790a7e8eed54ddf85ed42a.gif" alt="mark"></p><h3 id="六、其他影响因素"><a href="#六、其他影响因素" class="headerlink" title="六、其他影响因素"></a>六、其他影响因素</h3><h5 id="1、GC-bias-影响"><a href="#1、GC-bias-影响" class="headerlink" title="1、GC bias 影响"></a>1、GC bias 影响</h5><blockquote><p>什么是 GC bias？</p><p>PCR 时，如果模板里的G、C碱基含量高，PCR效率低，A、T碱基含量高，PCR效率高。一般测序过程，如二代测序，都会有大量的PCR过程。这样就会有一个问题，G、C含量高的片段，读到的 Reads 数少。</p></blockquote><p>SMRT 在测序过程中，没有 PCR 过程，因此富含GC含量高，含量低的 Reads 片段都会有相似的概率被测序，所以三代测序中的 GC Bias 影响小。</p><h5 id="2、读长的限制因素"><a href="#2、读长的限制因素" class="headerlink" title="2、读长的限制因素"></a>2、读长的限制因素</h5><ul><li><strong>DNA模板断裂</strong>，用激发光长时间照射DNA链时，会发生断裂，DNA链会从酶上掉下来，测序终止。</li><li><strong>酶变性</strong>，酶被长时间照射时，酶会变性，失去聚合酶活性，测序终止。</li><li><strong>文库序列短</strong>，如果做文库序列片段大于 20~30 K ，且保证质量的文库是有技术难度的</li></ul><h5 id="3、测序通量"><a href="#3、测序通量" class="headerlink" title="3、测序通量"></a>3、测序通量</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/cb94a73b235c418db343cf6dc3bc2c3d.png" alt="mark"></p><p>目前，主流的测序平台有三种，各有利弊，可以根据自己的课题来选择。</p><p>以RSII为例，将测序复合物，随机撒到15万个小孔中，正好有一个复合物进入到单个小孔的概率符合泊松分布。理论情况是</p><ul><li>1&#x2F;3 的小孔中有一个测序复合物，正常信号</li><li>1&#x2F;3 的小孔什么都没有，无信号</li><li>1&#x2F;3 的小孔中有两个以上的测序复合物，杂乱信号</li></ul><p>五万个小孔 * 10kb，所以一张芯片大约会产出500M的数据。</p><p><a href="https://blog.csdn.net/u011262253/article/details/104737024?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160904957316780276341815%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=160904957316780276341815&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-104737024.pc_v1_rank_blog_v1&utm_term=%E6%B5%8B%E5%BA%8F">一代测序原理 (Sanger法<em>测序</em>)</a> </p><p><a href="https://blog.csdn.net/u011262253/article/details/102525491?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160904957316780276341815%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=160904957316780276341815&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-102525491.pc_v1_rank_blog_v1&utm_term=%E6%B5%8B%E5%BA%8F">二代测序原理（Illumina）</a> </p><p><a href="https://blog.csdn.net/u011262253/article/details/109957104?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160904957316780276341815%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=160904957316780276341815&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-7-109957104.pc_v1_rank_blog_v1&utm_term=%E6%B5%8B%E5%BA%8F">一文读懂 ChIPseq</a> </p><p><a href="https://blog.csdn.net/u011262253/article/details/108509052?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160904957316780276341815%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=160904957316780276341815&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-9-108509052.pc_v1_rank_blog_v1&utm_term=%E6%B5%8B%E5%BA%8F">一文读懂DNA甲基化及BS-seq</a> </p><hr><p>参考：</p><p><a href="https://www.cnbc.com/2020/01/02/illumina-abandons-1point2-billion-deal-to-buy-rival-pacific-biosciences.html">https://www.cnbc.com/2020/01/02/illumina-abandons-1point2-billion-deal-to-buy-rival-pacific-biosciences.html</a></p><p><a href="https://www.youtube.com/watch?v=lD8JyAbwEo">https://www.youtube.com/watch?v=lD8JyAbwEo</a></p><p><a href="https://www.youtube.com/watch?v=rUKhfITd2CA">https://www.youtube.com/watch?v=rUKhfITd2CA</a></p><p><a href="https://www.youtube.com/watch?v=NHCJ8PtYCFc&t=1s">https://www.youtube.com/watch?v=NHCJ8PtYCFc&amp;t=1s</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 测序 </tag>
            
            <tag> 三代测序 </tag>
            
            <tag> SMRT </tag>
            
            <tag> PacBio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新最全 VSCODE 插件推荐（2022版）</title>
      <link href="/posts/12247/"/>
      <url>/posts/12247/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>一、主题及图标</p><p>二、功能强化</p><p>三、Git 集成</p><p>四、数据库</p><p>五、编程美化</p><p>六、开发效率</p><p>七、前端开发</p><p>八、数据分析</p><p>九、修仙插件</p><h3 id="一、主题及图标"><a href="#一、主题及图标" class="headerlink" title="一、主题及图标"></a>一、主题及图标</h3><h5 id="GitHub-Theme"><a href="#GitHub-Theme" class="headerlink" title="GitHub Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme">GitHub Theme</a></h5><p>黑白两款皮肤<br><img src="https://img-blog.csdnimg.cn/img_convert/dc59bd3a037812636983234ebca87064.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/82a2e912596f2c0bcc15abfa3a85f82f.png" alt="mark"></p><h5 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme">Material Theme</a></h5><p>集成了多种主题皮肤，搭配 Material Icon Theme 食用更佳<br><img src="https://img-blog.csdnimg.cn/img_convert/8d798ea5ef2797f1f268dcb80cac190a.png" alt="mark"></p><h5 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></h5><p>扁平化的主题图标库<br><img src="https://img-blog.csdnimg.cn/img_convert/47d4e81a6e719cdca46c7fe74fc6174e.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/d3c91362f819cb01d7b0a39ee34b9c77.png" alt="mark"></p><h5 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a></h5><p>VSCode官方出品的图标库<br><img src="https://img-blog.csdnimg.cn/img_convert/9a725447adfc4cb33375c959aee7a0f3.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/5e3bab235c0f53089eb30ee0c5a81be5.gif" alt="mark"></p><h3 id="二、功能强化"><a href="#二、功能强化" class="headerlink" title="二、功能强化"></a>二、功能强化</h3><h5 id="settings-sync"><a href="#settings-sync" class="headerlink" title="settings sync"></a><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">settings sync</a></h5><p>同步所有设置和插件<br><img src="https://img-blog.csdnimg.cn/img_convert/e43ea6bc55f2040d50101036f0ecd59e.png" alt="mark"></p><h5 id="wakatime"><a href="#wakatime" class="headerlink" title="wakatime"></a><a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">wakatime</a></h5><p>编程时间及行为跟踪统计<br><img src="https://img-blog.csdnimg.cn/img_convert/7bd0a56c63d36cf0612b3308bbb5778e.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/e52e01b7b4390e4bdeb802ff99b4dd97.png" alt="mark"></p><h5 id="Polacode"><a href="#Polacode" class="headerlink" title="Polacode"></a><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode">Polacode</a></h5><p>代码截图<br><img src="https://img-blog.csdnimg.cn/img_convert/84426690d27c8fce1e89f28284d3aa5b.png" alt="mark"></p><h5 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code</a></h5><p>中文语言包<br><img src="https://img-blog.csdnimg.cn/img_convert/3b0a134f8a82b9832438de4018f3475e.png" alt="mark"></p><h3 id="三、Git-集成插件"><a href="#三、Git-集成插件" class="headerlink" title="三、Git 集成插件"></a>三、Git 集成插件</h3><h5 id="GitHub-Pull-requests"><a href="#GitHub-Pull-requests" class="headerlink" title="GitHub Pull requests"></a><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github">GitHub Pull requests</a></h5><p>在Visual Studio Code中查看和管理GitHub拉取请求和问题<br><img src="https://img-blog.csdnimg.cn/img_convert/1ecce460237dd7aed9ea2d6f77d01edd.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/6c999e7472879fba17ba0979d63bdd24.png" alt="mark"><img src="https://img-blog.csdnimg.cn/img_convert/aa3fdc217da9ad463906137a3d811cf1.gif" alt="mark"></p><h5 id="Git-Graph"><a href="#Git-Graph" class="headerlink" title="Git Graph"></a><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph">Git Graph</a></h5><p>Git 图形化显示和操作<br><img src="https://img-blog.csdnimg.cn/img_convert/6fb1159fe266fa4961f4776cb07840bd.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/d73da0b0eb366dfb890662c10487d725.gif" alt="mark"></p><h5 id="CodeStream-GitHub-GitLab-Bitbucket-PRs-and-Code-Review"><a href="#CodeStream-GitHub-GitLab-Bitbucket-PRs-and-Code-Review" class="headerlink" title="CodeStream: GitHub, GitLab, Bitbucket PRs and Code Review"></a><a href="https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github">CodeStream: GitHub, GitLab, Bitbucket PRs and Code Review</a></h5><p>团队协作开发，评审，讨论<br><img src="https://img-blog.csdnimg.cn/img_convert/d5fa4367438fd999e463f845975a13e6.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/9310bfaede73bdd214f22996611173e1.gif" alt="mark"></p><h3 id="四、数据库"><a href="#四、数据库" class="headerlink" title="四、数据库"></a>四、数据库</h3><h5 id="Oracle-Developer-Tools-for-VS-Code"><a href="#Oracle-Developer-Tools-for-VS-Code" class="headerlink" title="Oracle Developer Tools for VS Code"></a><a href="https://marketplace.visualstudio.com/items?itemName=Oracle.oracledevtools">Oracle Developer Tools for VS Code</a></h5><p>Oracle 数据库支持<br><img src="https://img-blog.csdnimg.cn/img_convert/faa13b92ab46d0a2c02d43af53bffe2c.png" alt="mark"></p><h5 id="SQL-Server-mssql"><a href="#SQL-Server-mssql" class="headerlink" title="SQL Server (mssql)"></a><a href="https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql">SQL Server (mssql)</a></h5><p>Microsoft SQL Server 数据库支持<br><img src="https://img-blog.csdnimg.cn/img_convert/55080a6c091eab23972cfdac4c84cc1b.png" alt="mark"></p><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-mysql-client2">MySQL</a></h5><p>支持 MySQL&#x2F;MariaDB, Microsoft SQL Server, PostgreSQL, Redis, and ElasticSearch<br><img src="https://img-blog.csdnimg.cn/img_convert/3f7a488ecaae50e76d0e0234d4120b4f.png" alt="mark"></p><h5 id="MongoDB-for-VS-Code"><a href="#MongoDB-for-VS-Code" class="headerlink" title="MongoDB for VS Code"></a><a href="https://marketplace.visualstudio.com/items?itemName=mongodb.mongodb-vscode">MongoDB for VS Code</a></h5><p>MongoDB 数据库支持<br><img src="https://img-blog.csdnimg.cn/img_convert/ac2c520cb01653752c20ad5080a9f0a0.png" alt="mark"></p><h3 id="五、编程美化"><a href="#五、编程美化" class="headerlink" title="五、编程美化"></a>五、编程美化</h3><h5 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a></h5><p>给匹配的括号上色，可以自定义配置<br><img src="https://img-blog.csdnimg.cn/img_convert/d0b6b610de893576cd0a5b6aceb33f83.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/c422e0f740b7a90fa644211ca055a770.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/bf87bacd8023b9e8032e905bab68e842.png" alt="mark"></p><h5 id="Highlight-Matching-Tag"><a href="#Highlight-Matching-Tag" class="headerlink" title="Highlight Matching Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag">Highlight Matching Tag</a></h5><p>突出显示匹配的开始和&#x2F;或结束标签<br>官方支持的标记：<strong>HTML</strong>和<strong>JSX</strong>。其他样式（XML，Vue，Angular，PHP）也可以使用，但不能保证正常使用。<br><img src="https://img-blog.csdnimg.cn/img_convert/c6d64231f36740e798b80cf88e8bfba5.gif" alt="mark"><br>在状态栏中显示标记的路径<br><img src="https://img-blog.csdnimg.cn/img_convert/52b1d3e747f01956a61eac16f1bd5f2a.png" alt="mark"></p><h5 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a></h5><p>在  VSCode 里编写 Markdown，支持预览<br><img src="https://img-blog.csdnimg.cn/img_convert/77a0c1a4008b63b8b5ed7d020e41ba86.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/68a38de74561325e4399df3354ed21a1.png" alt="mark"></p><h5 id="Image-Preview"><a href="#Image-Preview" class="headerlink" title="Image Preview"></a><a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview">Image Preview</a></h5><p>预览图片<br><img src="https://img-blog.csdnimg.cn/img_convert/d2748e88dd802b67b6e39de4a0d9f4ef.png" alt="mark"><img src="https://img-blog.csdnimg.cn/img_convert/27e2fbcf5e731a0c16bcb4f092181382.png" alt="mark"></p><h3 id="六、开发效率"><a href="#六、开发效率" class="headerlink" title="六、开发效率"></a>六、开发效率</h3><h5 id="EditorConfig-for-VS-Code"><a href="#EditorConfig-for-VS-Code" class="headerlink" title="EditorConfig for VS Code"></a><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a></h5><p>代码风格统一</p><p><img src="https://img-blog.csdnimg.cn/img_convert/788d5bb8411849d567b075989d2f7ffc.png" alt="mark"></p><h5 id="change-case"><a href="#change-case" class="headerlink" title="change-case"></a><a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case">change-case</a></h5><p>更改命名风格<br><img src="https://img-blog.csdnimg.cn/img_convert/c3ce025e3b8dd7582933edc05ec4b986.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/476236862da7d2524aa3a1e901515391.gif" alt="mark"></p><h5 id="Codelf"><a href="#Codelf" class="headerlink" title="Codelf"></a><a href="https://marketplace.visualstudio.com/items?itemName=unbug.codelf">Codelf</a></h5><p>给变量起名的神器<br><img src="https://img-blog.csdnimg.cn/img_convert/e52bdfec52360e62bb8830b3576ccc8d.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/75f1594c63764bd5acef751c44b670e9.png" alt="mark"><img src="https://img-blog.csdnimg.cn/img_convert/951b24f281a62a91c8281f99266af0e1.png"></p><h5 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></h5><p>自动格式化代码<br><img src="https://img-blog.csdnimg.cn/img_convert/260f348f65f53f62205c3b4e60b84e9d.png" alt="mark"></p><h5 id="vscode-json"><a href="#vscode-json" class="headerlink" title="vscode-json"></a><a href="https://marketplace.visualstudio.com/items?itemName=andyyaldoo.vscode-json">vscode-json</a></h5><p>操作美化 json</p><p>快捷键</p><ul><li><code>cmd+alt+v</code>，验证</li><li><code>cmd+alt+b</code>，格式化</li><li><code>cmd+alt+u</code>，压缩</li><li><code>cmd+alt+&#39;</code>，加转义字符</li><li><code>cmd+alt+;</code>，去转义字符<br><img src="https://img-blog.csdnimg.cn/img_convert/5d097df62017fa7fb54dbc717ad148c2.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/71f097a2645a1c8ca5a606833334eb19.gif" alt="mark"></li></ul><h5 id="Regex-Previewer"><a href="#Regex-Previewer" class="headerlink" title="Regex Previewer"></a><a href="https://marketplace.visualstudio.com/items?itemName=chrmarti.regex">Regex Previewer</a></h5><p>预览正则表达式效果<br><img src="https://img-blog.csdnimg.cn/img_convert/bad6ad4e0232398a4073248b02e6fd70.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/6882a129fe105b5e585b7c3e3ad25586.gif" alt="mark"></p><h3 id="七、前端开发"><a href="#七、前端开发" class="headerlink" title="七、前端开发"></a>七、前端开发</h3><h5 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></h5><p>自动重命名 HTML或XML 标签<br><img src="https://img-blog.csdnimg.cn/img_convert/77af0a4fdf94c6c617944f9509602635.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/745c6782300456407fe93afed943f1cc.gif" alt="mark"></p><h5 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></h5><p>自动添加 HTML&#x2F;XML 关闭标签<br><img src="https://img-blog.csdnimg.cn/img_convert/5ad0ab3fb55e75d8e8a7eaa1cf9cfcea.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/d7b4933b8dc425fca091c6cf8f1cf812.gif" alt="mark"></p><h5 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h5><p>智能路径提示<br><img src="https://img-blog.csdnimg.cn/img_convert/b67155fea6c1706b8c5c92d66ac1a370.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/d84b5129bc659cc9221643b35113f64a.gif" alt="mark"></p><h5 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></h5><p><img src="https://img-blog.csdnimg.cn/img_convert/6e323d8a15c1502537da780fd090839b.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/1a5ffa2c929925fe1ff5d90c9e2a3d93.gif" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/1b599bf2042b7f3f6fe70495d3f8383c.gif" alt="mark"></p><h5 id="Turbo-Console-Log"><a href="#Turbo-Console-Log" class="headerlink" title="Turbo Console Log"></a><a href="https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log">Turbo Console Log</a></h5><p>快速添加 console.log 信息，js debug 必备</p><p>快捷键</p><p><code>ctrl + alt + l</code> 选中变量之后，使用这个快捷键生成 console.log</p><p><code>alt + shift + c</code> 注释所有 console.log</p><p><code>alt + shift + u</code> 启用所有 console.log</p><p><code>alt + shift + d</code> 删除所有 console.log<br><img src="https://img-blog.csdnimg.cn/img_convert/55df5150429f62b67cc12437ebb34381.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/2be97276a402eb7854890349f749068c.gif" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/e2cab741d82bd8ccff10d54ca239314e.gif" alt="mark"></p><h5 id="css-auto-prefix"><a href="#css-auto-prefix" class="headerlink" title="css-auto-prefix"></a><a href="https://marketplace.visualstudio.com/items?itemName=sporiley.css-auto-prefix">css-auto-prefix</a></h5><p>如图<br><img src="https://img-blog.csdnimg.cn/img_convert/75d1a39a7ccce33a667e205488346a91.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/a4a585ac1da4526ef6ea93a658e4c079.gif" alt="mark"></p><h5 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a><a href="https://www.cnblogs.com/joe235/p/13267973.html">CSS Peek</a></h5><p>查看 css 定义<br><img src="https://img-blog.csdnimg.cn/img_convert/9acdf8ffff3576d76322f74943266131.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/ef7d188dd2e1a6989347e8acb9a72cca.gif" alt="mark"></p><h3 id="八、数据分析"><a href="#八、数据分析" class="headerlink" title="八、数据分析"></a>八、数据分析</h3><h5 id="Sort-lines"><a href="#Sort-lines" class="headerlink" title="Sort lines"></a><a href="https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines">Sort lines</a></h5><p>对当前文本排序<br><img src="https://img-blog.csdnimg.cn/img_convert/bf221c2036184b16e8842861c71b8c83.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/6446221b207a990a33a1355638948e98.gif" alt="mark"></p><h5 id="Data-Preview"><a href="#Data-Preview" class="headerlink" title="Data Preview"></a><a href="https://marketplace.visualstudio.com/items?itemName=RandomFractalsInc.vscode-data-preview">Data Preview</a></h5><p>预览数据文件<br><img src="https://img-blog.csdnimg.cn/img_convert/199b63649a4870cbcea5c518fb5f07b0.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/d6b6ce7123661d483c459a388cda6987.png" alt="mark"></p><h3 id="九、修仙插件"><a href="#九、修仙插件" class="headerlink" title="九、修仙插件"></a>九、修仙插件</h3><h5 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a><a href="https://marketplace.visualstudio.com/items?itemName=LeetCode.vscode-leetcode">LeetCode</a></h5><p>刷题利器<br><img src="https://img-blog.csdnimg.cn/img_convert/181934293dc748da83760e5d07f1c915.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/a4a87d06de20f047e9da7d825f737c61.gif" alt="mark"></p><h5 id="VSC-Netease-Music"><a href="#VSC-Netease-Music" class="headerlink" title="VSC Netease Music"></a><a href="https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music">VSC Netease Music</a></h5><p>网易云音乐（程序员版）<br><img src="https://img-blog.csdnimg.cn/img_convert/a876b16a2417dcca997b5a7ecd990dc5.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/abe2a09ca168f920039d0f7a6fa6c05a.gif" alt="mark"></p><h5 id="daily-anime"><a href="#daily-anime" class="headerlink" title="daily anime"></a><a href="https://marketplace.visualstudio.com/items?itemName=deepred.daily-anime">daily anime</a></h5><p>追番神器<br><img src="https://img-blog.csdnimg.cn/img_convert/9bd37b8dd2a55d6c93dd230b6736aa82.png" alt="mark"><br><img src="https://img-blog.csdnimg.cn/img_convert/acaa6dc7eb08ecb5bfbe0f81d0a204ac.png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 插件 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 VSCODE 中高效使用 R 语言 （图文详解）</title>
      <link href="/posts/54867/"/>
      <url>/posts/54867/</url>
      
        <content type="html"><![CDATA[<h3 id="一、功能特性展示"><a href="#一、功能特性展示" class="headerlink" title="一、功能特性展示"></a>一、功能特性展示</h3><p>之前一直在用 Rstudio 来编写 R，也尝试用过 Pycharm 配置 R 环境。</p><p>但是由于现在需求要同时满足 Python，R 和网站要同时开发，为了避免来回切换不同的IDE，重复配置，还有路径一堆麻烦事。</p><p>今天我们先介绍在 VSCODE 中配置 R 环境，看看它有什么特性足以让我们更改自己习惯。</p><p>1、绘图<br><img src="https://img-blog.csdnimg.cn/img_convert/5a7d78b514dfb94041007aba7c31a77a.png" alt="mark">2、查看及搜索数据<br><img src="https://img-blog.csdnimg.cn/img_convert/4bba01739112b7d684a99868ce7a0510.png" alt="mark"></p><p>3、多行输出<br><img src="https://img-blog.csdnimg.cn/img_convert/5e1617d6241c3b6cfe10fef03e98dbf0.png" alt="mark">4、鼠标悬停，显示函数文档<br><img src="https://img-blog.csdnimg.cn/img_convert/c4feabd833967b58cc883f776e465b16.png" alt="mark"></p><p>5、鼠标悬停，显示变量信息<br><img src="https://img-blog.csdnimg.cn/img_convert/c579ee5f3080c975f9990414263a88ee.png" alt="mark">6、格式化代码<br><img src="https://img-blog.csdnimg.cn/img_convert/d13e34fdf73d348b6bab70ef0347ab23.png" alt="mark"></p><h3 id="二、材料"><a href="#二、材料" class="headerlink" title="二、材料"></a>二、材料</h3><ul><li>vscode</li><li>R</li><li>vscode 插件：<ul><li>R support for Visual Studio Code</li><li>R LSP Client</li></ul></li><li>Radian</li></ul><h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><h5 id="1、安装-vscode"><a href="#1、安装-vscode" class="headerlink" title="1、安装 vscode"></a>1、安装 vscode</h5><p>官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h5 id="2、安装-R"><a href="#2、安装-R" class="headerlink" title="2、安装 R"></a>2、安装 R</h5><ul><li><p>下载：<a href="https://cran.r-project.org/mirrors.html">https://cran.r-project.org/mirrors.html</a></p></li><li><p>选择清华的TUNA镜像  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvUFdyWVFqd2xwMXNrLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>根据需要选择下载，以windows下载为例  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc1NCRmJUZGQyQlFqLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择<code>base</code>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSXQxNjJPU3RmQTViLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>点击下载<img src="https://img-blog.csdnimg.cn/img_convert/99ec84a36e06bf9b3011b8cc7d62aafb.png" alt="mark"></p></li></ul><p>安装时需要注意：</p><p>选安装目录时候，需要注意没必要安装在C盘，后续安装包会占用资源。建议在其他盘创建目录，然后以R版本号命名的方式安装R。</p><blockquote><p>比如我在E盘下的<code>R</code>目录:<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSHpSOUFCbEVtSjFtLnBuZw?x-oss-process=image/format,png" alt="mark"></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/2ab654e7069c3140a21ef09565f4864d.png" alt="mark"></p><h5 id="3、安装插件"><a href="#3、安装插件" class="headerlink" title="3、安装插件"></a>3、安装插件</h5><h6 id="R-support-for-Visual-Studio-Code"><a href="#R-support-for-Visual-Studio-Code" class="headerlink" title="R support for Visual Studio Code"></a>R support for Visual Studio Code</h6><p>这是在 vscode 运行 R 语言的核心插件<br><img src="https://img-blog.csdnimg.cn/img_convert/8783f83d6e5ed2242b8f1bb251210423.png" alt="mark"></p><h6 id="R-LSP-Client"><a href="#R-LSP-Client" class="headerlink" title="R LSP Client"></a>R LSP Client</h6><p>R LSP Client 插件依托于 Language Server Protocol，LSP 可以使编程语言在编辑器上得到语法支持。提供自动补全，代码格式化，帮助文档等功能。<br><img src="https://img-blog.csdnimg.cn/img_convert/88c44044d95220f0a4738f326f230a1e.png" alt="mark"></p><h5 id="4、Radian"><a href="#4、Radian" class="headerlink" title="4、Radian"></a>4、Radian</h5><p>官网称 radian 是一款21世纪的R语言编辑器。</p><p>因为radian 是 python编写，首先我们得先有 python 环境，安装参考：<a href="https://zhenglei.blog.csdn.net/article/details/88828229%E3%80%82">https://zhenglei.blog.csdn.net/article/details/88828229。</a></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">pip install radian<br></code></pre></td></tr></table></figure><p>在 cmd 里输入 <code>radian</code> 查看是否安装正常<br><img src="https://img-blog.csdnimg.cn/img_convert/a7b8123d7b8bfddfc173d3550bc73735.png" alt="mark"></p><h3 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h3><p>1、在 VSCODE 右下角进入设置页面<br><img src="https://img-blog.csdnimg.cn/img_convert/ed8f7861a69f7fbb783b277686af8f5c.png" alt="mark"></p><p>2、根据不同操作系统，比如windows配置时，输入<code>r.rterm.windows</code>，填写 R 或 radian 路径。</p><p>如果为了更好的体验，建议配置 radian 的路径。</p><blockquote><p>在 shell 中拿到 radian 路径信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">where radian<br></code></pre></td></tr></table></figure><p>比如我的路径是：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f3025a7776bfa0c4f6ea2ce095865838.png" alt="mark"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">r.rterm.windows<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/234bce4710c2a0c965226adf5d46f0a3.png" alt="mark"></p><p>3、输入<code>r.br</code>，选中<code>bracketed paste</code></p><p>不勾选，Radian 不会启用<br><img src="https://img-blog.csdnimg.cn/img_convert/2c65cc22b18b7ab7cba9b4ef25519c88.png" alt="mark"></p><p>4、输入 <code>r.rterm.option</code>，删除<code>--no-save,--no-restore</code>，添加<code>--no-site-file</code><br><img src="https://img-blog.csdnimg.cn/img_convert/1003797b706389cb8a6d3a7af75f927b.png" alt="mark">5、输入<code>r.sessionWatcher</code>，勾选</p><p>可以实现绘图IDE，查看dataframe。如果想用原生绘图，取消勾选即可。<br><img src="https://img-blog.csdnimg.cn/img_convert/64b0266b24b3b9831132e00cea44cb63.png" alt="mark"></p><p>6、要实现自动补齐还需要安装：Languageserver</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;languageserver&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;languageserver&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1340a8c7f434ef5594083556734ae1f8.png" alt="mark"></p><h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><p>1、计算和输出</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">add <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    x <span class="hljs-operator">+</span> y<br><span class="hljs-punctuation">&#125;</span><br><br>print<span class="hljs-punctuation">(</span>add<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>add<span class="hljs-punctuation">(</span><span class="hljs-number">1.0e10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2.0e10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;one&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;multi-line&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;multi-line&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs r">add <span class="hljs-operator">&lt;-</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    x <span class="hljs-operator">+</span> y<br><span class="hljs-punctuation">&#125;</span><br><br>print<span class="hljs-punctuation">(</span>add<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>add<span class="hljs-punctuation">(</span><span class="hljs-number">1.0e10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2.0e10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;one&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-literal">NA</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>paste<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;multi-line&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;multi-line&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5e1617d6241c3b6cfe10fef03e98dbf0.png" alt="mark"></p><p>2、绘图</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">h <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br>M <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;D&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;E&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F&quot;</span><span class="hljs-punctuation">)</span><br>barplot<span class="hljs-punctuation">(</span>h<span class="hljs-punctuation">,</span><br>    names.arg <span class="hljs-operator">=</span> M<span class="hljs-punctuation">,</span> xlab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span><span class="hljs-punctuation">,</span><br>    col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#00cec9&quot;</span><span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Chart&quot;</span><span class="hljs-punctuation">,</span> border <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#fdcb6e&quot;</span><br><span class="hljs-punctuation"><code class="language-hljs r">h <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br>M <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;D&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;E&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F&quot;</span><span class="hljs-punctuation">)</span><br>barplot<span class="hljs-punctuation">(</span>h<span class="hljs-punctuation">,</span><br>    names.arg <span class="hljs-operator">=</span> M<span class="hljs-punctuation">,</span> xlab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span><span class="hljs-punctuation">,</span><br>    col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#00cec9&quot;</span><span class="hljs-punctuation">,</span> main <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Chart&quot;</span><span class="hljs-punctuation">,</span> border <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#fdcb6e&quot;</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/176833fd5d19d0d25cb758e60ca699d5.png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> R </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 报错：Can‘t connect to HTTPS URL because the SSL module is not available</title>
      <link href="/posts/57168/"/>
      <url>/posts/57168/</url>
      
        <content type="html"><![CDATA[<p>windows：</p><ul><li>将 D:\Python\anaconda3\Library\bin 加入环境变量</li><li>重启shell<br>Linux：<br><a href="https://stackoverflow.com/questions/41328451/ssl-module-in-python-is-not-available-when-installing-package-with-pip3">https://stackoverflow.com/questions/41328451/ssl-module-in-python-is-not-available-when-installing-package-with-pip3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hi-C 测序技术（图解详解）</title>
      <link href="/posts/34675/"/>
      <url>/posts/34675/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>Hi-C 技术源于基因组捕获技术（Chromosome conformation capture，3C），用于分析染色质三维空间结构的一种测序方法。[^1]</p><p>关于什么是三维基因组，可以参考：<a href="https://zhenglei.blog.csdn.net/article/details/111691514">一文读懂三维基因组</a></p><p>用途：</p><ul><li>量化在三维空间中基因组的染色质间交联（cross-linked chromatin）</li><li>解析全基因组互作模式，如启动子和增强子互作</li><li>构建三维空间结构模型，如研究基因组三维结构特征：compartment，TAD，loop等</li><li>构建全基因组互作图谱</li><li>辅助提升基因组组装</li><li>构建基因组单体型图谱</li></ul><h3 id="二、原理及步骤"><a href="#二、原理及步骤" class="headerlink" title="二、原理及步骤"></a>二、原理及步骤</h3><p><strong>1、甲醛固定</strong></p><p>先加入甲醛将基因组中参与染色质互作作用的蛋白质凝固</p><p>一般将活体样本在室温用 1-3%的甲醛处理 10-30min，但是此步骤会减少限制内切酶对DNA序列的消化效率，需要严格控制。[^2]</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54d0d32843a8c118ed624c06cd5ec355.png" alt="mark"></p><p><strong>2、酶切序列</strong></p><p>用限制性内切酶切割基因组，打断后的片段大小会影响测序分辨率，一般有两种酶可供选择：6bp 的限制性内切酶，4bp  的限制性内切酶。后者具有更高的分辨率。EcoR1 或 HindIII 用于每4000bp切割一次基因组，在人类基因组中产生约100万个片段。[^2]</p><p><img src="https://img-blog.csdnimg.cn/img_convert/988d46300529515231b42c080fe3e095.png" alt="mark"></p><p><strong>3、末端修复</strong></p><p>得到的片段具有平末端或粘性末端，然后将末端补平修复，加入生物素。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6da31d93b3371e866c4be9ec5a6e3d18.png" alt="mark"></p><p><strong>4、连接及解交联</strong></p><p>使用 T4 DNA连接酶连接互作片段，形成环状。将连接DNA片段的蛋白质消化掉，得到交联片段。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0aa491f6c995beb17dfb08a3fe64c440.png" alt="mark"></p><p><strong>5、序列打断</strong></p><p>使用超声波或其他方式，再次打断片段。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0052d3331f4cbc9b33a8204bb8872e38.png" alt="mark"></p><p><strong>6、上机测序</strong></p><p>用磁珠将带生物素的捕获，制作文库，上机测序。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b9fed047e3868d7c856ad512dddf51bc.png" alt="mark"></p><h3 id="三、三维基因组检测技术比较"><a href="#三、三维基因组检测技术比较" class="headerlink" title="三、三维基因组检测技术比较"></a>三、三维基因组检测技术比较</h3><p>下图展示了目前主流三维基因组测序技术[^3]：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3da0be11ef57792d606774c5bcb38511.png" alt="mark"></p><h4 id="1、C技术"><a href="#1、C技术" class="headerlink" title="1、C技术"></a>1、C技术</h4><h5 id="3C（一对一）"><a href="#3C（一对一）" class="headerlink" title="3C（一对一）"></a>3C（一对一）</h5><p>基因组捕获技术（Chromosome conformation capture，3C）是最早研究三维基因组的技术，需要提前知道互相作用区域，才能量化一对基因组基因座之间的互相作用。[^4]</p><h5 id="4C（一对多）"><a href="#4C（一对多）" class="headerlink" title="4C（一对多）"></a>4C（一对多）</h5><p>染色体构象捕获芯片（Chromosome conformation capture-on-chip，4C ），可以捕获一个基因区域其他区域间的互相作用。该技术不需要知道作用区域的先验知识就可以使用。[^5]</p><h5 id="5C（多对多）"><a href="#5C（多对多）" class="headerlink" title="5C（多对多）"></a>5C（多对多）</h5><p>染色体构象捕获碳拷贝（Chromosome conformation capture carbon copy，5C） ，可以检测某段区域内所有的互作，但是该区域一般&lt;1 Mb。覆盖度的问题也就造成该技术不适用于全基因组测序。[^6]</p><h5 id="Hi-C（全部互作）"><a href="#Hi-C（全部互作）" class="headerlink" title="Hi-C（全部互作）"></a>Hi-C（全部互作）</h5><p>高通量基因组捕获技术，基本解决了上述技术的缺点，可以实现全基因组覆盖检测全部未知互作区域。</p><h4 id="2、基于免疫沉淀技术"><a href="#2、基于免疫沉淀技术" class="headerlink" title="2、基于免疫沉淀技术"></a>2、基于免疫沉淀技术</h4><h5 id="ChIP-loop"><a href="#ChIP-loop" class="headerlink" title="ChIP-loop"></a>ChIP-loop</h5><p>该技术将 3C 与 ChIP-seq 结合，可以检测目的蛋白质介导的两个目的基因区域互作。[^7]</p><h5 id="ChIA-PET"><a href="#ChIA-PET" class="headerlink" title="ChIA-PET"></a>ChIA-PET</h5><p>该技术将 HiC 与 ChIP-seq 结合，可以检测目的蛋白质的所有互相作用.[^8]</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><table><thead><tr><th></th><th>互作</th><th>覆盖</th><th>作用</th></tr></thead><tbody><tr><td>3C</td><td>单对单</td><td>&lt; 1 Mb</td><td>检测已知基因组基因区域之间的互相作用</td></tr><tr><td>4C</td><td>一对多</td><td>全基因组</td><td>确定某基因组区域与其他区域的互相作用</td></tr><tr><td>5C</td><td>多对多</td><td>&lt; 1Mb</td><td>确定染色体特定区域内的全部高级结构</td></tr><tr><td>Hi-C</td><td>全部互作</td><td>全基因组</td><td>检测全基因组范围内的全部高级结构</td></tr><tr><td>ChIP-loop</td><td>一对一</td><td>&lt; 1 Mb</td><td>检测目的蛋白质介导的两个目的基因区域互作</td></tr><tr><td>ChIA-PET</td><td>全部互作</td><td>全基因组</td><td>检测目的蛋白质的所有互相作用</td></tr></tbody></table><p>[^1]: de Wit E, de Laat W (January 2012). “A decade of 3C technologies: insights into nuclear organization”<br>[^2]: Naumova N, Smith EM, Zhan Y, Dekker J (November 2012).  Analysis of long-range chromatin interactions using Chromosome Conformation Capture<br>[^3]: Li, G., Cai, L., Chang, H., Hong, P., Zhou, Q., Kulakova, E. V, … Ruan, Y. (2014). Chromatin Interaction Analysis with Paired-End Tag (ChIA-PET) sequencing technology and application.<br>[^4]: Dekker J, Rippe K, Dekker M, Kleckner N (February 2002). “Capturing chromosome conformation”. <em>Science</em>.<br>[^5]: Zhao, Zhihu. et al. (2006). “Circular chromosome conformation capture (4C) uncovers extensive networks of epigenetically regulated intra- and interchromosomal interactions”. <em>Nature Genetics</em>.<br>[^6]: Dostie J, Richmond TA, Arnaout RA, Selzer RR, Lee WL, Honan TA, et al. (October 2006). “Chromosome Conformation Capture Carbon Copy (5C): a massively parallel solution for mapping interactions between genomic elements”. <em>Genome Research</em>.<br>[^7]: Horike S, Cai S, Miyano M, Cheng JF, Kohwi-Shigematsu T (January 2005). “Loss of silent-chromatin looping and impaired imprinting of DLX5 in Rett syndrome”. <em>Nature Genetics</em>.<br>[^8]: Fullwood MJ, Liu MH, Pan YF, Liu J, Xu H, Mohamed YB, et al. (November 2009). “An oestrogen-receptor-alpha-bound human chromatin interactome”]. <em>Nature</em>.</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> Hi-C </tag>
            
            <tag> 三维基因组 </tag>
            
            <tag> 测序技术 </tag>
            
            <tag> 二代测序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解三代测序（Nanopore）</title>
      <link href="/posts/8672/"/>
      <url>/posts/8672/</url>
      
        <content type="html"><![CDATA[<h3 id="一、测序原理"><a href="#一、测序原理" class="headerlink" title="一、测序原理"></a>一、测序原理</h3><p>先介绍 Nanopore 测序中的几位主角：</p><p><code>Reader</code> ：在自然界中，有一种可以嵌入到细胞膜中作为离子或分子通道的跨膜蛋白，具有天然的蛋白纳米孔。经过人为基因工程修饰后，得到的就是 Nanopore 测序所需的 Reader 蛋白。<br><img src="https://img-blog.csdnimg.cn/img_convert/13bd67376e79c80ad0cd229ccd2cd7f2.png" alt="mark"></p><p><code>Membrane</code>：Reader 蛋白会被嵌入到高电阻率的 Membrane （人工合成的多聚物膜），膜两侧是离子溶液，在两侧加不同的电位，离子就会在孔中流动，形成电流。<br><img src="https://img-blog.csdnimg.cn/img_convert/3c152908c2aa9337541c5bfd71ad4634.png" alt="mark"></p><p><code>Motor</code>：在 Nanopore 文库构建时，需要在接头上连接一种动力蛋白，用于将DNA或RNA分子推入纳米孔中。以DNA解螺旋酶作为 Motor（动力蛋白）为例，它可以除了可以解开双螺旋，使之变为单链，还可以提供推动力。<br><img src="https://img-blog.csdnimg.cn/img_convert/1c83b72bf3b63bf684bd33ea315e9b63.png" alt="mark"></p><p><code>Tether</code>：该蛋白用于锚定DNA或RNA链，防止在溶液中飘动，并使其进入纳米孔中。<img src="https://img-blog.csdnimg.cn/img_convert/93972d0bac466454e840b0bfb9d4bd62.gif" alt="mark"></p><p>这时，解开的其中一条链会穿过蛋白质孔，它在通过蛋白孔时，会对膜两边离子的稳定流动产生扰动。不同的碱基，对离子流的影响不同，也就会产生不同的电流大小，进而形成下面的电流信号图。<br><img src="https://img-blog.csdnimg.cn/img_convert/64a99d9eb756528ef0029112e086b2e3.png" alt="mark"></p><p>利用这些电流信号，使用计算机软件识别后，推断出碱基类型，完成测序。</p><h3 id="二、测序仪介绍"><a href="#二、测序仪介绍" class="headerlink" title="二、测序仪介绍"></a>二、测序仪介绍</h3><p>虽然 Nanopore 测序仪种类很多，但都是基于Nanopore芯片来搭建的平台，大到由多个芯片阵列组成的PromehION，GridION系列测序仪，小到可以连接手机的Type C，电脑USB的MnION系列便携式测序仪。<br><img src="https://img-blog.csdnimg.cn/img_convert/0eb06842f1ff24be0b11f4dacc1a1d1c.png" alt="mark"></p><p>这里边，最著名的就是MnION系列，2016年8月，美国宇航员凯特·鲁宾斯在国际空间站完成微重力条件的DNA测序。</p><p>它在测序时，一般像下图这样连接就行，显而易见的便携性。比如，可以直接用它在深入疫区采集样本后进行实时分析，为防疫工作争取大量宝贵的时间和资源。<br><img src="https://img-blog.csdnimg.cn/img_convert/5de01c91560c9ecc6f3e5199a9478c37.png" alt="mark"></p><p>测序时，将制备好的文库或样本溶液，滴在芯片小孔中，开始测序。<br><img src="https://img-blog.csdnimg.cn/img_convert/81c46d5fb50f960a7fa671cb74760736.png" alt="mark"></p><p>一张芯片中有 2048 个 membrane wells，也就是芯片上的一个孔，每个孔包含一个nanopore Reader。<br><img src="https://img-blog.csdnimg.cn/img_convert/a1ea845ba325d4bccf113f53179fdcb4.png" alt="mark"></p><p>每四个 wells 共享一个 Amplifier（信号放大器），一张芯片中有 512 个信号放大器，也就是 512 组 wells。<br><img src="https://img-blog.csdnimg.cn/img_convert/676ad237805e85956a821422ea95ae55.png" alt="mark"></p><p>在启动测序仪后，机器自检，会将每组 wells 中依据效率高低排序。测序开始，仪器先用每组 wells 中效率最高的 wells，运行 8 小时后，更换效率第二的，以此类推。</p><p>但是，在实际使用过程中，只有 1200 个 wells可以正常工作。</p><p>造成 wells 失效的原因：</p><ul><li>wells 中没有 Reader 蛋白，或纳米孔不通，这时无电信号</li><li>膜破损，这时有强电信号，不能正常测序</li><li>在单个 well 中有两个及以上的 Reader 蛋白，电信号互相干扰</li></ul><h3 id="三、建库方法"><a href="#三、建库方法" class="headerlink" title="三、建库方法"></a>三、建库方法</h3><h4 id="1、1D-文库"><a href="#1、1D-文库" class="headerlink" title="1、1D 文库"></a>1、1D 文库</h4><p>1D文库是将DNA双链，解链为正义链与反义链，分别测序，大约有 85% 的碱基判读准确率。</p><p>目前<code>1D文库</code>有两种建库方案：</p><h5 id="标准建库"><a href="#标准建库" class="headerlink" title="标准建库"></a>标准建库</h5><ul><li><p>将 DNA 打断<br><img src="https://img-blog.csdnimg.cn/img_convert/189a077d952293a59a076dd8b570668f.png" alt="mark"></p></li><li><p>补齐DNA末端，末端加 A 碱基<br><img src="https://img-blog.csdnimg.cn/img_convert/7061e05c2a5cae70e0ed5355d3c2c200.png" alt="mark"></p></li><li><p>连接 Adapter（ 接头序列），接头上连有 Motor 蛋白<br><img src="https://img-blog.csdnimg.cn/img_convert/95dc2ed05b612fae48608e4a41fb6084.png" alt="mark"></p></li><li><p>接头中有一段序列可以与 Tether 蛋白结合，作用是为了将 DNA 链吸附在膜上，将 DNA 锚定，不易被溶液洗走<br><img src="https://img-blog.csdnimg.cn/img_convert/6831486923e9b1c6d930eefb5d7d04a0.png" alt="mark"></p><p>下图是 Tether 与接头序列识别及锚定过程</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/93972d0bac466454e840b0bfb9d4bd62.gif" alt="mark"></p><h5 id="转座酶建库"><a href="#转座酶建库" class="headerlink" title="转座酶建库"></a>转座酶建库</h5><ul><li><p>建库时使用连有测序接头的转座酶，该酶可以将长链 DNA 链切断<br><img src="https://img-blog.csdnimg.cn/img_convert/aba7d84c3340c9b4295230e75ca4d78f.png" alt="mark"></p></li><li><p>由于该酶的特性，会在DNA的断点两端加接头序列<br><img src="https://img-blog.csdnimg.cn/img_convert/52bec0ac764fb2d1e34a979dd154c6f8.png" alt="mark"></p></li><li><p>随后在测序接头加入 Motor 蛋白<br><img src="https://img-blog.csdnimg.cn/img_convert/44bc79a15820f5d636b3bc888f932cfb.png" alt="mark"></p></li></ul><h4 id="2、-1D-2-文库"><a href="#2、-1D-2-文库" class="headerlink" title="2、$1D^2$ 文库"></a>2、$1D^2$ 文库</h4><p>在 DNA 两侧接 $1D^2$ 接头，其他步骤和 1D 文库类似。</p><p>这种文库中的$1D^2$ 接头，可以让第二链紧跟第一链来一起测序。</p><p>由于可以测到两条链，可以相互矫正，进而提高判读准确率，能达到 90%以上的碱基判读准确率。<br><img src="https://img-blog.csdnimg.cn/img_convert/d1d673aa83104688716f225cdfc4fd70.png" alt="mark"></p><p>但是，由于文库质量，蛋白活性等因素，导致并不是所有的第一链后都会测到第二链。</p><h3 id="四、碱基判读"><a href="#四、碱基判读" class="headerlink" title="四、碱基判读"></a>四、碱基判读</h3><p>在测序过程中，得到的信号并不是每次测得一个碱基信号。而是根据 Reader 蛋白孔的纵向长度，R9 大约为 5 个碱基长，也就是说，同时会测得 5 个碱基的电信号，这并不是一项简单的判断过程。</p><p>目前，Nanopore 公司采用一种机器学习方法，递归神经网络（RNN），对碱基进行判读。</p><p>该过程简单来说，是将已知碱基序列的电信号波形图做训练集和测试集，通过修正参数，拿到模型。最后，将新测到的未知序列的波形图与之比对，从而提高判读准确率。</p><p>但是，还是有误读情况：</p><ul><li>由于空间结构相似性，嘌呤间误读，嘧啶间误读更容易发生。</li><li>碱基复杂度低的序列（如，polyA序列），更容易误读</li></ul><h3 id="五、测序影响因素"><a href="#五、测序影响因素" class="headerlink" title="五、测序影响因素"></a>五、测序影响因素</h3><h4 id="电压"><a href="#电压" class="headerlink" title="电压"></a>电压</h4><p>以R9芯片为例，测序过程，先用 180 mV 电压，每 10 min，短时间翻转电压方向，作用是激活被堵住或卡住的 Reader 蛋白孔。但是，这个过程也会使正常测序的 DAN链倒吐回去。</p><p>随着电极使用时间的增加，电极的电压会发生漂移，因此每过两小时，要增加 5mV 电压抵消影响。</p><h4 id="速度与产量"><a href="#速度与产量" class="headerlink" title="速度与产量"></a>速度与产量</h4><p>R9 芯片，测序速度是 250 碱基&#x2F;s，一张芯片可以得到约 5 ~ 10 G的碱基序列。</p><h3 id="六、芯片版本号"><a href="#六、芯片版本号" class="headerlink" title="六、芯片版本号"></a>六、芯片版本号</h3><p>Nanopore 公司每一种新芯片就会有新 Reader蛋白，Motor，Membrane 版本号，一般命名规则如下：</p><ul><li><p>Reader：R8，R9，R10，等</p></li><li><p>Motor：E6，E7，E8，等</p></li><li><p>Membrane：M9，M10，等</p></li></ul><p>比如，R9 指的是大肠杆菌的 CsgG 蛋白质改造的 Reader 蛋白。<br><img src="https://img-blog.csdnimg.cn/img_convert/dee450e02d1f1ce4ff1fc80f23189549.png" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Nanopore 测序是基于电学的检测，区别与 Illumina 和 PacBio 的光学</li><li>测序仪器便携，可用于远离实验室的地区，如疫区，农场等</li><li>读长较长，大约 300,000 ~ 400,000 个碱基，可用于从头组装基因组，可变剪切等</li><li>可以对DNA ，RNA，甚至蛋白质序列进行测序</li><li>碱基判读准确率较高，R10纳米孔数据质量值超过Q40（错误率0.01%），一致性（Identity）质量值达Q50。</li></ul><p>参考：</p><p><a href="https://www.youtube.com/watch?v=RcP85JHLmnI">https://www.youtube.com/watch?v=RcP85JHLmnI</a></p><p><a href="https://www.youtube.com/watch?v=E9-Rm5AoZGw&t=13s">https://www.youtube.com/watch?v=E9-Rm5AoZGw&amp;t=13s</a></p><p><a href="https://www.youtube.com/watch?v=sv9fFeSd3kE">https://www.youtube.com/watch?v=sv9fFeSd3kE</a></p><p><a href="https://nanoporetech.com/">https://nanoporetech.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 三代测序 </tag>
            
            <tag> Nanopore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂三维基因组</title>
      <link href="/posts/54168/"/>
      <url>/posts/54168/</url>
      
        <content type="html"><![CDATA[<p>每个人体内都有着两米长的DNA，它是如何紧密折叠在直径 10 微米小的细胞核内。</p><p>而且还要在极度压缩的情况下，精确地调度数量庞大的调控元件去表达两万多个基因。</p><p>如果其中一些关键环节出现问题，随之而来的就是遗传疾病，甚至癌症。</p><p>接下来，我们进入细胞核的世界，从三维空间的角度，看看它是如何组织，协调这么庞大的工程。</p><h4 id="一、细胞核-Nucleus"><a href="#一、细胞核-Nucleus" class="headerlink" title="一、细胞核 Nucleus"></a>一、细胞核 <em>Nucleus</em></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/4f188afc67ff1a3a50f4db4041aff7fa.png" alt="mark"></p><p>首先看下染色质的主要存储容器——细胞核，主要看与三维基因组密切相关的三个结构：</p><p><strong>核膜 <em>Nuclear Envelope</em></strong>：用来包裹染色质，控制物质进出</p><p>**核纤层 <em>Nuclear Lamina</em>：**位于核膜的内表面的纤维网络，支持核膜，锚定染色质，与核骨架相连，参与细胞周期解离和重建</p><p>*<em>核仁 <em>Nucleolus</em>：</em>* 主要存储合成 rRNA，存储装配核糖体</p><h4 id="二、染色质疆域-Chromosome-Territory，CT"><a href="#二、染色质疆域-Chromosome-Territory，CT" class="headerlink" title="二、染色质疆域 Chromosome Territory，CT"></a>二、染色质疆域 <em>Chromosome Territory，CT</em></h4><p>在真核生物的基因组中，细胞核内的染色质分布并不是随机的，为了跨越较大的基因组距离去互相作用，比如增强子和启动子的互作，这些密切接触的染色质会靠的更近，这就是染色质疆域。大概就像这样：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4c76bcfb71222dd7102b7f078c8317dd.png" alt="mark"></p><p>我们可以使用染色体构象捕获技术（3C，4C，Hi-C，HiChIP）来获取到3D基因组。</p><p>在二维视角下的染色质疆域</p><p><img src="https://img-blog.csdnimg.cn/img_convert/47acb9608728a0f4cae5ec6287362e9a.png" alt="mark"></p><p>在三维视角下的染色质疆域</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cf2c513aaa62a34a5ad55a769098caf0.png" alt="mark"></p><p>目前，发现这些区域有一定的规律：</p><ul><li><strong>染色体的位置相对不变</strong>：这种相对不变会持续到有丝分裂开始。比如大型的，基因贫乏的染色体通常位于核层附近的外围，而较小的，富含基因的染色体则更靠近核中心。</li><li><strong>染色质的位置会因细胞类型不同而改变</strong>：例如，X染色体已显示在肝细胞中比在肾细胞中更频繁地定位在外围</li><li><strong>同源染色体在细胞间期倾向于彼此分离</strong></li></ul><p>为了更方便的研究，进一步把这些互作部分划分为：</p><h4 id="三、染色质区室-A-x2F-B-compartments"><a href="#三、染色质区室-A-x2F-B-compartments" class="headerlink" title="三、染色质区室 A&#x2F;B compartments"></a>三、染色质区室 <em>A&#x2F;B compartments</em></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/489edcf0a46f81d0bea533c96d868d15.png" alt="mark"></p><p>使用 Hi-C 发现，整个基因组被分割为两个空间区室，分布标记为 A，B 染色质区，往往区室内互作频繁，而区室间互作较少。</p><p><strong>A compartments：</strong>开放的染色质，表达活跃，基因丰富，具有较高的GC含量，包含用于主动转录的组蛋白标记，通常位于细胞核的内部。</p><p><strong>B compartments：</strong>关闭的染色质，表达不活跃，基因缺乏，结构紧凑，含有基因沉默的组蛋白标志物，位于核的外围。它们主要由LAD组成，包含晚期复制起点。</p><p>在生物信息分析中，我们通过计算染色体内部互作的相关性来区分两种不同的区室。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7c5be21bffa4875a71616f5711a9a1f.png" alt="mark"></p><h4 id="四、拓扑结构域-Topologically-associating-Domains，TAD"><a href="#四、拓扑结构域-Topologically-associating-Domains，TAD" class="headerlink" title="四、拓扑结构域 Topologically associating Domains，TAD"></a>四、拓扑结构域 <em>Topologically associating Domains，TAD</em></h4><p>在染色质区室中，我们还会发现互相作用相对频繁的基因组区域，这些就是拓扑结构域 TAD。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b10d7150cce77bcc4e1289f8f3dbc4c0.png" alt="mark"></p><p>一般这些区域在不同的哺乳动物的不同细胞中都很保守，并且高度富集 CTCF 和 粘附蛋白。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7e4497dce8a1e11869a4b6dadff915ce.png" alt="mark"></p><p>通过计算基因互作矩阵，我们会得到一个类似上图的大三角形，可以看到上面有几个深红色的三角，代表内部高度互作域被定义为拓扑结构域，一般是400-800kb较稳定的复制单元。</p><p><strong>TAD 的边界：</strong></p><ul><li>通过与上下游的互作频率趋近于0的DI值界定TAD边界</li><li>边界中富含绝缘子蛋白 CTCF 结合位点、活跃转录标记，如H3K4me3及H3K36me3</li><li>富含结构蛋白结合位点，与管家基因，转运RNA基因和短间隔核元素（SINEs）相关的表观遗传标记。</li></ul><p>目前研究最多的是，TAD通过限制每个TAD的增强子-启动子相互作用来调节基因表达，但是TAD详细功能还有待发现。</p><p>尽管许多蛋白质复合物，DNA 元件与TAD边界相关，但TAD形成的基础机制也很复杂，尚未完全阐明。</p><p>目前认可的模式是，以CTCF蛋白为核心，在黏附蛋白的帮助下，通过loop extrusion模型挤压形成染色质环，锚定TAD边界，为TAD的形成提供了结构基础。此外，TAD 边界的刚度本身可能会导致 TAD 的形成。</p><p>TAD 可细分为 <strong>sub TAD</strong>, 大约长 100kb，sub TAD之间的边界在不同细胞组织间具有差异，与细胞特异性的增强子-启动子互作有关。</p><p>在细菌中，这种互作结构叫做<strong>染色质互相作用域（Chromosomal Interacting Domains，CIDs）</strong></p><h4 id="五、层关联域-Lamina-Associating-Domains，LAD"><a href="#五、层关联域-Lamina-Associating-Domains，LAD" class="headerlink" title="五、层关联域 Lamina Associating Domains，LAD"></a>五、层关联域 <em>Lamina Associating Domains，LAD</em></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/5247372e1c0b8bbbeca85d4a974296b3.png" alt="mark"></p><p>LAD约占基因组的40％，大小介于40kb至30Mb之间，基因较少。 LAD主要由转录沉默染色质组成，富含组蛋白H3K27me3 ，这是异染色质的常见翻译后组蛋白修饰。</p><p><strong>结构性 LAD，constitutive LAD，cLAD：</strong>富含AT的异染色质区域，靠近在核纤层上，这些区域对染色体之间的结构形成至关重要。</p><p><strong>兼性 LAD， facultative LAD，fLAD：</strong>具有不同的核纤层相互作用，在不同细胞中包含不同的被激活或抑制基因，从而导致不同的细胞类型。</p><h4 id="六、核仁关联域-Nucleolar-Associating-Domains，NAD"><a href="#六、核仁关联域-Nucleolar-Associating-Domains，NAD" class="headerlink" title="六、核仁关联域 Nucleolar Associating Domains，NAD"></a>六、核仁关联域 <em>Nucleolar Associating Domains，NAD</em></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/a89a367ef3938b77393d3a608632d73e.png" alt="mark"></p><p>NAD占基因组的4％，几乎具有与LAD相同的所有物理特征。通过对LAD和NAD的序列分析发现，某些区域可能在核纤层和核仁间切换。</p><h4 id="七、染色质环-Chromatin-loops"><a href="#七、染色质环-Chromatin-loops" class="headerlink" title="七、染色质环 Chromatin loops"></a>七、染色质环 <em>Chromatin loops</em></h4><p>染色质在空间中形成环状结构，因此相距很远的染色质区域也可以在三维空间中聚集在一起。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6cc85e5404aa919eaf594f3627ff552d.png" alt="mark"></p><p>据推测大约50％的人类基因通过染色质环化过程参与长距离的染色质相互作用。我们可以基于基因互作矩阵，来查看互作频率相对周围较强的区域，在下图中用蓝色圆圈标记，这些位置就是为染色质环区域。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d29fabc3c01cda2d09ad65624ca8fe9.png" alt="mark"></p><p>这种结构可以使在线性距离很远的元件得以相遇，以此来调控生命活动，比如，从空间上拉近启动子和增强子的距离，促使基因的转录起始。</p><p>这个过程中，接触到启动子的增强子元件可以募集大量蛋白质复合物，例如介导复合物，PIC和细胞特异性转录因子。另外，许多因素也会促进该过程，包括结构蛋白（主要是CTCF和Cohesin），共激活因子和ncRNA等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0886dd140a0b0a028afe599589ffb5d5.png" alt="mark"></p><p>下一篇，我们来详细看看三维基因组检测技术：染色体构象捕获技术（3C，4C，Hi-C，HiChIP）</p><p><strong>参考</strong></p><p>The new cytogenetics: blurring the boundaries with molecular biology</p><p>Regulation of disease-associated gene expression in the 3D genome</p><p>Chromatin Domains: The Unit of Chromosome Organization</p><p>Minor Loops in Major Folds: Enhancer–Promoter Looping, Chromatin Restructuring, and Their Association with Transcriptional Regulation and Disease</p><p>Comprehensive Mapping of Long-Range Interactions Reveals Folding Principles of the Human Genome</p><p> A 3D map of the human genome at kilobase resolution reveals principles of chromatin looping</p><p>The Three-Dimensional Organization of Mammalian Genomes</p><p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4465761">Enhancer activation requires trans-recruitment of a mega transcription factor complex</a></p><p><a href="https://foo-lab.com/services/chromatin-architecture-epigenetics/">https://foo-lab.com/services/chromatin-architecture-epigenetics/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 三维基因组 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> HiC </tag>
            
            <tag> 3D 基因组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 自动化提取基因的 CDS</title>
      <link href="/posts/29665/"/>
      <url>/posts/29665/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境准备及背景介绍"><a href="#一、环境准备及背景介绍" class="headerlink" title="一、环境准备及背景介绍"></a>一、环境准备及背景介绍</h3><p>Python 开发环境：<a href="https://blog.csdn.net/u011262253/article/details/105902060">搭建 Python 高效开发环境： Pycharm + Anaconda</a></p><p>Biopython 序列处理：<a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的 Python 02 | 用biopython解析序列</a></p><p>示例 Genbank 数据：<a href="https://download.csdn.net/download/u011262253/13743909">下载链接</a></p><p>Genbank 数据介绍：<a href="https://blog.csdn.net/u011262253/article/details/82794678">生物信息中的Python 05 | 从 Genbank 文件<em>中</em>提取 CDS 等其他特征序列</a></p><p>目录结构：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/24e6308a3969360006d5c2597a8675a8.png" alt="mark"></p><h3 id="二、Python-实现"><a href="#二、Python-实现" class="headerlink" title="二、Python 实现"></a>二、Python 实现</h3><p><code>BaimoTools.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/12/20 14:28</span><br><span class="hljs-comment"># @File    : BaimoTools</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO, SeqFeature<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaimoTools</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, gb_file, fasta_file</span>):<br>        self.complete_fasta = <span class="hljs-string">&quot;&quot;</span><br>        self.fasta_file = fasta_file<br>        self.gb_file = gb_file<br>        self.feature = <span class="hljs-literal">None</span><br>        self.record = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">format_val</span>(<span class="hljs-params">self, <span class="hljs-built_in">object</span>=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        格式化对象值为字符串</span><br><span class="hljs-string">        :param object: 对象或对象键值</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        key = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 判断参数是否为字符</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">object</span>, <span class="hljs-built_in">str</span>):<br>            obj = self.feature.qualifiers<br>            key = <span class="hljs-built_in">object</span><br>        <span class="hljs-keyword">else</span>:<br>            obj = <span class="hljs-built_in">object</span><br>        <span class="hljs-comment"># 为字符，提取 feature.qualifiers 对象关键字</span><br>        <span class="hljs-keyword">if</span> key != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> obj.get(key):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">&quot;&quot;</span>:<br>            val = obj<br>        <span class="hljs-keyword">else</span>:<br>            val = obj[key]<br>        <span class="hljs-comment"># 转换为字符串</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(val):<br>            val = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(val) == <span class="hljs-number">1</span>:<br>            val = val[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(val, SeqFeature.CompoundLocation) <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(val, SeqFeature.FeatureLocation):<br>                val = <span class="hljs-built_in">str</span>(val)<br>            <span class="hljs-keyword">else</span>:<br>                val = <span class="hljs-string">&quot; | &quot;</span>.join(val)<br>        <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_cds</span>(<span class="hljs-params">self, cds</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取 CDS 的 Fasta 序列</span><br><span class="hljs-string">        :param cds: 获取指定基因的 CDS 区域，如果为空，则获取全部</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        records = <span class="hljs-built_in">list</span>(SeqIO.parse(self.gb_file, <span class="hljs-string">&quot;genbank&quot;</span>))<br>        <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> records:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;record.<span class="hljs-built_in">id</span>&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> record.features:<br>                <span class="hljs-comment"># 提取 CDS 信息</span><br>                <span class="hljs-keyword">if</span> feature.<span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;CDS&quot;</span>:<br>                    self.feature = feature<br>                    self.record = record<br>                    cds_gene = self.format_val(<span class="hljs-string">&#x27;gene&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> cds == <span class="hljs-string">&quot;&quot;</span>:<br>                        self.complete_fasta += self.format_fasta()<br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cds, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> cds_gene == cds:<br>                        self.complete_fasta += self.format_fasta()<br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cds, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> cds_gene <span class="hljs-keyword">in</span> cds:<br>                        self.complete_fasta += self.format_fasta()<br>        self.write_file()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        写入文件</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.fasta_file, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f_obj:<br>            f_obj.writelines(self.complete_fasta)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">format_fasta</span>(<span class="hljs-params">self, num=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        整理 Fasta 格式</span><br><span class="hljs-string">        :param num: 每行字符数，超出则换行</span><br><span class="hljs-string">        :return: Fasta 文本</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cds_gene = self.format_val(<span class="hljs-string">&#x27;gene&#x27;</span>)<br>        cds_location = self.format_val(self.feature.location)<br>        cds_product = self.format_val(<span class="hljs-string">&#x27;product&#x27;</span>)<br>        cds_protein_id = self.format_val(<span class="hljs-string">&#x27;protein_id&#x27;</span>)<br>        cds_translation = self.format_val(<span class="hljs-string">&#x27;translation&#x27;</span>)<br>        complete_ana = <span class="hljs-string">f&quot;&gt;<span class="hljs-subst">&#123;self.record.<span class="hljs-built_in">id</span>&#125;</span> | <span class="hljs-subst">&#123;cds_gene&#125;</span> | <span class="hljs-subst">&#123;cds_product&#125;</span> | <span class="hljs-subst">&#123;cds_protein_id&#125;</span> | <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(cds_location)&#125;</span>\n&quot;</span><br>        format_seq = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> num:<br>            <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(cds_translation):<br>                format_seq += char<br>                <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % num == <span class="hljs-number">0</span>:<br>                    format_seq += <span class="hljs-string">&quot;\n&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            format_seq = cds_translation<br>        <span class="hljs-keyword">return</span> complete_ana + format_seq + <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/12/20 14:28</span><br><span class="hljs-comment"># @File    : BaimoTools</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO, SeqFeature<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaimoTools</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, gb_file, fasta_file</span>):<br>        self.complete_fasta = <span class="hljs-string">&quot;&quot;</span><br>        self.fasta_file = fasta_file<br>        self.gb_file = gb_file<br>        self.feature = <span class="hljs-literal">None</span><br>        self.record = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">format_val</span>(<span class="hljs-params">self, <span class="hljs-built_in">object</span>=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        格式化对象值为字符串</span><br><span class="hljs-string">        :param object: 对象或对象键值</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        key = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 判断参数是否为字符</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">object</span>, <span class="hljs-built_in">str</span>):<br>            obj = self.feature.qualifiers<br>            key = <span class="hljs-built_in">object</span><br>        <span class="hljs-keyword">else</span>:<br>            obj = <span class="hljs-built_in">object</span><br>        <span class="hljs-comment"># 为字符，提取 feature.qualifiers 对象关键字</span><br>        <span class="hljs-keyword">if</span> key != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> obj.get(key):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">elif</span> key == <span class="hljs-string">&quot;&quot;</span>:<br>            val = obj<br>        <span class="hljs-keyword">else</span>:<br>            val = obj[key]<br>        <span class="hljs-comment"># 转换为字符串</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(val):<br>            val = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(val) == <span class="hljs-number">1</span>:<br>            val = val[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(val, SeqFeature.CompoundLocation) <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(val, SeqFeature.FeatureLocation):<br>                val = <span class="hljs-built_in">str</span>(val)<br>            <span class="hljs-keyword">else</span>:<br>                val = <span class="hljs-string">&quot; | &quot;</span>.join(val)<br>        <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_cds</span>(<span class="hljs-params">self, cds</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取 CDS 的 Fasta 序列</span><br><span class="hljs-string">        :param cds: 获取指定基因的 CDS 区域，如果为空，则获取全部</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        records = <span class="hljs-built_in">list</span>(SeqIO.parse(self.gb_file, <span class="hljs-string">&quot;genbank&quot;</span>))<br>        <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> records:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;record.<span class="hljs-built_in">id</span>&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> record.features:<br>                <span class="hljs-comment"># 提取 CDS 信息</span><br>                <span class="hljs-keyword">if</span> feature.<span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;CDS&quot;</span>:<br>                    self.feature = feature<br>                    self.record = record<br>                    cds_gene = self.format_val(<span class="hljs-string">&#x27;gene&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> cds == <span class="hljs-string">&quot;&quot;</span>:<br>                        self.complete_fasta += self.format_fasta()<br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cds, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> cds_gene == cds:<br>                        self.complete_fasta += self.format_fasta()<br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cds, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> cds_gene <span class="hljs-keyword">in</span> cds:<br>                        self.complete_fasta += self.format_fasta()<br>        self.write_file()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write_file</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        写入文件</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.fasta_file, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f_obj:<br>            f_obj.writelines(self.complete_fasta)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">format_fasta</span>(<span class="hljs-params">self, num=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        整理 Fasta 格式</span><br><span class="hljs-string">        :param num: 每行字符数，超出则换行</span><br><span class="hljs-string">        :return: Fasta 文本</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cds_gene = self.format_val(<span class="hljs-string">&#x27;gene&#x27;</span>)<br>        cds_location = self.format_val(self.feature.location)<br>        cds_product = self.format_val(<span class="hljs-string">&#x27;product&#x27;</span>)<br>        cds_protein_id = self.format_val(<span class="hljs-string">&#x27;protein_id&#x27;</span>)<br>        cds_translation = self.format_val(<span class="hljs-string">&#x27;translation&#x27;</span>)<br>        complete_ana = <span class="hljs-string">f&quot;&gt;<span class="hljs-subst">&#123;self.record.<span class="hljs-built_in">id</span>&#125;</span> | <span class="hljs-subst">&#123;cds_gene&#125;</span> | <span class="hljs-subst">&#123;cds_product&#125;</span> | <span class="hljs-subst">&#123;cds_protein_id&#125;</span> | <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(cds_location)&#125;</span>\n&quot;</span><br>        format_seq = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> num:<br>            <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(cds_translation):<br>                format_seq += char<br>                <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % num == <span class="hljs-number">0</span>:<br>                    format_seq += <span class="hljs-string">&quot;\n&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            format_seq = cds_translation<br>        <span class="hljs-keyword">return</span> complete_ana + format_seq + <span class="hljs-string">"\n"</span><br></code></pre></td></tr></table></figure><h3 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h3><h5 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h5><p>示例数据为新冠病毒的基因组 genbank 文件，文件中包含：</p><p>两个基因组：LC553263.1 和 LC553262.1</p><p>一个基因组会有多个基因，下面是它的基因组结构：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvUjZKVjQ5UGQ2RmxjLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="1、提取单个基因CDS"><a href="#1、提取单个基因CDS" class="headerlink" title="1、提取单个基因CDS"></a>1、提取单个基因CDS</h5><p><code>main.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">from BaimoTools import BaimoTools<br><br>gb_file = f"res/genbank/SARS-CoV-2.gb"<br>fasta_file = f"out/output_s.fasta"<br>baimoTools = BaimoTools(gb_file, fasta_file)<br># baimoTools.extract_cds(&#x27;S&#x27;)<br></code></pre></td></tr></table></figure><p>输出文件 <code>output_s.fasta</code>，分别提取到两个基因组的 S 基因 CDS 区域：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8c1636d54d7fe334a4b38b9ff98e228b.png" alt="mark"></p><h5 id="2、提取多个基因CDS"><a href="#2、提取多个基因CDS" class="headerlink" title="2、提取多个基因CDS"></a>2、提取多个基因CDS</h5><p><code>main.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">from BaimoTools import BaimoTools<br><br>gb_file = f"res/genbank/SARS-CoV-2.gb"<br>fasta_file = f"out/output_s_m_orf10.fasta"<br>baimoTools = BaimoTools(gb_file, fasta_file)<br>baimoTools.extract_cds([&#x27;S&#x27;, &#x27;M&#x27;, &#x27;ORF10&#x27;])<br></code></pre></td></tr></table></figure><p>输出文件 <code>output_s_m_orf10.fasta</code>，分别提取到两个基因组的 S，M，ORF10 基因 CDS 区域：：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/972702c1368aff91056364b35ffe4def.png" alt="mark"></p><h5 id="2、提取全部基因CDS"><a href="#2、提取全部基因CDS" class="headerlink" title="2、提取全部基因CDS"></a>2、提取全部基因CDS</h5><p><code>main.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">from BaimoTools import BaimoTools<br><br>gb_file = f"res/genbank/SARS-CoV-2.gb"<br>fasta_file = f"out/output_s.fasta"<br>baimoTools = BaimoTools(gb_file, fasta_file)<br># baimoTools.extract_cds("")<br></code></pre></td></tr></table></figure><p>输出文件 <code>output_all.fasta</code>，分别提取到两个基因组的全部基因 CDS 区域：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b3ccf0c5ae578bfaa9962c1769aa416.png" alt="mark"></p><p>下一步更新其他基因特征提取，及格式转换功能</p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1cy01nvbylvi6">https://cloud.tencent.com/developer/support-plan?invite_code=1cy01nvbylvi6</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因 </tag>
            
            <tag> CDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白墨的生物信息自学之路</title>
      <link href="/posts/17732/"/>
      <url>/posts/17732/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/f640ffacc39cd12104c1d71b51f9d177.png" alt="mark">进入21世纪后，组学数据井喷式产出，随之而来的问题是如何处理这些数据，挖掘背后隐藏的价值。</p><p>人们想到利用包括计算机，物理学，数学，统计学在内学科的优势去解析这些大数据，随之催生出一门新的交叉学科，这就是生物信息学。</p><p>这门学科为生物进化，物种分类，育种技术，药物设计等领域起到巨大的推动作用。</p><p>不仅使我们更加全面的认识生命，而且随之带来了丰厚的社会效益。</p><p>这里记录了我学习生物信息时，在平坦道路上曲折前行的步伐。</p><p>可以为打算学，正在学生物信息的同学提供一些参考，少走一些弯路。</p><p>让我们一起披荆斩棘，乘风破浪。</p><p>这里仅仅是我的学习路线，仅供参考，如有建议，欢迎交流 ^.^</p><p>联系方式在左栏<br><img src="https://img-blog.csdnimg.cn/img_convert/db5317b920220982503966d962292058.png" alt="mark"></p><h2 id="一、生物信息"><a href="#一、生物信息" class="headerlink" title="一、生物信息"></a>一、生物信息</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/c76fac4480d4b756d60fc8ef3cad6658.png" alt="mark"></p><h4 id="1-1-基础及概念"><a href="#1-1-基础及概念" class="headerlink" title="1.1 基础及概念"></a>1.1 基础及概念</h4><p><a href="https://zhenglei.blog.csdn.net/article/details/103116916">如何快速自学生物信息学</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/104737024?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802663216780288261230%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802663216780288261230&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-104737024.pc_v1_rank_blog_v1&utm_term=%E4%B8%80%E4%BB%A3%E6%B5%8B%E5%BA%8F">一代测序原理 (Sanger法测序)</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/102525491">二代测序原理（Illumina）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109957104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802740819195271617629%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802740819195271617629&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-109957104.pc_v1_rank_blog_v1&utm_term=%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82">一文读懂 ChIPseq</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108509052?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802740819195271617629%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802740819195271617629&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-108509052.pc_v1_rank_blog_v1&utm_term=%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82">一文读懂DNA甲基化及BS-seq</a></p><h4 id="1-2-生信数据库"><a href="#1-2-生信数据库" class="headerlink" title="1.2 生信数据库"></a>1.2 生信数据库</h4><p><a href="https://blog.csdn.net/u011262253/article/details/100055851?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802671916780261992246%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802671916780261992246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-100055851.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93">生物信息学数据库及在线工具汇总 （更新）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/104458956?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802671916780261992246%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802671916780261992246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-104458956.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93">一文极速读懂 UniProt 数据库</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103452467?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802671916780261992246%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802671916780261992246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-103452467.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93">一文极速读懂 KEGG 数据库</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103761279?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802671916780261992246%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802671916780261992246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-103761279.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93">一文极速读懂 Gene Ontology （GO）数据库</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103761319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802681619725222482973%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802681619725222482973&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-103761319.pc_v1_rank_blog_v1&utm_term=GAF">GO 注释文件 GAF 详解</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103689781?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802683116780288727481%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802683116780288727481&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-103689781.pc_v1_rank_blog_v1&utm_term=KEGG">KEGG 下载 Pathway 通路数据</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/95304930?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802684616780276358442%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802684616780276358442&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-95304930.pc_v1_rank_blog_v1&utm_term=NCBI">NCBI生物分类数据库（Taxonomy）</a></p><h4 id="1-3-生信软件"><a href="#1-3-生信软件" class="headerlink" title="1.3 生信软件"></a>1.3 生信软件</h4><p><a href="https://blog.csdn.net/u011262253/article/details/78465965?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-78465965.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | FastQC（质量控制，查看测序质量）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/79833969?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-79833969.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | bowtie2（测序序列与参考序列比对）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109314251?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-109314251.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | Samtools（SAM文件处理工具）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/51170831?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-51170831.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | Blast (序列比对)</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88828987?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-5-88828987.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | Trimmomati （质量控制，修剪低质和接头序列）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/78459389?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-78459389.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | Sratools (操作SRA文件)</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/51188183?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802689819195271653980%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802689819195271653980&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-7-51188183.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6">生信软件 | needleall (多对多序列比对)</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109369141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-21-109369141.pc_v1_rank_blog_v1&utm_term=linux">UCSC 基因组浏览器配置详解</a></p><h4 id="1-4-生信文件格式"><a href="#1-4-生信文件格式" class="headerlink" title="1.4 生信文件格式"></a>1.4 生信文件格式</h4><p><a href="https://blog.csdn.net/u011262253/article/details/109369089?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802747719726885897523%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802747719726885897523&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-28-109369089.pc_v1_rank_blog_v1&utm_term=R">生信文件格式 | BedGraph（基因组浏览器绘制）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109367395?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-109367395.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信文件格式 | wig（基因组浏览器绘制）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109367884?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-109367884.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信文件格式 | bigwig，bw （基因组浏览器绘制）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/51164756?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802666016780276320987%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802666016780276320987&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-51164756.pc_v1_rank_blog_v1&utm_term=fasta">Fasta格式 图解</a></p><h4 id="1-5-序列分析"><a href="#1-5-序列分析" class="headerlink" title="1.5 序列分析"></a>1.5 序列分析</h4><p><a href="https://blog.csdn.net/u011262253/article/details/78506951?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802697519725271033922%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802697519725271033922&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-78506951.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E4%B9%8B">生物信息之多序列比对，进化树分析，保守位点分析</a></p><p><a href="https://zhuanlan.zhihu.com/p/44495059">MEGA 的 No common sites found</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/82115270?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-17-82115270.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">构建进化树常用方法：生物进化距离（NJ）、统计特征（ML）和离散特征（MP）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88542804">生物信息中的<em>Python</em> 01 | 从零开始处理基因序列</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的Python 02 | 用biopython解析序列</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88542879">生物信息中的Python 03 | 自动化操作NCBI</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88542910">生物信息中的Python 04 | 批量下载基因与文献</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/82794678">生物信息中的Python 05 | 从 Genbank 文件中提取 CDS 等其他特征序列</a></p><h4 id="1-5-组学分析"><a href="#1-5-组学分析" class="headerlink" title="1.5 组学分析"></a>1.5 组学分析</h4><p><a href="https://blog.csdn.net/u011262253/article/details/89363809?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802732019726891116220%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802732019726891116220&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-89363809.pc_v1_rank_blog_v1&utm_term=gff">基因组注释文件下载</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103189198?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-25-103189198.pc_v1_rank_blog_v1&utm_term=linux">参考基因组下载</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/107190684">公共测序数据下载</a></p><h5 id="1-5-1-单细胞转录组"><a href="#1-5-1-单细胞转录组" class="headerlink" title="1.5.1 单细胞转录组"></a>1.5.1 单细胞转录组</h5><p><a href="https://blog.csdn.net/u011262253/article/details/102652347?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802735316780296817913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802735316780296817913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-102652347.pc_v1_rank_blog_v1&utm_term=%E5%8D%95%E7%BB%86%E8%83%9E">Scater 图文详解</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/102943870?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802735316780296817913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802735316780296817913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-102943870.pc_v1_rank_blog_v1&utm_term=%E5%8D%95%E7%BB%86%E8%83%9E">Seurat 图文详解</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107020909?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802735316780296817913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802735316780296817913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-107020909.pc_v1_rank_blog_v1&utm_term=%E5%8D%95%E7%BB%86%E8%83%9E">细胞周期预测</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/103087275?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802735316780296817913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802735316780296817913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-103087275.pc_v1_rank_blog_v1&utm_term=%E5%8D%95%E7%BB%86%E8%83%9E">S不同单细胞转录组的整合方法</a></p><h4 id="1-7-生信自动化流程搭建"><a href="#1-7-生信自动化流程搭建" class="headerlink" title="1.7 生信自动化流程搭建"></a>1.7 生信自动化流程搭建</h4><p><a href="https://blog.csdn.net/u011262253/article/details/107919491?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-10-107919491.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 01 | Nextflow的介绍与安装</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919524?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-107919524.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 02 | 脚本</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919552?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-8-107919552.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 03 | 输入 input</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919594?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-14-107919594.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 04 | 输出 output</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919606?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-13-107919606.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 05 | 通道 Channels</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919614?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-9-107919614.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 06 | 指令</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107919629?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-5-107919629.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化流程搭建 07 | 配置文件</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107370353?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802763519725271080418%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802763519725271080418&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-15-107370353.pc_v1_rank_blog_v1&utm_term=%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6">生信自动化分析流程 nf-core 的离线运行（图文详解）</a></p><h4 id="1-8-可视化"><a href="#1-8-可视化" class="headerlink" title="1.8 可视化"></a>1.8 可视化</h4><p><a href="https://blog.csdn.net/u011262253/article/details/100638123?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-100638123.pc_v1_rank_blog_v1&utm_term=R">R 数据可视化 01 | 聚类热图</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/100915605?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-100915605.pc_v1_rank_blog_v1&utm_term=R">R 数据可视化 02 | 火山图</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107447228?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-5-107447228.pc_v1_rank_blog_v1&utm_term=R">R 数据可视化 03 | 圈图</a></p><h2 id="二、计算机"><a href="#二、计算机" class="headerlink" title="二、计算机"></a>二、计算机</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/15fbeac03f613d04cdb6c24c8f9f2b74.png" alt="mark"></p><h4 id="2-1-Python"><a href="#2-1-Python" class="headerlink" title="2.1 Python"></a>2.1 Python</h4><h5 id="2-1-1-Pycharm"><a href="#2-1-1-Pycharm" class="headerlink" title="2.1.1 Pycharm"></a>2.1.1 Pycharm</h5><p><a href="https://blog.csdn.net/u011262253/article/details/105902060?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802747719726885897523%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802747719726885897523&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-17-105902060.pc_v1_rank_blog_v1&utm_term=R">搭建 Python 高效开发环境： Pycharm + Anaconda</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/108005045">Pycharm 免费激活专业版（图文详解）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106533950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802747719726885897523%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802747719726885897523&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-18-106533950.pc_v1_rank_blog_v1&utm_term=R">在 Pycharm 中玩转 GitHub（图文详解）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/97507271">PyCharm + Git + Github 搭建版本控制环境</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/105155581">Pycharm 中安装及使用 Jupyter （图文详解）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/103044376">Pycharm 自动为脚本文件添加作者信息</a></p><h5 id="2-1-2-Python-基础"><a href="#2-1-2-Python-基础" class="headerlink" title="2.1.2 Python 基础"></a>2.1.2 Python 基础</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/79834794">Python Pandas 用法速查表</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/105575610">Pandas 修改单列，多列，Dataframe 数据类型方法汇总</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/78319663?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-23-78319663.pc_v1_rank_blog_v1&utm_term=R">使用Pandas处理亿级数据</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/51295423?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802836416780258051902%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802836416780258051902&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-20-51295423.pc_v1_rank_blog_v1&utm_term=R">Python 文件读写操作记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/54581257">Python 库文件安装</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/80242982">Python 记录日志 | logging + yaml</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/78319093">Python使用技巧集合</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51295496">Python 字符操作记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51295470">Python 文件及文件夹操作记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50134401">Python-sublime构建Python运行，调试环境</a></p><h5 id="2-1-3-爬虫"><a href="#2-1-3-爬虫" class="headerlink" title="2.1.3 爬虫"></a>2.1.3 爬虫</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/78549185">Python爬虫之selenium</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/73331709">爬虫基础之http协议</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/72864819">Scrapy学习笔记一：安装</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/54629480">Scrapy中文乱码解决</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/54571701">Scrapy报错及解决方案集锦</a></p><h4 id="2-2-R"><a href="#2-2-R" class="headerlink" title="2.2 R"></a>2.2 R</h4><p><a href="https://blog.csdn.net/u011262253/article/details/102007737?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-102007737.pc_v1_rank_blog_v1&utm_term=R">一步一步安装及配置R及Rstudio（详细图文）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105068542?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-105068542.pc_v1_rank_blog_v1&utm_term=R">如何在 Pycharm 中高效使用 R 语言 （图文详解）</a></p><h4 id="2-3-Linux"><a href="#2-3-Linux" class="headerlink" title="2.3 Linux"></a>2.3 Linux</h4><h5 id="2-3-1-安装及概念"><a href="#2-3-1-安装及概念" class="headerlink" title="2.3.1 安装及概念"></a>2.3.1 安装及概念</h5><p><a href="https://blog.csdn.net/u011262253/article/details/46697621?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-11-46697621.pc_v1_rank_blog_v1&utm_term=linux">Linux系统启动，命令，文件详解（更新）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108759785?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-108759785.pc_v1_rank_blog_v1&utm_term=linux">玩转 Windows 自带的 Linux 子系统 WSL（图文指南）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/54412025">CentOS 6.5 图形界面安装</a></p><h5 id="2-3-2-基础概念及命令"><a href="#2-3-2-基础概念及命令" class="headerlink" title="2.3.2 基础概念及命令"></a>2.3.2 基础概念及命令</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/86083351">Linux 添加环境变量的五种方法</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/83789969?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-18-83789969.pc_v1_rank_blog_v1&utm_term=linux">Linux 归档，压缩，解压命令速查</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/107152428?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802803919215668878449%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802803919215668878449&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-107152428.pc_v1_rank_blog_v1&utm_term=linux">Ubuntu 更新软件镜像源</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/82226388">Linux 挂载2TB以上硬盘</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/110044882">Linux 远程复制文件和目录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/108702584">Linux 查看文件，目录，磁盘空间占用容量</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51583040">Linux find exec 记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51301793">Linux 让进程在关闭终端后继续执行</a></p><h5 id="2-3-3-错误解决"><a href="#2-3-3-错误解决" class="headerlink" title="2.3.3 错误解决"></a>2.3.3 错误解决</h5><p>[version &#96;ZLIB_1.2.3.3’ not found 解决](<a href="https://zhenglei.blog.csdn.net/article/details/99074095">https://zhenglei.blog.csdn.net/article/details/99074095</a>)</p><p>[version &#96;GLIBC_2.14’ not found 问题解决](<a href="https://zhenglei.blog.csdn.net/article/details/99056385">https://zhenglei.blog.csdn.net/article/details/99056385</a>)</p><p><a href="https://zhenglei.blog.csdn.net/article/details/93591519">libgomp.so.1: version GOMP_4.0’ not found 或者libstdc++.so.6: version CXXABI_1.3.8’ not found 错误解决</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/87357263">Cannot open shared object file: No such file or directory 问题解决</a></p><h5 id="2-3-4-软件安装"><a href="#2-3-4-软件安装" class="headerlink" title="2.3.4 软件安装"></a>2.3.4 软件安装</h5><p><a href="https://blog.csdn.net/u011262253/article/details/104903255?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-10-104903255.pc_v1_rank_blog_v1&utm_term=linux">Linux 安装 node，npm （详细图解）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/78458534">Ubuntu下安装Java</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51329465">Linux 安装lxml及各种问题的解决</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/88828229?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802803919215668878449%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802803919215668878449&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-88828229.pc_v1_rank_blog_v1&utm_term=linux">Conda 安装使用图文详解</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/46327285">Linux fedora flash player安装</a></p><h4 id="2-4-数据库"><a href="#2-4-数据库" class="headerlink" title="2.4 数据库"></a>2.4 数据库</h4><h5 id="2-4-1-MySQL"><a href="#2-4-1-MySQL" class="headerlink" title="2.4.1 MySQL"></a>2.4.1 MySQL</h5><p><a href="https://zhuanlan.zhihu.com/p/70398004">深入理解 MySQL 用户和权限</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/105587518">一文读懂数据库的文本数据类型：CHAR，VARCHAR，TEXT，BLOG，NCHAR、NVARCHAR、NTEXT</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/79578362">数据库设计-范式</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51330136">MySQL 基本语句记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/103778935">查询Mysql中表大小，数据大小，索引大小</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/87953684">查询Mysql数据库中表的所有字段名</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106062595?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802803919215668878449%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802803919215668878449&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-12-106062595.pc_v1_rank_blog_v1&utm_term=linux">MySQL 初始化密码，修改密码，重置忘记的密码</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/87954421">Mysql 将查询结果创建表 插入表</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/88365404">MySQL datatime与timestamp设置自动更新</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/78319341">MySQL 数据库的导入导出</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50418740">Mysql 数据库记录</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/88173965">MySQL 大数据量导入时：MySQL server has gone away</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/107330664">MySQL报错解决：Error:1294–Invalid ON UPDATE clause for “time” column</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/92970249">Mysql报错：1030 Got error 28 from storage engine</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/81205955">MySQL报错解决：MySQL server has gone away</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/88141245">MySQL 远程连接及错误的解决</a></p><h5 id="2-4-2-MongoDB"><a href="#2-4-2-MongoDB" class="headerlink" title="2.4.2 MongoDB"></a>2.4.2 MongoDB</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/74858211">Mongodb安装配置详细图文教程</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/75422671">windows，PHP下MongoDB扩展安装</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/75283664">MongoDB常用操作</a></p><h5 id="2-4-3-其他数据库"><a href="#2-4-3-其他数据库" class="headerlink" title="2.4.3 其他数据库"></a>2.4.3 其他数据库</h5><p><a href="https://blog.csdn.net/u011262253/article/details/106175238?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802836416780258051902%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802836416780258051902&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-27-106175238.pc_v1_rank_blog_v1&utm_term=R">Windows 与 Linux 安装 sqlite3 数据库（图文详解）</a></p><h4 id="2-5-网站"><a href="#2-5-网站" class="headerlink" title="2.5 网站"></a>2.5 网站</h4><h5 id="2-5-1-网站构建及操作"><a href="#2-5-1-网站构建及操作" class="headerlink" title="2.5.1 网站构建及操作"></a>2.5.1 网站构建及操作</h5><p><a href="https://blog.csdn.net/u011262253/article/details/70876900?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802803919215668878449%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802803919215668878449&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-9-70876900.pc_v1_rank_blog_v1&utm_term=linux">网站搭建，远程操作，文件上传，问题汇总</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105794652?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-30-105794652.pc_v1_rank_blog_v1&utm_term=R">一步一步安装及配置 Node.js 与 NPM</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/94544438?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802836416780258051902%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802836416780258051902&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-25-94544438.pc_v1_rank_blog_v1&utm_term=R">PHP 技巧 （更新中）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/72630305">通过js获取IP及物理地址</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/70494277?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-16-70494277.pc_v1_rank_blog_v1&utm_term=R">修复：XAMPP与VMware端口443占用问题“Port 443 in use by …”</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/99752692?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802836416780258051902%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802836416780258051902&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-23-99752692.pc_v1_rank_blog_v1&utm_term=R">wordpress 更新及主题更新的FTP问题</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/72152639">xampp-MySQL-重置密码</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105407642?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802828619726891179412%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802828619726891179412&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-7-105407642.pc_v1_rank_blog_v1&utm_term=R">如何绘制全球新冠病毒疫情动态分布图</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/104941027?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802836416780258051902%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802836416780258051902&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-22-104941027.pc_v1_rank_blog_v1&utm_term=R">基因组浏览器 JBrowser 安装</a></p><h5 id="2-5-2-ThinkPHP"><a href="#2-5-2-ThinkPHP" class="headerlink" title="2.5.2 ThinkPHP"></a>2.5.2 ThinkPHP</h5><p><a href="https://blog.csdn.net/u011262253/article/details/95603371?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802790619725271038944%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802790619725271038944&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-24-95603371.pc_v1_rank_blog_v1&utm_term=linux">宝塔中部署 ThinkPHP5（tp5）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/53980007">ThinkPHP技巧–去除index.php</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51567725">thinkphp发送邮件 图文教程</a></p><h5 id="2-5-3-Django"><a href="#2-5-3-Django" class="headerlink" title="2.5.3 Django"></a>2.5.3 Django</h5><p><a href="https://blog.csdn.net/u011262253/article/details/107605500?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-107605500.pc_v1_rank_blog_v1&utm_term=Django">Django 使用 ORM 操作数据库详解</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106303919?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-106303919.pc_v1_rank_blog_v1&utm_term=Django">Django REST框架 | 封装 Respose 类</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106177990?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-106177990.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架的 FBV 与 CBV 选择</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106176453?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-7-106176453.pc_v1_rank_blog_v1&utm_term=Django">Django 的脚本化启动</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106176087?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802803919215668878449%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802803919215668878449&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-11-106176087.pc_v1_rank_blog_v1&utm_term=linux">Django REST 框架详解 01 | 安装与数据库配置</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106176521?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-8-106176521.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 02 | 设置与模块</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106176825?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-12-106176825.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 03 | 模型建立与表设计</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106176693?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-9-106176693.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 04 | 序列化与反序列化及二者整合</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106221282?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-14-106221282.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 05 | 视图家族 Mixins</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106221310?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-106221310.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 06 | 视图家族 Generics 与 Viewsets</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106265964?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-10-106265964.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 07 | 三大认证与权限六表</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106265992?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-13-106265992.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 09 | 权限组件</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106265981?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-106265981.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 08 | 认证组件</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/106266001?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802815516780276312142%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802815516780276312142&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-11-106266001.pc_v1_rank_blog_v1&utm_term=Django">Django REST 框架详解 10 | 频率认证组件</a></p><h5 id="2-5-4-Spring-Boot"><a href="#2-5-4-Spring-Boot" class="headerlink" title="2.5.4 Spring Boot"></a>2.5.4 Spring Boot</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/79705269">IDEA快速而优雅的搭建SpringBoot</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/79215058">Spring Boot 之 在IDEA中的热部署</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/79215031">Spring Boot 之 使用Thymeleaf</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/79105299">Spring Boot 之 MySQL数据库使用</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/79215003">Spring Boot 之 报错记录</a></p><h5 id="2-5-5-Joomla"><a href="#2-5-5-Joomla" class="headerlink" title="2.5.5 Joomla"></a>2.5.5 Joomla</h5><p><a href="https://zhenglei.blog.csdn.net/article/details/48975005">joomla本地安装全过程</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/48997793">joomla学习笔记-备份与还原</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/49099993">joomla学习笔记-MySql数据库Plugin ‘FEDERATED’ is disabled.错误解决方法</a></p><h2 id="三、生物学"><a href="#三、生物学" class="headerlink" title="三、生物学"></a>三、生物学</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/b3ee33589dc2f5562b8634e596e8e91a.png" alt="mark"></p><h4 id="3-1-基础"><a href="#3-1-基础" class="headerlink" title="3.1 基础"></a>3.1 基础</h4><p><a href="https://zhenglei.blog.csdn.net/article/details/109957163">图解表观遗传学 | 组蛋白修饰</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/106818941">生命可以用更少的氨基酸编码蛋白质吗？</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/106198474">一文读懂进化树（图文详解）</a></p><p><a href="https://zhuanlan.zhihu.com/p/49601643">基因结构</a></p><p><a href="https://zhuanlan.zhihu.com/p/91852370">细胞结构</a></p><h4 id="3-2-新冠专题"><a href="#3-2-新冠专题" class="headerlink" title="3.2 新冠专题"></a>3.2 新冠专题</h4><p><a href="https://blog.csdn.net/u011262253/article/details/104364449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802871016780266273191%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802871016780266273191&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-104364449.pc_v1_rank_blog_v1&utm_term=%E5%86%A0%E7%8A%B6">如何科学检测新型冠状病毒？</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/104121857?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802871016780266273191%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802871016780266273191&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-104121857.pc_v1_rank_blog_v1&utm_term=%E5%86%A0%E7%8A%B6">新型冠状病毒的信息汇总与分析 (形态，分类，基因组，进化，变异，流行病学)</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105935841?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802871016780266273191%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802871016780266273191&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-105935841.pc_v1_rank_blog_v1&utm_term=%E5%86%A0%E7%8A%B6">新冠病毒的自我修养</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105407642?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802871016780266273191%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802871016780266273191&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-105407642.pc_v1_rank_blog_v1&utm_term=%E5%86%A0%E7%8A%B6">如何绘制全球新冠病毒疫情动态分布图</a></p><h2 id="四、统计学"><a href="#四、统计学" class="headerlink" title="四、统计学"></a>四、统计学</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/7a889e42b963b91e0955327ba35e5559.png" alt="mark"></p><p><a href="https://blog.csdn.net/u011262253/article/details/104656873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-104656873.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始统计学 01 | 假设检验 （详）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392243?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-7-108392243.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 01 | 神奇的正态分布</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392410?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-8-108392410.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 02 | 总体参数</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392655?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-4-108392655.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 03 | 均值，方差，标准差</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392802?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-9-108392802.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 04 | 协方差与相关性分析</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392861?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-13-108392861.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 05 | 技术重复和生物学重复</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108392884?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-5-108392884.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 06 | 样本容量和有效样本容量</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108393002?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-108393002.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 07 | 标准误差</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108393078?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-10-108393078.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 08 | 中心极限定理</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/108393231?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-108393231.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 09 | 对数转换</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109257472?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-12-109257472.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 10 | 通俗易懂的 P 值</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/109257521?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160802847316780308367434%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160802847316780308367434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-11-109257521.pc_v1_rank_blog_v1&utm_term=%E7%BB%9F%E8%AE%A1%E5%AD%A6">从零开始学统计 11 | 理解置信区间</a></p><h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/c2c7c2a4a3f2fcf9544e5d3987ad1ee9.png" alt="mark"></p><p><a href="https://zhenglei.blog.csdn.net/article/details/80447190">搜索中文与外文数据库中的综述类文献</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/78834824">如何既快速又优雅的写博客：Typora + MPic</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/105008267">Typora 构建舒适的高颜值写作环境</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/51330082">Sublime 导出带有颜色的代码</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50945530">Sublime 究极技巧1 - 彻底解决中文乱码</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50945539">Sublime 究极技巧2 - 开启Project文件视图，文件检索</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50945561">Sublime 究极技巧3 - 在线安装插件包及常用插件</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50942585">Sublime 究极技巧4 - 构建Python，php运行及调试环境</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/50944648">Sublime 常用插件包</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 网站 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown_数学公式写法与速查表</title>
      <link href="/posts/58851/"/>
      <url>/posts/58851/</url>
      
        <content type="html"><![CDATA[<h3 id="一、公式写法"><a href="#一、公式写法" class="headerlink" title="一、公式写法"></a>一、公式写法</h3><p><strong>公式</strong></p><p>语法：<code>$$H(X) = -\sum&#123;P(x)logP(x)&#125;</code><br>$$<br>H(X) &#x3D; -\sum{P(x)logP(x)}<br>$$<br><strong>带标号的公式</strong></p><p>语法：<code>$$H(X) = -\sum&#123;P(x)logP(x)&#125; \tag1$$</code><br>$$<br>H(X) &#x3D; -\sum{P(x)logP(x)} \tag1<br>$$<br><strong>行内公式</strong></p><p>语法：<code>$H(X) = -\sum&#123;P(x)logP(x)&#125;$</code></p><p>这一个熵公式：$H(X) &#x3D; -\sum{P(x)logP(x)}$</p><h3 id="二、基础公式"><a href="#二、基础公式" class="headerlink" title="二、基础公式"></a>二、基础公式</h3><table><thead><tr><th>公式</th><th>Markdown</th><th>效果</th></tr></thead><tbody><tr><td>下标</td><td><code>X_i</code></td><td>$X_i$</td></tr><tr><td>上标</td><td><code>X^i</code></td><td>$X^i$</td></tr><tr><td>上标与下标</td><td><code>X_i^j</code></td><td>$X_{i}^{j}$</td></tr><tr><td>整体</td><td><code>X_&#123;ijk&#125;^&#123;xyz&#125;</code></td><td>$X_{ijk}^{xyz}$</td></tr><tr><td>除法</td><td><code>\frac&#123;x&#125;&#123;y&#125;</code></td><td>$\frac{x}{y}$</td></tr><tr><td>开根号</td><td><code>\sqrt&#123;x&#125;;\sqrt[n]&#123;x&#125;</code></td><td>$\sqrt{x};\sqrt[n]{x}$</td></tr><tr><td>矢量</td><td><code>\vec&#123;a&#125;</code></td><td>$\vec{a}$</td></tr><tr><td></td><td></td><td></td></tr><tr><td>无限</td><td><code>\infty</code></td><td>$\infty$</td></tr><tr><td>极限</td><td><code>\lim\limits_&#123;n \rightarrow +\infty&#125; n</code></td><td>$\lim\limits_{n \rightarrow +\infty} n$</td></tr><tr><td>微积分</td><td><code>\int;\iint;\iiint;\oint;\int ^i_j x</code></td><td>$\int;\iint;\iiint;\oint;\int ^i_j x$</td></tr><tr><td>累和</td><td><code>\sum;\sum_&#123;x&#125;;\sum_&#123;i=1&#125;^&#123;n&#125;</code></td><td>$\sum;\sum_{x};\sum_{i&#x3D;1}^{n}$</td></tr><tr><td>累乘</td><td><code>\prod&#123;i&#125;</code></td><td>$\prod{i}$</td></tr><tr><td>对数</td><td><code>lnx;\log_2^8;\lg10^2</code></td><td>$lnx;\log_2^8;\lg10^2$</td></tr><tr><td></td><td></td><td></td></tr><tr><td>大括号</td><td><code>\lbrace x \rbrace</code></td><td>$\lbrace x \rbrace$</td></tr><tr><td>全包括号</td><td><code>\left\lbrace \sum_&#123;i=0&#125;^&#123;n&#125;\frac&#123;2a&#125;&#123;x^2+1&#125; \right\rbrace</code></td><td>$\left\lbrace \sum_{i&#x3D;0}^{n}\frac{x}{y}\right\rbrace$</td></tr></tbody></table><h3 id="三、关系运算符"><a href="#三、关系运算符" class="headerlink" title="三、关系运算符"></a>三、关系运算符</h3><table><thead><tr><th>运算符</th><th>Markdown</th></tr></thead><tbody><tr><td>$\pm$</td><td><code>\pm</code></td></tr><tr><td>$\times$</td><td><code>\times</code></td></tr><tr><td>$\div$</td><td><code>\div</code></td></tr><tr><td>$\leq$</td><td><code>\leq</code></td></tr><tr><td>$\geq$</td><td><code>\geq</code></td></tr><tr><td>$\neq$</td><td><code>\neq</code></td></tr><tr><td>$\approx$</td><td><code>\approx</code></td></tr><tr><td>$\equiv$</td><td><code>\equiv</code></td></tr><tr><td>$\mid$</td><td><code>\mid</code></td></tr><tr><td>$\nmid$</td><td><code>\nmid</code></td></tr><tr><td>$\cdot$</td><td><code>\cdot</code></td></tr><tr><td>$\cdots$</td><td><code>\cdots</code></td></tr><tr><td>$\circ$</td><td><code>\circ</code></td></tr><tr><td>$\ast$</td><td><code>\ast</code></td></tr><tr><td>$\sum$</td><td><code>\sum</code></td></tr><tr><td>$\prod$</td><td><code>\prod</code></td></tr><tr><td>$\coprod$</td><td><code>\coprod</code></td></tr><tr><td>$\bigodot$</td><td><code>\bigodot</code></td></tr><tr><td>$\bigotimes$</td><td><code>\bigotimes</code></td></tr><tr><td>$\bigoplus$</td><td><code>\bigoplus</code></td></tr></tbody></table><h3 id="四、集合运算符"><a href="#四、集合运算符" class="headerlink" title="四、集合运算符"></a>四、集合运算符</h3><table><thead><tr><th>表达式</th><th>预览</th></tr></thead><tbody><tr><td>$\emptyset$</td><td><code>\emptyset</code></td></tr><tr><td>$\in$</td><td><code>\in</code></td></tr><tr><td>$\notin$</td><td><code>\notin</code></td></tr><tr><td>$\subset$</td><td><code>\subset</code></td></tr><tr><td>$\supset$</td><td><code>\supset</code></td></tr><tr><td>$\subseteq$</td><td><code>\subseteq</code></td></tr><tr><td>$\supseteq$</td><td><code>\supseteq</code></td></tr><tr><td>$\bigcap$</td><td><code>\bigcap</code></td></tr><tr><td>$\bigcup$</td><td><code>\bigcup</code></td></tr><tr><td>$\bigvee$</td><td><code>\bigvee</code></td></tr><tr><td>$\bigwedge$</td><td><code>\bigwedge</code></td></tr><tr><td>$\biguplus$</td><td><code>\biguplus</code></td></tr><tr><td>$\bigsqcup$</td><td><code>\bigsqcup</code></td></tr></tbody></table><h3 id="五、戴帽符号"><a href="#五、戴帽符号" class="headerlink" title="五、戴帽符号"></a>五、戴帽符号</h3><table><thead><tr><th>符号</th><th></th></tr></thead><tbody><tr><td>$\hat{X}$</td><td><code>\hat&#123;X&#125;</code></td></tr><tr><td>$\check{X}$</td><td><code>\check&#123;X&#125; </code></td></tr><tr><td>$\breve{X}$</td><td><code>\breve&#123;X&#125; </code></td></tr><tr><td>$\bar{X}$</td><td><code>\bar&#123;X&#125;</code></td></tr><tr><td>$\tilde{X}$</td><td><code>\tilde&#123;X&#125; </code></td></tr><tr><td>$\widetilde{X}$</td><td><code>\widetilde&#123;X&#125;</code></td></tr><tr><td>$\vec{X}$</td><td><code>\vec&#123;X&#125;</code></td></tr><tr><td>$\dot{X}$</td><td><code>\dot&#123;X&#125; </code></td></tr><tr><td>$\ddot{X}$</td><td><code>\ddot&#123;X&#125; </code></td></tr></tbody></table><h3 id="六、连线符合"><a href="#六、连线符合" class="headerlink" title="六、连线符合"></a>六、连线符合</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>$\overline {xyz}$</td><td><code>\overline &#123;xyz&#125;</code></td></tr><tr><td>$\underline{abc}$</td><td><code>\underline&#123;abc&#125;</code></td></tr><tr><td>$\overbrace{\underbrace{x+y+z}+a}^{m}$</td><td><code>\overbrace&#123;\underbrace&#123;x+y+z&#125;+a&#125;^&#123;m&#125;</code></td></tr></tbody></table><h3 id="七、矩阵"><a href="#七、矩阵" class="headerlink" title="七、矩阵"></a>七、矩阵</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$$<br>\begin&#123;matrix&#125;<br>1 & 2 & 3 \\<br>4 & 5 & 6 \\<br>7 & 8 & 9 <br>\end&#123;matrix&#125;<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>$$</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$$<br>\left[<br>\begin&#123;matrix&#125;<br>1 & 2 & 3 \\<br>4 & 5 & 6 \\<br>7 & 8 & 9 <br>\end&#123;matrix&#125; \right]<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix} \right]<br>$$</p><h3 id="八、分段函数"><a href="#八、分段函数" class="headerlink" title="八、分段函数"></a>八、分段函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$$<br>function = \begin&#123;cases&#125;<br>$$<br></code></pre></td></tr></table></figure><p>$$<br>y &#x3D; \begin{cases}<br>0 &amp; x \leq 3 \<br>(x-3)-5 &amp; 3&lt;x\leq 8 \<br>1 &amp; 8&lt;x<br>\end{cases}<br>$$</p><h3 id="九、希腊字母"><a href="#九、希腊字母" class="headerlink" title="九、希腊字母"></a>九、希腊字母</h3><table><thead><tr><th>字母</th><th>Markdown</th></tr></thead><tbody><tr><td>$\alpha$</td><td><code>\alpha</code></td></tr><tr><td>$\beta$</td><td><code>\beta</code></td></tr><tr><td>$\gamma$</td><td><code>\gamma</code></td></tr><tr><td>$\delta$</td><td><code>\delta</code></td></tr><tr><td>$\epsilon$</td><td><code>\epsilon</code></td></tr><tr><td>$\varepsilon$</td><td><code>\varepsilon</code></td></tr><tr><td>$\zeta$</td><td><code>\zeta</code></td></tr><tr><td>$\eta$</td><td><code>\eta</code></td></tr><tr><td>$\theta$</td><td><code>\theta</code></td></tr><tr><td>$\iota$</td><td><code>\iota</code></td></tr><tr><td>$\kappa$</td><td><code>\kappa</code></td></tr><tr><td>$\lambda$</td><td><code>\lambda</code></td></tr><tr><td>$\mu$</td><td><code>\mu</code></td></tr><tr><td>$\nu$</td><td><code>\nu</code></td></tr><tr><td>$\xi$</td><td><code>\xi</code></td></tr><tr><td>$\omicron$</td><td><code>\omicron</code></td></tr><tr><td>$\pi$</td><td><code>\pi</code></td></tr><tr><td>$\rho$</td><td><code>\rho</code></td></tr><tr><td>$\sigma$</td><td><code>\sigma</code></td></tr><tr><td>$\tau$</td><td><code>\tau</code></td></tr><tr><td>$\upsilon$</td><td><code>\upsilon</code></td></tr><tr><td>$\phi$</td><td><code>\phi</code></td></tr><tr><td>$\varphi$</td><td><code>\varphi</code></td></tr><tr><td>$\chi$</td><td><code>\chi</code></td></tr><tr><td>$\psi$</td><td><code>\psi</code></td></tr><tr><td>$\omega$</td><td><code>\omega</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> Markdown </tag>
            
            <tag> 数学 </tag>
            
            <tag> 数学公式 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 远程复制文件和目录</title>
      <link href="/posts/34184/"/>
      <url>/posts/34184/</url>
      
        <content type="html"><![CDATA[<h3 id="一、命令"><a href="#一、命令" class="headerlink" title="一、命令"></a>一、命令</h3><p>格式：<code>scp 文件/目录路径名  root@ip地址:文件/目录路径名</code></p><p>1、从远程服务器复制<strong>文件</strong>到本地</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scp root@183.175.59.73:/home/data ./data/<br></code></pre></td></tr></table></figure><p>2、从本地<strong>文件</strong>复制到远程服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scp ./data/ root@183.175.59.73:/home/data<br></code></pre></td></tr></table></figure><p>3、从远程服务器复制<strong>目录</strong>到本地</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scp -r root@183.175.59.73:/home/data ./data/<br></code></pre></td></tr></table></figure><p>4、从本地<strong>目录</strong>复制到远程服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scp -r ./data/ root@183.175.59.73:/home/data<br></code></pre></td></tr></table></figure><h3 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h3><ul><li><code>-p</code>：保留原文件建立时间</li><li><code>-q</code>：不显示任何消息</li><li><code>-r</code>：复制目录</li><li><code>-v</code>：显示提示信息</li></ul><h3 id="三、错误解决"><a href="#三、错误解决" class="headerlink" title="三、错误解决"></a>三、错误解决</h3><p>1、提示 not a regular file</p><ul><li>远程文件或本地文件没有权限，使用chmod加权限</li><li>复制目录，需要加 <code>-r</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 复制 </tag>
            
            <tag> scp </tag>
            
            <tag> 远程文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解表观遗传学 | 组蛋白修饰</title>
      <link href="/posts/11562/"/>
      <url>/posts/11562/</url>
      
        <content type="html"><![CDATA[<h3 id="一、组蛋白结构"><a href="#一、组蛋白结构" class="headerlink" title="一、组蛋白结构"></a>一、组蛋白结构</h3><p>在了解组蛋白修饰前，先复习一下幼儿园学过的组蛋白结构。</p><p>我们都知道在细胞核中的染色体是高度压缩的，而折叠时DNA缠绕的就是组蛋白。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe5d8b07bf19d0f8b205d3d6eafb595a.png" alt="mark"></p><p>将组蛋白区域放大，我们就会看到这样一串念珠，组蛋白被一根DNA序列串起来。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6b3937414742e3a1cdec560cf9733175.png" alt="mark"></p><p>为了方便研究，我们将一个组蛋白和其附近 147bp DNA片段，叫一个核小体。也就是说，</p><p><strong>核小体 &#x3D; 组蛋白 + DNA(147bp)</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/cdf840d07192e6e3f8a5284f82f1bdbe.png" alt="mark"></p><p>把组蛋白拆开来，它其实有八个部分来构成：</p><p><strong>组蛋白八聚体 &#x3D; 2个H2B + 2个H2A + 2个H3 + 2个H4</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dcd0d6f083494c1ffcd1e50bd50eedcf.png" alt="mark"></p><p>下面是检测到的组蛋白三维结构示意图，</p><p>细心的你们一定会发现在每种组蛋白结构都会伸出来一小段“线头”，这是蛋白质的N端，也叫尾巴(tail)。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06eedfce97e89fa3a4fc16b72e058d87.png" alt="mark"></p><p>事实上，每个组蛋白结构都会延伸出这个“尾巴”：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/82a280bff128f9355aa47de28824cfdf.png" alt="mark"></p><p>我们今天的主角，组蛋白修饰就是在这个尾巴上进行的。</p><h3 id="二、组蛋白修饰的描述规则"><a href="#二、组蛋白修饰的描述规则" class="headerlink" title="二、组蛋白修饰的描述规则"></a>二、组蛋白修饰的描述规则</h3><p>这种修饰时一种以共价方式进行的蛋白质翻译后修饰（PTM），包括：甲基化（M），磷酸化（P），乙酰化（A）等等。</p><p>由于组蛋白修饰的类型众多，所以我们需要在称呼组蛋白修饰时，有一个规则：</p><p><strong>组蛋白结构 + 氨基酸名称 + 氨基酸位置 + 修饰类型</strong></p><p>在实际的应用中，我们一般这样写：</p><ul><li><strong>H3K4me3</strong>：代表H3组蛋白的第4位赖氨酸的三甲基化</li><li><strong>H3K14ac</strong>：代表H3组蛋白的第14位赖氨酸的乙酰化</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ef67e6b39342319fd63dcba7130f2788.png" alt="mark"></p><p>这些修饰都会影响基因的转录活性。而组蛋白H3是修饰最多的组蛋白。下面我们来详细看看：</p><h3 id="三、组蛋白修饰类型"><a href="#三、组蛋白修饰类型" class="headerlink" title="三、组蛋白修饰类型"></a>三、组蛋白修饰类型</h3><h4 id="1、组蛋白甲基化"><a href="#1、组蛋白甲基化" class="headerlink" title="1、组蛋白甲基化"></a>1、组蛋白甲基化</h4><p>甲基化取决于其位置和状态，与抑制或激活有关。</p><p>组蛋白甲基化的位点是赖氨酸和精氨酸。</p><p>赖氨酸可以分别被一、二、三甲基化，精氨酸只能被一、二甲基化。</p><p>研究表明，组蛋白精氨酸甲基化是一种相对动态的标记，精氨酸甲基化与基因激活相关。</p><p>相反，赖氨酸甲基化似乎是基因表达调控中一种较为稳定的标记。</p><p>例如，</p><ul><li>H3K4 的甲基化与基因激活相关</li><li>H3K9，H3K27单甲基化与基因激活有关，三甲基化与基因沉默相关</li><li>H3K9，H3K27甲基化会介导异染色质的形成</li></ul><h4 id="2、组蛋白乙酰化"><a href="#2、组蛋白乙酰化" class="headerlink" title="2、组蛋白乙酰化"></a>2、组蛋白乙酰化</h4><p>组蛋白甲基化和乙酰化主要发生在它们的N-末端尾部并且可以影响基因的转录。</p><p>组蛋白乙酰化主要与基因激活有关，组蛋白乙酰化主要发生在H3、H4的N端比较保守的赖氨酸位置上，是由组蛋白乙酰转移酶和组蛋白去乙酰化酶协调进行。</p><p>特定基因区域的组蛋白乙酰化和去乙酰化是以一种非随机的、位置特异的方式进行。</p><p>乙酰化可能通过对组蛋白电荷以及相互作用蛋白的影响，来调节基因转录。</p><table><thead><tr><th>组蛋白修饰</th><th>启动子</th><th>增强子</th><th>激活</th><th>抑制</th></tr></thead><tbody><tr><td>H3K4me1</td><td>✓</td><td>✓（多数）</td><td>✓</td><td></td></tr><tr><td>H3K4me3</td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td>H3K27me1</td><td>✓（ 着丝粒异染色质区域 ）</td><td></td><td>✓</td><td></td></tr><tr><td>H3K27me3</td><td>✓（ 常染色质区域 ）</td><td></td><td></td><td>✓</td></tr><tr><td>H3K27ac</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr><tr><td>H3K9me3</td><td>着丝粒异染色质区域</td><td></td><td></td><td></td></tr><tr><td>H3K9me2</td><td>常染色质区域</td><td></td><td></td><td></td></tr><tr><td>H3K9ac</td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td>H3K14ac</td><td></td><td></td><td>✓</td><td></td></tr></tbody></table><p>这些组蛋白修饰也可以共同作用来完成调控，比如，H3K9ac也与H3K14ac和H3K4me3高度共存共同作为活性基因启动子的标志。</p><h4 id="3、其他组蛋白修饰"><a href="#3、其他组蛋白修饰" class="headerlink" title="3、其他组蛋白修饰"></a>3、其他组蛋白修饰</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/28b6bdc7fdaf7ff6b3cef999d6ae5c02.png" alt="mark"></p><h3 id="四、怎么检测组蛋白修饰"><a href="#四、怎么检测组蛋白修饰" class="headerlink" title="四、怎么检测组蛋白修饰"></a>四、怎么检测组蛋白修饰</h3><p>一般我们使用 ChIPseq 来对样本测序，以此来拿到全基因组上的组蛋白修饰图谱。</p><p>点击传送门：</p><p><a href="https://zhuanlan.zhihu.com/p/279354841">https://zhuanlan.zhihu.com/p/279354841</a></p><p>参考：</p><p><a href="https://en.wikipedia.org/wiki/Histone">https://en.wikipedia.org/wiki/Histone</a></p><p>Histone methylation: a dynamic mark in health, disease and inheritance. Nature Reviews Genetics ，2017</p><p>Schematic representation of histone modifications. Based on Rodriguez-Paredes and Esteller, Nature, 2011</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> ChIPseq </tag>
            
            <tag> 组蛋白 </tag>
            
            <tag> 组蛋白修饰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂 ChIPseq</title>
      <link href="/posts/6141/"/>
      <url>/posts/6141/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><ul><li>ChIP-seq，测序方法<ul><li><code>ChIP</code> 指染色质免疫共沉淀技术（Chromatin Immunoprecipitation，ChIP），</li><li><code>seq</code> 指的是二代测序方法</li></ul></li><li>作用：识别蛋白质与DNA互相作用情况</li><li>原理：染色质免疫共沉淀 + 二代测序</li><li>应用：常用于转录因子结合位点和组蛋白修饰位点的研究</li></ul><h3 id="二、测序原理"><a href="#二、测序原理" class="headerlink" title="二、测序原理"></a>二、测序原理</h3><p>1、使用甲醛将目标蛋白（组蛋白，转录因子等）与染色质交联固定起来</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9ffe0e50908be642659417f14f73af6b.png" alt="mark"></p><p>2、从细胞裂解液分离基因组DNA，通过超声打断DNA为一定长度的小片段</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7a4787a3456b8073d7cb656e994ee5bd.png" alt="mark"></p><p>3、添加与目标蛋白质特异的抗体，该抗体会与目标蛋白形成免疫结合复合体沉淀，收集这些沉淀</p><p><strong>免疫结合复合体 &#x3D; 靶蛋白 + 抗体 + 靶蛋白结合的DNA</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ffbc26f28f72b73c9f82a4f2005515a.png" alt="mark"></p><p>4、去交联，分开蛋白与DNA，纯化DNA即可得到染色质免疫沉淀的DNA样本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/88cd3869d752b550c6887a0ef1a74db9.png" alt="mark"></p><p>5、建立好文库，用测序仪进行测序</p><p>详细测序过程可以参考：<a href="https://zhuanlan.zhihu.com/p/58708887">https://zhuanlan.zhihu.com/p/58708887</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/55fcb1e7f3d9fbec17670d29261d7f1c.png" alt="mark"></p><h3 id="三、检测蛋白质与DNA序列的结合峰"><a href="#三、检测蛋白质与DNA序列的结合峰" class="headerlink" title="三、检测蛋白质与DNA序列的结合峰"></a>三、检测蛋白质与DNA序列的结合峰</h3><h5 id="1、测序片段匹配到参考基因组"><a href="#1、测序片段匹配到参考基因组" class="headerlink" title="1、测序片段匹配到参考基因组"></a>1、测序片段匹配到参考基因组</h5><p>将测序得到的 DNA 片段（sequenced fragments）匹配到参考基因组。</p><p>很显然，如果在基因组的某个位置蛋白质结合的概率越大，那么在该位置检测到 DNA 片段堆叠就会越高。反之，如果没有蛋白结合，在该位置就会几乎没有DNA 片段堆叠。为了研究方便，我们将这些DNA片段堆叠叫做峰 (Peak)。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d6fd4a931008e47fbd34425c413fd61f.png" alt="mark"></p><h5 id="2、检测峰"><a href="#2、检测峰" class="headerlink" title="2、检测峰"></a>2、检测峰</h5><p>将覆盖到参考基因组的DNA片段堆叠用柱状图画出来，就会看到峰。</p><p>这里需要知道，ChIPseq是利用抗体去结合特异的靶蛋白，进而去沉淀靶蛋白结合的DNA。理论上，只要抗体设计的好，与蛋白质结合的 DNA 的都可以检测到。</p><p>我们一般用 ChIPseq 检测转录因子的结合，以及检测组蛋白修饰，二者有着截然不同的峰形：</p><p>转录因子结合的特征峰，峰型高，而且窄：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/623d805123d6151be649d65a0aef1019.png" alt="mark"></p><p>组蛋白修饰结合的特征峰，峰型起伏，而且分布广泛：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/199cb684e32b8d883c6d7be9b74233aa.png" alt="mark"></p><p>当然我们也可以使用，UCSC基因组浏览器显示。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c450f82a161fb93c3fab4e0b6368795.png" alt="mark"></p><h5 id="3、提高峰质量"><a href="#3、提高峰质量" class="headerlink" title="3、提高峰质量"></a>3、提高峰质量</h5><p>一般在做ChIPseq时，会加入一组空白对照（control），提高峰质量，那么为什么？</p><ul><li>一般检测出的峰值会有背景噪音，也就是文库会夹渣一些没有用抗体捕获的DNA片段也被测序了。</li><li>开放的染色质区域比封闭的区域更容易断裂</li><li>序列在基因组中分布不均</li><li>允许我们在比对的控件中与相同区域进行比较</li><li>消除 ENCODE 的 Black list的影响</li></ul><p>所以会准备空白对照，排除假阳性，对照组有有两种类型：</p><ul><li>input DNA：不用任何抗体捕获的DNA；</li><li>mock IP DNA：用不含有抗体的DNA</li></ul><p>这样一来，就会让我们检测到的峰更明显更接近真实的生物学特征。</p><h3 id="四、影响ChIPseq测序结果的因素"><a href="#四、影响ChIPseq测序结果的因素" class="headerlink" title="四、影响ChIPseq测序结果的因素"></a>四、影响ChIPseq测序结果的因素</h3><h5 id="1、免疫共沉淀的影响"><a href="#1、免疫共沉淀的影响" class="headerlink" title="1、免疫共沉淀的影响"></a>1、免疫共沉淀的影响</h5><ul><li>高效特异性抗体</li><li>起始样本量</li><li>ChIP DNA 产量<ul><li>细胞类型</li><li>标记或蛋白质丰富程度（组蛋白比TF具有更高的结合覆盖率）</li><li>抗体质量</li></ul></li></ul><blockquote><p>对于组蛋白，使用来自T细胞的20ug染色质DNA作为起始材料，总共会得到15-50ng DNA。 </p><p>对于TF，通常从2500万个细胞（200ug染色质）中得到5-25ng。 </p><p>-Subhash Tripathi，ResearchGate</p></blockquote><ul><li>染色质片段<ul><li>片段大小：影响ChIP-seq中的信噪比</li><li>因细胞类型而异</li><li>偏向启动子区域的片段会在ChIP 和对照样品中的启动子上引起ChIP-seq富集</li></ul></li></ul><h5 id="2、测序的影响"><a href="#2、测序的影响" class="headerlink" title="2、测序的影响"></a>2、测序的影响</h5><ul><li>Reads 长度<ul><li>较长的 Reads 和双末端 Reads 可提高匹配率</li><li>对于等位基因特异性染色质事件，转座因子研究是必需的</li></ul></li><li>避免分批次</li><li>序列输入对照的深度等于或大于IP样本</li><li>测序深度<ul><li>对于转录因子：最小5-10M</li><li>对于组蛋白修饰宽谱图则更高：标准为20-40M</li></ul></li></ul><h5 id="测序深度的对组蛋白修饰检测的影响"><a href="#测序深度的对组蛋白修饰检测的影响" class="headerlink" title="测序深度的对组蛋白修饰检测的影响"></a>测序深度的对组蛋白修饰检测的影响</h5><p>下面是在不同测序深度下检测人的 H3K4me3 组蛋白修饰ChIP图谱。 </p><p>绿色框对应于基于SPP宽峰检测方法得到的显著富集区域。</p><p>在 5M (500 Reads) 中，未检测到突出显示的富集区域。 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e8264fefc23beca40a028d4f186298a.png" alt="mark"></p><p>同样，我们换成 H3K27me3 组蛋白修饰。</p><p>这时在3.5M和10M 的低深度处未检测到突出显示的HOXD11和HOXD-AS1基因座处的富集区域（蓝色框）。 <img src="https://img-blog.csdnimg.cn/img_convert/ad7e74c6685c004f776d752f8c133323.png" alt="mark"></p><p>从每个子样本中H3K4me3，H3K36me3和H3K27me3回收的全部数据中获得的显著富集区域的百分比<img src="https://img-blog.csdnimg.cn/img_convert/be0d0f9562efad03027d6b1fccc56885.png" alt="mark"></p><p>总的来说，随着测序深度增加，组蛋白修饰检测比例开始会快速增加，随后达到平稳。测序深度饱和点取决于组蛋白修饰和所研究的物种基因组。</p><h5 id="3、重复样和重现性"><a href="#3、重复样和重现性" class="headerlink" title="3、重复样和重现性"></a>3、重复样和重现性</h5><ul><li>重复多次通常比更高的深度更有效</li><li>最好是低深度测序高质量样本，而不是高深度低质量样本</li></ul><p>参考：</p><p><a href="https://academic.oup.com/nar/article/42/9/e74/1248114">https://academic.oup.com/nar/article/42/9/e74/1248114</a></p><p><a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/ChIP_sequencing%23/media/File:Chromatin_immunoprecipitation_sequencing.svg">https://en.wikipedia.org/wiki/ChIP_sequencing#&#x2F;media&#x2F;File:Chromatin_immunoprecipitation_sequencing.svg</a></p><p><a href="https://link.zhihu.com/?target=https://www.abcam.com/epigenetics/studying-epigenetics-using-chip">https://www.abcam.com/epigenetics/studying-epigenetics-using-chip</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 表观遗传学 </tag>
            
            <tag> ChIPseq </tag>
            
            <tag> 转录因子 </tag>
            
            <tag> 组蛋白 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 究极技巧3 - 在线安装插件包及常用插件</title>
      <link href="/posts/35496/"/>
      <url>/posts/35496/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> sublime </tag>
            
            <tag> 安装包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UCSC 基因组浏览器配置详解</title>
      <link href="/posts/60574/"/>
      <url>/posts/60574/</url>
      
        <content type="html"><![CDATA[<h3 id="一、配置参数"><a href="#一、配置参数" class="headerlink" title="一、配置参数"></a>一、配置参数</h3><p>UCSC基因组浏览器：<a href="https://genome.ucsc.edu/cgi-bin/hgTracks?db=mm10&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr12:56694976-56714605&hgsid=932260855_lEySY83keAtUn9AxjGL7xeJDQUM3">传送门</a></p><p>1、点击配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/32169fa7a751ca47feddced42bb35ebc.png" alt="mark"></p><p>2、进入配置页面：</p><p>点击刚刚运行的文件 <code>BedGraph Format</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/27723edcf2d72cea60b68d9eff296d24.png" alt="mark"></p><p>2、轨迹配置页面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5d1698a04876624c0b27ffc24720fc95.png" alt="mark"></p><ul><li><strong>Type of graph</strong> ：默认以<code>bar</code>，条形图来显示，选择<code>point</code>会以点或线来显示</li><li><strong>Track height</strong> ：设置图形高度，像素为单位</li><li><strong>Data view scaling (boxed in red)</strong> ：<ul><li>如果选中 <code>use vertical viewing range setting </code>选项，将使用 <code>Vertical viewing range </code>设置中指定的参数显示数据</li><li>如果选中 <code>auto-scale to data view </code>选项，将图形配置为自动缩放到当前视图中最小和最大数据点定义的范围。要在选择自动缩放时，始终保持 y &#x3D; 0 ，需要<code>Always include zero </code>设置为 <code>ON</code>。</li></ul></li></ul><p>查看复合组中的信号轨迹时，请使用<code>group auto-scale </code>功能，以使所有轨迹相对于当前视图中具有最大最大数据点的组中的一个轨迹进行缩放。</p><p>例如，以下是在相关RNA-seq实验的组合中，来自多个细胞系的同一数据的两个视图的并排图像。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/521c91606c9b67371a5d1e882ef053d1.png" alt="mark"></p><p>左侧（<a href="http://genome.ucsc.edu/cgi-bin/hgTracks?hgS_doLoadUrl=submit&hgS_loadUrlName=http://genome.ucsc.edu/goldenPath/help/examples/sessions/session.autoScale">点击查看</a>）是原始的 <code>auto-scale to data view </code> 设置，其中每个轨迹都自动缩放到该轨迹的最高值。</p><p>右侧（<a href="http://genome.ucsc.edu/cgi-bin/hgTracks?hgS_doLoadUrl=submit&hgS_loadUrlName=http://genome.ucsc.edu/goldenPath/help/examples/sessions/session.groupAutoScale">点击查看</a>）是针对相同RNA-seq数据的 <code>group auto-scale </code> 设置，其中所有轨迹相对于具有最高值（IMR9细胞TAP +1的67215）的一个轨迹进行缩放。 </p><ul><li><p><strong>Transform function</strong> ：通过下拉菜单中选择的功能转换数据点。通常，默认设置为“无” </p></li><li><p><strong>Windowing function</strong> ：当视图太大而无法显示单个数据值时，必须将这些值组合起来以产生一个绘图点。此选项指定要使用的合并功能（默认为“均值”）： </p><ul><li>Mean+whiskers：在深色阴影下显示平均值，在中等阴影下显示均值周围的一个标准偏差，在浅色阴影下显示最大值&#x2F;最小值。对于条形图，只有平均值，平均值加上标准偏差和最大值可见。如果是叠加方法，则此模式不可用。 </li><li>Maximum：显示所有要合并的点的最大值 </li><li>Mean：显示平均值 </li><li>Minimum： 显示所有要组合点的最小</li></ul></li><li><p><strong>Smoothing window</strong> ：等效于图形上的趋势线计算。默认设置为“关”。 设置数值用于确定要在图形上传递以平滑条或线边缘的平滑窗口的大小，以像素为单位。</p></li><li><p><strong>Negate values</strong>：取反，选中后，所有值都取反，这意味着正值变为负值，反之亦然。这对于表示负链上的转录等非常有用。 </p><p>比如，下图显示了不同链上两个基因SIRT1和HERC4周围的ENCODE RNA-seq数据，负信号轨迹使用取反值，显示以强调HERC4在负链上表达。该图像还显示以点为单位绘制的信号和16像素的平滑窗口。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/293a32704ad6c6a983ba52fadcc541b5.png" alt="mark"></p><ul><li><p><strong>Draw y indicator lines</strong> ：</p><ul><li><p>当** y &#x3D; 0.0 **时：选择 <code>ON</code> 以显示在图形上标记 0.0 位置的线（默认为 OFF）</p></li><li><p>当<strong>y&#x3D;</strong>  ：选择 <code>ON</code> 设置以指定的数值在图形上显示一条线（默认值为 <code>0</code> 和 <code>OFF</code>）。这条线可以用来标记图形上的重要阈值。例如，在下面的图像中， <strong>y &#x3D; 3</strong>。 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/0f5f6ee8040e866b9743774eacdd19dd.png" alt="mark"></p></li></ul></li></ul><h3 id="二、轨迹显示"><a href="#二、轨迹显示" class="headerlink" title="二、轨迹显示"></a>二、轨迹显示</h3><h4 id="1、显示模式"><a href="#1、显示模式" class="headerlink" title="1、显示模式"></a>1、显示模式</h4><p><strong>Dense</strong></p><p>显示的轨迹将所有特征折叠为一行。线条颜色越深，该位置的摆动值越大</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5188c5c98e006549389adffd4b919454.png" alt="mark"></p><p><strong>Squish</strong></p><p>轨迹显示时所有特征都折叠成一行，非常类似于具有更大压缩率的 Dense 显示模式 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/bc2d8a4c610090887a46b4a1c9d7e191.png" alt="mark"></p><p><strong>Full</strong></p><p>轨迹显示与每个注释功能关联的 wiggle 值，从而创建类似直方图的图像</p><p><img src="https://img-blog.csdnimg.cn/img_convert/59069e33a7d5f8689007c2e7861a9169.png" alt="mark"></p><p><strong>Pack</strong></p><p>轨迹显示与每个注释功能关联的 wiggle  值，从而创建类似于直方图的图像，这与具有更大压缩率的完整 Full  模式非常相似</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e3ec566f97d73ff0a94f163c92edea34.png" alt="mark"></p><p><strong>Hide</strong></p><p>不显示轨迹</p><h4 id="2、叠加方法（Overlay）"><a href="#2、叠加方法（Overlay）" class="headerlink" title="2、叠加方法（Overlay）"></a>2、叠加方法（Overlay）</h4><p>并非所有基于图形的轨迹都包括 <code>Overlay</code> 选项 </p><p><strong>Transparent</strong></p><p>此设置显示多个子轨迹的彩色透明图形，并叠加在同一垂直空间中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/743f0f3a52bcd36f15e6b4cec1693bf7.png" alt="mark"></p><p><strong>Solid</strong></p><p>此设置显示多个子轨迹的彩色不透明图形，然后叠加在同一垂直空间中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d92283eb852b1b27ed647a76495abc2b.png" alt="mark"></p><p><strong>Stacked</strong></p><p>此设置显示每个堆叠在一起的图形，其中图形的最高点是所有值的总和</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8aa7827f626b14655429387a0fd6f5c.png" alt="mark"></p><p><strong>None</strong></p><p>此设置将每个图形显示在其自己的独立的垂直空间中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b146f6f453b7337943bbc040fcd07155.png" alt="mark"></p><h3 id="三、常用文件"><a href="#三、常用文件" class="headerlink" title="三、常用文件"></a>三、常用文件</h3><h5 id="bigwig-文件绘制轨道"><a href="#bigwig-文件绘制轨道" class="headerlink" title="bigwig 文件绘制轨道"></a>bigwig 文件绘制轨道</h5><p>1、加入自定义轨道：<a href="https://genome.ucsc.edu/cgi-bin/hgCustom">https://genome.ucsc.edu/cgi-bin/hgCustom</a> </p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">track type=bigWig name="Example One" description="A bigWig file" bigDataUrl=http://genome.ucsc.edu/goldenPath/help/examples/bigWigExample.bw<br>browser position chr21:33,031,597-33,041,570<br></code></pre></td></tr></table></figure><p>2、绘制出轨道</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1e51d286ec02d058b79492da3110778.png" alt="mark"></p><h5 id="wig-文件绘制轨道"><a href="#wig-文件绘制轨道" class="headerlink" title="wig 文件绘制轨道"></a>wig 文件绘制轨道</h5><p>1、下载数据：</p><p>wiggle 文件：<a href="http://genome.ucsc.edu/goldenPath/help/examples/wigVarStepExample.gz">http://genome.ucsc.edu/goldenPath/help/examples/wigVarStepExample.gz</a></p><p>chrom.sizes 文件：<a href="http://genome.ucsc.edu/goldenPath/help/hg19.chrom.sizes">http://genome.ucsc.edu/goldenPath/help/hg19.chrom.sizes</a></p><p>2、运行命令：</p><p><code>wigToBigWig wigVarStepExample.gz hg19.chrom.sizes myBigWig.bw</code></p><p>结果会生成 <code>myBigWig.bw</code> 文件</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f4b0a232e6183912b433830cf3dd7c25.png" alt="mark"></p><p>3、将生成的 bigWig 文件放在可web访问的服务器：</p><p><a href="http://bioinfo.ziptop.top/myBigWig.bw">http://bioinfo.ziptop.top/myBigWig.bw</a></p><p>4、绘制出轨道</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-SkPuw5fh-1603975335831)(<a href="http://baimoc.ziptop.top/blog/20200921/IEtD1mvTJk32.png)]">http://baimoc.ziptop.top/blog/20200921/IEtD1mvTJk32.png)]</a></p><h5 id="bedGraph-文件绘制轨道"><a href="#bedGraph-文件绘制轨道" class="headerlink" title="bedGraph 文件绘制轨道"></a>bedGraph 文件绘制轨道</h5><p>1、新建<code>bedGraph</code> 文件，</p><p>必须为每个数据轨道创建一个单独的 bedGraph 文件，比如<code>in.bedGraph</code>:</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">chr19 49302000 49302300 -1.0<br>chr19 49302300 49302600 -0.75<br>chr19 49302600 49302900 -0.50<br>chr19 49302900 49303200 -0.25<br>chr19 49303200 49303500 0.0<br>chr19 49303500 49303800 0.25<br>chr19 49303800 49304100 0.50<br>chr19 49304100 49304400 0.75<br>chr19 49304400 49304700 1.00<br></code></pre></td></tr></table></figure><p>2、将 bedGraph 转换为 BigWig 文件：</p><p>bedGraphToBigWig 下载地址：<a href="http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig">http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig</a></p><p><code>bedGraphToBigWig in.bedGraph chrom.sizes bgBigWig.bw</code></p><blockquote><p>bedGraphToBigWig程序<strong>不接受</strong>压缩的bedGraph输入文件</p></blockquote><p>3、将生成的 bigWig 文件放在可web访问的服务器：</p><p><a href="http://bioinfo.ziptop.top/bgBigWig.bw">http://bioinfo.ziptop.top/bgBigWig.bw</a></p><p>4、输入轨道地址，提交</p><p><a href="http://genome.ucsc.edu/cgi-bin/hgCustom">http://genome.ucsc.edu/cgi-bin/hgCustom</a> </p><p><img src="https://img-blog.csdnimg.cn/img_convert/c43e8b1a08b7f233d71855e74a659d3f.png" alt="mark"></p><p>6、绘制出轨道</p><p><img src="https://img-blog.csdnimg.cn/img_convert/458b1f97a148641e2596b4e279c7dcfc.png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> UCSC 基因组浏览器 </tag>
            
            <tag> 基因组浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信格式 | BedGraph（基因组浏览器绘制）</title>
      <link href="/posts/39018/"/>
      <url>/posts/39018/</url>
      
        <content type="html"><![CDATA[<h3 id="一、特点及适用场景："><a href="#一、特点及适用场景：" class="headerlink" title="一、特点及适用场景："></a>一、特点及适用场景：</h3><ul><li>存放区间的坐标轴信息和相关评分(score)的文件，主要用于存储稀疏，不连续的数据</li><li>后缀名<code>.bedGraph</code></li><li>一般UCSC不建议采用该格式作为基因组浏览器输入文件，因为考虑到数据集大小与索引构建，都不如 bigwig 更高效，尤其在如果bedGraph数据集非常大（超过5000万行 ），推荐转为 bigwig 文件</li><li>使用<code>WigTobigWig</code>将 bedGraph 转换为bigWig 文件，<a href="https://zhenglei.blog.csdn.net/article/details/109367884">文件格式转换详解</a></li><li>需要注意 bedGraph 文件不能转换为 wig 文件</li></ul><h3 id="二、格式"><a href="#二、格式" class="headerlink" title="二、格式"></a>二、格式</h3><p>一共包含四列：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chromA  chromStartA  chromEndA  dataValue<br></code></pre></td></tr></table></figure><p>分别为：</p><ul><li>染色体号</li><li>起始位点：染色体坐标从 <code>0</code> 开始，这意味着第一个染色体位置为0，而长度为<em>N</em>的染色体的最后位置将为<em>N-1</em>。</li><li>终止位点</li><li>数据值：数据值可以是整数或实数，正值或负值。输入数据中列出的位置必须按数字顺序，并且仅会绘制指定位置的图。</li></ul><p>参数</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">track type=bedGraph name=track_label description=center_label<br>visibility=display_mode color=r,g,b altColor=r,g,b<br>priority=priority autoScale=on|off alwaysZero=on|off gridDefault=on|off<br>maxHeightPixels=max:default:min graphType=bar|points viewLimits=lower:upper<br>yLineMark=real-value yLineOnOff=on|off<br>windowingFunction=maximum|mean|minimum smoothingWindow=off|2-16<br></code></pre></td></tr></table></figure><h3 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h3><p><strong>1、bedGraph 文件</strong></p><p>下面的文件可以描述为：</p><p>在第19号染色体的49,302,001到49,304,701区域的三个轨迹中指定9个独立的数据点。</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">browser position chr19:49302001-49304701<br>browser hide all<br>browser pack refGene encodeRegions<br>browser full altGraph<br><span class="hljs-meta prompt_">#</span><span class="language-bash">300 base wide bar graph, autoScale is on by default == graphing</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">limits will dynamically change to always show full range of data</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">in</span> viewing window, priority = 20 positions this as the second graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, zero-relative, half-open coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword"><code class="language-hljs shell">browser position chr19:49302001-49304701<br>browser hide all<br>browser pack refGene encodeRegions<br>browser full altGraph<br><span class="hljs-meta prompt_">#</span><span class="language-bash">300 base wide bar graph, autoScale is on by default == graphing</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">limits will dynamically change to always show full range of data</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">in</span> viewing window, priority = 20 positions this as the second graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, zero-relative, half-open coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword">for</span> bedGraph format</span><br>track type=bedGraph name="BedGraph Format" description="BedGraph format" visibility=full color=200,100,0 altColor=0,100,200 priority=20<br>chr19 49302000 49302300 -1.0<br>chr19 49302300 49302600 -0.75<br>chr19 49302600 49302900 -0.50<br>chr19 49302900 49303200 -0.25<br>chr19 49303200 49303500 0.0<br>chr19 49303500 49303800 0.25<br>chr19 49303800 49304100 0.50<br>chr19 49304100 49304400 0.75<br>chr19 49304400 49304700 1.00<br></code></pre></td></tr></table></figure><p>2、粘贴上面的代码，点 <code>Submit</code></p><p><a href="https://genome.ucsc.edu/cgi-bin/hgCustom">https://genome.ucsc.edu/cgi-bin/hgCustom</a> </p><p><img src="https://img-blog.csdnimg.cn/img_convert/28dcb3efc4f10854d86581d31d58f9a6.png" alt="mark"></p><p>3、绘制轨迹</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2efad5390892f1309a2b42fd877d436.png" alt="mark"></p><blockquote><p>上面的示例是一个定制轨迹，其中包括<code>track type=</code>一行特定于在浏览器中加载数据的行。</p><p>此行将导致原始bedGraph数据文件无法通过<code>validateFiles</code>浏览器外部的其他工具进行验证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因组浏览器 </tag>
            
            <tag> bedGraph </tag>
            
            <tag> UCSC </tag>
            
            <tag> UCSC基因组浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信格式 | bigwig，bw （基因组浏览器绘制）</title>
      <link href="/posts/43626/"/>
      <url>/posts/43626/</url>
      
        <content type="html"><![CDATA[<h3 id="一、特点及适用场景："><a href="#一、特点及适用场景：" class="headerlink" title="一、特点及适用场景："></a>一、特点及适用场景：</h3><ul><li>存放区间的坐标轴信息（如染色质可及性，转录因子结合区域）和相关评分(score)的文件，主要用于存储密集，连续的数据</li><li>主要用于在基因组浏览器上查看数据的连续密度图</li><li>wig或bedGraph的索引二进制文件，也就是可以由这两种文件转换得到</li><li>后缀名：<code>.bw</code>，<code>.bigwig</code></li><li>在处理大型数据集时，bigWig文件的显示性能比常规的wig文件快得多 </li><li>数据必须是连续的并且由大小相等的元素组成，如果数据是稀疏或包含大小不同的元素时，请使用bedGraph格式</li></ul><h3 id="二、wig-转-bigwig"><a href="#二、wig-转-bigwig" class="headerlink" title="二、wig 转 bigwig"></a>二、wig 转 bigwig</h3><p>BigWig文件可以使用<code>wigToBigWig</code>程序从wiggle（wig）格式文件转换得到 </p><p><strong>1、 创建 wig 文件</strong></p><p>wig 文件转换为bigWig文件时，必须为每个数据轨迹创建一个单独的 wig 文件。 </p><p>从 wig 文件中删除任何现有的“ track”或“ browser”行，使其仅包含数据。 </p><p>文件名命名为 <code>input.wig</code></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">variableStep chrom=chr19 span=150<br>49304701 10.0<br>49304901 12.5<br>49305401 15.0<br>49305601 17.5<br>49305901 20.0<br>49306081 17.5<br>49306301 15.0<br>49306691 12.5<br>49307871 10.0<br></code></pre></td></tr></table></figure><p><strong>2、创建<em>chrom.sizes</em>文件</strong> </p><p><code>wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes</code></p><p><code>fetchChromSizes hg38 &gt; hg38.chrom.sizes</code></p><p><strong>3、转换为 bigWig 文件</strong> </p><p><code>http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig</code></p><p><code>wigToBigWig input.wig hg38.chrom.sizes BigWig.bw</code></p><p><strong>4、将生成的 bigwig 文件放在web可访问的地址</strong></p><p>这里提供了两种方式：</p><ul><li><a href="http://genome.ucsc.edu/goldenPath/help/hgTrackHubHelp.html">Track Hub</a> 是官方提供 Web 可访问的基因组数据目录 </li><li>自己搭建个网站，把数据开放给外部，比如，我生成的bigwig文件链接放在这个url：<a href="http://bioinfo.ziptop.top/BigWig.bw">http://bioinfo.ziptop.top/BigWig.bw</a></li></ul><blockquote><p>bigWig文件保留在本地可通过Web访问的服务器（http，https或ftp）上，并且仅将当前显示的染色体位置所需的部分，才会成为本地缓存的“稀疏文件”。</p><p>如果无权访问Web服务器并且需要bigWig文件的托管空间，请参阅Track Hub帮助文档的“ <a href="http://genome.ucsc.edu/goldenPath/help/hgTrackHubHelp.html#Hosting">托管”</a>部分。 </p></blockquote><p><strong>5、 选择菜单栏<code>My Data </code>的<code>Custom Tracks</code></strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5038b0d7c9b5cf7232ed5384c295a413.png" alt="mark"></p><p><strong>6、将上面的代码粘贴到输入框，点 <code>Submit</code></strong></p><p><a href="http://bioinfo.ziptop.top/BigWig.bw">http://bioinfo.ziptop.top/BigWig.bw</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/cf5e2ce83debf4b23ab6bf3089d7c333.png" alt="mark"></p><p><strong>7、点 <code>go</code></strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f733a77471c7d1cd06980f8000841c88.png" alt="mark"></p><p><strong>8、在基因组浏览器中绘制的轨迹</strong></p><p>可以看到参考基因组相应的位置，不同的值用不同颜色代表</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa11e9629181bb83c58af7ab160f4792.png" alt="mark"></p><p><strong>9、定制轨迹线参数</strong></p><p>默认情况下，将使用文件名来命名轨迹。要配置轨迹标签或其他可视化选项，必须创建一条轨迹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">track type=bigWig name="My Big Wig" description="A Graph of Data from My Lab" bigDataUrl=http://bioinfo.ziptop.top/BigWig.bw<br></code></pre></td></tr></table></figure><p>粘贴上面的代码，点 <code>Submit</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5a595bec47d6e3b0dd38cb83b2fd43a6.png" alt="mark"></p><p><strong>10、轨迹列表，点 <code>go</code></strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/596f1fe057966d69b1e94260710b78c1.png" alt="mark"></p><p><strong>其他参数</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">autoScale         <on|off>                             # default is on<br>alwaysZero        <on|off>                             # default is off<br>gridDefault       <on|off>                             # default is off<br>maxHeightPixels   <max:default:min>                    # default is 128:128:11<br>graphType         <bar|points>                         # default is bar<br>viewLimits        <lower:upper>                        # default is range found in data<br>viewLimitsMax     <lower:upper>                        # suggested bounds of viewLimits, but not enforced<br>yLineMark         <real-value>                         # default is 0.0<br>yLineOnOff        <on|off>                             # default is off<br>windowingFunction <mean+whiskers|maximum|mean|minimum> # default is maximum, mean+whiskers is recommended<br>smoothingWindow   <off|[2-16]>                         # default is off<br>transformFunc     <NONE|LOG>                           # default is NONE<br></code></pre></td></tr></table></figure><h3 id="三、bedGraph-转-bigwig"><a href="#三、bedGraph-转-bigwig" class="headerlink" title="三、bedGraph 转 bigwig"></a>三、bedGraph 转 bigwig</h3><p><code>bedGraphToBigWig</code>程序比未压缩的bedGraph输入文件使用的RAM多大约25％ 。</p><p>类似于上述过程，这里简写</p><p><code>wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes</code></p><p><code>fetchChromSizes hg38 &gt; hg38.chrom.sizes</code></p><p><code>wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig</code></p><p><code>bedGraphToBigWig in.bedGraph hg38.chrom.sizes out.bw</code></p><blockquote><p>如果报错染色体长度超出，需要先剪切bed<br>用到的工具：<code>wget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedClip</code><br><code>bedClip input.bed hg38.chrom.sizes output.bed</code></p></blockquote><h3 id="四、其他工具"><a href="#四、其他工具" class="headerlink" title="四、其他工具"></a>四、其他工具</h3><p><a href="http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/">http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/</a></p><ul><li><code>bigWigToBedGraph</code>：将bigWig文件转换为 bedGraph 格式。</li><li><code>bigWigToWig</code>：将bigWig文件转换为 wig 格式。注意：如果从bedGraph创建了bigWig文件，则bigWigToWig会将文件还原回bedGraph。</li><li><code>bigWigSummary</code> ：从bigWig文件中提取摘要信息。</li><li><code>bigWigAverageOverBed</code> ：计算每个 bed 上可能有内含子的bigWig的平均得分。</li><li><code>bigWigInfo</code> ：打印出有关bigWig文件的信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因组浏览器 </tag>
            
            <tag> 生信文件格式 </tag>
            
            <tag> bigwig </tag>
            
            <tag> bw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信格式 | wig（基因组浏览器绘制）</title>
      <link href="/posts/46671/"/>
      <url>/posts/46671/</url>
      
        <content type="html"><![CDATA[<p>Wig，BigWig，BedGraph，这是几种在基因组浏览器上绘制图形的数据格式。</p><p>不同的数据格式可以满足不同的显示需求，下面我们一一来看：</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>wig 文件全称叫 Wiggle Track Format， 用来绘制基因组上的图形轨迹的文件格式。wig 格式是较老的格式，用来显示密集且连续的数据，比如GC含量，概率分数，转录组数据等。</p><p>wig 数据有两种类型：variableStep 和 fixedStep。</p><p>我们先来研究这两种类型的文件，后面在基因组浏览器中利用这些文件显示轨迹。</p><h3 id="一、variableStep-格式"><a href="#一、variableStep-格式" class="headerlink" title="一、variableStep 格式"></a>一、variableStep 格式</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/8e305ad4a42a554c978eecebc2503b6c.png" alt="mark"></p><h5 id="1、特点及适用场景："><a href="#1、特点及适用场景：" class="headerlink" title="1、特点及适用场景："></a>1、特点及适用场景：</h5><ul><li>在指定的染色体片段区域绘制<strong>条形图</strong></li><li>用于全基因组数据集（大约百万分之十的数据点）</li><li>指定的区域必须为恒定大小（由<em>span</em>参数指定）</li><li>数据点间具有<strong>不规则间隔</strong>的数据，但是在某些情况下建议谨慎</li><li>如果数据点的不规则间距太极端，此格式在编码和显示期间可能效率很低。在这种情况下，“bedGraph”是最佳格式。</li><li>一般UCSC不建议采用该格式作为基因组浏览器输入文件，因为考虑到数据集大小与索引构建，都不如 bigwig 更高效</li><li>使用 wigToBigWig 将 Wig 转换为 bigWig 文件，<a href="https://zhenglei.blog.csdn.net/article/details/109367884">文件格式转换详解</a></li></ul><h5 id="2、格式："><a href="#2、格式：" class="headerlink" title="2、格式："></a>2、格式：</h5><p>声明行：以单词<strong>variableStep</strong>开头，后跟染色体规范。</p><p>数据行：两列，分别包含染色体位置和数据值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">variableStep  chrom=chrN<br>[span=windowSize]<br>  chromStartA  dataValueA<br>  chromStartB  dataValueB<br>  ... etc ...  ... etc ...<br></code></pre></td></tr></table></figure><h5 id="3、例子："><a href="#3、例子：" class="headerlink" title="3、例子："></a>3、例子：</h5><p>下面表示在2号染色体上的300701-300705位置均显示12.5</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">variableStep chrom=chr2<br>300701 12.5<br>300702 12.5<br>300703 12.5<br>300704 12.5<br>300705 12.5 <br></code></pre></td></tr></table></figure><p>可选的<strong>span</strong>参数（默认值：span &#x3D; 1）允许更简洁地指定由连续的具有相同数据值的碱基组成的数据。</p><p>跨度从指定的每个染色体位置开始，并指示数据值应覆盖的碱基数。例如： 应用<code>span=5</code>后，相当于：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">variableStep chrom=chr2 span=5<br>300701 12.5<br></code></pre></td></tr></table></figure><blockquote><p>wiggle 格式用于快速显示非常密集的数据。当每1,024个碱基只有几个数据点时，variableStep格式会变得效率极低。</p><p>如果variableStep数据点相距大于约100个碱基，则建议使用 BedGraph格式。 </p></blockquote><h3 id="二、fixedStep-格式"><a href="#二、fixedStep-格式" class="headerlink" title="二、fixedStep 格式"></a>二、fixedStep 格式</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/d2d5d96e1b462647c6ff332e732fcaff.png" alt="mark"></p><h5 id="1、特点及适用场景：-1"><a href="#1、特点及适用场景：-1" class="headerlink" title="1、特点及适用场景："></a>1、特点及适用场景：</h5><ul><li>在指定的染色体片段区域绘制条形图</li><li>最适合用于全基因组数据集（大约百万分之十的数据点）</li><li>指定的区域必须为恒定大小（由span参数指定）</li><li>染色体位置精确地<strong>有规律的间隔</strong>（由<em>step</em>参数指定）</li></ul><h5 id="2、格式：-1"><a href="#2、格式：-1" class="headerlink" title="2、格式："></a>2、格式：</h5><p>声明行：单词<strong>fixedStep</strong>开头，并包含染色体，起始坐标和步长的规范 。</p><p>数据行：一列，包含数据值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">fixedStep  chrom=chrN<br>start=position  step=stepInterval<br>[span=windowSize]<br>  dataValue1<br>  dataValue2<br>  ... etc ...<br></code></pre></td></tr></table></figure><h5 id="3、例子：-1"><a href="#3、例子：-1" class="headerlink" title="3、例子："></a>3、例子：</h5><p>表示3号染色体上的三个区域（每个区域5个碱基）：400601-400605、400701-400705和400801-400805，分别显示值11、22和33</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">fixedStep chrom=chr3 start=400601 step=100 span=5<br>11<br>22<br>33 <br></code></pre></td></tr></table></figure><blockquote><p>对于variableStep和fixedStep格式，<strong>必须在整个数据集中使用相同的</strong>。如果未指定跨度，则使用默认跨度1。</p><p>顾名思义，fixedStep 在整个数据集中需要相同的大小步长。如果未指定，则步长为1。 </p></blockquote><h3 id="三、数据值"><a href="#三、数据值" class="headerlink" title="三、数据值"></a>三、数据值</h3><p>wiggle 格式的数据值可以包含整数，实数，正值或负值，但不支持 NaN 值。未指定的位置没有数据，也就不会显示。</p><blockquote><p>需要注意：wiggle文件（variableStep and fixedStep ）的染色体坐标是从<code>1</code>开始。</p><p>例如，对于长度为N的染色体，第一个位置为1，最后一个位置为N。 </p><p>对于 bigwig 文件，使用 wiggle 转换为 bigwig，使用的染色体坐标是从<code>1</code>开始。</p><p>而使用bedGraph格式创建的BigWig文件使用<code>0</code>开始。</p></blockquote><p>自定义 wiggle 轨迹的参数</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">track type=wiggle_0 name=track_label<br>description=center_label<br>visibility=display_mode color=r,g,b<br>altColor=r,g,b priority=priority<br>autoScale=on|off alwaysZero=on|off<br>gridDefault=on|off<br>maxHeightPixels=max:default:min<br>graphType=bar|points<br>viewLimits=lower:upper<br>yLineMark=real-value yLineOnOff=on|off<br>windowingFunction=mean+whiskers|maximum|mean|minimum<br>smoothingWindow=off|2-16<br></code></pre></td></tr></table></figure><p>其他参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">autoScale         <on|off>                             # default is on<br>alwaysZero        <on|off>                             # default is off<br>gridDefault       <on|off>                             # default is off<br>maxHeightPixels   <max:default:min>                    # default is 128:128:11<br>graphType         <bar|points>                         # default is bar<br>viewLimits        <lower:upper>                        # default is range found in data<br>viewLimitsMax     <lower:upper>                        # suggested bounds of viewLimits, but not enforced<br>yLineMark         <real-value>                         # default is 0.0<br>yLineOnOff        <on|off>                             # default is off<br>windowingFunction <mean+whiskers|maximum|mean|minimum> # default is maximum, mean+whiskers is recommended<br>smoothingWindow   <off|[2-16]>                         # default is off<br>transformFunc     <NONE|LOG>                           # default is NONE<br></code></pre></td></tr></table></figure><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>1、下面是 Wig 格式的文件，分别包含 variableStep 和 fixedStep 格式创建的两段轨迹</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell">browser position chr19:49304200-49310700<br>browser hide all<br><span class="hljs-meta prompt_">#</span><span class="language-bash">150 base wide bar graph at arbitrarily spaced positions,</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">threshold line drawn at y=11.76</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autoScale off viewing range <span class="hljs-built_in">set</span> to [0:25]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">priority = 10 positions this as the first graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, one-relative coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword">for</span> this format</span><br>track type=wiggle_0 name=&quot;variableStep&quot; description=&quot;variableStep format&quot; visibility=full autoScale=off viewLimits=0.0:25.0 color=50,150,255 yLineMark=11.76 yLineOnOff=on priority=10<br>variableStep chrom=chr19 span=150<br>49304701 10.0<br>49304901 12.5<br>49305401 15.0<br>49305601 17.5<br>49305901 20.0<br>49306081 17.5<br>49306301 15.0<br>49306691 12.5<br>49307871 10.0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">200 base wide points graph at every 300 bases, 50 pixel high graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autoScale off and viewing range <span class="hljs-built_in">set</span> to [0:1000]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">priority = 20 positions this as the second graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, one-relative coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword"><code class="language-hljs shell">browser position chr19:49304200-49310700<br>browser hide all<br><span class="hljs-meta prompt_">#</span><span class="language-bash">150 base wide bar graph at arbitrarily spaced positions,</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">threshold line drawn at y=11.76</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autoScale off viewing range <span class="hljs-built_in">set</span> to [0:25]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">priority = 10 positions this as the first graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, one-relative coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword">for</span> this format</span><br>track type=wiggle_0 name=&quot;variableStep&quot; description=&quot;variableStep format&quot; visibility=full autoScale=off viewLimits=0.0:25.0 color=50,150,255 yLineMark=11.76 yLineOnOff=on priority=10<br>variableStep chrom=chr19 span=150<br>49304701 10.0<br>49304901 12.5<br>49305401 15.0<br>49305601 17.5<br>49305901 20.0<br>49306081 17.5<br>49306301 15.0<br>49306691 12.5<br>49307871 10.0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">200 base wide points graph at every 300 bases, 50 pixel high graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">autoScale off and viewing range <span class="hljs-built_in">set</span> to [0:1000]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">priority = 20 positions this as the second graph</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Note, one-relative coordinate system <span class="hljs-keyword">in</span> use <span class="hljs-keyword">for</span> this format</span><br>track type=wiggle_0 name="fixedStep" description="fixedStep format" visibility=full autoScale=off viewLimits=0:1000 color=0,200,100 maxHeightPixels=100:50:20 graphType=points priority=20<br>fixedStep chrom=chr19 start=49307401 step=300 span=200<br>1000<br> 900<br> 800<br> 700<br> 600<br> 500<br> 400<br> 300<br> 200<br> 100<br></code></pre></td></tr></table></figure><p>2、 选择菜单栏<code>My Data </code>的<code>Custom Tracks</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5038b0d7c9b5cf7232ed5384c295a413.png" alt="mark"></p><p>3、将上面的代码粘贴到输入框，点 <code>Submit</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d75cd970bdd843c857ec8edda75807aa.png" alt="mark"></p><p>4、简要信息显示，点<code>Go</code>进行绘制</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f48f2b7f7c5f743d926fd28720ecc23a.png" alt="mark"></p><p>5、拿到绘制好的轨迹图</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f69762f2b3ec071101fe049ce84d2a8.png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> 生信文件格式 </tag>
            
            <tag> 生信格式 </tag>
            
            <tag> wig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | Samtools（SAM文件处理工具）</title>
      <link href="/posts/62801/"/>
      <url>/posts/62801/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><strong>SAM（sequence Alignment&#x2F;mapping)</strong> 数据格式是目前高通量测序中存放比对数据的标准格式 </li><li>转换 <strong>BAM</strong> 与 <strong>SAM</strong> 格式</li><li>比对文件排序，建立fastq索引</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>conda install -y samtools</code></p><blockquote><p>这里需要安装Conda (这是一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、常用的三个步骤</p><p>转换 SAM 格式为 BAM 格式</p><p><code>samtools view -S SRR00000.sam -b &gt; SRR00000.bam</code></p><p>对比对后文件进行排序</p><p><code>samtools sort SRR00000.bam -o SRR00000_sorted.bam</code></p><p>对排序后文件建立索引</p><p><code>samtools index SRR00000_sorted.bam</code></p><blockquote><p>通常以上的三个步骤是依次进行</p></blockquote><p>2、格式转换</p><p>sam -&gt; bam</p><p><code>samtools view -S SRR00000.sam -b &gt; SRR00000.bam</code></p><p>bam -&gt; sam</p><p><code>samtools view -h SRR00000.bam -b &gt; SRR00000.sam</code></p><blockquote><p>文档：<a href="http://www.htslib.org/doc/samtools.html">http://www.htslib.org/doc/samtools.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> sam </tag>
            
            <tag> samtools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 11 | 理解置信区间</title>
      <link href="/posts/57768/"/>
      <url>/posts/57768/</url>
      
        <content type="html"><![CDATA[<h1 id="置信区间"><a href="#置信区间" class="headerlink" title="置信区间"></a>置信区间</h1><p>假设现在测量了12个小鼠体重的值，注意这里只测量了12只小鼠（样本），而不是地球上的每一只小鼠（总体）</p><p>取12个测量值，计算平均值，注意这里是样本均值，而不是总体均值（地球上所有小鼠的均值）</p><blockquote><p>理解样本均值与总体均值：<a href="https://zhenglei.blog.csdn.net/article/details/108392410">https://zhenglei.blog.csdn.net/article/details/108392410</a></p></blockquote><p>但是，我们可以通过 Bootstrap 方法，确定一个比较合理的均值范围来代表小鼠总体均值</p><ul><li><p>随机选12个小鼠体重值</p><blockquote><p>Boostrap 是可放回抽样，意味着抽样时可能会抽到同一个值</p></blockquote></li><li><p>计算随机样本的均值<br><img src="https://img-blog.csdnimg.cn/img_convert/243d7aac7b178d058f48d33db6c41e34.png" alt="mark"></p></li><li><p>重复1，2步，重复次数大于10000<br><img src="https://img-blog.csdnimg.cn/img_convert/a8782b9c00bf334b5272fc64b5ceaaeb.png" alt="mark"></p></li></ul><p>现在，选择95%的bootstrap过程中产生的均值，下面画一条黑线，这段范围就是置信区间</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0ef8103c49b92385a004c77dfee4c892.png" alt="mark"></p><p>因为这个置信区间可以覆盖 95% 的平均值，除此之外发生的概率只有 5%。换句话说，在置信区间外的P值都小于 0.05，意味着有统计显著差异。</p><p>我们开始的计算的样本均值，是对所有小鼠总体均值的估计，现在利用置信区间，我们就能知道小鼠总体均值和P值。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/00f7c9078bcba558ef92f273c4a5c8bc.png" alt="mark"></p><p>绿圈显示，测量均值落在该区域的概率小于 0.05，P值小于 0.05，说明这几乎不可能发生。</p><p>因此，根据置信区间，我们可以确定总体均值和任意小于20的数值之间在统计上都存在显著差异。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2fa1d0ce19951bef9a3fa1c280f9f90c.png" alt="mark"></p><p>如果两个样本的置信区间有重叠，最好进行统计检验，如 t-test 来查看差异是否显著。</p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 1024程序员节 </tag>
            
            <tag> 置信区间 </tag>
            
            <tag> 置信度 </tag>
            
            <tag> p值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 10 | 通俗易懂的 P 值</title>
      <link href="/posts/8190/"/>
      <url>/posts/8190/</url>
      
        <content type="html"><![CDATA[<h3 id="怎么计算P值"><a href="#怎么计算P值" class="headerlink" title="怎么计算P值"></a>怎么计算P值</h3><p>抛两次硬币，计算两次都为正（H）的概率</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b102b72c41aeb75ffadaa94b05ef337f.png" alt="mark"></p><p>计算的P值由三个部分组成：</p><ul><li>在观察到，在随机事件中发生的概率</li><li>与之概率相等的事件的概率</li><li>任何比观察的更罕见的事件发生概率</li></ul><p><strong>抛 5 次硬币，计算都为正（H）的概率，与P值</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d5a6595b9129ae101f52a051f06086a8.png" alt="mark"></p><p>概率为</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3f2c85fc21cb36eb3375f6bb92af7928.png" alt="mark"></p><p>P值由三部分组成：</p><ul><li>5个正面</li><li>5个反面</li><li>没有比这个事件更小的概率事件</li></ul><p>所以计算得到</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bf9feface355380212328970f4d9ad5.png" alt="mark"></p><p>可以看到 p 值不小于 0.05（显著性阈值）</p><p><strong>计算四个正面，一个反面的概率：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ba9ab6c10179d7096294dbd7b446f710.png" alt="mark"></p><p>p 值由三部分组成</p><ul><li>4正1反</li><li>1正4反</li><li>5正+5反</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/1a57067f7755b37bc6eeaa0334135d5a.png" alt="mark"></p><p>可以看到 p 值更不小于 0.05（显著性阈值），说明这个事件相对常见。</p><p>但是有个问题，如果是大样本量的话，不可能去列出所有的可能的</p><p>这时，就需要用到我们之前提到的分布</p><p>下图表示身高分布</p><p>曲线下面积表示一个人在范围内的身高概率</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f05ca3e00f71bfe2eb1275726447df10.png" alt="mark"></p><p>可以发现，曲线下 95 %的面积在身高 142 ~ 169cm，表示身高在这个范围内的概率。也就是说，测量一个人身高时，得到身高在 142 ~ 169cm 间的概率在 95%。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/857e38e8d286dad304d677ac09c1abb9.png" alt="mark"></p><p>曲线下有 2.5 % 的总面积对于的高度大于 169cm。也就是说，测量一个人时，她身高大于 169 cm的概率是2.5%。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/912f9df63e9e42b103d5b0a1fccbaa9d.png" alt="mark"></p><p>曲线下有 2.5 % 的总面积对于的高度小于 142cm。也就是说，测量一个人时，她身高小于 142 cm的概率是2.5%。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b6ed68e4afef6243c946d62436e3269.png" alt="mark"></p><p>了解到这些，计算 p 值就很简单了，只需要将相应的面积百分比相加就行。</p><p>现在计算身高超过 169cm 的身高 p 值。回忆下 p 值由三部分构成：</p><ul><li>在随机事件中发生的概率（&gt;169cm）：2.5%</li><li>与之概率相等的事件的概率（&lt;142cm）：2.5%</li><li>任何比观察的更罕见的事件发生概率：0</li></ul><p>在图中标记出来：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8d047d94b5d159637f36c375d9aa4a90.png" alt="mark"></p><p>p 值 &#x3D; 2.5% + 2.5% &#x3D; 5% &#x3D; 0.05</p><p>计算身高在 155.4cm ~ 156cm 间的人的p值是多少？</p><p>第一部分：这个身高区间，计算得到的面积是 4%</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b04851f306cde550753ab08ea1ac27b9.png" alt="mark"></p><p>第二部分：&lt; 155.4cm 的面积 48% 与 &gt; 156cm 的面积为48%，二者相加为96%</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ca169a9e444858e79fa90e9d710c1ad.png" alt="mark"></p><p>第三部分：无</p><p>p 值 &#x3D; 4% + 96% &#x3D; 1</p><p>虽然这个区间的概率很小只有4%，但是 p &#x3D; 1，代表这段身高区间的人并没什么特别之处。</p><h3 id="单尾与双尾的P值"><a href="#单尾与双尾的P值" class="headerlink" title="单尾与双尾的P值"></a>单尾与双尾的P值</h3><p>现在发明了一种新的癌症治疗方法，我们要看用新治疗方法与旧治疗方法的效果比较。</p><p>对 6 个病人做治疗，新方法治疗（红点），旧方法治疗（黑点），在数轴上从左到右依次由好变坏。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/66126a1084b1981a5063c78f4f1ccc93.png" alt="mark"></p><p>单尾 P 值检验是新治疗优于旧治疗方法的假设。</p><p>双尾 P 值检验是新治疗是否更好，更差或没有显著差异。</p><p>单尾检验 P 值更小，意味着它不区分较差和无显著差异。</p><p>但是，现在我们想知道的是：新方法是否比旧治疗法更好还是更差。这时候最好使用双尾检验。</p><p>分别取两次样本，一次取三个数据</p><p>一种常见的情况像下图这样，两个样本会有重叠区域。这样得到的双尾t检验 P 值肯定是大于 0.05 的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f265d4f1bd2fa653a9122963c81de1c3.png" alt="mark"></p><p>一种不常见的情况是，两个样本分的很开。双尾t检验会给一个小于0.05的 p 值。这种就是常说的假阳性，发生概率在 5 %。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cd0b2783bc563b962095a2ce54e50777.png" alt="mark"></p><p>为什么是 5 %？</p><p>从正态分布的数据中，重复抽样 10000次</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7028b3c1938d6b78b3a6e939eee2ae8a.png" alt="mark"></p><p>将每次抽样的 p 值计算下，作图</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b95e846b446e6445a1d092db8b929028.png" alt="mark"></p><p>可以看到 p 值小于 0.05 的个数大约是 500，计算 p 值 500&#x2F;10000 &#x3D; 5%</p><p><img src="https://img-blog.csdnimg.cn/img_convert/145e5c809e82a8f3d5e95959db50b260.png" alt="mark"></p><p>现在样本一中的两个以上的值小于样本二中所有的值，用单尾 t 检验</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6616ea3ae713f972a70d3547801dbd2a.png" alt="mark"></p><p>现在有 800 个假阳性，那么假阳性率为 8 %。但是刚刚我们还使用 0.05 来作为显著性阈值。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/04fae670add14c285f2ab91dc355ab5b.png" alt="mark"></p><p>所以，不能看到数据后才决定使用单尾 p 值。</p><p>实际上，对于所有数据都有单尾或双尾 p 值，<strong>一般都要选择双尾的 p 值</strong>。</p><h3 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h3><h5 id="单一分布中抽样"><a href="#单一分布中抽样" class="headerlink" title="单一分布中抽样"></a>单一分布中抽样</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/515781d24563dd48c7b84791c3ed7c48.png" alt="mark"></p><p>比如，现在从分布中抽取 2 组样本，每组 3 个样本。每个样本抽到的几率相等。</p><p>进行T检验，由于是同一分布，T检验会给我们一个很大的P值（表示两组样本很相关）。通过大量的检验，我们可以得到T检验给出大P值的概率。</p><h5 id="两个独立分布中抽样"><a href="#两个独立分布中抽样" class="headerlink" title="两个独立分布中抽样"></a>两个独立分布中抽样</h5><p>但是，这里假设要从两个独立分布中抽取样本：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb03d31ee65bd8ead1c2819e4abffd69.png" alt="mark"></p><p>两个独立分布代表两组样本相关性很小，T检验就会给出很小的P值。</p><p>如果样本量大，我可以做多次T检验，查看T检验给出小P值的概率。</p><p>这个是为了检测是否需要增加样本量，排除是否因为抽样问题造成统计误差。</p><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 1024程序员节 </tag>
            
            <tag> 显著性 </tag>
            
            <tag> P值 </tag>
            
            <tag> pvalue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转 Windows 自带的 Linux 子系统 WSL（图文指南）</title>
      <link href="/posts/36445/"/>
      <url>/posts/36445/</url>
      
        <content type="html"><![CDATA[<p>学计算机离不开 Linux 系统，当然，更离不开Windows。但是，二者从操作到核心的不同，貌似让鱼和熊掌不可兼得。</p><p>但是！微软已经拿出了一款让鱼和熊掌兼得的方案 WSL （Windows Subsystem for Linux），也就是 Windows 系统中自带 Linux 子系统。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5de66d7d5fe41e32f3c2ca10f44a342b.png" alt="mark"><br>这比其他方案的优势在于：</p><ul><li>不会产生传统虚拟机或双启动设置开销</li><li>实现 Windows 系统与 Linux 系统磁盘资源的共享</li><li>相对其他 Bash，更接近原生 Linux 系统</li><li>网络设置等配置与 Windows 系统保持一致，减少维护</li><li>等等</li></ul><p>下面我们从几个方面来安装并使用：</p><ul><li>命令行界面安装</li><li>图形化界面安装</li><li>其他技巧</li></ul><h3 id="一、命令行界面安装"><a href="#一、命令行界面安装" class="headerlink" title="一、命令行界面安装"></a>一、命令行界面安装</h3><p>1、<code>win</code>+<code>S</code>，搜索 PowerShell，右键管理员身份运行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cdb18bc1597d09936ca878856cc46c0b.png" alt="mark"></p><p>2、输入命令，启用 <code>适用于 Linux 的 Windows 子系统</code> 功能</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/940f9916c5447e67a4edee256fd5a8cf.png" alt="mark"></p><p>这一步完成启用“适用于 Linux 的 Windows 子系统”可选功能 </p><p>3、选择中意的Linux分发版：</p><p>网址：<a href="https://aka.ms/wslstore">https://aka.ms/wslstore</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7b7468bb279a5a1b778ee5e8c1ce24fb.png" alt="mark"></p><p>4、这里以 Ubuntu 18 为例来进行下一步安装</p><p><a href="https://www.microsoft.com/zh-cn/p/ubuntu-1804-lts/9n9tngvndl3q?rtc=1#activetab=pivot:overviewtab">https://www.microsoft.com/zh-cn/p/ubuntu-1804-lts/9n9tngvndl3q?rtc=1#activetab=pivot:overviewtab</a> </p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d64aa0feb8a2c6ba80e979fe6acfb9f.png" alt="mark"></p><p>5、自动安装中…</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2b7e6ba081771ae5bd81b2a52c241354.png" alt="mark"></p><p>6、按<code>win</code>，打开 Ubuntu</p><p><img src="https://img-blog.csdnimg.cn/img_convert/adffc800f7b354b695987c20e31e17c1.png" alt="mark"></p><p>7、设置好用户和密码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/49e7f12a674346051c4b9f11de9bf50f.png" alt="mark"></p><p>8、设置初始 root 密码</p><p><code>sudo passwd</code></p><p>9、配置软件源，加速国内访问速度</p><p>备份配置文件</p><p><code>cp /etc/apt/sources.list /etc/apt/sources_bk.list</code></p><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a> </p></blockquote><h3 id="二、安装图形化界面"><a href="#二、安装图形化界面" class="headerlink" title="二、安装图形化界面"></a>二、安装图形化界面</h3><h4 id="在-Ubuntu-端的配置"><a href="#在-Ubuntu-端的配置" class="headerlink" title="在 Ubuntu 端的配置"></a>在 Ubuntu 端的配置</h4><p>1、安装 xorg</p><p><code>sudo apt-get install xorg</code> </p><p>xorg是xfce桌面需要的一个基础依赖，开机时提供登陆界面 </p><p><img src="https://img-blog.csdnimg.cn/img_convert/325f5306616aa33b5866f718bbb11db8.png" alt="mark"></p><p>2、安装xfce4</p><p><code>sudo apt-get install xfce4 </code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a11e862fb26edeafc7a4bf338da24e68.png" alt="mark"></p><p>3、安装并配置xrdp</p><p>Xrdp 通过远程桌面的方式来访问另外一台主机 </p><p><code>sudo apt-get install xrdp </code></p><p>4、设置使用3390端口 </p><p><code>sudo sed -i &#39;s/port=3389/port=3390/g&#39; /etc/xrdp/xrdp.ini </code></p><p>5、向xsession中写入xfce4-session </p><p><code>sudo echo xfce4-session &gt;~/.xsession</code></p><p>6、重启xrdp服务 </p><p><code>sudo service xrdp restart </code></p><h4 id="在-Windows-端配置"><a href="#在-Windows-端配置" class="headerlink" title="在 Windows 端配置"></a>在 Windows 端配置</h4><p>1、<code>win</code>+<code>S</code>，搜索 <code>远程桌面</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5eecf7a9c95b6c40122e1d87e3b7c24d.png" alt="mark"></p><p>2、配置连接信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa76b71a6b591d3cc34a3e3cef55494c.png" alt="mark"></p><p>3、运行连接，过程会有防火墙，同样允许就行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aa826a527b0a41f476fe41a5f9b9e2c3.png" alt="mark"></p><p>4、连接到 Ubuntu</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e6a3e7fee5ded6009698123d70b3cc2e.png" alt="mark"></p><p>5、登录到 Ubuntu</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e04676ed3fc27eb541d74aaf7daae44a.png" alt="mark"></p><p>6、登录后看到桌面，有那味儿了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/decc1cf37e0cc79e908ddcbacfbae121.png" alt="mark"></p><p>7、打开本地的 windows 盘符，和终端看看</p><p><img src="https://img-blog.csdnimg.cn/img_convert/36495caa9636abd7a3a38ea28843b990.png" alt="mark"></p><h3 id="三、其他技巧"><a href="#三、其他技巧" class="headerlink" title="三、其他技巧"></a>三、其他技巧</h3><h5 id="1、windows-的盘符在哪？"><a href="#1、windows-的盘符在哪？" class="headerlink" title="1、windows 的盘符在哪？"></a>1、windows 的盘符在哪？</h5><p> window 磁盘放在<code>mnt</code>目录下，比如，进入 win10 的 C 盘：</p><p><code>cd /mnt/c</code></p><blockquote><p>两个系统原本是使用不同的文件系统，但是微软为了让两种系统文件可以相互访问，使用WSL解决方案。一般情况下，可以在两种系统间随意复制文件，但是也有一些问题：</p><p>最常见的一个问题就是，Linux系统是大小写严格的，Window则对大小写不敏感。这就导致在一些Linux软件在window系统的盘符安装时，会出报错，后面会提到。</p></blockquote><h5 id="2、系统间复制文本"><a href="#2、系统间复制文本" class="headerlink" title="2、系统间复制文本"></a>2、系统间复制文本</h5><p>在一个系统复制文本后，在另一个系统右键即可粘贴文本</p><h5 id="3、安装-anaconda-报错"><a href="#3、安装-anaconda-报错" class="headerlink" title="3、安装 anaconda 报错"></a>3、安装 anaconda 报错</h5><p>Exception: dst exists: ‘&#x2F;mnt&#x2F;f&#x2F;Ubuntu&#x2F;anaconda3&#x2F;share&#x2F;terminfo&#x2F;e&#x2F;eterm’</p><p><code>/mnt</code>是不区分大小写的文件系统（WSL下的都不区分文件系统），所以必须将程序安装到区分大小写的文件系统上。两种解决方案：</p><ul><li><p>保持默认设置，会自动安装到为家目录下</p></li><li><p>设置安装 anaconda3 的目录区分大小写 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo apt install attr<br>setfattr -n system.wsl_case_sensitive -v 1 /mnt/f/Ubuntu/anaconda3<br></code></pre></td></tr></table></figure></li></ul><h5 id="4、修改命令行界面字体及颜色"><a href="#4、修改命令行界面字体及颜色" class="headerlink" title="4、修改命令行界面字体及颜色"></a>4、修改命令行界面字体及颜色</h5><p>右键最上端的框，选择<code>属性</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2a6717227fb805ad8f9147d46a9068e.png" alt="mark"></p><h5 id="5、Ubuntu-系统文件在-Windows-的哪个地方？"><a href="#5、Ubuntu-系统文件在-Windows-的哪个地方？" class="headerlink" title="5、Ubuntu 系统文件在 Windows 的哪个地方？"></a>5、Ubuntu 系统文件在 Windows 的哪个地方？</h5><p>两种方式去找：</p><ul><li><p><code>\\wsl$</code><br><img src="https://img-blog.csdnimg.cn/img_convert/210a00e5943ac374b59815c10fb7384b.png" alt="mark"></p></li><li><p><code>C:\Users\baimo\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</code><br><img src="https://img-blog.csdnimg.cn/img_convert/00be3a62fdefa06ccec90942153f5ebc.png" alt="mark"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> Windows </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看文件，目录，磁盘空间占用容量</title>
      <link href="/posts/51011/"/>
      <url>/posts/51011/</url>
      
        <content type="html"><![CDATA[<h2 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h2><p>列出当前目录所有文件的大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ls -alh<br></code></pre></td></tr></table></figure><p>过滤当前目录下大于10M的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">find ./  -type f -size +10M  -print0 | xargs -0 ls -lh  | sort -nr<br></code></pre></td></tr></table></figure><h2 id="目录大小"><a href="#目录大小" class="headerlink" title="目录大小"></a>目录大小</h2><p>当前目录的大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -sh<br></code></pre></td></tr></table></figure><p>当前目录下各目录大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -sh *<br></code></pre></td></tr></table></figure><p>递归查询当前目录所有文件夹大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -ah<br></code></pre></td></tr></table></figure><h2 id="磁盘占用"><a href="#磁盘占用" class="headerlink" title="磁盘占用"></a>磁盘占用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">df -lh<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 文件 </tag>
            
            <tag> 磁盘空间 </tag>
            
            <tag> 占用容量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂DNA甲基化及BS-seq</title>
      <link href="/posts/63054/"/>
      <url>/posts/63054/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是DNA甲基化"><a href="#一、什么是DNA甲基化" class="headerlink" title="一、什么是DNA甲基化"></a>一、什么是DNA甲基化</h3><p>DNA甲基化是一个生物过程，它会在在DNA分子中引入甲基化基团，但是甲基化并不会改变序列本身，而会改变DNA片段的活性。</p><p>在哺乳动物中，DNA甲基化对于正常发育必不可少，而且与很多生物学现象有密切联系，包括基因组印迹，X染色体失活，转座因子招募，衰老和致癌作用。</p><p>胞嘧啶甲基化是在真核生物和原核生物普遍存在的，而且甲基化的速率在物种之间有很大的差异。</p><p>最常见的是在<strong>胞嘧啶的5号碳位置</strong>，在酶和底物的作用下，引入一个甲基基团，变成了<strong>5甲基胞嘧啶（5mC）</strong>，从而改变了它的活性。 </p><p><img src="https://img-service.csdnimg.cn/img_convert/70e4952641d92e158181d5659a3533ad.png" alt="mark"></p><p>腺嘌呤甲基化也在细菌，植物和哺乳动物DNA中均观察到了，但并不是研究热点。</p><p>下面，我们重点看胞嘧啶甲基化。</p><h3 id="二、CpG-islands"><a href="#二、CpG-islands" class="headerlink" title="二、CpG islands"></a>二、CpG islands</h3><p>在植物和其他生物中，可以在三种不同的序列中发现DNA甲基化：</p><ul><li>CpG（CG）</li><li>CHG</li><li>CHH</li></ul><p>其中H对应于A，T或C。</p><p>CpG是胞嘧啶（C，Cytosine），磷酸（p，phosphoric acid），鸟嘌呤（G，Guanine ）的缩写，也可以去掉磷酸直接叫CG。在哺乳动物中，在基因组中富含GC和CpG的序列区段，叫CpG岛（CpG islands）。</p><h4 id="1-CpG岛与转录"><a href="#1-CpG岛与转录" class="headerlink" title="1. CpG岛与转录"></a>1. CpG岛与转录</h4><p>在人基因组中，90%以上的CpG位点是被甲基化的，但是CpG岛甲基化程度通常很低，这种情况下，不影响蛋白结合到DNA的启动子区域来启动转录，进而使基因表达。</p><p><img src="https://img-service.csdnimg.cn/img_convert/925d11716dae866158a404270b0b4e74.png" alt="mark"></p><p>但是，如果这个DNA的CpG岛被甲基化后，蛋白不能结合DNA，进而使转录沉默，基因不表达。</p><p><img src="https://img-service.csdnimg.cn/img_convert/b04bddb211a09a421330b4c0101ac53f.png" alt="mark"></p><p>通常我们也会在文章中看到下面这种图，每个“棒棒糖”代表一个甲基化位点，位点集中的区域就可能是CpG岛，如果在转录因子结合的地方恰好被甲基化（黑色棒棒糖），那么这个基因就废了，不会继续表达了。<img src="https://img-service.csdnimg.cn/img_convert/4b3bd36c7bc92af14e9cb1af21036393.png" alt="mark"></p><h4 id="2-如何定义CpG岛"><a href="#2-如何定义CpG岛" class="headerlink" title="2. 如何定义CpG岛"></a>2. 如何定义CpG岛</h4><p>通常定义为以下区域：</p><ul><li>长度大于200bp</li><li>G + C含量大于50％，</li><li>观察到的CpG与预期CpG的比率大于0.6，有时也使用其他定义。</li></ul><h4 id="3-CpG岛的分布"><a href="#3-CpG岛的分布" class="headerlink" title="3. CpG岛的分布"></a>3. CpG岛的分布</h4><p>除重复序列外，人类基因组中约有25,000个CpG岛，其中75％的岛长小于850bp。</p><p>大约50％的CpG岛位于基因启动子区域，而另外25％的岛位于基因内，通常充当替代启动子。</p><p>在人中，大约60-70％的基因在其启动子区域中具有CpG岛。大多数CpG岛在结构上未甲基化，并富集一些染色质修饰，例如H3K4甲基化。在体细胞组织中，只有10％的CpG岛被甲基化，其中大部分位于基因间和基因内区域。</p><h3 id="三、甲基化的功能"><a href="#三、甲基化的功能" class="headerlink" title="三、甲基化的功能"></a>三、甲基化的功能</h3><ul><li>基因调控：启动子区域的甲基化会使基因表达沉默</li><li>发育调控：细胞分裂时可遗传，建立细胞与组织分化差异</li><li>DNA复制起始及错误修正定位</li><li>改变DNA区域构象变化，影响了蛋白质与DNA的相互作用，抑制了转录因子与启动区DNA的结合效率</li><li>高度甲基化：<ul><li>X染色体失活：持续失活导致女性的一条 X 染色体，</li><li>染色体印迹：指基因表达活性只局限于来自双亲之一的基因版本</li></ul></li><li>抑制转座子：在CpG密集区域，DNA甲基化是一种强力的转录阻遏物。尽管DNA甲基化不具有微调基因调控所需的灵活性，但其稳定性非常适合确保转座因子的永久沉默。 这种甲基化在几乎所有组织中都会使部分基因永久保持沉默。</li><li>甲基化可以被环境影响</li></ul><h3 id="四、启动子区甲基化与基因转录"><a href="#四、启动子区甲基化与基因转录" class="headerlink" title="四、启动子区甲基化与基因转录"></a>四、启动子区甲基化与基因转录</h3><p> 在几乎所有被分析的生物中，<strong>启动子区域的甲基化与基因表达呈负相关</strong>。转录活性基因的CpG密集启动子从未被甲基化，但是，转录沉默基因并不一定带有甲基化的启动子。</p><p>在小鼠和人类中，大约60％至70％的基因在其启动子区域中都有一个CpG岛，并且在分化和未分化的细胞类型中，大多数这些CpG岛都保持未甲基化状态，而与基因的转录活性无关。</p><p>值得注意的是，尽管CpG岛的DNA甲基化与转录抑制作用明确相关，但对CG缺乏的启动子中DNA甲基化的功能仍不清楚。</p><p>DNA甲基化可能以两种方式影响基因的转录</p><p>首先，DNA本身的甲基化可能在物理上阻碍转录因子与基因的结合</p><p>第二，甲基化的DNA可能被称为甲基CpG结合域（methyl-CpG-binding domain，MBD）的蛋白结合。MBD蛋白将其他蛋白募集到位点，例如组蛋白脱乙酰基酶和其他可以修饰组蛋白的染色质重塑因子，从而形成致密的，无活性的异染色质。</p><h3 id="五、基因内甲基化与基因转录"><a href="#五、基因内甲基化与基因转录" class="headerlink" title="五、基因内甲基化与基因转录"></a>五、基因内甲基化与基因转录</h3><p>在几乎所有存在DNA甲基化的物种中，DNA甲基化在高度转录的基因内特别丰富，也就是说<strong>在基因内的DNA甲基化与基因表达正相关</strong>。</p><p>基因内甲基化的功能尚不清楚。大量证据表明：</p><ul><li>它可以调节剪接并抑制基因内转录单位（密码子，启动子或转座因子）的活性。</li><li>基因内甲基化似乎与H3K36甲基化紧密相关。在酵母和哺乳动物中，H3K36甲基化在高度转录的基因体内高度富集。</li><li>在哺乳动物中，DNMT3a和DNMT3b PWWP结构域与H3K36me3结合，并且这两种酶被募集到活跃转录的基因体内。</li></ul><h3 id="六、在胚胎发育过程中的甲基化"><a href="#六、在胚胎发育过程中的甲基化" class="headerlink" title="六、在胚胎发育过程中的甲基化"></a>六、在胚胎发育过程中的甲基化</h3><p>在胚胎发育过程中，DNA甲基化先被大量擦除，然后在哺乳动物的各代之间重建。</p><ul><li>在配子发生和早期胚胎发育过程中，几乎擦除了来自亲本的所有甲基化，每次都发生去甲基和再甲基化。</li><li>早期胚胎发育的去甲基化发生在植入前：最初在合子中，然后在桑椹胚和囊胚。</li><li>在胚胎植入阶段发生了甲基化波，保护了CpG岛免受甲基化。这导致整体抑制，并使管家基因在所有细胞中表达。</li><li>在植入后阶段，甲基化模式是特定于阶段和组织的，其变化将定义每种单独的细胞类型，可长期稳定持续。</li></ul><p><img src="https://img-service.csdnimg.cn/img_convert/853563cb4bd9f8c852e79badce097a08.png" alt="mark"></p><p>尽管DNA甲基化本身对于转录沉默而言并不是必需的，但是，它代表了一种“锁定”状态，可以使转录失活。</p><p>尤其在基因组印迹和X染色体失活的情况下，DNA甲基化对于维持单等位基因沉默显得至关重要。在这些情况下，表达的等位基因和沉默的等位基因的甲基化状态不同，DNA甲基化的丧失导致Xist在体细胞中的印迹和再表达的丧失。</p><p>由于存在基因组印迹现象，因此母本和父本基因组具有差异性标记，并且每次通过生殖系时都必须正确地重新编程。因此，在配子发生过程中，原始生殖细胞必须根据传代母体的性别擦除并重新建立其原始的双亲DNA甲基化模式。受精后，将父本和母本基因组再次去甲基化并重新甲基化（与印迹基因相关的差异甲基化区域除外）。重编程可能是新形成胚胎的全能性和擦除获得的表观遗传变化所必需的。</p><h3 id="七、检测DNA甲基化"><a href="#七、检测DNA甲基化" class="headerlink" title="七、检测DNA甲基化"></a>七、检测DNA甲基化</h3><p>亚硫酸氢盐测序（Bisulfite sequencing，BS-seq ，methseq），先使用亚硫酸氢盐处理DNA，然后上机测序来确定甲基化模式。 如果听到 WGBS（Whole-genome bisulfite sequencing） ，其实也是BS-seq。</p><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h5><p>用亚硫酸氢盐处理DNA可将胞嘧啶残基（C）转化为尿嘧啶（U），但5-甲基胞嘧啶残基（5mC）对其有抗性，并不会发生转变。</p><p>因此，用亚硫酸氢盐处理过的DNA<strong>仅保留甲基化的胞嘧啶</strong>。</p><p><img src="https://img-service.csdnimg.cn/img_convert/df0cea3cbe60739d67dd2c564bf0fb88.png" alt="mark"></p><p>上图中，</p><ul><li>蓝色的核苷酸是被亚硫酸氢盐转化为尿嘧啶（U）的未甲基化的胞嘧啶（C）</li><li>红色的核苷酸是对转化具有抗性的5-甲基胞嘧啶（5mC）</li></ul><p>总的来说，样本用 Bisulfite 处理，将基因组中未发生甲基化的 C 碱基转换成 U，进行PCR扩增后变成T，与原本具有甲基化修饰的 C 碱基区分开来，再结合高通量测序技术，与参考序列比对。</p><ul><li>未甲基化的 C -&gt; T</li><li>甲基化的 C -&gt; C</li></ul><h5 id="2-与常规转录组相比存在的问题："><a href="#2-与常规转录组相比存在的问题：" class="headerlink" title="2. 与常规转录组相比存在的问题："></a>2. 与常规转录组相比存在的问题：</h5><ul><li>未甲基化的 C 会转变为 T，这种转变会让基因组内的C少，ATG多，但是在生物中是不存在这种情况的</li><li>在比对时，还使用的是一般的参考基因组，所有这些转变的 reads 不能匹配到参考基因组相应的位点</li><li>BS-seq 在 Bisulfite 处理和 PCR 后会产生四条不同的链，转录组是两条正负链</li></ul><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>后续更新…</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> DNA甲基化 </tag>
            
            <tag> BS-seq </tag>
            
            <tag> WGBS </tag>
            
            <tag> CpG islands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 09 | 对数转换</title>
      <link href="/posts/296/"/>
      <url>/posts/296/</url>
      
        <content type="html"><![CDATA[<h3 id="一、对数转换"><a href="#一、对数转换" class="headerlink" title="一、对数转换"></a>一、对数转换</h3><p>左边是普通数轴，利用log2函数将左边的数据取它的指数，拿到对数轴</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQveW5nSU5NM1FNZFBnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>同样获取对数轴的负值：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvRnY0S2RHMHBMNVY5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="二、什么时候用对数转换"><a href="#二、什么时候用对数转换" class="headerlink" title="二、什么时候用对数转换"></a>二、什么时候用对数转换</h3><p>涉及到倍数变化的时候，就应该使用对数比例尺。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvSFA0MUtFcjk1ODhELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>在左侧数值虽然是分别大8倍，小8倍的差别，但是在数轴上并不对称。但是经过转换后，这两个倍数差异离中心0是等距的，倍数变化就被明显的展示出来了。这可以使正负倍数的变化出现在一个对称的尺度上。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ul><li>Log 函数只是去剥离指数<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvaFVoY3lCbHZiMHBGLnBuZw?x-oss-process=image/format,png" alt="mark"></li><li>对数比例尺对于倍数变化非常有用<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvZXZsUDF4cFZEbDNXLnBuZw?x-oss-process=image/format,png" alt="mark"></li><li>对数的平均值，也叫几何平均值（Geometric Mean），对于每次都有翻倍的数据时，对于基于对数的数据来说很有用。重要的是，对异常值的敏感度低于普通平均值。</li></ul><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 对数转换 </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 08 | 中心极限定理</title>
      <link href="/posts/21541/"/>
      <url>/posts/21541/</url>
      
        <content type="html"><![CDATA[<h3 id="一、计算平均值的分布"><a href="#一、计算平均值的分布" class="headerlink" title="一、计算平均值的分布"></a>一、计算平均值的分布</h3><h4 id="1-均匀分布"><a href="#1-均匀分布" class="headerlink" title="1. 均匀分布"></a>1. 均匀分布</h4><p>从0-1选任意值，概率都相等</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvd3VqQ3d2Y21Vdk5kLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>计算一组数据集的平均值，在右边绘制直方图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvek9oRm84TFd0bzc0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>在搜集更多的样本，每增加一次样本，绘制一个直方图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvOE11c3l3WFhuZ2M2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>增加更多的样本</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvUkJram5mOE5md1V4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>会发现平均值的直方图，正好是我们之前学到的正态分布。</p><p>需要注意：</p><p>这些平均值是用均匀分布的数据计算出来的</p><p>但是，平均值本身不是均匀分布的，而是正态分布的。</p><h4 id="2-指数分布"><a href="#2-指数分布" class="headerlink" title="2. 指数分布"></a>2. 指数分布</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvcGI4SnV4ZjNLRFFiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>计算一组数据的平均值，在右边绘制直方图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbWI1QzJhbmdHWGs4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>继续增加样本量，我们就会得到一个熟悉的分布</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvelI5VXRsMXVHTUVyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>需要注意：</p><p>这些平均值是用指数分布的数据计算出来的</p><p>但是，平均值本身不是指数分布的，而是正态分布的。</p><p>其实，不管是什么分布，最后的平均值分布都是正态分布的。</p><h3 id="二、这个发现有什么用呢？"><a href="#二、这个发现有什么用呢？" class="headerlink" title="二、这个发现有什么用呢？"></a>二、这个发现有什么用呢？</h3><p>因为我们知道样本的平均值是正态分布的，所有就不必太担心样品来源数据的分布情况。</p><p>我们都可以用平均值的正态分布来确定置信区间。</p><p>通过T检验（t-test），从中我们可以判断两个样本的平均值是否有差异。</p><p>通过方差分析（ANOVA），从中我们可以判断三个以上样本的平均值是否有差异。</p><p>可以做几乎所有使用样本平均值的统计检验。为了使中心极限定理从根本上起作用，必须能够从样本中计算出平均值。</p><blockquote><p>有些其他领域的人认为为了保证中心极限定理的正确性，样本大小必须至少为30。</p><p>这个只是一个被认为安全的经验法则，并不是一个必须遵守的规定。</p></blockquote><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 中心极限定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 07 | 标准误差</title>
      <link href="/posts/47969/"/>
      <url>/posts/47969/</url>
      
        <content type="html"><![CDATA[<h3 id="一、标准误差"><a href="#一、标准误差" class="headerlink" title="一、标准误差"></a>一、标准误差</h3><p>假设测量一个基因的五个表达量：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvakN4R1hlM1NnS2ZJLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>标准偏差（Standard Deviation）</strong>量化了一组测量值中的变化程度</p><p>同样的实验做五次，每次实验用不同的样本：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvb25TNmJUZjk3S05DLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>把五个样本的平均值放在一个数轴：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvSjBXYW9qZFI1dDNWLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以计算得到两个值：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvSE5HOVdZblJjbXVhLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>对五个样本的平均值取平均值，计算得到的标准偏差就是标准误差。</p><p><strong>标准误差（Standard Error）</strong>量化了多组测量值均值的变化程度</p><p>不难发现：</p><ul><li><strong>标准偏差</strong>量化了<strong>一组测量值</strong>中的变化程度</li><li><strong>标准误差</strong>量化了<strong>多组测量值均值</strong>的变化程度</li></ul><h3 id="二、标准误差的表示"><a href="#二、标准误差的表示" class="headerlink" title="二、标准误差的表示"></a>二、标准误差的表示</h3><p>三个样本</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvNUdvMmNDRE13MnJELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绿色：均值</p><p>红色：标准偏差</p><p>如果不想展示原始数据，只需要反应标准偏差和均值就行，也就是下面的TNT图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvZ0lPaHVhSDdOWTZrLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>误差棒（Error Bars）有三种类型：</p><ul><li>标准偏差（Standard Deviations）</li><li>标准误差（Standard Errors）</li><li>置信区间（Confidence Intervals）</li></ul><blockquote><p>经验法则：</p><p>均值 ± 一个标准偏差的数值范围，覆盖全部数值的68%</p><p>均值 ± 两个标准偏差的数值范围，覆盖全部数值的95%</p></blockquote><p>计算平均值的标准误差</p><ul><li>抽取一组样本，每个样本都有相同数量的测量值</li><li>计算每组样本的均值</li><li>利用均值计算标准误差 Std.Err</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvVXBQTUZLTEx6WW4yLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以发现标准误差比标准偏差要小很多。这是因为平均值没有原始数据那么分散。</p><p>当然也可以计算标准偏差的标准偏差，这个值叫做标准偏差的标准误差。它告诉我们多个样本的标准偏差是如何分布的。</p><p>其实理论上，我们可以计算一切统计值的标准偏差，比如中位数，众数，百分数等的标准偏差，得到的值就是该统计值的标准误差。</p><p>标准误差只是来自同一群体的多个均值的标准偏差。</p><h3 id="三、如何在一组样本中计算标准误差"><a href="#三、如何在一组样本中计算标准误差" class="headerlink" title="三、如何在一组样本中计算标准误差"></a>三、如何在一组样本中计算标准误差</h3><h5 id="自助抽样法（Bootstrap）"><a href="#自助抽样法（Bootstrap）" class="headerlink" title="自助抽样法（Bootstrap）"></a>自助抽样法（Bootstrap）</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvTmFWeWJtM2xEb1VLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li>选取一个随机测量值</li><li>记录该值</li><li>重复以上两步，直到拿到 5 个测量值</li><li>计算均值，中位数，众数等</li><li>回到第一步，重复以上步骤，拿到多个统计量的值</li><li>利用拿到的统计量的值，如均值计算标准偏差，得到标准误差</li></ul>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 标准误差 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 06 | 样本容量和有效样本容量</title>
      <link href="/posts/50798/"/>
      <url>/posts/50798/</url>
      
        <content type="html"><![CDATA[<h3 id="一、样本容量"><a href="#一、样本容量" class="headerlink" title="一、样本容量"></a>一、样本容量</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvTjE2ekl1NlY5dmltLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>研究不同个体的表达量，样本容量（Sample size）：N&#x3D;3</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvUWhGeUpJYTZjZHJBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>研究不同个体的表达量，样本容量（Sample size）：N&#x3D;3</p><p>技术重复只能告诉我们该测量基因表达的方法准确性，并不会反应个体间的区别。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvcklubjNBalRpclBRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>研究一个方法的准确性，样本容量（Sample size）：N&#x3D;4</p><h3 id="二、有效样本容量"><a href="#二、有效样本容量" class="headerlink" title="二、有效样本容量"></a>二、有效样本容量</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvbm9FbEROTWt3SFhLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>假设，蓝色小人是一对双胞胎，他们有着高度相似的基因组，但很明显又是两个不同的个体。那么现在不能简单的用样本容量，需要用到有效样本容量来评价。</p><p>假设，双胞胎的相关性为0.7，有效样本容量公式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvM3ptbEk3UW12ZFZxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>代入数值，发现相关性高，有效样本容量就会很小，也就是说，两个高相似度的样本更能看做是一个样本：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvRVlST0VvbDVrM2NnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>计算上面的样本容量：N&#x3D;3.18</p><p>假设一个很低的相关性 0.1，代入计算，会发现更接近2，更像两个样本：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvOGprV3ZId2d1b0owLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这种情况下，样本容量：N&#x3D;3.82</p><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 样本容量 </tag>
            
            <tag> 有效样本容量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 05 | 技术重复和生物学重复</title>
      <link href="/posts/16191/"/>
      <url>/posts/16191/</url>
      
        <content type="html"><![CDATA[<h1 id="技术重复和生物学重复"><a href="#技术重复和生物学重复" class="headerlink" title="技术重复和生物学重复"></a>技术重复和生物学重复</h1><h3 id="一、技术重复"><a href="#一、技术重复" class="headerlink" title="一、技术重复"></a>一、技术重复</h3><p><strong>一个个体，一个样本，测量多次</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvU1RrRVcwNUU1emdPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>一个个体，三个样本，每个样本测量</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvQUZGd1VwalNuQ0NOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>以上两种情况都是技术重复，特点：</p><ul><li><strong>技术重复只是对一个人重复相同的实验</strong></li><li>给出样本的基因表达的精确测量结果，但不能把结果类推到更广泛的人群中</li><li>可以得到测量基因表达的准确性，比如，每个技术重复测定后的值都很不相同，那么我们就不能相信测得的任何一个样本</li></ul><p>应用：</p><p>第一种技术重复，可以检测样本测量方法稳定性等，可以告诉大家新测量方法有多好。</p><p>第二种技术重复，只告诉我们个体的信息，而不是方法，因为得到的差异有可能来自于样品本身。</p><h3 id="二、生物学重复"><a href="#二、生物学重复" class="headerlink" title="二、生物学重复"></a>二、生物学重复</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvU2xyRzZYQU1veExDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>特点：</p><ul><li><strong>生物学重复使用不同生物来源的样本</strong>，也就是说，每次测量都基于来自不同个体的样本</li><li>可以让结论具有普适性，但取决于采样的个体群体。比如，研究汉族的疾病，只采样包含有汉族的样本，缩小采样范围。</li></ul><p>应用：</p><p>如果着眼于实验结论是否具有普适性，最好用生物学重复。</p><h3 id="三、混合生物和技术重复"><a href="#三、混合生物和技术重复" class="headerlink" title="三、混合生物和技术重复"></a>三、混合生物和技术重复</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvTHBZYXdMRnZwU1kwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>增加生物学重复，减少技术重复会更划算。比如，做转录组测序时，最好做生物学重复，而不是技术重复。</p><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 技术重复 </tag>
            
            <tag> 生物学重复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 04 | 协方差与相关性分析</title>
      <link href="/posts/4125/"/>
      <url>/posts/4125/</url>
      
        <content type="html"><![CDATA[<h3 id="一、老板的任务"><a href="#一、老板的任务" class="headerlink" title="一、老板的任务"></a>一、老板的任务</h3><p>老板今天又给一个任务：</p><p>计算肝脏细胞中 X 基因与 Y 基因的关系。</p><p>现在，两个基因在各个细胞中的表达值都有了。</p><p>绘制不同细胞中 X，Y 基因的表达值在坐标轴上。</p><p>计算 X 基因和 Y 基因在5个细胞中的均值，标准差。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvWWZSMTd6TjZLS1FGLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>因为这些测量值都是来自同一个细胞，所以我们可以成对来看：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvVXo0Qk02dlJ3WDdxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>那么这样成对的测量可以告诉我们哪些信息呢？</p><p>现在，先将一对细胞连接，绘制一个点</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbWxDbE44dUN0VGFxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制完成，我们发现，X 基因相对较低的细胞对应的 Y 基因的值也较低，两个基因出现步调一致的表达情况，这可以用一条线来表示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbUNwUHpCaFBUUjhULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>不难看到，这条线是正斜率，代表着细胞中的 X 基因表达高，Y基因同样会表达高，同样表达低也会出现相同的情况。说明两基因具有<strong>正趋势关系</strong></p><p>来看一个相反的情况：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvYkFzeXkySGxtVXl4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上图中的线为负斜率，告诉我们细胞中的 X 基因表达高，Y基因会表达低，出现相反的表达情况。说明两基因具有<strong>负趋势关系</strong></p><p>第三种情况是，一个基因相对另一个基因，并没有显著变化。说明两基因<strong>无趋势关系</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvVks4NE9DbjVkYXZ4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvVFhjMEZsV2hITjhnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们现在总结出 X 基因相对 Y 基因的关系有以上三种情况：</p><ul><li>正趋势关系</li><li>负趋势关系</li><li>无趋势关系</li></ul><h3 id="二、协方差"><a href="#二、协方差" class="headerlink" title="二、协方差"></a>二、协方差</h3><p>为了去说明 X 基因相对 Y 基因的趋势关系，我们需要一个数学上的解释：</p><p>首先计算 X基因与 Y 基因的均值</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvY1VPeVB4T0JBc1RnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在计算一个点的与两基因均值的差值：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvVm1heHJDUkVKZVllLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>将值代入<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvY0RTeU1QZGJpYVg4LnBuZw?x-oss-process=image/format,png" alt="mark">计算：（3-17.6）x（12-24.4）&#x3D; -14.6 x -12.4 &#x3D; 181</p><p>如果将五个点都计算一遍，得到：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvd1BHU1RHTzh0V2lwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在可以计算<strong>协方差（Covariance）</strong>了：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvYWhrQzZVUHc1UUpKLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>会发现：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvYjFRb3JTQVZVS3g1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这些点所在象限，最终的值都为正值，也就是说这五个点对总协方差的贡献都是正值。</p><p>协方差值为正，斜率为正，这告诉我们当协方差为正时，就可以将二者的关系分类为正趋势。如果协方差为负，则相反。</p><h4 id="协方差的优缺点"><a href="#协方差的优缺点" class="headerlink" title="协方差的优缺点"></a>协方差的优缺点</h4><p>但是，协方差值并不能告诉我们表示关系的直线的斜率是陡峭还是平缓，而且也不能反应点距离线是远还是近。协方差唯一能告诉我们的是关系的斜率为正还是负。</p><p>但是协方差还有一个很大的缺点，我们接下来讨论：</p><p>比如现在同样计算两个基因的协方差，我们将左边的数据范围扩大一倍，也就是从40 -&gt; 80。</p><p>接下来，我们继续计算同样的两个基因的协方差，虽然线相对位置没发生变化，但是会发现协方差会扩大4倍。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMva2pyTHgzTk1Kc1JILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>就很有意思，我们唯一改变的只是数据点的值范围，数据点的关系并没有变化，但是协方差依旧在改变。</p><p>也就是说，协方差对于数据范围更敏感，而不是数据关系，这就使得它很难用于关系的描述，比如是否接近表示关系的虚线，以及和虚线间的距离。</p><p>虽然这样，但是协方差并不是一无是处，相反它是各种分析的基础，比如主成分分析，相关性分析。</p><h3 id="三、相关性分析"><a href="#三、相关性分析" class="headerlink" title="三、相关性分析"></a>三、相关性分析</h3><h4 id="1-相关性强弱"><a href="#1-相关性强弱" class="headerlink" title="1. 相关性强弱"></a>1. 相关性强弱</h4><p>基于趋势线，我们可以根据某个 Y 基因值，预测 X 基因的值。</p><p>当然，也可以用 X 基因来预测 Y 基因，就行下图这样的：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvb0VjZTd1NEQ5WWVsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>如果该数据越接近趋势线，根据 X 基因值去预测 Y 基因值就会落在较小范围内，那么 X 基因就会告诉我们更详细的 Y 基因信息。也可以说， X 基因对 Y 基因的关系相对较强。</p><p>相反，距离趋势线较远，我们会猜测 Y 基因值会落在更大的范围内：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvU3pYSVNra09oTHJTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这就代表 X 基因和 Y 基因间的关系相对较弱。</p><p>但是这里要注意描述问题，以上是用 X 基因根据趋势线和数值去预测 Y 基因的值。而不是代表着 X 基因值会导致 Y 基因值的变化。</p><p>我们现在得到可以量化关系强度的分类：</p><ul><li>弱相关，较小的相关值</li><li>强相关，较大的相关值</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvSHF5R3RrUUdBZXZoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="2-P值"><a href="#2-P值" class="headerlink" title="2. P值"></a>2. P值</h4><p>假设一个极端情况，所有点可以被正斜率的直线通过，这时的相关性为 1</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMva2xEOGV0Y3BSVlRQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>无论数据关联的大小如何，只要具有正斜率的直线可以遍历所有数据，和斜率无关，相关性都为1</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvb0FmaGhsNFR4ZnZ6LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>还有这样的，相关性也是为1</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvTGtWOFhsTHAwaWZULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在考虑个问题，如果数据集中只有两个值，就像下面这样：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvUHdSSGI0NXJDV0YzLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>类似这样的，其实并不能作为趋势线，因为两点绘制为线，这个随机性太大。也就是数据量太小的话，并不能代表数据总体。</p><p>测得的数据量越多，得到趋势线后，我们对于预测到正确的值越有信心，这时的P值越小。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvN3MzV0NEYjVSZGo5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上图中，对于第三个数据量多，P值很小，我们最有信心得出正确的预测值。</p><p>相关性代表了二者的关系，上图中的相关性很差，即使增加再多的样本量，也不会改变二者的关系。虽然增加了我们对预测的信心，可信度增加了，但是得到的结果是二者的关系依然很糟。</p><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>趋势线为负时，相关性相反</p><p>趋势线为正时，相关性为正</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbWhCbTZ4OThMUUhmLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，我们大多数情况遇到的是数据分布在趋势线的两侧，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvOEl3NVU0blVmZ0ZuLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>相关性值越接近 0 时，在拟合时，效果就会越差。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvZGFpQTJWYlMxelZJLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>当相关性值为 0 时，就没有关系了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvNURUdllDTVR3NFkwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在可以看看相关性的公式了：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvVVBQRWplSE9kTER2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li>分子是二者的协方差，用来确定斜率的正负</li><li>分母是标准差，使相关性质取值范围为-1到1。而且可以确保数据规模不影响相关性值</li></ul><h4 id="4-R平方"><a href="#4-R平方" class="headerlink" title="4. R平方"></a>4. R平方</h4><p>绘制小鼠编号和小鼠体重的散点图，计算点与体重均值的距离，计算方差：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQveEdqUXZKSHEzN1kyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>小鼠体重与小鼠体型的散点图，同样绘制点与均值的距离，计算方差：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvektqTUdNMkoybDMzLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以发现，虽然点在 X 轴方向的排列顺序变了，但是方差并不会改变。</p><p>我们所要做的就是根据数据拟合一条直线，可以绘制出这根蓝线：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvWGhPWER1bEdwNVRHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>看起来拟合直线（蓝线）比均值直线（黑线）更好地贴合数据。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvM1YwbzB3amhXeVEwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li>Var(mean)：数据值与其平均值的差的平方和，用来衡量数据点离均值线的远近</li><li>Var(line)：数据值与蓝线的差的平方和，用来衡量数据点离拟合线的远近</li></ul><p>最终 R^2 的范围是 0 到 1，因为拟合直线附近的变化，永远不会大于，以平均线为基准衡量附近的变化。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvbThxTElhN1BLTXpRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>最后，获得 R^2 &#x3D; 81%，代表着蓝线与数据点的差值平方和比均值的对应数值小81%。也就是说，小鼠的大小与重量的相关性能够解释总差异的 81%，大部分数据变化都可以有小鼠体重和体型大小的关系来解释。</p><p>假设研究小鼠体重和嗅探石头的花费时间的关系：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjQvcHMwRlZEVXNLU2VvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以看到拟合出的直线也是一个很大的值，计算得到的 R^2 只有 6%，代表这条拟合线只比平均值多解释了6%的差异，也就是说，X与 Y 二者的相关性仅仅能解释总差异的 6%，意味着数据中几乎没有任何差异可以用 X 变量来解释。</p><p>R^2 可以更好的直观解释数据的相关性，比如：</p><p>R^2 &#x3D; 0.7^2 &#x3D; 0.5，50%的差异可以用变量相关性来解释</p><p>R^2 &#x3D; 0.5^2 &#x3D; 0.25，25%的差异可以用变量相关性来解释</p><p>但是，R^2并没有方向，这时候需要结合R，描述这两个变量是正相关或负相关的。</p><p>R平方是两个变量间相关性能够解释总体差异的百分比</p><p>如果有相关系数 R 时，需要计算 R 平方。</p><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 协方差 </tag>
            
            <tag> 相关性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 03 | 均值，方差，标准差</title>
      <link href="/posts/54218/"/>
      <url>/posts/54218/</url>
      
        <content type="html"><![CDATA[<h3 id="一、均值"><a href="#一、均值" class="headerlink" title="一、均值"></a>一、均值</h3><p>现在，假设已经拿到在实际的肝脏中大约 2400 亿个细胞的X基因表达值。</p><p>我们接下来，要计算总体均值与估计总体均值。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvZmhFSzJtdWIyWDI4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在使用实际的2400亿个细胞计算均值，也就是总体均值（Population Mean）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvUDdTUTlwRnRGQmFFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvOXNVZXByaG9UNHFFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>从总体中抽样 5 个样本，计算估计均值（Estimated Mean）：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvYm91eHAzdWVYUWVULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>统计学中，用符号x-bar (<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvNUR2RElvbm5Oa25RLnBuZw?x-oss-process=image/format,png" alt="mark">) 来表示估计均值，也叫样本均值（Sample Mean）</p><p>使用希腊符号μ来表示总体均值（Population Mean）</p><p>可以从上图看到，样本均值与总体均值不同，但是随着测量越来越多的数据，x-bar会越来越接近μ。</p><h3 id="二、方差、标准差"><a href="#二、方差、标准差" class="headerlink" title="二、方差、标准差"></a>二、方差、标准差</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvUVdTREdqZHVUSHdjLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>方差和标准差，代表数据是如何在总体均值周围分布的，计算<strong>总体方差</strong>的公式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbmU4M0tNdXlmSWNSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><em><strong>x-μ</strong></em>， 代表从每个数据 x 中减去总体均值 μ。</li><li><em><strong>x-μ</strong></em> 取平方，为了保证每个差异非负</li><li>将每个样本的差异 (x-μ)^2，求和，</li><li>除以样本数，为的是平均化平方后的差异</li></ul><p>利用公式去计算，实际数据中的总体方差：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvaDFwR2ZTWVJRbzg4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>因为每个数据都是经过平方的，所以方差的单位是X基因表达量的平方。</p><p>但是X轴上的单位并没有平方，所以在X轴上不能绘制方差。</p><p>为了解决这个问题，我们只要对每一项平方根就行：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvMk5nRjZrY3FyMzA3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>也就得到了<strong>总体标准差</strong>，很容易得到它的值：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvcG00Tk1IdWFYUW50LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>好，现在我们就可以利用均值和标准差来绘制正态分布曲线了：</p><blockquote><p>总体方差和标准差来决定曲线的宽度，反应数据如何分布在总体均值周围</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvM2RoTlU1alFOWGIwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，在实验中，我们不可能去一一测量2400亿个细胞，总体数据几乎不可能拿到。</p><p>所以，我们几乎不计算总体均值，总体方差，总体标准差。</p><p>我们一般是用小样本来估计总体均值，方差，标准差。</p><p>但是，我们在做实验的时候，看到的只是一堆数据，比如这样：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvZWNLelJ1R0VsdVhOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们可以很轻松的获得数据的均值</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvdWF0Ync0VmY3cU5NLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，难受的是，我们根本看不到曲线或者总体均值</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvdVh5WTdyOHJOc0tlLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这个时候就需要估计总体均值，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvQWR6amJ6bG5KSjFhLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>给出计算公式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvQTl1b1JCUzAwZm1PLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>x-<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvRzJyVml2TFB4NmFLLnBuZw?x-oss-process=image/format,png" alt="mark">，代表从每个结果 x 中减去总体均值<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvRzJyVml2TFB4NmFLLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>n-1 是为了弥补我们计算的样本平均值而不是总体平均值的差异，否则会一直低估总体均值的方差。</p><blockquote><p>为什么要除以 n-1？</p><p>这是因为实验数据和样本平均值之间的差异，往往小于数据和总体均值之间的差异。<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvTlZZRXRGVUwzU3FHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>反应在曲线上：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvQWR6amJ6bG5KSjFhLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvRzJyVml2TFB4NmFLLnBuZw?x-oss-process=image/format,png" alt="mark">值会在μ的左右来回摆动，随着数据量的增多，无限接近μ</p></blockquote></li></ul><p>根据数据计算<strong>估计总体方差和标准差</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvd2JqZ2tiNUM1MVdELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p> 现在有了这些参数就可以画曲线了：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvQWt5bHg3M2JpNXloLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>与开始利用2400亿总体数据绘制的曲线比对下，可以发现我们实验与真实分布离的并不远：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvSjlUQUZFSnN1UzFJLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>到目前为止，我们利用5个实验数据完成了估计总体数据，而且结果还不错，这样节省我我们大量的经历和时间。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ul><li>如果我们有一个群体的所有数据，就可以直接计算总体均值。</li><li>当没有群体全部数据时，可以利用部分样本数据使用相同的公式来估计总体均值。</li><li>同样的，我们有一个群体的所有数据，就可以直接计算总体方差和标准差。</li><li>当没有群体全部数据时，就<strong>不能</strong>用总体方差和标准差的公式了，这时候需要考虑用 n-1 去抵消样本平均值为总体均值说产生的差异。</li></ul><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 正态分布 </tag>
            
            <tag> 均值 </tag>
            
            <tag> 方差 </tag>
            
            <tag> 标准差 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 02 | 总体参数</title>
      <link href="/posts/52450/"/>
      <url>/posts/52450/</url>
      
        <content type="html"><![CDATA[<h3 id="一、老板的任务"><a href="#一、老板的任务" class="headerlink" title="一、老板的任务"></a>一、老板的任务</h3><p>一切的噩梦来自于，老板给你的任务：</p><p>计算所有肝脏细胞中X基因表达量大于30的可能性。</p><p>但是，最大的问题在于，肝脏中大约 <strong>2400 亿</strong>个细胞的X基因表达值，这个几乎是不可能的任务。</p><p>我们接下来一步一步来看怎么计算这个庞大的任务。</p><p>假设，我们现在已经拿到了这么多细胞的表达值。</p><p>使用直方图绘制，可以看到X基因大多表达量是 10 - 30</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvV1JHYTBGdFdzVTB5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="1-使用直方图求解"><a href="#1-使用直方图求解" class="headerlink" title="1. 使用直方图求解"></a>1. 使用直方图求解</h4><p>现在我们计算一个肝细胞的X基因表达量大于30的可能性，需要两个值：</p><ul><li>X 基因表达量大于30的细胞数</li><li>总细胞数</li></ul><p>利用小学除法：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvMGJ2clI2S3pQVVRXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>根据观察值，代入</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvRVdDRHB5T0FRQXYyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="2-使用正态分布求解"><a href="#2-使用正态分布求解" class="headerlink" title="2. 使用正态分布求解"></a>2. 使用正态分布求解</h4><p>将刚刚的直方图趋势，对应于分布，可以得到均值为20，标准差为10的正态分布曲线</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvTmk3TFczQ2RNTmpwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>现在，换个思路，利用正态分布曲线来计算一个肝细胞的X基因表达量大于30的可能性。</p><p>这时，需要两个值：</p><ul><li>计算表达量大于30的面积<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvTzdSb3l4eTR4YmtkLnBuZw?x-oss-process=image/format,png" alt="mark"></li><li>曲线下的总面积<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvR0J0YnJCbHJOMVVyLnBuZw?x-oss-process=image/format,png" alt="mark"></li></ul><p>计算公式就是小学的除法：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvbXdjQnNmRXhXbDV6LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>带入值</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvYVA3TUUwUUJKQTFTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以得到和直方图近似的值，这意味着正态曲线是真实数据的一个很好的近似值。</p><p>但是，真实的情况是，我们不可能去测量 2400 亿个细胞作为数据集，这是一个浩大的工程。</p><p>解决这个问题之前，我们先看看什么是总体参数：</p><h3 id="二、总体参数"><a href="#二、总体参数" class="headerlink" title="二、总体参数"></a>二、总体参数</h3><p>总体，通俗来说就是一类事物的总称，比如要研究人，那么地球上的人就是一个总体，研究金枪鱼在海洋中的分布，那么海里所有的金枪鱼就是一个总体。很显然，直接这样统计总体很不切实际，后面我们会提到解决办法。</p><p>总体中提到的均值，标准差，中位数等统计指标，都是总体参数。</p><p>比如，代表总体正态曲线的均值和标准差就是总体参数</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvalBzMXJVMnNGeXVYLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li>均值为总体均值（population mean），Population Mean</li><li>标准差为总体标准差(the population standard deviation)，简称：Population SD</li></ul><p>对于指数分布来说，形状由率（Rate）决定</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvb21CM3g5QlY0OEJMLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>总体参数：</p><ul><li>率为总体率，Population Rate</li></ul><p>伽马分布，形状由形状（Shape）和率（Rate）参数决定，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvUmFVczQ2ZTlCdzhBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>总体参数就是：</p><ul><li>形状为总体形状，Population Shape</li><li>率为总体率，Population Rate</li></ul><p>还有其他的分布是同样的。</p><h3 id="三、估计总体参数"><a href="#三、估计总体参数" class="headerlink" title="三、估计总体参数"></a>三、估计总体参数</h3><p>我们不可能去测量 2400 亿个细胞作为数据集作为总体，来拿到总体参数。</p><p>解决办法是，可以从总体中随机找几个测量值来估计总体参数。</p><p>也就是说，不论其他人怎么做实验，在肝细胞中测量X基因的值，一直来自于总体。</p><p>从总体得出的结论，比如观察单个细胞中表达量大于30的概率，同样适用于其他人或未来的实验。</p><p>举个栗子，下图中，两组实验的5个样本都来自于总体：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvWWtzeWs4MDhZbjNPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们去测量这5个值，不止是拿到本身的数值，而是要拿到总体参数，进而去作为得出可复现结论的基础。</p><p>但是，两组实验拿到的测量值，但是会得到不同的总体参数。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MjMvWDRUQmxtOVVMZ2RXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这就引出一个问题，既然每次得到的是不同的估计总体参数，怎么保证得到可复现的结果呢？</p><p>造成这个结果的主要原因是样本量太少，也就是说数据越多，我们对估计总体参数的准确性也就越有信心。</p><p>统计学中衡量我们对总体参数估计的信心，有一个量化指标，叫置信水平。</p><p>在做统计分析时，要计算P值（p-value）和置信区间（confidence interval）来量化估计参数的置信度。</p><p>这里挖个坑，且听下回分解。</p><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 正态分布 </tag>
            
            <tag> 总体参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学统计 01 | 神奇的正态分布</title>
      <link href="/posts/9942/"/>
      <url>/posts/9942/</url>
      
        <content type="html"><![CDATA[<h3 id="一、正态分布介绍"><a href="#一、正态分布介绍" class="headerlink" title="一、正态分布介绍"></a>一、正态分布介绍</h3><p>这是在统计学中大名鼎鼎的一种分布，最早由德国的天文学家Moivre提出。</p><p>后来，德国数学家高斯（Gauss）首先将其应用于天文学研究，故正态分布也叫“高斯分布”。</p><p>高斯的这项工作对后世的科学研究影响极大，以至于德国10马克的钞票上印的是高斯头像和正态分布。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi04NzM0MTI3N2I2Mjk0NzM1MjFkMWFmYjFmNGZmOGQ2NF83MjB3LmpwZw?x-oss-process=image/format,png" alt="img"></p><h3 id="二、正态分布怎么来的"><a href="#二、正态分布怎么来的" class="headerlink" title="二、正态分布怎么来的"></a>二、正态分布怎么来的</h3><p>现在我们统计一个班级全部人的身高，为了直观把它们画在数轴上：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvcTY4dUg3YXQ4cHhQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>然后，把身高分为不同区间</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvNGRDa1BQZEtPamcwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>看起来数据点太挤，把它们堆叠起来</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvMFlPTXY2bGdqd0JiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>将条形图趋势绘制为曲线</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvZm0weXF0YWJEcFJHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上面的曲线就是正态分布，正态分布在这个世界很常见，这会在后面的文章中谈到。</p><h3 id="三、举个栗子"><a href="#三、举个栗子" class="headerlink" title="三、举个栗子"></a>三、举个栗子</h3><p>下图展示了婴儿和成人身高分布曲线。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvVzAyVE5hRFhrMnhsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>曲线形状的不同代表，成年人的身高差异的可能性比婴儿更多。</p><p>有两种形状：曲线越宽越低（矮胖型），越窄越高（高瘦型）。这种两种形状反映到生活中的话，婴儿的身高一般差不多，主要集中在20英寸。长大成人后，由于基因和后天的影响，不同人的身高差异开始显现，身高分布就较为广泛，主要在60到80英寸间。</p><p>可以直观的看到：不管曲线长相如何，正态分布总是集中在平均值区域，也就是数值集中在中间。</p><p>有意思的是，正态分布有个特点：95% 的测量值介于均值±两个标准差。比如，婴儿的95%在20±1.2英寸，成人的介于70±8英寸。</p><p>也就是说，只要符合正态分布，未来的测量值，极大的概率（95%）会出现在均值±两个标准差这个区间内。</p><p>这个值决定着我们常常听到的置信区间和P值，这个在后面会详细来谈。</p><h3 id="三、数学表示"><a href="#三、数学表示" class="headerlink" title="三、数学表示"></a>三、数学表示</h3><p>现在看下，<strong>正态分布的函数表达式：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi00NjhkYjcyYWFmNzlkYzgwZjYzYTlmYmViM2ZiZTAxZl83MjB3LmpwZw?x-oss-process=image/format,png" alt="img"></p><p>可以描述为，随机变量X服从一个位置参数μ，尺度参数σ的概率分布，记做</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi1kMjJiNTdiNGIwNzNiYWM1YmY4NDg3N2Y5MDhiZmJmOV83MjB3LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>，或X服从正态分布。一般，μ和σ都是常数，μ代表数据的均值，σ代表数据的标准差。</p><p>根据这个上面的正态分布形状，在正态曲线的绘制时，需要知道两个值：</p><ul><li>告诉曲线的中心在哪：测量值的均值，μ</li><li>告诉曲线有多宽：测量值的标准差，σ</li></ul><h3 id="四、R语言绘制"><a href="#四、R语言绘制" class="headerlink" title="四、R语言绘制"></a>四、R语言绘制</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWNiLnpoaW1nLmNvbS84MC92Mi1mOGZkYTkxMGYwODExOWJiZTg4Y2YxZjNiZWIwOTU1MF83MjB3LmpwZw?x-oss-process=image/format,png" alt="img"></p><p>我们可以从图中看到，均值μ决定正态分布的峰值位置，标准差σ决定分布的矮胖，σ越大越胖。</p><p>R代码：</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(-2,1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,1)</span><br>y2 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,4)</span><br>y3 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~N(-2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,4)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation"><code class="language-hljs r">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(-2,1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,1)</span><br>y2 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,4)</span><br>y3 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~N(-2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,4)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>致谢：</p><p><a href="https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw">https://www.youtube.com/channel/UCtYLUTtgS3k1Fg4y5tAhLbw</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 正态分布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 免费激活专业版（图文详解）</title>
      <link href="/posts/48120/"/>
      <url>/posts/48120/</url>
      
        <content type="html"><![CDATA[<p>使用这个教程可以激活包括 Pycharm 在内的所有 JetBrain 系列软件，如 PHPStrom，IDEA 等</p><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><p>教育邮箱：带 <code>edu</code> 后缀的email</p><h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><p>1.打开主页：<a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvUjFXbFdiMXRnQVQ3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.注册账号：<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvRFRiaXE4eTJlem5zLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.点击 <code>Sign Up</code> 后，返回如下页面<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvYUFqT0ptMEZteE81LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.回到你填写的教育邮箱地址，收到一封信：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvUUhLNzZ3azZJbEZwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.注册账号：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvZHBEbTl6bGM3NW5VLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.设置权限，点击<code>PyCharm</code>下载软件<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvaUJJRVNhYjNHaTFHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.进入<code>PyCharm</code>，点击右上方的 Help -&gt; Register：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvSmtZcXZ3QWo1Nnh5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>8.查看权限：<br>一般认证一次会有一年的使用权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA4MTQvMWZ5blN6aEMwSHd2LnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> Pycharm </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> 激活 </tag>
            
            <tag> 教育 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 07 | 配置文件</title>
      <link href="/posts/35968/"/>
      <url>/posts/35968/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>启动管道脚本时，Nextflow将在当前目录和脚本基本目录（如果与当前目录不同）中查找一个名为<code>nextflow.config</code>的文件。最后，它检查文件 <code>$HOME/.nextflow/config</code>。</p><p>当存在多个文件时，它们将被合并，因此第一个文件中的设置将覆盖第二个文件中可能出现的相同设置，依此类推。</p><p>如果要忽略任何默认配置文件，而仅使用自定义文件，请使用命令行选项 。<code>-C &lt;config file&gt;</code></p><blockquote><p>值得注意的是，通过这样做，文件<code>nextflow.config</code>和<code>$HOME/.nextflow/config</code>不会被忽略，并且如上所述将它们合并。</p></blockquote><h3 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h3><p>Nextflow配置文件是一个简单的文本文件，其中包含使用以下语法定义的一组属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">name = value<br></code></pre></td></tr></table></figure><p>字符串值需要用引号引起来，而数字和布尔值（<code>true</code>，<code>false</code>）则不需要。</p><p>需要注意，键入的值（例如<code>1</code>）不同于<code>&#39;1&#39;</code>，因为第一个解释为数字，而第一个解释为字符串值。</p><h3 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h3><p>通过使用通常的<code>$propertyName</code>或<code>$&#123;expression&#125;</code>语法，配置属性可以用作配置文件本身中的变量 。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">propertyOne = &#x27;world&#x27;<br>anotherProp = "Hello $propertyOne"<br>customPath = "$PATH:/my/app/folder"<br></code></pre></td></tr></table></figure><p>包含变量引用的字符串<strong>必须用双引号字符</strong>而不是单引号字符包装。</p><h3 id="配置注释"><a href="#配置注释" class="headerlink" title="配置注释"></a>配置注释</h3><p>配置文件使用与Groovy或Java编程语言相同的注释约定。因此，用于<code>//</code>注释单行或<code>/*</code>.. <code>*/</code>注释多行中的块。</p><h3 id="配置包括"><a href="#配置包括" class="headerlink" title="配置包括"></a>配置包括</h3><p>一个配置文件可以使用关键字包含一个或多个配置文件<code>includeConfig</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process.executor = &#x27;sge&#x27;<br>process.queue = &#x27;long&#x27;<br>process.memory = &#x27;10G&#x27;<br><br>includeConfig &#x27;path/foo.config&#x27;<br></code></pre></td></tr></table></figure><p>使用相对路径时，将根据包含文件的实际位置解析该路径。</p><h2 id="配置域"><a href="#配置域" class="headerlink" title="配置域"></a>配置域</h2><p>可以通过在属性名称前加一个范围标识符为点名称加上前缀，或使用大括号表示法在同一范围内对属性进行分组，来在不同的范围内组织配置设置。在下面的示例中显示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">alpha.x  = 1<br>alpha.y  = &#x27;string value..&#x27;<br><br>beta &#123;<br>     p = 2<br>     q = &#x27;another string ..&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="env"><a href="#env" class="headerlink" title="env"></a><em>env</em></h3><p><code>env</code>范围允许将在所述工作流任务将被执行的环境被导出的定义的一个或多个变量。</p><p>只需在变量名前加上<code>env</code>范围或用大括号括起来即可，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">env.ALPHA = &#x27;some value&#x27;<br>env.BETA = "$HOME/some/path"<br><br>env &#123;<br>     DELTA = &#x27;one more&#x27;<br>     GAMMA = "/my/path:$PATH"<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>params</code>范围允许你定义的参数，将在管道脚本访问。只需在参数名称前加<code>params</code>范围或用大括号括起来即可，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">params.custom_param = 123<br>params.another_param = &#x27;string value .. &#x27;<br><br>params &#123;<br><br>   alpha_1 = true<br>   beta_2 = &#x27;another string ..&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="process"><a href="#process" class="headerlink" title="process"></a><em>process</em></h3><p><code>process</code>配置域可以在管道的process中提供的默认配置。</p><p>您可以在此处指定process指令和executor部分中描述的任何属性。举些例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>  executor=&#x27;sge&#x27;<br>  queue=&#x27;long&#x27;<br>  clusterOptions = &#x27;-pe smp 10 -l virtual_free=64G,h_rt=30:00:00&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用此配置，管道中的<strong>所有进程</strong>将通过SGE集群以指定的设置执行。</p><h4 id="Process-selectors"><a href="#Process-selectors" class="headerlink" title="Process selectors"></a><em>Process selectors</em></h4><p><code>withLabel</code>选择器允许与注释的所有进程的配置标签指令如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>    withLabel: big_mem &#123;<br>        cpus = 16<br>        memory = 64.GB<br>        queue = &#x27;long&#x27;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置示例将16 cpus，64 Gb内存和<code>long</code>队列分配给所有带有<code>big_mem</code>标签注释的进程。</p><p>以相同的方式，<code>withName</code>选择器允许通过名称在管道中配置特定进程。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>    withName: hello &#123;<br>        cpus = 4<br>        memory = 8.GB<br>        queue = &#x27;short&#x27;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>并不需要或者标签和进程名称用引号字符括起来，提供的名称不包含特殊字符（例如<code>-</code>，<code>!</code>等），或者它不是一个关键字或内置类型标识符。如有疑问，可以用单引号或双引号将标签名称或过程名称括起来。</p></blockquote><h4 id="选择器表达式"><a href="#选择器表达式" class="headerlink" title="选择器表达式"></a>选择器表达式</h4><p>标签和进程名称选择器都允许使用正则表达式，以便将相同的配置应用于与指定模式条件匹配的所有进程。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>    withLabel: &#x27;foo|bar&#x27; &#123;<br>        cpus = 2<br>        memory = 4.GB<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置代码片段为进程添加了2 cpus和4 GB的内存，并用标签<code>foo</code> 和<code>bar</code>进行了注释。</p><p>可以否定进程选择器，并在其前面加上特殊字符<code>!</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>    withLabel: &#x27;foo&#x27; &#123; cpus = 2 &#125;<br>    withLabel: &#x27;!foo&#x27; &#123; cpus = 4 &#125;<br>    withName: &#x27;!align.*&#x27; &#123; queue = &#x27;long&#x27; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置代码段为带有<code>foo</code>标签注释的进程设置2 cpus，为所有未带有该标签注释的进程设置4 cpus 。最后，将使用<code>long</code>队列的所有进程。</p><h4 id="选择器优先"><a href="#选择器优先" class="headerlink" title="选择器优先"></a>选择器优先</h4><p>在混合通用流程配置和选择器时，将应用以下优先级规则（从低到高）：</p><ol><li>处理通用配置。</li><li>工作流程脚本中定义的特定于流程的指令。</li><li><code>withLabel</code> 选择器定义。</li><li><code>withName</code> 选择器定义。</li></ol><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>    cpus = 4<br>    withLabel: foo &#123; cpus = 8 &#125;<br>    withName: bar &#123; cpus = 32 &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用上面的配置代码段，如果工作流脚本中未另行指定，则所有工作流进程均使用4 cpus。此外，带有<code>foo</code>标签注释的过程使用8 cpus。最后，名为的进程<code>bar</code> 使用32 cpus。</p><hr><h3 id="executor-的域"><a href="#executor-的域" class="headerlink" title="executor 的域"></a><em>executor</em> 的域</h3><p><code>executor</code>配置范围允许您设置可选的执行程序设置，下表中列出。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>使用执行人的名称，如<code>local</code>，<code>sge</code>等。</td></tr><tr><td>queueSize</td><td>执行程序将以并行方式处理的任务数（默认值：）<code>100</code>。</td></tr><tr><td>pollInterval</td><td>确定轮询发生的频率，以检查进程是否终止。</td></tr><tr><td>dumpInterval</td><td>确定将执行程序状态写入应用程序日志文件的频率（默认值：）<code>5min</code>。</td></tr><tr><td>queueStatInterval</td><td>确定从集群系统获取队列状态的频率。此设置仅由网格执行程序使用（默认值：）<code>1min</code>。</td></tr><tr><td>exitReadTimeout</td><td>确定当进程终止但退出文件不存在或为空时，执行程序在返回错误状态之前等待的时间。此设置仅由网格执行程序使用（默认值：）。<code>270 sec</code></td></tr><tr><td>killBatchSize</td><td>确定在单个命令执行中可以杀死的作业数（默认值：）<code>100</code>。</td></tr><tr><td>SubmitRateLimit</td><td>确定每个时间单位可以执行的最大作业率，例如 每秒最多10个作业（默认值：无限制）。<code>&#39;10 sec&#39;</code></td></tr><tr><td>perJobMemLimit</td><td>指定平台LSF <em>每个作业的</em>内存限制模式。参见<a href="https://www.nextflow.io/docs/latest/executor.html#lsf-executor">LSF</a>。</td></tr><tr><td>jobName</td><td>确定提交给基础集群执行器的作业的名称，例如。<code>executor.jobName = &#123; &quot;$task.name - $task.hash&quot; &#125;</code></td></tr><tr><td>cpus</td><td>基础系统可用的最大CPU数（仅由<code>local</code>执行程序使用）。</td></tr><tr><td>memory</td><td>基础系统可用的最大内存量（仅由<code>local</code>执行程序使用）。</td></tr></tbody></table><p>执行器设置可以如下定义：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">executor &#123;<br>    name = &#x27;sge&#x27;<br>    queueSize = 200<br>    pollInterval = &#x27;30 sec&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>在管道中使用两个（或多个）不同的执行程序时，可以通过在执行程序名称前加上符号<code>$</code>并将其用作特殊作用域标识符来分别指定其设置。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">executor &#123;<br>  $sge &#123;<br>      queueSize = 100<br>      pollInterval = &#x27;30sec&#x27;<br>  &#125;<br><br>  $local &#123;<br>      cpus = 8<br>      memory = &#x27;32 GB&#x27;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用如下所示的点符号来重写以上配置示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">executor.$sge.queueSize = 100<br>executor.$sge.pollInterval = &#x27;30sec&#x27;<br>executor.$local.cpus = 8<br>executor.$local.memory = &#x27;32 GB&#x27;<br></code></pre></td></tr></table></figure><h3 id="docker-的域"><a href="#docker-的域" class="headerlink" title="docker 的域"></a>docker 的域</h3><p><code>docker</code>配置范围控制如何<a href="https://www.docker.com/">泊坞</a>容器通过Nextflow执行。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>enabled</td><td>将此标志<code>true</code>启用以启用Docker执行（默认值：）<code>false</code>。</td></tr><tr><td>envWhitelist</td><td>用逗号分隔的要包含在容器环境中的环境变量名称列表。</td></tr><tr><td>legacy</td><td>使用从1.10.x版本开始删除的命令行选项（默认值：）<code>false</code>。</td></tr><tr><td>sudo</td><td>以<code>sudo</code>（默认值：）执行Docker run命令<code>false</code>。</td></tr><tr><td>tty</td><td>分配一个伪tty（默认值：）<code>false</code>。</td></tr><tr><td>temp</td><td>将选择的路径挂载为<code>/tmp</code>容器中的目录。<code>auto</code>每次创建容器时，都使用特殊值创建一个临时目录。</td></tr><tr><td>remove</td><td>执行后清理容器（默认值：）<code>true</code>。有关详细信息，请参见：<a href="https://docs.docker.com/engine/reference/run/#clean-up---rm">https</a> : <a href="https://docs.docker.com/engine/reference/run/#clean-up---rm">&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;run&#x2F;#clean-up—rm</a>。</td></tr><tr><td>runOptions</td><td>此属性可用于提供命令支持的任何其他命令行选项。有关详细信息，请参见：<a href="https://docs.docker.com/engine/reference/run/">https</a> : <a href="https://docs.docker.com/engine/reference/run/">&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;run&#x2F;</a>。<code>docker run</code></td></tr><tr><td>registry</td><td>从中提取Docker映像的注册表。它仅应用于指定私有注册表服务器。它不应包含协议前缀，即<code>http://</code>。</td></tr><tr><td>fixOwnership</td><td>修复由Docker容器创建的文件的所有权。</td></tr><tr><td>engineOptions</td><td>该属性可用于提供Docker引擎支持的任何选项，即。<code>docker [OPTIONS]</code></td></tr><tr><td>mountFlags</td><td>将指定的标志添加到卷安装中，例如mountFlags &#x3D;’ro，Z’</td></tr></tbody></table><p>可以通过在<code>docker</code>范围前面加上前缀或用大括号括起来来使用以上选项，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process.container = &#x27;nextflow/examples&#x27;<br><br>docker &#123;<br>    enabled = true<br>    temp = &#x27;auto&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>阅读<a href="https://www.nextflow.io/docs/latest/docker.html#docker-page">Docker容器</a>页面以进一步了解如何将Docker容器与Nextflow一起使用。</p><h3 id="singularity-的域"><a href="#singularity-的域" class="headerlink" title="singularity 的域"></a>singularity 的域</h3><p>的<code>singularity</code>配置范围控制如何<a href="https://sylabs.io/singularity/">奇异</a>容器通过Nextflow执行。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>将此标志<code>true</code>启用以启用奇点执行（默认值：）<code>false</code>。</td></tr><tr><td>engineOptions</td><td>此属性可用于提供奇点引擎支持的任何选项，即。<code>singularity [OPTIONS]</code></td></tr><tr><td>envWhitelist</td><td>用逗号分隔的要包含在容器环境中的环境变量名称列表。</td></tr><tr><td>runOptions</td><td>此属性可用于提供.NET支持的任何其他命令行选项。<code>singularity exec</code></td></tr><tr><td>noHttps</td><td>旋转此标志可<code>true</code>使用http协议（默认值：）拉出奇点图像<code>false</code>。</td></tr><tr><td>自动挂载</td><td>当<code>true</code>Nextflow自动将主机路径安装在执行的容器中时。它要求您在Singularity安装中启用了用户绑定控制功能（默认值：）<code>false</code>。</td></tr><tr><td>cacheDir</td><td>远程奇点图像的存储目录。使用计算群集时，它必须是所有计算节点均可访问的共享文件夹。</td></tr><tr><td>pullTimeout</td><td>奇异性拉动可以持续的时间量，超过该时间量将终止该过程（默认值：）。<code>20 min</code></td></tr></tbody></table><p>阅读<a href="https://www.nextflow.io/docs/latest/singularity.html#singularity-page">Singularity容器</a>页面以了解如何将Nexting与Singularity容器一起使用。</p><h3 id="podman-的域"><a href="#podman-的域" class="headerlink" title="podman 的域"></a>podman 的域</h3><p>的<code>podman</code>配置范围控制如何<a href="https://podman.io/">Podman</a>容器通过Nextflow执行。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td><code>true</code>启用此标志以启用Podman执行（默认值：）<code>false</code>。</td></tr><tr><td>envWhitelist</td><td>用逗号分隔的要包含在容器环境中的环境变量名称列表。</td></tr><tr><td>温度</td><td>将选择的路径挂载为<code>/tmp</code>容器中的目录。<code>auto</code>每次创建容器时，都使用特殊值创建一个临时目录。</td></tr><tr><td>去掉</td><td>执行后清理容器（默认值：）<code>true</code>。</td></tr><tr><td>runOptions</td><td>此属性可用于提供命令支持的任何其他命令行选项。<code>podman run</code></td></tr><tr><td>注册表</td><td>从中提取容器映像的注册表。它仅应用于指定私有注册表服务器。它不应包含协议前缀，即<code>http://</code>。</td></tr><tr><td>engineOptions</td><td>该属性可用于提供Docker引擎支持的任何选项，即。<code>podman [OPTIONS]</code></td></tr><tr><td>mountFlags</td><td>将指定的标志添加到卷安装中，例如mountFlags &#x3D;’ro，Z’</td></tr></tbody></table><p>可以通过在<code>podman</code>范围前面加上前缀或用大括号括起来来使用以上选项，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process.container = &#x27;nextflow/examples&#x27;<br><br>podman &#123;<br>    enabled = true<br>    temp = &#x27;auto&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>阅读<a href="https://www.nextflow.io/docs/latest/podman.html#podman-page">Podman容器</a>页面以了解如何将Podman容器与Nextflow一起使用。</p><h3 id="manifest-的域"><a href="#manifest-的域" class="headerlink" title="manifest 的域"></a><em>manifest</em> 的域</h3><p>通过<code>manifest</code>配置作用域，您可以定义在GitHub，BitBucket或GitLab上发布管道项目或运行管道时所需的一些元数据信息。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>作者</td><td>项目作者名称（使用逗号分隔多个名称）。</td></tr><tr><td>defaultBranch</td><td>Git仓库默认分支（默认：）<code>master</code>。</td></tr><tr><td>描述</td><td>描述工作流程项目的自由文本。</td></tr><tr><td>土井</td><td>与项目相关的出版物DOI标识符。</td></tr><tr><td>主页</td><td>项目主页URL。</td></tr><tr><td>主脚本</td><td>项目主脚本（默认值：）<code>main.nf</code>。</td></tr><tr><td>名称</td><td>项目简称。</td></tr><tr><td>nextflowVersion</td><td>最低要求的Nextflow版本。</td></tr><tr><td>版</td><td>项目版本号。</td></tr></tbody></table><p>可以通过在<code>manifest</code>范围前面加上前缀或用大括号括起来来使用以上选项。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">manifest &#123;<br>    homePage = &#x27;http://foo.com&#x27;<br>    description = &#x27;Pipeline does this and that&#x27;<br>    mainScript = &#x27;foo.nf&#x27;<br>    version = &#x27;1.0.0&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>要了解如何在GitHub，BitBucket或GitLab代码存储库上发布管道，请阅读<a href="https://www.nextflow.io/docs/latest/sharing.html#sharing-page">管道共享</a> 文档页面。</p><h4 id="Nextflow版本"><a href="#Nextflow版本" class="headerlink" title="Nextflow版本"></a>Nextflow版本</h4><p>该<code>nextflowVersion</code>设置允许您指定运行管道所需的最低版本。这对于确保使用特定版本可能很有用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">nextflowVersion = &#x27;1.2.3&#x27;        // exact match<br>nextflowVersion = &#x27;1.2+&#x27;         // 1.2 or later (excluding 2 and later)<br>nextflowVersion = &#x27;>=1.2&#x27;        // 1.2 or later<br>nextflowVersion = &#x27;>=1.2, <=1.5&#x27; // any version in the 1.2 .. 1.5 range<br>nextflowVersion = &#x27;!>=1.2&#x27;       // with ! prefix, stop execution if current version<br>                                    does not match required version.<br></code></pre></td></tr></table></figure><h3 id="范围追踪"><a href="#范围追踪" class="headerlink" title="范围追踪"></a>范围追踪</h3><p>该<code>trace</code>范围允许您控制Nextflow生成的执行跟踪文件的布局。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>当<code>true</code>打开执行跟踪报告文件的生成时（默认值：）<code>false</code>。</td></tr><tr><td>领域</td><td>用逗号分隔的要包含在报告中的字段列表。可用字段在<a href="https://www.nextflow.io/docs/latest/tracing.html#trace-fields">此页面</a>列出</td></tr><tr><td>文件</td><td>跟踪文件名（默认值：）<code>trace.txt</code>。</td></tr><tr><td>九月</td><td>用于分隔每一行中值的字符（默认值：）<code>\t</code>。</td></tr><tr><td>生的</td><td>当<code>true</code>打开原始数字报告生成时，即日期和时间以毫秒报告，内存以字节数报告</td></tr></tbody></table><p>可以通过在<code>trace</code>范围前面加上前缀或用大括号括起来来使用以上选项。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">trace &#123;<br>    enabled = true<br>    file = &#x27;pipeline_trace.txt&#x27;<br>    fields = &#x27;task_id,name,status,exit,realtime,%cpu,rss&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>要了解有关Nextflow可以生成的执行报告的更多信息，请阅读<a href="https://www.nextflow.io/docs/latest/tracing.html#trace-report">跟踪报告</a>文档页面。</p><h3 id="范围aws"><a href="#范围aws" class="headerlink" title="范围aws"></a>范围aws</h3><p>该<code>aws</code>范围允许您配置对Amazon S3存储的访问。使用属性<code>accessKey</code>和<code>secretKey</code> 指定存储桶凭证。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">aws &#123;<br>    accessKey = &#x27;<YOUR S3 ACCESS KEY>&#x27;<br>    secretKey = &#x27;<YOUR S3 SECRET KEY>&#x27;<br>    region = &#x27;<REGION IDENTIFIER>&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>单击以下链接以了解有关<a href="http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials的</a>更多信息。</p><p>可以使用<code>client</code>属性设置高级客户端配置选项。可以使用以下属性：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>连接超时</td><td>最初建立连接之前放弃和超时之前要等待的时间（以毫秒为单位）。</td></tr><tr><td>终点</td><td>AWS S3 API入口点，例如s3-us-west-1.amazonaws.com。</td></tr><tr><td>maxConnections</td><td>允许的最大打开HTTP连接数。</td></tr><tr><td>maxErrorRetry</td><td>失败的可重试请求的最大重试次数。</td></tr><tr><td>协议</td><td>连接到AWS时要使用的协议（即HTTP或HTTPS）。</td></tr><tr><td>proxyHost</td><td>通过代理主机进行连接。</td></tr><tr><td>代理端口</td><td>代理主机上要连接的端口。</td></tr><tr><td>proxyUsername</td><td>通过代理连接时使用的用户名。</td></tr><tr><td>proxyPassword</td><td>通过代理连接时使用的密码。</td></tr><tr><td>signerOverride</td><td>用于对客户端发出的请求进行签名的签名算法的名称。</td></tr><tr><td>socketSendBufferSizeHint</td><td>低级TCP发送缓冲区的大小提示（以字节为单位）。</td></tr><tr><td>socketRecvBufferSizeHint</td><td>低级TCP接收缓冲区的大小提示（以字节为单位）。</td></tr><tr><td>socketTimeout</td><td>在连接超时之前，等待数据通过已建立的打开的连接传输的时间（以毫秒为单位）。</td></tr><tr><td>存储加密</td><td>在S3上保存对象时将使用的S3服务器端加密（当前仅支持AES256）</td></tr><tr><td>用户代理</td><td>与所有HTTP请求一起传递的HTTP用户代理标头。</td></tr><tr><td>uploadMaxThreads</td><td>用于分段上传的最大线程数。</td></tr><tr><td>uploadChunkSize</td><td>分段上传中单个部分的大小（默认值：10 MB）。</td></tr><tr><td>uploadStorageClass</td><td>S3存储类应用于存储的对象，[ STANDARD，STANDARD_IA，ONEZONE_IA，INTELLIGENT_TIERING ]（默认值：STANDARD）之一。</td></tr><tr><td>uploadMaxAttempts</td><td>分段上传后返回错误的最大尝试上传次数（默认值：5）。</td></tr><tr><td>uploadRetrySleep</td><td>上载失败尝试重试零件上载后要等待的时间（默认值：100ms）。</td></tr></tbody></table><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">aws &#123;<br>    client &#123;<br>        maxConnections = 20<br>        connectionTimeout = 10000<br>        uploadStorageClass = &#x27;INTELLIGENT_TIERING&#x27;<br>        storageEncryption = &#x27;AES256&#x27;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用<code>batch</code>属性设置“高级批处理”配置选项。可以使用以下属性（必需版本19.07.0或更高版本）：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>路径</td><td>主机AMI中AWS命令行工具的安装路径。</td></tr><tr><td>职业角色</td><td>需要用于执行批处理作业的AWS Job Role ARN。</td></tr><tr><td>卷</td><td>一个或多个容器安装架。挂载可以指定为简单格式（例如&#x2F; some &#x2F; path）或规范格式（例如）&#96;&#x2F;host&#x2F;path:&#x2F;mount&#x2F;path[:ro</td></tr><tr><td>delayBetweenAttempts</td><td>从S3下载尝试之间的延迟（默认为10秒）。</td></tr><tr><td>maxParallelTransfers</td><td><em>每个作业的</em>最大并行上传&#x2F;下载传输操作（默认值：）<code>16</code>。</td></tr><tr><td>maxTransferAttempts</td><td>从S3下载的最大尝试次数（默认值：1）。</td></tr></tbody></table><h3 id="范围云"><a href="#范围云" class="headerlink" title="范围云"></a>范围云</h3><p>注意</p><p>在<code>cloud</code>配置范围已经退役。</p><h3 id="范围康达"><a href="#范围康达" class="headerlink" title="范围康达"></a>范围康达</h3><p>该<code>conda</code>范围允许定义配置设置，以控制Conda程序包管理器创建Conda环境。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>cacheDir</td><td>定义存储Conda环境的路径。使用计算群集时，请确保提供可从所有计算节点访问的共享文件系统路径。</td></tr><tr><td>createTimeout</td><td>定义Conda环境创建可以持续的时间。超过超时时间（默认值：）时，创建过程终止。<code>20 min</code></td></tr></tbody></table><h3 id="范围k8s"><a href="#范围k8s" class="headerlink" title="范围k8s"></a>范围k8s</h3><p>该<code>k8s</code>范围允许定义配置设置，以控制Kubernetes集群中工作流程应用程序的部署和执行。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>autoMountHostPaths</td><td>自动将主机路径安装在作业窗格中。仅在使用单节点群集时用于开发目的（默认值：）<code>false</code>。</td></tr><tr><td>语境</td><td>定义要使用的Kubernetes <a href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">配置上下文名称</a>。</td></tr><tr><td>命名空间</td><td>定义要使用的Kubernetes命名空间（默认值：）<code>default</code>。</td></tr><tr><td>serviceAccount</td><td>定义要使用的Kubernetes <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">服务帐户名</a>。</td></tr><tr><td>launchDir</td><td>定义启动工作流和存储用户数据的路径。这必须是共享K8s持久卷中的路径（默认值：<code>&lt;volume-claim-mount-path&gt;/&lt;user-name&gt;</code>。</td></tr><tr><td>工作目录</td><td>定义工作流临时数据的存储路径。这必须是共享K8s持久卷中的路径（默认值：）<code>&lt;user-dir&gt;/work</code>。</td></tr><tr><td>projectDir</td><td>定义下载Nextflow项目的路径。这必须是共享K8s持久卷中的路径（默认值：）<code>&lt;volume-claim-mount-path&gt;/projects</code>。</td></tr><tr><td>荚</td><td>允许定义一个或多个pod配置选项，例如环境变量，配置映射，机密等。它允许与<a href="https://www.nextflow.io/docs/latest/process.html#process-pod">pod</a> process指令相同的设置。</td></tr><tr><td>pullPolicy</td><td>定义用于拉出容器图像的策略，例如。<code>pullPolicy: &#39;Always&#39;</code></td></tr><tr><td>runAsUser</td><td>定义用于运行容器的用户标识。</td></tr><tr><td>storageClaimName</td><td>持久卷声明的名称，用于存储工作流结果数据。</td></tr><tr><td>storageMountPath</td><td>用于挂载持久卷声明的路径位置（默认值：）<code>/workspace</code>。</td></tr><tr><td>storageSubPath</td><td>要安装的永久卷中的路径（默认值：root）。</td></tr><tr><td>volumeClaims</td><td>（已弃用）</td></tr></tbody></table><p>有关更多详细信息，请参见<a href="https://www.nextflow.io/docs/latest/kubernetes.html#k8s-page">Kubernetes</a>文档。</p><h3 id="范围时间表"><a href="#范围时间表" class="headerlink" title="范围时间表"></a>范围时间表</h3><p>该<code>timeline</code>范围使您可以启用&#x2F;禁用Nextflow生成的流程执行时间表报告。</p><p>可以使用以下设置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>当<code>true</code>打开时间轴报告文件的生成时（默认值：）<code>false</code>。</td></tr><tr><td>文件</td><td>时间轴文件名（默认值：）<code>timeline.html</code>。</td></tr></tbody></table><h3 id="范围邮件"><a href="#范围邮件" class="headerlink" title="范围邮件"></a>范围邮件</h3><p>该<code>mail</code>范围允许您定义发送电子邮件所需的邮件服务器配置设置。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>从</td><td>默认电子邮件发件人地址。</td></tr><tr><td>smtp主机</td><td>邮件服务器的主机名。</td></tr><tr><td>smtp端口</td><td>邮件服务器的端口号。</td></tr><tr><td>smtp.user</td><td>连接到邮件服务器的用户名。</td></tr><tr><td>smtp.password</td><td>连接到邮件服务器的用户密码。</td></tr><tr><td>smtp.proxy.host</td><td>HTTP Web代理服务器的主机名，将用于连接到邮件服务器。</td></tr><tr><td>smtp.proxy.port</td><td>HTTP Web代理服务器的端口号。</td></tr><tr><td>smtp。*</td><td>Java Mail API支持的任何SMTP配置属性（请参见下面的链接）。</td></tr><tr><td>调试</td><td>当<code>true</code>使Java邮件日志用于调试的目的。</td></tr></tbody></table><p>注意</p><p>Nextflow依靠<a href="https://javaee.github.io/javamail/">Java Mail API</a>发送电子邮件。可以使用Java Mail API支持的任何SMTP配置属性来提供高级邮件配置。请参阅<a href="https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties">此链接上的可用属性表</a>。</p><p>例如，以下代码片段显示了如何配置Nextflow以通过<a href="https://aws.amazon.com/ses/">AWS Simple Email Service</a>发送电子邮件 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">mail &#123;<br>    smtp.host = &#x27;email-smtp.us-east-1.amazonaws.com&#x27;<br>    smtp.port = 587<br>    smtp.user = &#x27;<Your AWS SES access key>&#x27;<br>    smtp.password = &#x27;<Your AWS SES secret key>&#x27;<br>    smtp.auth = true<br>    smtp.starttls.enable = true<br>    smtp.starttls.required = true<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="范围通知"><a href="#范围通知" class="headerlink" title="范围通知"></a>范围通知</h3><p>该<code>notification</code>范围使您可以定义工作流程执行终止时自动发送通知电子邮件。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>当工作流程执行完成时，启用发送通知消息的功能。</td></tr><tr><td>至</td><td>通知电子邮件的收件人地址。可以指定多个地址，并用逗号分隔。</td></tr><tr><td>从</td><td>通知电子邮件的发件人地址。</td></tr><tr><td>模板</td><td>提供通知消息内容的模板文件的路径。</td></tr><tr><td>捆绑</td><td>对模板文件中的变量进行建模的关联数组。</td></tr></tbody></table><p>通知消息是使用配置<a href="https://www.nextflow.io/docs/latest/config.html#config-mail">邮件范围中</a>定义的STMP服务器<a href="https://www.nextflow.io/docs/latest/config.html#config-mail">发送的</a>。</p><p>如果未提供邮件配置，它将尝试使用最终由底层系统提供的外部邮件命令（例如<code>sendmail</code>或<code>mail</code>）发送通知消息。</p><h3 id="范围报告"><a href="#范围报告" class="headerlink" title="范围报告"></a>范围报告</h3><p>该<code>report</code>范围使您可以定义工作流<a href="https://www.nextflow.io/docs/latest/tracing.html#execution-report">执行报告的</a>配置设置。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>如果<code>true</code>创建工作流程执行报告。</td></tr><tr><td>文件</td><td>创建的执行报告文件的路径（默认值：）<code>report.html</code>。</td></tr></tbody></table><h3 id="范围网志"><a href="#范围网志" class="headerlink" title="范围网志"></a>范围网志</h3><p>的<code>weblog</code>范围允许发送详细<a href="https://www.nextflow.io/docs/latest/tracing.html#trace-fields">的跟踪范围</a>的信息作为HTTP POST请求Web服务器，运作为JSON对象。</p><p>有关JSON字段的详细信息可以在<a href="https://www.nextflow.io/docs/latest/tracing.html#weblog-service">Weblog描述中</a>找到。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>已启用</td><td>如果<code>true</code>它将HTTP POST请求发送到给定的URL。</td></tr><tr><td>网址</td><td>发送HTTP POST请求的网址（默认值：）<code>http:localhost</code>。</td></tr></tbody></table><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置文件可以包含一个或多个定义<em>配置文件</em>。配置文件是一组配置属性，在使用<code>-profile</code>命令行选项启动管道执行时可以激活&#x2F;选择这些配置属性。</p><p>通过使用特殊作用域定义配置配置文件，该特殊作用域<code>profiles</code>使用公共前缀将属于同一配置文件的属性进行分组。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">profiles &#123;<br><br>    standard &#123;<br>        process.executor = &#x27;local&#x27;<br>    &#125;<br><br>    cluster &#123;<br>        process.executor = &#x27;sge&#x27;<br>        process.queue = &#x27;long&#x27;<br>        process.memory = &#x27;10GB&#x27;<br>    &#125;<br><br>    cloud &#123;<br>        process.executor = &#x27;cirrus&#x27;<br>        process.container = &#x27;cbcrg/imagex&#x27;<br>        docker.enabled = true<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此配置定义了三个不同的配置文件：<code>standard</code>，<code>cluster</code>并且<code>cloud</code>根据目标运行时平台设置了不同的流程配置策略。按照约定，<code>standard</code>当用户未指定其他任何配置文件时，将隐式使用该配置文件。</p><p>小费</p><p>可以通过使用逗号分隔配置文件名称来指定两个或多个配置配置文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">nextflow run <your script> -profile standard,cloud<br></code></pre></td></tr></table></figure><p>危险</p><p>在配置文件中使用<em>配置文件</em>功能时，请勿在<code>profiles</code>上下文的内部和外部在同一范围内设置属性。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process.cpus = 1<br><br>profiles &#123;<br>  foo &#123;<br>    process.memory = &#x27;2 GB&#x27;<br>  &#125;<br><br>  bar &#123;<br>    process.memory = &#x27;4 GB&#x27;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>process.cpus</code>属性未正确应用，因为<code>process</code>作用域还用于<code>foo</code>和<code>bar</code>配置文件上下文。</p><p>以上功能需要0.28.x或更高版本。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>以下环境变量控制Nextflow运行时的配置以及它使用的Java虚拟机。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>NXF_HOME</td><td>Nextflow主目录（默认值：）<code>$HOME/.nextflow</code>。</td></tr><tr><td>NXF_VER</td><td>定义要使用的Nextflow版本。</td></tr><tr><td>NXF_ORG</td><td>查找托管存储库时的默认组织前缀（默认：）<code>nextflow-io</code>。</td></tr><tr><td>NXF_GRAB</td><td>提供从Maven存储库服务下载的额外运行时依赖项。</td></tr><tr><td>NXF_OPTS</td><td>为Java和Nextflow运行时提供额外的选项。它必须是空白的<code>-Dkey[=value]</code>属性列表。</td></tr><tr><td>NXF_CLASSPATH</td><td>允许使用额外的JAR文件或类文件夹扩展Java运行时类路径。</td></tr><tr><td>NXF_ASSETS</td><td>定义了下载的管道仓库的存储目录（默认：<code>$NXF_HOME/assets</code>）</td></tr><tr><td>NXF_PID_FILE</td><td>在后台启动Nextflow时，保存过程PID的文件的名称。</td></tr><tr><td>NXF_WORK</td><td>工作文件的存储目录（通常是您的<em>临时</em>目录）</td></tr><tr><td>NXF_TEMP</td><td>存放临时文件的目录</td></tr><tr><td>NXF_DEBUG</td><td>定义脚本调试级别：<code>1</code>在任务日志文件中转储任务环境变量；<code>2</code>启用命令脚本执行跟踪；<code>3</code>启用命令包装程序执行跟踪。</td></tr><tr><td>NXF_EXECUTOR</td><td>定义默认的流程执行器，例如sge</td></tr><tr><td>NXF_CONDA_CACHEDIR</td><td>存储Conda环境的目录。使用计算群集时，它必须是一个可从所有计算节点访问的共享文件夹。</td></tr><tr><td>NXF_SINGULARITY_CACHEDIR</td><td>存储远程奇点图像的目录。使用计算群集时，它必须是一个可从所有计算节点访问的共享文件夹。</td></tr><tr><td>NXF_JAVA_HOME</td><td>定义用于运行Nextflow的Java VM安装的路径位置。<code>JAVA_HOME</code>如果定义，此变量将覆盖该变量。</td></tr><tr><td>NXF_OFFLINE</td><td>当<code>true</code>从远程仓库禁用项目的自动下载和更新（默认：<code>false</code>）。</td></tr><tr><td>NXF_CLOUD_DRIVER</td><td>定义默认的云驱动程序，如果未在配置文件中指定，或者未指定为命令行选项（<code>aws</code>或）<code>google</code>。</td></tr><tr><td>NXF_ANSI_LOG</td><td>启用&#x2F;禁用ANSI控制台输出（<code>true</code>检测到ANSI终端时为默认值）。</td></tr><tr><td>NXF_ANSI_SUMMARY</td><td>启用&#x2F;禁用ANSI完成摘要：true | false（默认值：如果执行持续1分钟以上，则显示打印摘要）。</td></tr><tr><td>JAVA_HOME</td><td>定义用于运行Nextflow的Java VM安装的路径位置。</td></tr><tr><td>JAVA_CMD</td><td>定义用于启动Nextflow的Java二进制命令的路径位置。</td></tr><tr><td>HTTP_PROXY</td><td>定义HTTP代理服务器</td></tr><tr><td>HTTPS_PROXY</td><td>定义HTTPS代理服务器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 06 | 指令</title>
      <link href="/posts/40556/"/>
      <url>/posts/40556/</url>
      
        <content type="html"><![CDATA[<p>使用指令声明块，可以提供将影响当前进程执行的可选设置。</p><p>他们必须在过程的顶部进入人体，在任何其他声明块（即<code>input</code>，<code>output</code>等），并具有以下语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">name value [, value2 [,..]]<br></code></pre></td></tr></table></figure><p>一些指令通常可用于所有进程，另一些则取决于当前定义的执行器。</p><p>指令是：</p><h3 id="acceleratorse"><a href="#acceleratorse" class="headerlink" title="acceleratorse"></a>acceleratorse</h3><p>该<code>accelerator</code>指令允许指定任务执行的硬件加速器要求，例如<em>GPU</em>处理器。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>    accelerator 4, type: &#x27;nvidia-tesla-k80&#x27;<br><br>    script:<br>    """<br>    your_gpu_enabled --command --line<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的示例将请求4个nvidia-tesla-k80类型的GPU 。</p><blockquote><p>该指令仅受<a href="https://www.nextflow.io/docs/latest/executor.html#awsbatch-executor">AWS Batch</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#google-lifesciences-executor">Google Life Sciences</a>和<a href="https://www.nextflow.io/docs/latest/executor.html#k8s-executor">Kubernetes</a>执行程序支持。</p><p>加速器<code>type</code>选项值取决于目标执行平台。有关可用加速器的详细信息，请参阅目标平台文档。<a href="https://aws.amazon.com/batch/faqs/#GPU_Scheduling_">AWS </a><a href="https://cloud.google.com/compute/docs/gpus/">Google </a><a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#clusters-containing-different-types-of-gpus">Kubernetes</a>。</p></blockquote><h3 id="afterScript"><a href="#afterScript" class="headerlink" title="afterScript"></a>afterScript</h3><p><code>afterScript</code>指令允许在主进程运行<strong>后</strong>立即执行自定义（Bash）代码段。这对于清理暂存区可能很有用。</p><h3 id="beforeScript"><a href="#beforeScript" class="headerlink" title="beforeScript"></a>beforeScript</h3><p>该<code>beforeScript</code>指令允许在运行主流程脚本<strong>之前</strong>执行自定义（Bash）代码段。这对于初始化基础群集环境或其他自定义初始化可能很有用。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>  beforeScript &#x27;source /cluster/bin/setup&#x27;<br><br>  """<br>  echo bar<br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p><code>cache</code>指令允许将过程结果存储到本地缓存中。启用高速缓存并使用<a href="https://www.nextflow.io/docs/latest/getstarted.html#getstart-resume">resume</a>选项启动管道.</p><p>随后执行该过程的任何尝试以及相同的输入都会导致该过程的执行被跳过。</p><p>默认情况下已启用缓存，可以通过将<code>cache</code> 指令设置为来禁用特定进程的缓存<code>false</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process noCacheThis &#123;<br>  cache false<br><br>  script:<br>  <your command string here><br>&#125;<br></code></pre></td></tr></table></figure><p>该<code>cache</code>指令可能值列于下表中：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>false</code></td><td>禁用缓存功能。</td></tr><tr><td><code>true</code> （默认）</td><td>启用缓存。创建高速缓存键，以索引输入文件的元数据信息（名称，大小和最后更新时间戳记属性）。</td></tr><tr><td><code>&#39;deep&#39;</code></td><td>启用缓存。创建高速缓存键，为输入文件的内容建立索引。</td></tr><tr><td><code>&#39;lenient&#39;</code></td><td>启用缓存。将创建索引索引输入文件路径和大小属性的缓存键（此策略提供了一种变通方法，用于解决由于文件时间戳不一致而导致在共享文件系统上观察到的不正确的缓存失效；需要版本0.32.x或更高版本）。</td></tr></tbody></table><h3 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h3><p><code>conda</code>指令允许使用<a href="https://conda.io/">Conda</a> 包管理器定义流程依赖项。</p><p>Nextflow自动为<code>conda</code>指令中列出的给定包名称设置环境。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  conda &#x27;bwa=0.7.15&#x27;<br><br>  &#x27;&#x27;&#x27;<br>  your_command --here<br>  &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以指定多个软件包，用空格分隔它们，比如<code>bwa=0.7.15 fastqc=0.11.5</code>。</p><p>可以使用通常的Conda表示法指定需要从中下载特定软件包的频道名称，即在软件包前面加上频道名称，比如，<code>bioconda::bwa=0.7.15</code></p><p>该<code>conda</code>目录还允许指定Conda环境文件路径或现有环境目录的路径。有关更多详细信息，请参见<a href="https://www.nextflow.io/docs/latest/conda.html#conda-page">Conda环境</a>页面。</p><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p><code>container</code>指令允许在<a href="http://docker.io/">Docker</a>容器中执行流程脚本。</p><p>它要求Docker守护程序必须在执行管道的计算机中运行，即在使用本地执行器的本地计算机 或在通过<em>网格</em>执行器部署管道的群集节点中运行。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process runThisInDocker &#123;<br><br>  container &#x27;dockerbox:tag&#x27;<br><br>  """<br>  <your holy script here><br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>只需在上面的脚本<code>dockerbox:tag</code>中用要使用的Docker映像名称替换即可。</p><blockquote><p>这对于在可复制的独立环境中执行脚本或在云中部署管道非常有用。</p><p>对于<a href="https://www.nextflow.io/docs/latest/process.html#process-native">本地执行</a>的进程，将忽略此伪指令。</p></blockquote><h3 id="containerOptions"><a href="#containerOptions" class="headerlink" title="containerOptions"></a>containerOptions</h3><p><code>containerOptions</code>指令允许指定基础容器引擎支持的任何容器执行选项（即Docker，Singularity等）。这对于仅为特定进程提供容器设置非常有用，例如，安装自定义路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process runThisWithDocker &#123;<br><br>    container &#x27;busybox:latest&#x27;<br>    containerOptions &#x27;--volume /data/db:/db&#x27;<br><br>    output: file &#x27;output.txt&#x27;<br><br>    &#x27;&#x27;&#x27;<br>    your_command --data /db > output.txt<br>    &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://www.nextflow.io/docs/latest/executor.html#awsbatch-executor">AWS Batch</a>和<a href="https://www.nextflow.io/docs/latest/executor.html#k8s-executor">Kubernetes</a>执行程序不支持此功能。</p></blockquote><h3 id="cpus"><a href="#cpus" class="headerlink" title="cpus"></a>cpus</h3><p><code>cpus</code>指令允许定义进程任务所需的（逻辑）CPU数量。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process big_job &#123;<br><br>  cpus 8<br>  executor &#x27;sge&#x27;<br><br>  """<br>  blastp -query input_sequence -num_threads $&#123;task.cpus&#125;<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>执行多进程或多线程命令&#x2F;工具的任务需要此伪指令，并且当通过集群资源管理器执行管道任务时，该伪指令旨在保留足够的CPU。</p><h3 id="clusterOptions"><a href="#clusterOptions" class="headerlink" title="clusterOptions"></a>clusterOptions</h3><p><code>clusterOptions</code>指令允许使用群集提交命令接受的任何本机配置选项。可以使用它来请求非标准资源，也可以使用特定于群集且不受Nextflow即时支持的设置。</p><blockquote><p>仅当使用基于网格的执行程序时才考虑此指令： <a href="https://www.nextflow.io/docs/latest/executor.html#sge-executor">SGE</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#lsf-executor">LSF</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#slurm-executor">SLURM</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#pbs-executor">PBS &#x2F; Torque</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#pbspro-executor">PBS Pro</a>， <a href="https://www.nextflow.io/docs/latest/executor.html#moab-executor">Moab</a>和<a href="https://www.nextflow.io/docs/latest/executor.html#condor-executor">HTCondor</a>执行程序。</p></blockquote><h3 id="disk"><a href="#disk" class="headerlink" title="disk"></a>disk</h3><p><code>disk</code>指令允许定义允许该进程使用多少本地磁盘存储。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process big_job &#123;<br><br>    disk &#x27;2 GB&#x27;<br>    executor &#x27;cirrus&#x27;<br><br>    """<br>    your task script here<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>指定磁盘值时，可以使用以下存储单元后缀：</p><table><thead><tr><th>Unit</th><th>Description</th></tr></thead><tbody><tr><td>B</td><td>Bytes</td></tr><tr><td>KB</td><td>Kilobytes</td></tr><tr><td>MB</td><td>Megabytes</td></tr><tr><td>GB</td><td>Gigabytes</td></tr><tr><td>TB</td><td>Terabytes</td></tr></tbody></table><blockquote><p>当前，只有<a href="https://www.nextflow.io/docs/latest/executor.html#ignite-executor">Ignite</a> 和<a href="https://www.nextflow.io/docs/latest/executor.html#condor-executor">HTCondor</a>执行程序才考虑使用此指令。</p></blockquote><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>默认情况下，将忽略所有进程中执行的命令所产生的标准输出。将<code>echo</code>指令设置为<code>true</code>可以将进程stdout转发到当前运行最频繁的进程stdout文件，并在shell终端中显示该文件。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process sayHello &#123;<br>  echo true<br><br>  script:<br>  "echo Hello"<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Hello<br></code></pre></td></tr></table></figure><p>如果不指定<code>echo true</code>，执行以上示例时将看不到打印出的字符串<code>Hello</code>。</p><h3 id="errorStrategy"><a href="#errorStrategy" class="headerlink" title="errorStrategy"></a>errorStrategy</h3><p><code>errorStrategy</code>指令允许定义流程如何管理错误条件。</p><p>默认情况下，当执行的脚本返回错误状态时，该过程将立即停止。会使整个管道终止。</p><p>可用的错误策略表：</p><table><thead><tr><th>名称</th><th>Executor</th></tr></thead><tbody><tr><td><code>terminate</code></td><td>报告错误情况后立即终止执行。待处理的作业被杀死（默认）</td></tr><tr><td><code>finish</code></td><td>当出现错误情况时，启动有序的管道关闭，等待任何提交的作业的完成。</td></tr><tr><td><code>ignore</code></td><td>忽略进程执行错误。</td></tr><tr><td><code>retry</code></td><td>重新提交执行以返回错误条件的进程。</td></tr></tbody></table><p><strong>ignore</strong></p><p>当将<code>errorStrategy</code>指令设置为<code>ignore</code>进程不会在错误情况下停止，它只会报告一条消息，通知错误事件。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process ignoreAnyError &#123;<br>   errorStrategy &#x27;ignore&#x27;<br><br>   script:<br>   <your command string here><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>根据定义，命令脚本以非零退出状态结束时会失败。要更改此行为，请参见<a href="https://www.nextflow.io/docs/latest/process.html#validexitstatus">validExitStatus</a>。</p></blockquote><p><strong>retry</strong></p><p><code>retry</code> 错误策略，让你重新提交以供执行的过程返回一个错误条件。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process retryIfFail &#123;<br>   errorStrategy &#x27;retry&#x27;<br><br>   script:<br>   <your command string here><br>&#125;<br></code></pre></td></tr></table></figure><p>重新执行失败进程的次数由<a href="https://www.nextflow.io/docs/latest/process.html#maxretries">maxRetries</a>和<a href="https://www.nextflow.io/docs/latest/process.html#maxerrors">maxErrors</a>指令定义。</p><blockquote><p>可以使用动态<code>errorStrategy</code> 指令定义取决于任务退出状态或其他参数值的更复杂的策略。有关详细信息，请参见“ <a href="https://www.nextflow.io/docs/latest/process.html#dynamic-directives">动态指令”</a>部分。</p></blockquote><h3 id="executor"><a href="#executor" class="headerlink" title="executor"></a>executor</h3><p><code>executor</code> 定义执行 processes 的基础系统。默认情况下，进程使用<code>nextflow.config</code>文件中全局定义的 executor。</p><p><code>executor</code>指令允许配置进程必须使用的执行程序，可以使用以下值：</p><table><thead><tr><th>名称</th><th>执行者</th></tr></thead><tbody><tr><td><code>local</code></td><td>在启动Nextflow的计算机中执行该过程</td></tr><tr><td><code>sge</code></td><td>该过程使用Sun Grid Engine &#x2F; <a href="http://gridscheduler.sourceforge.net/">Open Grid Engine</a>执行</td></tr><tr><td><code>uge</code></td><td>该过程是使用<a href="https://en.wikipedia.org/wiki/Univa_Grid_Engine/">Univa Grid Engine</a>作业计划程序执行的</td></tr><tr><td><code>lsf</code></td><td>该过程是使用<a href="http://en.wikipedia.org/wiki/Platform_LSF">Platform LSF</a>作业计划程序执行的</td></tr><tr><td><code>slurm</code></td><td>该过程使用SLURM作业调度程序执行</td></tr><tr><td><code>pbs</code></td><td>使用<a href="http://en.wikipedia.org/wiki/Portable_Batch_System">PBS &#x2F; Torque</a>作业计划程序执行该过程</td></tr><tr><td><code>pbspro</code></td><td>该过程使用<a href="https://www.pbsworks.com/">PBS Pro</a>作业计划程序执行</td></tr><tr><td><code>moab</code></td><td>该过程是使用<a href="http://www.adaptivecomputing.com/moab-hpc-basic-edition/">Moab</a>作业计划程序执行的</td></tr><tr><td><code>condor</code></td><td>使用<a href="https://research.cs.wisc.edu/htcondor/">HTCondor</a>作业计划程序执行该过程</td></tr><tr><td><code>nqsii</code></td><td>该过程是使用<a href="https://www.rz.uni-kiel.de/en/our-portfolio/hiperf/nec-linux-cluster">NQSII</a>作业计划程序执行的</td></tr><tr><td><code>ignite</code></td><td>该过程是使用<a href="https://ignite.apache.org/">Apache Ignite</a>集群执行的</td></tr><tr><td><code>k8s</code></td><td>该过程是使用<a href="https://kubernetes.io/">Kubernetes</a>集群执行的</td></tr><tr><td><code>awsbatch</code></td><td>该过程是使用<a href="https://aws.amazon.com/batch/">AWS Batch</a>服务执行的</td></tr><tr><td><code>google-pipelines</code></td><td>该过程是使用<a href="https://cloud.google.com/genomics/">Google Genomics Pipelines</a>服务执行的</td></tr></tbody></table><p>以下示例显示如何设置流程的执行程序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process doSomething &#123;<br><br>   executor &#x27;sge&#x27;<br><br>   script:<br>   <your script here><br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>每个 executor 提供一组配置选项，可以在指令声明块中进行设置。请参阅<a href="https://www.nextflow.io/docs/latest/executor.html#executor-page">执行程序</a>部分，以了解特定的执行程序指令。</p></blockquote><h3 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h3><p><code>ext</code>是作为一种特殊的指令，用于用户自定义过程指令的名称空间 。这对于高级配置选项很有用。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process mapping &#123;<br>  container "biocontainers/star:$&#123;task.ext.version&#125;"<br><br>  input:<br>  file genome from genome_file<br>  set sampleId, file(reads) from reads_ch<br><br>  """<br>  STAR --genomeDir $genome --readFilesIn $reads<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，该过程使用一个容器，其版本由<code>ext.version</code>属性控制。可以在<code>nextflow.config</code>文件中定义它，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process.ext.version = &#x27;2.5.3&#x27;<br></code></pre></td></tr></table></figure><h3 id="machineType"><a href="#machineType" class="headerlink" title="machineType"></a>machineType</h3><p><code>machineType</code>可用于指定一个预定义的谷歌计算平台<a href="https://cloud.google.com/compute/docs/machine-types">机型</a> 。</p><p>该指令是可选的，如果指定，它将覆盖cpus和memory指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  machineType &#x27;n1-highmem-8&#x27;<br><br>  """<br>  <your script here><br>  """<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此功能需要Nextflow 19.07.0或更高版本。</p></blockquote><h3 id="maxErrors"><a href="#maxErrors" class="headerlink" title="maxErrors"></a>maxErrors</h3><p><code>maxErrors</code>指令允许指定使用<code>retry</code> 错误策略时进程失败的最大次数。默认情况下，此指令是禁用的，可以按以下示例所示进行设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process retryIfFail &#123;<br>  errorStrategy &#x27;retry&#x27;<br>  maxErrors 5<br><br>  """<br>  echo &#x27;do this as that .. &#x27;<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此设置考虑所有实例中给定进程累积的<strong>总</strong>错误。如果要控制流程<strong>实例</strong>（又称任务）失败的次数，请使用<code>maxRetries</code>。</p></blockquote><h3 id="maxForks"><a href="#maxForks" class="headerlink" title="maxForks"></a>maxForks</h3><p><code>maxForks</code>指令允许定义可以并行执行的最大流程实例数。默认情况下，该值等于可用CPU核心数减去1。</p><p>如果要按顺序执行进程，请将此伪指令设置为一个。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process doNotParallelizeIt &#123;<br><br>   maxForks 1<br><br>   &#x27;&#x27;&#x27;<br>   <your script here><br>   &#x27;&#x27;&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="maxRetries"><a href="#maxRetries" class="headerlink" title="maxRetries"></a>maxRetries</h3><p><code>maxRetries</code>指令允许定义在发生故障时可以重新提交流程实例的最大次数。仅当使用<code>retry</code> 错误策略时才应用此值。默认情况下，只允许重试一次，可以如下所示增加此值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process retryIfFail &#123;<br>    errorStrategy &#x27;retry&#x27;<br>    maxRetries 3<br><br>    """<br>    echo &#x27;do this as that .. &#x27;<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>maxRetries</code>和<code>maxErrors</code>指令之间有一个细微但重要的区别。后者定义了流程执行期间允许的错误总数（同一流程可以启动不同的执行实例），而<code>maxRetries</code>定义了在发生错误的情况下可以重试同一流程执行的最大次数。</p></blockquote><p>另请参见：<a href="https://www.nextflow.io/docs/latest/process.html#errorstrategy">errorStrategy</a>和<a href="https://www.nextflow.io/docs/latest/process.html#maxerrors">maxErrors</a>。</p><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p><code>memory</code>指令允许定义允许该进程使用多少内存。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process big_job &#123;<br><br>    memory &#x27;2 GB&#x27;<br>    executor &#x27;sge&#x27;<br><br>    """<br>    your task script here<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>指定存储值时，可以使用以下存储单元后缀：</p><table><thead><tr><th>Unit</th><th>Description</th></tr></thead><tbody><tr><td>B</td><td>Bytes</td></tr><tr><td>KB</td><td>Kilobytes</td></tr><tr><td>MB</td><td>Megabytes</td></tr><tr><td>GB</td><td>Gigabytes</td></tr><tr><td>TB</td><td>Terabytes</td></tr></tbody></table><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p><a href="http://modules.sourceforge.net/">Environment Modules</a>是一个程序包管理器，它使可以动态配置执行环境，并轻松在同一软件工具的多个版本之间切换。</p><p>如果系统中可用，则可以将其与Nextflow一起使用，以便在管道中配置流程执行环境。</p><p>在流程定义中，可以使用<code>module</code>指令加载要在流程执行环境中使用的特定模块版本。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process basicExample &#123;<br><br>  module &#x27;ncbi-blast/2.2.27&#x27;<br><br>  """<br>  blastp -query <etc..><br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>可以<code>module</code>为需要加载的每个模块重复该指令。或者，可以<code>module</code>通过使用<code>:</code> （冒号）字符分隔所有模块名称，从而在一个指令中指定多个模块，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"> process manyModules &#123;<br><br>   module &#x27;ncbi-blast/2.2.27:t_coffee/10.0:clustalw/2.1&#x27;<br><br>   """<br>   blastp -query <etc..><br>   """<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="penv"><a href="#penv" class="headerlink" title="penv"></a>penv</h3><p>该<code>penv</code>指令允许定义将并行任务提交给<a href="https://www.nextflow.io/docs/latest/executor.html#sge-executor">SGE</a>资源管理器时要使用的并行环境。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process big_job &#123;<br><br>  cpus 4<br>  penv &#x27;smp&#x27;<br>  executor &#x27;sge&#x27;<br><br>  """<br>  blastp -query input_sequence -num_threads $&#123;task.cpus&#125;<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>此配置取决于Grid Engine安装程序提供的并行环境。</p><blockquote><p>使用<a href="https://www.nextflow.io/docs/latest/executor.html#sge-executor">SGE</a>执行程序时，此设置可用。</p></blockquote><h3 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h3><p><code>pod</code>使用<a href="https://www.nextflow.io/docs/latest/executor.html#k8s-executor">Kubernetes</a>执行程序时，该指令允许定义Pod的特定设置。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process your_task &#123;<br>  pod env: &#x27;FOO&#x27;, value: &#x27;bar&#x27;<br><br>  &#x27;&#x27;&#x27;<br>  echo $FOO<br>  &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的片段定义了名为的环境变量<code>FOO</code>，其值是<code>bar</code>。</p><p>该<code>pod</code>指令允许定义以下选项：</p><table><thead><tr><th><code>label: &lt;K&gt;, value: &lt;V&gt;</code></th><th>用key <code>K</code>和value 定义一个pod标签<code>V</code>。</th></tr></thead><tbody><tr><td><code>annotation: &lt;K&gt;, value: &lt;V&gt;</code></td><td>用key <code>K</code>和value 定义一个pod注解<code>V</code>。</td></tr><tr><td><code>env: &lt;E&gt;, value: &lt;V&gt;</code></td><td>用名称定义一个环境变量，<code>E</code>其值由<code>V</code>字符串给定。</td></tr><tr><td><code>env: &lt;E&gt;, config: &lt;C/K&gt;</code></td><td>用name定义一个环境变量，<code>E</code>其值由与name <code>K</code>中的<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/">ConfigMap中</a>与name 的键相关联的条目给出<code>C</code>。</td></tr><tr><td><code>env: &lt;E&gt;, secret: &lt;S/K&gt;</code></td><td>定义一个名称为name的环境变量，<code>E</code>其值由与名称<code>K</code>为<a href="https://kubernetes.io/docs/concepts/configuration/secret/">Secret的Secret中</a>具有名称的键关联的条目给出<code>S</code>。</td></tr><tr><td><code>config: &lt;C/K&gt;, mountPath: &lt;/absolute/path&gt;</code></td><td>名称为key 的<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/">ConfigMap</a>的内容可用于该路径。当省略关键组件时，该路径将解释为目录，并且所有ConfigMap条目都将在该路径中显示。<code>C``K``/absolute/path</code></td></tr><tr><td><code>secret: &lt;S/K&gt;, mountPath: &lt;/absolute/path&gt;</code></td><td>带有名称和密钥的<a href="https://kubernetes.io/docs/concepts/configuration/secret/">Secret</a>的内容可用于该路径。当省略关键组件时，该路径将解释为目录，并且所有Secret条目都将在该路径中显示。<code>S``K``/absolute/path</code></td></tr><tr><td><code>volumeClaim: &lt;V&gt;, mountPath: &lt;/absolute/path&gt;</code></td><td>将名称为<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">Persistent volume的声明</a>挂载<code>V</code>到指定的路径位置。使用可选的subPath参数将目录挂载在引用的卷中，而不是其根目录中。</td></tr><tr><td><code>imagePullPolicy: &lt;V&gt;</code></td><td>指定用于拉出容器映像的策略，例如。<code>imagePullPolicy: &#39;Always&#39;</code></td></tr><tr><td><code>imagePullSecret: &lt;V&gt;</code></td><td>指定用于访问私有容器映像注册表的秘密名称。有关详细信息，请参见<a href="https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod">Kubernetes文档</a>。</td></tr><tr><td><code>runAsUser: &lt;UID&gt;</code></td><td>指定用于运行容器的用户标识。</td></tr><tr><td><code>nodeSelector: &lt;V&gt;</code></td><td>指定进程将在哪个节点上运行。有关详细信息，请参见<a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector">Kubernetes nodeSelector</a>。</td></tr></tbody></table><p>在Nextflow配置文件中定义时，可以使用规范的关联数组语法定义容器设置。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>  pod = [env: &#x27;FOO&#x27;, value: &#x27;bar&#x27;]<br>&#125;<br></code></pre></td></tr></table></figure><p>当需要提供多个设置时，必须将它们包含在列表定义中，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process &#123;<br>  pod = [ [env: &#x27;FOO&#x27;, value: &#x27;bar&#x27;], [secret: &#x27;my-secret/key1&#x27;, mountPath: &#x27;/etc/file.txt&#x27;] ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="publishDir"><a href="#publishDir" class="headerlink" title="publishDir"></a>publishDir</h3><p><code>publishDir</code>指令允许将流程输出文件发布到指定的文件夹。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>    publishDir &#x27;/data/chunks&#x27;<br><br>    output:<br>    file &#x27;chunk_*&#x27; into letters<br><br>    &#x27;&#x27;&#x27;<br>    printf &#x27;Hola&#x27; | split -b 1 - chunk_<br>    &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的示例将字符串<code>Hola</code>分成单个字节的文件块。完成后，<code>chunk_*</code>输出文件将发布到该<code>/data/chunks</code>文件夹中。</p><blockquote><p><code>publishDir</code>可以多次指定该指令，以将输出文件发布到不同的目标目录。此功能需要0.29.0或更高版本。</p></blockquote><p>默认情况下，文件会发布到目标文件夹，为每个流程输出创建一个符号链接，该链接将生成的文件链接到流程工作目录中。可以使用<code>mode</code>参数修改此行为。</p><p>可以与<code>publishDir</code>伪指令一起使用的可选参数表：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>mode</td><td>文件发布方法。请参阅下表以获取可能的值。</td></tr><tr><td>overwrite</td><td>当<code>true</code>指定文件夹中的任何现有文件都将被覆盖时（默认值：<code>true</code>， 在正常管道执行期间。在 恢复管道执行时 为<code>false</code>）。</td></tr><tr><td>pattern</td><td>指定 <a href="http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob">glob</a>  文件模式，该模式可从整个输出文件集中选择要发布的文件。</td></tr><tr><td>path</td><td>指定需要发布文件的目录。<strong>注意</strong>：语法是的快捷方式。<code>publishDir &#39;/some/dir&#39;</code>是<code>publishDir path: &#39;/some/dir&#39;</code>的快捷方式</td></tr><tr><td>saveAs</td><td>一个闭包，给定要发布的文件的名称，它返回实际的文件名或要求存储该文件的完整路径。<br />可以使用自定义策略来动态重命名或更改已发布文件的目标目录。<code>null</code>从闭包中返回值以不发布文件。当流程具有多个输出文件，但只希望发布其中一些输出文件时，此功能很有用。</td></tr><tr><td>enabled</td><td>允许根据指定的布尔值启用或禁用发布规则（默认值：）<code>true</code>。</td></tr></tbody></table><p>发布方式表：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>symlink</td><td>在发布的目录中为每个过程输出文件创建一个绝对的符号链接（默认）。</td></tr><tr><td>rellink</td><td>在发布目录中为每个过程输出文件创建一个相对的符号链接。</td></tr><tr><td>link</td><td>在发布的目录中为每个过程输出文件创建一个硬链接。</td></tr><tr><td>copy</td><td>将输出文件复制到发布的目录中。</td></tr><tr><td>copyNoFollow</td><td>将输出文件复制到发布的目录中，而无需遵循符号链接。复制链接本身。</td></tr><tr><td>move</td><td>将输出文件移动到发布的目录中。<strong>注意</strong>：仅应将其用于终止过程，即，其输出未被任何其他下游过程消耗的过程。</td></tr></tbody></table><p>需要将模式值指定为字符串文字，即用引号引起来。多个参数需要用冒号分隔。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>    publishDir &#x27;/data/chunks&#x27;, mode: &#x27;copy&#x27;, overwrite: false<br><br>    output:<br>    file &#x27;chunk_*&#x27; into letters<br><br>    &#x27;&#x27;&#x27;<br>    printf &#x27;Hola&#x27; | split -b 1 - chunk_<br>    &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文件以<em>异步</em>方式复制到指定目录中，因此在执行过程结束时，它们可能不会立即在已发布目录中提供。因此，一个进程发布的文件不能被其他下游进程访问。</p></blockquote><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p><code>queue</code>目录使可以设置在管道中使用基于网格的执行程序时调度作业的队列。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process grid_job &#123;<br><br>    queue &#x27;long&#x27;<br>    executor &#x27;sge&#x27;<br><br>    """<br>    your task script here<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>多个队列可以通过用逗号分隔它们的名称来指定，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process grid_job &#123;<br><br>    queue &#x27;short,long,cn-el6&#x27;<br>    executor &#x27;sge&#x27;<br><br>    """<br>    your task script here<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>仅以下执行者会考虑此指令：<a href="https://www.nextflow.io/docs/latest/executor.html#sge-executor">SGE</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#lsf-executor">LSF</a>， <a href="https://www.nextflow.io/docs/latest/executor.html#slurm-executor">SLURM</a>和<a href="https://www.nextflow.io/docs/latest/executor.html#pbs-executor">PBS &#x2F; Torque</a>执行者。</p></blockquote><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>该<code>label</code>指令允许使用选择的助记符标识符注释进程。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process bigTask &#123;<br><br>  label &#x27;big_mem&#x27;<br><br>  &#x27;&#x27;&#x27;<br>  <task script><br>  &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用同一<code>label</code>指令将同一标签应用于多个进程，并且可以将多个标签应用于同一进程多次。</p><blockquote><p>标签必须由字母数字字符或组成<code>_</code>，必须以字母字符开头并且必须以字母数字字符结尾。</p><p>标签对于将工作流程过程组织成单独的组很有用，可以在配置文件中引用这些标签，以选择和配置具有类似计算要求的过程子集。</p></blockquote><h3 id="scratch"><a href="#scratch" class="headerlink" title="scratch"></a>scratch</h3><p><code>scratch</code>指令允许在执行节点本地的临时文件夹中执行流程。</p><p>当使用网格执行器启动管道时，这很有用，因为它允许通过在实际执行节点的本地磁盘中的临时目录中运行管道进程来减少NFS开销。仅将在流程定义中声明为输出的文件复制到管道工作区中。</p><p>基本形式只需<code>true</code>在指令值处指定即可，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process simpleTask &#123;<br><br>  scratch true<br><br>  output:<br>  file &#x27;data_out&#x27;<br><br>  &#x27;&#x27;&#x27;<br>  <task script><br>  &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这样做，它尝试<code>$TMPDIR</code>在执行节点中的变量定义的目录中执行脚本。如果此变量不存在，它将使用Linux命令创建一个新的临时目录<code>mktemp</code>。</p><p><code>$TMPDIR</code>可以通过简单地将其用作暂存值来指定除以外的自定义环境变量，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scratch &#x27;$MY_GRID_TMP&#x27;<br></code></pre></td></tr></table></figure><p>注意，它必须用单引号引起来，否则变量将在管道脚本上下文中求值。</p><p>还可以提供特定的文件夹路径作为暂存值，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">scratch &#x27;/tmp/my/path&#x27;<br></code></pre></td></tr></table></figure><p>这样，每次执行进程时，都会在指定的路径中创建一个新的临时目录。</p><p>最后，当<code>ram-disk</code>字符串作为<code>scratch</code>值提供时，该过程将在节点RAM虚拟磁盘中执行。</p><p>允许值的摘要：</p><table><thead><tr><th>刮</th><th>描述</th></tr></thead><tbody><tr><td>false</td><td>不要使用临时文件夹。</td></tr><tr><td>true</td><td>在<code>$TMPDIR</code>变量定义的目录中创建一个暂存文件夹；退回至该变量不存在。<code>mktemp /tmp</code></td></tr><tr><td>$YOUR_VAR</td><td>在<code>$YOUR_VAR</code>环境变量定义的目录中创建一个临时文件夹；退回至该变量不存在。<code>mktemp /tmp</code></td></tr><tr><td>&#x2F;my&#x2F;tmp</td><td>在指定目录中创建临时文件夹。</td></tr><tr><td>ram-disk</td><td>在RAM磁盘中创建临时文件夹<code>/dev/shm/</code>（实验性）。</td></tr></tbody></table><h3 id="storeDir"><a href="#storeDir" class="headerlink" title="storeDir"></a>storeDir</h3><p>该<code>storeDir</code>指令允许定义一个目录，该目录用作过程结果的永久缓存。</p><p>更详细地说，它以两种主要方式影响流程执行：</p><ol><li>仅当output子句中声明的文件在<code>storeDir</code>指令指定的目录中不存在时，才执行该过程。这些文件存在时，将跳过过程执行，并将这些文件用作实际过程结果。</li><li>每当一个过程成功完成时，输出声明块中列出的文件就会移动到该<code>storeDir</code>指令指定的目录中。</li></ol><p>以下示例显示如何使用<code>storeDir</code>指令为输入参数指定的每个物种创建一个包含BLAST数据库的目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">genomes = Channel.fromPath(params.genomes)<br><br>process formatBlastDatabases &#123;<br><br>  storeDir &#x27;/db/genomes&#x27;<br><br>  input:<br>  file species from genomes<br><br>  output:<br>  file "$&#123;dbName&#125;.*" into blastDb<br><br>  script:<br>  dbName = species.baseName<br>  """<br>  makeblastdb -dbtype nucl -in $&#123;species&#125; -out $&#123;dbName&#125;<br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>该<code>storeDir</code>指令用于长期的进程缓存，不应用于将进程产生的文件输出到特定文件夹或以语义目录结构组织结果数据。在这些情况下，可以改用<a href="https://www.nextflow.io/docs/latest/process.html#publishdir">publishDir</a>指令。</p><p>支持使用AWS S3路径，但是需要在目标计算节点中安装<a href="https://aws.amazon.com/cli/">AWS CLI工具</a> （即<code>aws</code>）。</p></blockquote><h3 id="stageInMode"><a href="#stageInMode" class="headerlink" title="stageInMode"></a>stageInMode</h3><p><code>stageInMode</code>指令定义如何将输入文件切入到流程工作目录中。允许以下值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>copy</td><td>通过创建副本将输入文件暂存到流程工作目录中。</td></tr><tr><td>link</td><td>通过为每个输入文件创建（硬）链接，将输入文件暂存到流程工作目录中。</td></tr><tr><td>symlink</td><td>输入文件通过创建带有每个文件的绝对路径的符号链接而在过程工作目录中暂存（默认）。</td></tr><tr><td>rellink</td><td>通过创建具有每个文件的相对路径的符号链接，将输入文件暂存到流程工作目录中。</td></tr></tbody></table><h3 id="stageOutMode"><a href="#stageOutMode" class="headerlink" title="stageOutMode"></a>stageOutMode</h3><p>该<code>stageOutMode</code>指令定义如何从头开始目录将输出文件逐步淘汰到流程工作目录。允许以下值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>copy</td><td>输出文件从临时目录复制到工作目录。</td></tr><tr><td>move</td><td>输出文件从暂存目录移动到工作目录。</td></tr><tr><td>rsync</td><td>使用该<code>rsync</code>实用程序将输出文件从临时目录复制到工作目录。</td></tr></tbody></table><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p><code>tag</code>指令允许将每个流程执行与一个自定义标签相关联，以便在日志文件或跟踪执行报告中更容易识别它们。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  tag "$code"<br><br>  input:<br>  val code from &#x27;alpha&#x27;, &#x27;gamma&#x27;, &#x27;omega&#x27;<br><br>  """<br>  echo $code<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码段将打印类似于以下内容的日志，其中进程名称包含标签值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">[6e/28919b] Submitted process > foo (alpha)<br>[d2/1c6175] Submitted process > foo (gamma)<br>[1c/3ef220] Submitted process > foo (omega)<br></code></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p><code>time</code>指令允许定义一个进程可以运行多长时间。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process big_job &#123;<br><br>    time &#x27;1h&#x27;<br><br>    """<br>    your task script here<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>指定持续时间值时，可以使用以下时间单位后缀：</p><table><thead><tr><th>单元</th><th>描述</th></tr></thead><tbody><tr><td>s</td><td>秒</td></tr><tr><td>m</td><td>分钟</td></tr><tr><td>h</td><td>小时</td></tr><tr><td>d</td><td>天</td></tr></tbody></table><blockquote><p>仅在使用以下基于网格的执行程序之一时才考虑此指令： <a href="https://www.nextflow.io/docs/latest/executor.html#sge-executor">SGE</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#lsf-executor">LSF</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#slurm-executor">SLURM</a>，<a href="https://www.nextflow.io/docs/latest/executor.html#pbs-executor">PBS &#x2F; Torque</a>， <a href="https://www.nextflow.io/docs/latest/executor.html#condor-executor">HTCondor</a>和<a href="https://www.nextflow.io/docs/latest/executor.html#awsbatch-executor">AWS Batch</a>执行程序。</p></blockquote><h3 id="动态指令"><a href="#动态指令" class="headerlink" title="动态指令"></a>动态指令</h3><p>可以在流程执行期间<em>动态</em>分配指令，以便可以根据一个或多个流程输入值的值来评估其实际值。</p><p>为了以动态方式定义该指令的值，需要使用<a href="https://www.nextflow.io/docs/latest/script.html#script-closure">闭包</a> 语句来表示，如以下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>  executor &#x27;sge&#x27;<br>  queue &#123; entries > 100 ? &#x27;long&#x27; : &#x27;short&#x27; &#125;<br><br>  input:<br>  set entries, file(x) from data<br><br>  script:<br>  """<br>  < your job here ><br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，根据输入值动态评估<a href="https://www.nextflow.io/docs/latest/process.html#queue">queue</a>指令<code>entries</code>。当它大于100时，作业将被提交到队列<code>long</code>，否则<code>short</code>将使用该作业。</p><p>可以将所有指令分配给动态值，但以下各项除外：</p><ul><li>executor</li><li>maxForks</li></ul><blockquote><p>可以使用隐式变量来检索流程脚本中动态指令的当前值，该隐式变量<code>task</code> 包含当前流程实例中定义的指令值。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>   queue &#123; entries > 100 ? &#x27;long&#x27; : &#x27;short&#x27; &#125;<br><br>   input:<br>   set entries, file(x) from data<br><br>   script:<br>   """<br>   echo Current queue: $&#123;task.queue&#125;<br>   """<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="动态计算资源"><a href="#动态计算资源" class="headerlink" title="动态计算资源"></a>动态计算资源</h3><p>在相同的流程的不同实例对计算资源的需求可能非常不同的情况下，这是非常普遍的情况。例如，在这种情况下，请求的内存量太低会导致某些任务失败。相反，使用适合执行中所有任务的更高限制可能会大大降低作业的执行优先级。</p><p>动态指令评分功能可被用来修改计算在处理失败的情况下请求的资源的量，并尝试使用更高的限制重新执行。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br><br>    memory &#123; 2.GB * task.attempt &#125;<br>    time &#123; 1.hour * task.attempt &#125;<br><br>    errorStrategy &#123; task.exitStatus in 137..140 ? &#x27;retry&#x27; : &#x27;terminate&#x27; &#125;<br>    maxRetries 3<br><br>    script:<br>    <your job here><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，内存和执行时间限制是动态定义的。第一次执行该过程时将<code>task.attempt</code>设置为<code>1</code>，因此它将请求2 GB的内存和一小时的最大执行时间。</p><p>如果任务执行失败，报告退出状态在137到140之间，退出任务将被重新提交（否则立即终止）。此时的值<code>task.attempt</code>就是<code>2</code>，从而增加了存储器的量至四个GB和时间至2小时，并依此类推。</p><h3 id="动态重试"><a href="#动态重试" class="headerlink" title="动态重试"></a>动态重试</h3><p>在某些情况下，所需的执行资源可能是暂时不可用的，例如网络拥塞。在这些情况下，立即重新执行任务可能会导致相同的错误。具有延迟的重试可以更好地恢复以下错误情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  errorStrategy &#123; sleep(Math.pow(2, task.attempt) * 200 as long); return &#x27;retry&#x27; &#125;<br>  maxRetries 5<br>  script:<br>  &#x27;&#x27;&#x27;<br>  your_command --here<br>  &#x27;&#x27;&#x27;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 05 | 通道 Channels</title>
      <link href="/posts/59212/"/>
      <url>/posts/59212/</url>
      
        <content type="html"><![CDATA[<p>Nextflow基于数据流编程模型，其中流程通过通道进行通信。</p><p>通道具有两个主要属性：</p><ol><li>发送消息是一个异步操作，无需等待接收过程即可立即完成。</li><li>接收数据是一项阻止操作，它将停止接收过程，直到消息到达为止。</li></ol><h2 id="通道类型"><a href="#通道类型" class="headerlink" title="通道类型"></a>通道类型</h2><p>Nextflow区分两种不同的通道：队列通道和值通道(queue channels and value channels )。</p><h3 id="queue-channels"><a href="#queue-channels" class="headerlink" title="queue channels"></a><em>queue channels</em></h3><p>队列通道是连接两个 processes 或 operators  非阻挡单向FIFO队列。</p><p>通常使用工厂方法（如<a href="https://www.nextflow.io/docs/latest/channel.html#from">from</a>，<a href="https://www.nextflow.io/docs/latest/channel.html#frompath">fromPath</a>等）创建队列通道，或使用<a href="https://www.nextflow.io/docs/latest/operator.html#operator-map">map</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-flatmap">flatMap</a>等通道操作符将其链接起来。</p><p>队列通道也是由使用<code>into</code>子句的流程输出声明创建的。</p><blockquote><p>该定义意味着同一队列通道不能用作进程输出多次，而不能用作进程输入一次。</p></blockquote><p>在需要将一个流程输出通道连接到多个流程的情况下，一个流程或操作员可以使用 <a href="https://www.nextflow.io/docs/latest/operator.html#operator-into">into</a>运算符创建同一通道的两个（或多个）副本，并使用每个副本来连接一个单独的流程。</p><h3 id="Value-channel"><a href="#Value-channel" class="headerlink" title="Value channel"></a><em>Value channel</em></h3><p>根据定义，值通道（又称<em>单例通道</em>）绑定到一个值，并且可以无限制地读取该值而不消耗其内容。</p><blockquote><p>因此，一个值通道可以通过多个 process 用作输入。</p></blockquote><p>使用<a href="https://www.nextflow.io/docs/latest/channel.html#value">值</a>工厂方法或由操作员返回单个值来创建一个值通道，例如<a href="https://www.nextflow.io/docs/latest/operator.html#operator-first">first</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-last">last</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-collect">collect</a>， <a href="https://www.nextflow.io/docs/latest/operator.html#operator-count">count</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-min">min</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-max">max</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-reduce">reduce</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-sum">sum</a>。</p><blockquote><p>当输入在<code>from</code>子句中指定简单值时，进程将隐式创建一个值通道。此外，还将为输入仅是值通道的过程隐式创建一个值通道作为输出。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  input:<br>  val x from 1<br>  output:<br>  file &#x27;x.txt&#x27; into result<br><br>  """<br>  echo $x > x.txt<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码段中的过程声明了一个输入，该输入隐式为一个值通道。因此，<code>result</code>输出也是一个可以通过多个过程读取的值通道。</p><h3 id="了解多个输入通道的工作方式"><a href="#了解多个输入通道的工作方式" class="headerlink" title="了解多个输入通道的工作方式"></a>了解多个输入通道的工作方式</h3><p>流程的关键特征是能够处理来自多个通道的输入。</p><p>当将两个或多个通道声明为过程输入时，过程将停止，直到存在完整的输入配置。它从所有声明为输入的通道中接收输入值。</p><p>验证此条件后，它将捕获来自各个通道的输入值，并生成任务执行，然后重复相同的逻辑，直到一个或多个通道不再有内容。</p><p>这意味着通道值是一个接一个地连续捕获的，即使其他通道中还有其他值，第一个空通道也会导致进程执行停止。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  echo true<br>  input:<br>  val x from Channel.from(1,2)<br>  val y from Channel.from(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)<br>  script:<br>   """<br>   echo $x and $y<br>   """<br>&#125;<br></code></pre></td></tr></table></figure><p>该过程<code>foo</code>执行两次，因为第一个输入通道仅提供两个值，因此<code>c</code>元素被丢弃。它打印：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1 and a<br>2 and b<br></code></pre></td></tr></table></figure><blockquote><p>当使用<em>Value通道</em>（又称为<em>Singleton通道）</em>时，将应用不同的语义。</p><p>这种通道是通过<a href="https://www.nextflow.io/docs/latest/channel.html#channel-value">Channel.value</a>工厂方法创建的，或者在流程输入在<code>from</code>子句中指定简单值时隐式创建的。</p></blockquote><p>根据定义，值通道绑定到单个值，并且可以无限制地读取该值而不消耗其内容。</p><p>这些属性使得将值通道与一个或多个（队列）通道混合时，不会影响仅取决于其他通道的过程终止，并且其内容会重复应用。</p><p>为了更好地理解此行为，请将前面的示例与以下示例进行比较：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process bar &#123;<br>  echo true<br>  input:<br>  val x from Channel.value(1)<br>  val y from Channel.from(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)<br>  script:<br>   """<br>   echo $x and $y<br>   """<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码段执行<code>bar</code>过程三次，因为第一个输入是一个<em>值通道</em>，因此可以根据需要读取其内容多次。进程终止由第二通道的内容确定。它打印：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1 and a<br>1 and b<br>1 and c<br></code></pre></td></tr></table></figure><h2 id="Channel-factory"><a href="#Channel-factory" class="headerlink" title="Channel factory"></a><em>Channel factory</em></h2><p>可以通过 process 输出声明隐式创建通道，也可以使用以下通道工厂方法显式创建通道。</p><blockquote><p>对于版本20.07.0，<code>channel.</code>已将前缀作为的别名引入<code>Channel.</code>，因此工厂方法可以与语法<code>channel.from()</code>和一起使用<code>Channel.from()</code>，依此类推。</p></blockquote><h3 id="create"><a href="#create" class="headerlink" title="create"></a><em>create</em></h3><blockquote><p>此方法已弃用，在DSL2语法中将不可用。</p></blockquote><p>使用方法创建一个新频道<code>create</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">channelObj = Channel.create()<br></code></pre></td></tr></table></figure><h3 id="of"><a href="#of" class="headerlink" title="of"></a><em>of</em></h3><p><code>of</code>方法允许您创建一个通道，该通道给出方法参数的值，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ch = Channel.of( 1, 3, 5, 7 )<br>ch.view &#123; "value: $it" &#125;<br></code></pre></td></tr></table></figure><p>本示例中的第一行创建一个变量<code>ch</code>，该变量保存一个通道对象。该通道发出在<code>of</code>方法中指定为参数的值。因此，第二行显示以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">value: 1<br>value: 3<br>value: 5<br>value: 7<br></code></pre></td></tr></table></figure><blockquote><p>值的范围会相应扩大。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .of(1..23, &#x27;X&#x27;, &#x27;Y&#x27;)<br>    .view()<br></code></pre></td></tr></table></figure><p>显示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1<br>2<br>3<br>4<br>:<br>23<br>X<br>Y<br></code></pre></td></tr></table></figure><blockquote><p>此功能需要更高版本的Nextflow 19.10.0。</p></blockquote><h3 id="from"><a href="#from" class="headerlink" title="from"></a><em>from</em></h3><blockquote><p>不推荐使用此方法，仅应将其用于旧代码中的向后兼容性。使用<code>of</code>或<code>fromList</code>代替。</p></blockquote><p><code>from</code>方法会创建一个通道，该通道给出指定为方法参数的值，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ch = Channel.from( 1, 3, 5, 7 )<br>ch.subscribe &#123; println "value: $it" &#125;<br></code></pre></td></tr></table></figure><p>本示例中的第一行创建一个变量<code>ch</code>，该变量保存一个通道对象。</p><p>该通道发出在<code>from</code>方法中指定为参数的值。因此，第二行将打印以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">value: 1<br>value: 3<br>value: 5<br>value: 7<br></code></pre></td></tr></table></figure><p>以下示例显示了如何根据一系列数字或字符串创建频道：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">zeroToNine = Channel.from( 0..9 )<br>strings = Channel.from( &#x27;A&#x27;..&#x27;Z&#x27; )<br></code></pre></td></tr></table></figure><blockquote><p>请注意，当<code>from</code>参数是实现（Java）<a href="http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html">Collection</a>接口的对象时 ，结果通道将collection 元素单独给出。</p></blockquote><p>因此，以下两种声明即使在第一种情况下将项目指定为多个参数，而在第二种情况下将其指定为单个列表对象参数，则产生的结果相同：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel.from( 1, 3, 5, 7, 9 )<br>Channel.from( [1, 3, 5, 7, 9] )<br></code></pre></td></tr></table></figure><p>因此，以下示例创建一个通道，该通道发出三个条目，每个条目都是一个包含两个元素的列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel.from( [1, 2], [5,6], [7,9] )<br></code></pre></td></tr></table></figure><h3 id="value"><a href="#value" class="headerlink" title="value"></a><em>value</em></h3><p><code>value</code>工厂方法用于创建一个值的信道。</p><p><code>null</code>可以指定一个可选的not 参数，以将通道绑定到特定值。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">expl1 = Channel.value()<br>expl2 = Channel.value( &#x27;Hello there&#x27; )<br>expl3 = Channel.value( [1,2,3,4,5] )<br></code></pre></td></tr></table></figure><p>示例中的第一行创建一个“空”变量。</p><p>第二行创建一个通道并将一个字符串绑定到该通道。</p><p>最后一个创建一个通道，并将一个列表对象绑定到该通道，该列表对象将作为唯一的通道发出。</p><h3 id="fromList"><a href="#fromList" class="headerlink" title="fromList"></a><em>fromList</em></h3><p><code>fromList</code>方法创建一个通道，该通道发出作为元素列表提供的值，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .fromList( [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] )<br>    .view &#123; "value: $it" &#125;<br></code></pre></td></tr></table></figure><p>印刷品：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">a<br>b<br>c<br>d<br></code></pre></td></tr></table></figure><blockquote><p>此功能需要更高版本的Nextflow 19.10.0。</p></blockquote><h3 id="fromPath"><a href="#fromPath" class="headerlink" title="fromPath"></a><em>fromPath</em></h3><p><code>fromPath</code>方法指定路径字符串作为参数来创建给出一个或多个文件路径的通道。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">myFileChannel = Channel.fromPath( &#x27;/data/some/bigfile.txt&#x27; )<br></code></pre></td></tr></table></figure><blockquote><p>注意：它不检查文件是否存在。</p></blockquote><p>每当<code>fromPath</code>参数包含<code>*</code>或<code>?</code>通配符时，它将被解释为全局路径匹配器。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">myFileChannel = Channel.fromPath( &#x27;/data/big/*.txt&#x27; )<br></code></pre></td></tr></table></figure><p>本示例创建一个通道，并发出<code>Path</code>与文件夹中带有<code>txt</code>扩展名的<code>/data/big</code>文件一样多的项目。</p><blockquote><p>两个星号（即<code>**</code>）的工作方式类似<code>*，</code>但跨越目录边界。</p><p>此语法通常用于匹配完整路径。圆括号指定子模式的集合。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">files = Channel.fromPath( &#x27;data/**.fa&#x27; )<br>moreFiles = Channel.fromPath( &#x27;data/**/*.fa&#x27; )<br>pairFiles = Channel.fromPath( &#x27;data/file_&#123;1,2&#125;.fq&#x27; )<br></code></pre></td></tr></table></figure><p>第一行返回一个通道，该通道给出<code>data</code>文件夹中以后缀.fa结尾的文件，并在其所有子文件夹中递归。 </p><p>第二个只给出具有在<code>data</code>路径的任何子文件夹中具有相同后缀的文件。 </p><p>最后一个示例给出两个文件：<code>data/file_1.fq</code>和<code>data/file_2.fq</code>。</p><blockquote><p>与在Linux Bash中一样，<code>*</code>通配符与隐藏文件（即，名称以<code>.</code>字符开头的文件）不匹配。</p></blockquote><p><strong>隐藏文件</strong></p><p>为了包括隐藏文件，您需要以句点字符开头或指定选项。例如：<code>hidden: true</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">expl1 = Channel.fromPath( &#x27;/path/.*&#x27; )<br>expl2 = Channel.fromPath( &#x27;/path/.*.fa&#x27; )<br>expl3 = Channel.fromPath( &#x27;/path/*&#x27;, hidden: true )<br></code></pre></td></tr></table></figure><p>第一个示例返回指定路径中的所有隐藏文件。</p><p>第二个返回所有以<code>.fa</code>后缀结尾的隐藏文件。</p><p>最后一个示例返回该路径中的所有文件（隐藏和非隐藏）。</p><p><strong>目录路径</strong></p><p>默认情况下，全局模式仅查找符合指定条件的常规文件路径，即它不会返回目录路径。</p><p>可以使用<code>type</code>指定值的参数<code>file</code>，<code>dir</code>或<code>any</code>为了定义所需的路径。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">myFileChannel = Channel.fromPath( &#x27;/path/*b&#x27;, type: &#x27;dir&#x27; )<br>myFileChannel = Channel.fromPath( &#x27;/path/a*&#x27;, type: &#x27;any&#x27; )<br></code></pre></td></tr></table></figure><p>第一个示例将返回所有以后缀结尾的目录路径<code>b</code>，</p><p>第二个示例将返回以<code>a</code>前缀开头的任何文件和目录。</p><p><strong>可选参数表</strong></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>glob</td><td>当<code>true</code>解释字符<code>*</code>，<code>?</code>，<code>[]</code>和<code>&#123;&#125;</code>作为全局通配符，否则处理它们的正常字符（默认值：<code>true</code>）</td></tr><tr><td>type</td><td>键入的返回路径，无论是<code>file</code>，<code>dir</code>或<code>any</code>（默认值：<code>file</code>）</td></tr><tr><td>hidden</td><td>当<code>true</code>包括在所得到的路径隐藏文件（默认值：<code>false</code>）</td></tr><tr><td>maxDepth</td><td>要访问的最大目录级别数（默认值：无限制）</td></tr><tr><td>followLinks</td><td>如果为<code>true</code>，则在遍历目录树时会跟随符号链接，否则将它们作为文件进行管理（默认值：true）</td></tr><tr><td>relative</td><td>当<code>true</code>返回路径是相对于最顶层的公共目录（默认值：<code>false</code>）</td></tr><tr><td>checkIfExists</td><td>如果为<code>true</code>，则在文件系统中不存在指定路径的异常（默认值：<code>false</code>）</td></tr></tbody></table><p>可以使用列表作为参数指定多个路径或全局模式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel.fromPath( [&#x27;/some/path/*.fq&#x27;, &#x27;/other/path/*.fastq&#x27;] )<br></code></pre></td></tr></table></figure><h3 id="fromFilePairs"><a href="#fromFilePairs" class="headerlink" title="fromFilePairs"></a><em>fromFilePairs</em></h3><p><code>fromFilePairs</code>方法创建一个通道，该通道发出与用户提供的全局模式匹配的文件对。匹配文件以元组的形式发出，其中第一个元素是匹配对的分组键，第二个元素是文件列表（按字典顺序排序）。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .fromFilePairs(&#x27;/my/data/SRR*_&#123;1,2&#125;.fastq&#x27;)<br>    .println()<br></code></pre></td></tr></table></figure><p>它将产生类似于以下内容的输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">[SRR493366, [/my/data/SRR493366_1.fastq, /my/data/SRR493366_2.fastq]]<br>[SRR493367, [/my/data/SRR493367_1.fastq, /my/data/SRR493367_2.fastq]]<br>[SRR493368, [/my/data/SRR493368_1.fastq, /my/data/SRR493368_2.fastq]]<br>[SRR493369, [/my/data/SRR493369_1.fastq, /my/data/SRR493369_2.fastq]]<br>[SRR493370, [/my/data/SRR493370_1.fastq, /my/data/SRR493370_2.fastq]]<br>[SRR493371, [/my/data/SRR493371_1.fastq, /my/data/SRR493371_2.fastq]]<br></code></pre></td></tr></table></figure><blockquote><p>全局模式必须至少包含一个星号通配符。</p></blockquote><p>或者，可以实现自定义文件对分组策略，以提供一个闭包，在给定当前文件作为参数的情况下，该闭包返回分组密钥。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .fromFilePairs(&#x27;/some/data/*&#x27;, size: -1) &#123; file -> file.extension &#125;<br>    .println &#123; ext, files -> "Files with the extension $ext are $files" &#125;<br></code></pre></td></tr></table></figure><p>可用的可选参数表：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>键入的返回路径，无论是<code>file</code>，<code>dir</code>或<code>any</code>（默认值：<code>file</code>）</td></tr><tr><td>hidden</td><td>当<code>true</code>包括在所得到的路径隐藏文件（默认值：<code>false</code>）</td></tr><tr><td>maxDepth</td><td>要访问的最大目录级别数（默认值：无限制）</td></tr><tr><td>followLinks</td><td>当<code>true</code>它遵循在目录树的遍历符号链接，否则会被管理的文件（默认：<code>true</code>）</td></tr><tr><td>size</td><td>定义每个发出的项目应保留的文件数（默认值：2）。设置<code>-1</code>为任意。</td></tr><tr><td>flat</td><td>在<code>true</code>发出的元组中将匹配文件作为唯一元素生成时（默认值：）<code>false</code>。</td></tr><tr><td>checkIfExists</td><td>当<code>true</code>抛出指定路径的例外在文件系统中不存在（默认值：<code>false</code>）</td></tr></tbody></table><p>可以使用列表作为参数指定多个glob模式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel.fromFilePairs( [&#x27;/some/data/SRR*_&#123;1,2&#125;.fastq&#x27;, &#x27;/other/data/QFF*_&#123;1,2&#125;.fastq&#x27;] )<br></code></pre></td></tr></table></figure><h3 id="fromSRA"><a href="#fromSRA" class="headerlink" title="fromSRA"></a><em>fromSRA</em></h3><p>该<code>fromSRA</code>方法查询<a href="https://www.ncbi.nlm.nih.gov/sra">NCBI SRA</a>数据库并返回一个通道，该通道发出与指定标准（即项目或登录号）匹配的FASTQ文件。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .fromSRA(&#x27;SRP043510&#x27;)<br>    .println()<br></code></pre></td></tr></table></figure><p>它返回：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">[SRR1448794, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR144/004/SRR1448794/SRR1448794.fastq.gz]<br>[SRR1448795, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR144/005/SRR1448795/SRR1448795.fastq.gz]<br>[SRR1448792, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR144/002/SRR1448792/SRR1448792.fastq.gz]<br>[SRR1448793, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR144/003/SRR1448793/SRR1448793.fastq.gz]<br>[SRR1910483, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR191/003/SRR1910483/SRR1910483.fastq.gz]<br>[SRR1910482, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR191/002/SRR1910482/SRR1910482.fastq.gz]<br>(remaining omitted)<br></code></pre></td></tr></table></figure><p>可以使用列表对象指定多个登录ID：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ids = [&#x27;ERR908507&#x27;, &#x27;ERR908506&#x27;, &#x27;ERR908505&#x27;]<br>Channel<br>    .fromSRA(ids)<br>    .println()<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">[ERR908507, [ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908507/ERR908507_1.fastq.gz, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908507/ERR908507_2.fastq.gz]]<br>[ERR908506, [ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908506/ERR908506_1.fastq.gz, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908506/ERR908506_2.fastq.gz]]<br>[ERR908505, [ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908505/ERR908505_1.fastq.gz, ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR908/ERR908505/ERR908505_2.fastq.gz]]<br></code></pre></td></tr></table></figure><p>在后台，它使用NCBI <a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESearch">ESearch</a> API，因此该<code>fromSRA</code>方法允许使用此API支持的任何查询词。</p><p>可用的可选参数表：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>apiKey</td><td>NCBI用户API密钥。</td></tr><tr><td>cache</td><td>启用&#x2F;禁用缓存API请求（默认值：）<code>true</code>。</td></tr><tr><td>max</td><td>可以重试的最大条目数（默认值：无限制）。</td></tr></tbody></table><p>要访问NCBI搜索服务， 应提供以下<a href="https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities">NCBI API密钥</a>：</p><ul><li>使用<code>apiKey</code>可选参数，<code>Channel.fromSRA(ids, apiKey:&#39;0123456789abcdef&#39;)</code></li><li><code>NCBI_API_KEY</code>在您的环境中导出变量，例如。<code>export NCBI_API_KEY=0123456789abcdef</code></li></ul><blockquote><p>此功能需要Nextflow 19.04.0或更高版本。</p></blockquote><h3 id="watchPath"><a href="#watchPath" class="headerlink" title="watchPath"></a><em>watchPath</em></h3><p>该<code>watchPath</code>方法监视文件夹中是否有匹配指定模式的一个或多个文件。一旦存在满足指定条件的文件，该文件就会通过该<code>watchPath</code> 方法返回的通道发出。可以通过使用<code>*</code>或<code>?</code>通配符（即通过指定<a href="http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob">全局</a>路径匹配条件）来指定要监视的文件上的条件。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>   .watchPath( &#x27;/path/*.fa&#x27; )<br>   .subscribe &#123; println "Fasta file: $it" &#125;<br></code></pre></td></tr></table></figure><p>默认情况下，它仅监视在指定文件夹中创建的新文件。可选地，可以提供第二个参数来指定要观看的事件。支持的事件是：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>create</code></td><td>创建一个新文件（默认）</td></tr><tr><td><code>modify</code></td><td>文件被修改</td></tr><tr><td><code>delete</code></td><td>文件被删除</td></tr></tbody></table><p>您可以使用逗号分隔的字符串来指定多个这些事件之一，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>   .watchPath( &#x27;/path/*.fa&#x27;, &#x27;create,modify&#x27; )<br>   .subscribe &#123; println "File created or modified: $it" &#125;<br></code></pre></td></tr></table></figure><blockquote><p>该<code>watchPath</code>工厂无休止地等待为符合指定模式和事件（一个或多个）的文件。因此，无论何时在脚本中使用它，生成的管道都将永远不会结束。</p></blockquote><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a><em>empty</em></h3><p>根据<code>empty</code>定义，工厂方法将创建一个不发出任何值的通道。</p><h2 id="绑定值"><a href="#绑定值" class="headerlink" title="绑定值"></a>绑定值</h2><p>由于在Nextflow中，通道是使用数据流变量或队列实现的。因此，发送消息等效于将值绑定到表示通信通道的对象。</p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>通道对象提供 bind() 方法，这是通过通道发送消息的基本操作。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">myChannel = Channel.create()<br>myChannel.bind( &#x27;Hello world&#x27; )<br></code></pre></td></tr></table></figure><h3 id="operator-lt-lt"><a href="#operator-lt-lt" class="headerlink" title="operator &lt;&lt;"></a>operator &lt;&lt;</h3><p>运算符<code>&lt;&lt;</code>只是bind方法的语法糖。因此，下面的示例产生与上一个相同的结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">myChannel = Channel.create()<br>myChannel << &#x27;Hello world&#x27;<br></code></pre></td></tr></table></figure><h2 id="观察事件"><a href="#观察事件" class="headerlink" title="观察事件"></a>观察事件</h2><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a><em>subscribe</em></h3><p><code>subscribe</code>方法允许每次源通道发出新值时执行用户定义功能。</p><p>发出的值隐式传递给指定的函数。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// define a channel emitting three values<br>source = Channel.from ( &#x27;alpha&#x27;, &#x27;beta&#x27;, &#x27;delta&#x27; )<br><br>// subscribe a function to the channel printing the emitted values<br>source.subscribe &#123;  println "Got: $it"  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Got: alpha<br>Got: beta<br>Got: delta<br></code></pre></td></tr></table></figure><blockquote><p>形式上，用户定义的函数是Nextflow脚本所基于<code>Closure</code>的Groovy编程语言所定义的。</p></blockquote><p>如果需要，可以使用除之外的其他名称<code>it</code>（可选地指定期望值的类型）来明确定义闭包参数，如以下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .from( &#x27;alpha&#x27;, &#x27;beta&#x27;, &#x27;lambda&#x27; )<br>    .subscribe &#123; String str -><br>        println "Got: $&#123;str&#125;; len: $&#123;str.size()&#125;"<br>     &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Got: alpha; len: 5<br>Got: beta; len: 4<br>Got: lambda; len: 6<br></code></pre></td></tr></table></figure><h3 id="onNext，onComplete和onError"><a href="#onNext，onComplete和onError" class="headerlink" title="onNext，onComplete和onError"></a>onNext，onComplete和onError</h3><p><code>subscribe</code>方法可以接受以下一个或多个事件处理程序：</p><ul><li><code>onNext</code>：注册一个在通道发出值时调用的函数。这在上面的示例中所述的带普通闭包的使用相同。</li><li><code>onComplete</code>：注册一个函数，该函数在通道发出最后一个值后调用。</li><li><code>onError</code>：注册在处理<code>onNext</code>事件时引发异常时调用的函数 。不会再呼叫<code>onNext</code>或<code>onComplete</code>。该<code>onError</code>方法将<code>Throwable</code>导致错误的参数作为其参数。</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Channel<br>    .from( 1, 2, 3 )<br>    .subscribe onNext: &#123; println it &#125;, onComplete: &#123; println &#x27;Done&#x27; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1<br>2<br>3<br>Done<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 04 | 输出 output</title>
      <link href="/posts/43064/"/>
      <url>/posts/43064/</url>
      
        <content type="html"><![CDATA[<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出声明块允许定义所使用的过程中发出所产生的结果的信道。</p><p>最多可以定义一个输出块，并且可以包含一个或多个输出声明。输出块遵循以下语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">output:<br>  <output qualifier> <output name> [into <target channel>[,channel,..]] [attribute [,..]]<br></code></pre></td></tr></table></figure><p>输出定义以输出限定符和输出名称开头，后跟关键字<code>into</code>和一个或多个通过其发送输出的通道。最后，可以指定一些可选属性。</p><p>注意，当输出名称与通道名称相同时，<code>into</code>可以省略声明的一部分。</p><p>下表中列出了可以在输出声明块中使用的限定符：</p><table><thead><tr><th>预选赛</th><th>语义的</th></tr></thead><tbody><tr><td>val</td><td>发送具有在输出通道上指定的名称的变量。</td></tr><tr><td>file</td><td>发送在输出通道上指定名称的由进程生成的文件。</td></tr><tr><td>path</td><td>发送在输出通道上指定名称的由进程生成的文件（替换<code>file</code>）。</td></tr><tr><td>env</td><td>使用在输出通道上指定的名称发送在流程环境中定义的变量。</td></tr><tr><td>stdout</td><td>通过输出通道发送已执行的进程标准输出。</td></tr><tr><td>tuple</td><td>可以通过同一输出通道发送多个值。</td></tr></tbody></table><h3 id="输出值"><a href="#输出值" class="headerlink" title="输出值"></a>输出值</h3><p><code>val</code>限定符允许输出一个值在脚本上下文中定义。</p><p>在常见的使用场景中，这是在输入声明块中定义的值，如以下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">methods = [&#x27;prot&#x27;,&#x27;dna&#x27;, &#x27;rna&#x27;]<br><br>process foo &#123;<br>  input:<br>  val x from methods<br><br>  output:<br>  val x into receiver<br><br>  """<br>  echo $x > file<br>  """<br><br>&#125;<br><br>receiver.println &#123; "Received: $it" &#125;<br></code></pre></td></tr></table></figure><p>有效的输出值是值文字，输入值标识符，过程范围中可访问的变量和值表达式。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  input:<br>  file fasta from &#x27;dummy&#x27;<br><br>  output:<br>  val x into var_channel<br>  val &#x27;BB11&#x27; into str_channel<br>  val "$&#123;fasta.baseName&#125;.out" into exp_channel<br><br>  script:<br>  x = fasta.name<br>  """<br>  cat $x > file<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出文件"><a href="#输出文件" class="headerlink" title="输出文件"></a>输出文件</h3><p><code>file</code>限定符允许输出一个或多个文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process randomNum &#123;<br><br>   output:<br>   file &#x27;result.txt&#x27; into numbers<br><br>   &#x27;&#x27;&#x27;<br>   echo $RANDOM > result.txt<br>   &#x27;&#x27;&#x27;<br><br>&#125;<br><br>numbers.subscribe &#123; println "Received: " + it.text &#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，该过程在执行时会创建一个名为的<code>result.txt</code>文件，其中包含随机数。</p><p>在输出中声明了使用相同名称的文件参数</p><p>因此当任务完成时，该文件将通过<code>numbers</code>通道发送。</p><p>与输入声明相同的通道下游进程将能够接收它。</p><p>需要注意，如果指定为输出的通道先前未在管道脚本中声明，则它将由输出声明本身隐式创建。</p><h3 id="多个输出文件"><a href="#多个输出文件" class="headerlink" title="多个输出文件"></a>多个输出文件</h3><p>当输出文件名包含<code>*</code>或<code>?</code>通配符时，它将被解释为<a href="http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob">全局</a>路径匹配器。这样可以将多个文件捕获到一个列表对象中，并将其作为唯一的输出。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process splitLetters &#123;<br><br>    output:<br>    file &#x27;chunk_*&#x27; into letters<br><br>    &#x27;&#x27;&#x27;<br>    printf &#x27;Hola&#x27; | split -b 1 - chunk_<br>    &#x27;&#x27;&#x27;<br>&#125;<br><br>letters<br>    .flatMap()<br>    .subscribe &#123; println "File: $&#123;it.name&#125; => $&#123;it.text&#125;" &#125;<br></code></pre></td></tr></table></figure><p>它打印：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">File: chunk_aa => H<br>File: chunk_ab => o<br>File: chunk_ac => l<br>File: chunk_ad => a<br></code></pre></td></tr></table></figure><p>注意</p><p>在上面的示例中，运算符<a href="https://www.nextflow.io/docs/latest/operator.html#operator-flatmap">flatMap</a>用于将<code>letters</code>通道发出的文件列表转换为独立发出每个文件对象的通道。</p><p>关于全局模式行为的一些警告：</p><ul><li>输入文件不包括在可能的匹配列表中。</li><li>球形模式与文件和目录路径匹配。</li><li>当使用两星模式<code>**</code>在目录间求助时，仅文件路径匹配，即目录不包括在结果列表中。</li></ul><p>警告</p><p>尽管与glob输出声明匹配的输入文件不包括在结果输出通道中，但是这些文件仍可以从任务暂存目录传输到目标任务工作目录。因此，为避免不必要的文件复制，建议在定义输出文件时避免使用宽松的通配符，例如。而是使用前缀或后缀命名符号将匹配文件集限制为仅预期文件，例如。<code>file &#39;*&#39;``file &#39;prefix_*.sorted.bam&#39;</code></p><p>默认情况下，与指定的glob模式匹配的所有文件都作为唯一（列表）项由通道发出。通过在输出文件声明中添加属性，还可以将每个文件作为唯一项发出。<code>mode flatten</code></p><p>通过使用该<code>mode</code>属性，可以如下所示重写前面的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process splitLetters &#123;<br><br>    output:<br>    file &#x27;chunk_*&#x27; into letters mode flatten<br><br>    &#x27;&#x27;&#x27;<br>    printf &#x27;Hola&#x27; | split -b 1 - chunk_<br>    &#x27;&#x27;&#x27;<br>&#125;<br><br>letters .subscribe &#123; println "File: $&#123;it.name&#125; => $&#123;it.text&#125;" &#125;<br></code></pre></td></tr></table></figure><p>警告</p><p>从<code>mode</code>19.10.0版开始不推荐使用该选项。 而是在下游过程中使用操作员<a href="https://www.nextflow.io/docs/latest/operator.html#operator-collect">收集</a>。</p><p>在以下链接中了解有关glob语法的更多信息。<a href="http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob">什么是glob？</a></p><h3 id="动态输出文件名"><a href="#动态输出文件名" class="headerlink" title="动态输出文件名"></a>动态输出文件名</h3><p>当需要动态表达输出文件名时，可以使用动态评估字符串来定义它，</p><p>该字符串引用在输入声明块或脚本全局上下文中定义的值。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process align &#123;<br>  input:<br>  val x from species<br>  file seq from sequences<br><br>  output:<br>  file "$&#123;x&#125;.aln" into genomes<br><br>  """<br>  t_coffee -in $seq > $&#123;x&#125;.aln<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，每次执行该过程时，都会生成一个对齐文件，其名称取决于<code>x</code>输入的实际值。</p><p>小费</p><p>使用Nextflow时，输出文件的管理是一个非常普遍的误解。使用其他工具，通常需要将输出文件组织成某种目录结构或保证唯一的文件名方案，以使结果文件不会相互覆盖，并且下游任务可以唯一地引用它们。</p><p>使用Nextflow，在大多数情况下，您无需为输出文件命名，因为每个任务都在其自己的唯一临时目录中执行，因此由不同任务生成的文件永远不会相互覆盖。通过使用<a href="https://www.nextflow.io/docs/latest/process.html#process-out-tuple">元组输出</a>限定符，也可以将元数据与输出关联，而不是将它们包含在输出文件名中。</p><p>综上所述，在可能的情况下，最好使用具有静态名称而不是动态名称的输出文件，因为这将导致代码更简单，更可移植。</p><h3 id="输出路径"><a href="#输出路径" class="headerlink" title="输出路径"></a>输出路径</h3><p>的<code>path</code>输出限定符被Nextflow版本19.10.0引入，这是一个简易替换为<code>file</code>输出限定符，因此它是后向兼容的语法和用于输入语义<code>file</code>如上所述。</p><p><code>path</code>over <code>file</code>qualifier 的主要优点在于，它允许指定多个输出来精细控制输出文件。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>glob</td><td>当<code>true</code>指定的名称被解释为glob模式（默认值：<code>true</code>）</td></tr><tr><td>hidden</td><td>当<code>true</code>隐藏的文件包含在配套的输出文件（默认：<code>false</code>）</td></tr><tr><td>followLinks</td><td>当<code>true</code>目标文件放在任何匹配的符号链接的回报（默认值：<code>true</code>）</td></tr><tr><td>type</td><td>返回的路径类型，或者<code>file</code>，<code>dir</code>或者<code>any</code>（默认值：<code>any</code>，或者<code>file</code>如果指定的文件名模式包含** -双星-符号）</td></tr><tr><td>maxDepth</td><td>要访问的最大目录级别数（默认值：无限制）</td></tr><tr><td>includeInputs</td><td>当<code>true</code>包含与输出文件全局模式匹配的任何输入文件时。</td></tr></tbody></table><p>Nextflow 19.10.0 重大更新：<code>file</code>限定符解释<code>:</code>为路径分隔符，因此<code>file &#39;foo:bar&#39;</code>  捕获文件<code>foo</code>  和<code>bar </code>。在<code>path</code>  限定符解释中，它只是一个普通的文件名字符，因此<code>path &#39;foo:bar&#39; </code>输出定义捕获与名称的输出文件<code>foo:bar</code>。</p><p>使用Nextflow 19.10.0或更高版本时，路径限定符应优先于文件，以处理进程输出文件。 </p><h3 id="输出stdout"><a href="#输出stdout" class="headerlink" title="输出stdout"></a>输出<code>stdout</code></h3><p>在<code>stdout</code>限定词中，您可以捕捉的标准输出的执行过程中的输出和发送过来的输出参数声明中指定的通道。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process echoSomething &#123;<br>    output:<br>    stdout hello<br><br>    """<br>    echo Hello world!<br>    """<br>&#125;<br><br>hello.subscribe &#123; print "I say..  $it" &#125;<br></code></pre></td></tr></table></figure><h3 id="输出env"><a href="#输出env" class="headerlink" title="输出env"></a>输出<code>env</code></h3><p><code>env</code>限定符允许您捕获在处理执行环境中定义的变量，并发送过来的输出参数声明中指定的信道：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process myTask &#123;<br>    output:<br>    env FOO into target<br>    script:<br>    &#x27;&#x27;&#x27;<br>    FOO=$(ls -la)<br>    &#x27;&#x27;&#x27;<br>&#125;<br><br>target.view &#123; "directory content: $it" &#125;<br></code></pre></td></tr></table></figure><h3 id="输出tuple"><a href="#输出tuple" class="headerlink" title="输出tuple"></a>输出<code>tuple</code></h3><p><code>tuple</code>限定符允许多个值发送到单一的 channel。</p><p>当需要将同一流程的多次执行的结果分组在一起时，此功能很有用，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">query_ch = Channel.fromPath &#x27;*.fa&#x27;<br>species_ch = Channel.from &#x27;human&#x27;, &#x27;cow&#x27;, &#x27;horse&#x27;<br><br>process blast &#123;<br><br>input:<br>  val species from query_ch<br>  file query from species_ch<br><br>output:<br>  tuple val(species), file(&#x27;result&#x27;) into blastOuts<br><br>script:<br>  """<br>  blast -db nr -query $query > result<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，对 <code>species</code>  和<code>query</code>  的每对执行BLAST任务。当任务完成时，一个新的元组（包含<code>species</code> 和 <code>result</code> 文件）将文件发送到<code>blastOuts</code>  通道 。</p><p>元组声明可以包含以下限定符及组合：<code>val</code>，<code>file</code>和<code>stdout</code>。</p><blockquote><p> 默认情况下，<strong>变量标识符被解释为值，而字符串文字则被解释为文件</strong>，因此可以使用如下所示的短符号重写上述输出元组。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">output:<br>    tuple species, &#x27;result&#x27; into blastOuts<br></code></pre></td></tr></table></figure><p>可以按照动态方式定义文件名，如<a href="https://www.nextflow.io/docs/latest/process.html#process-dynoutname">动态输出文件名</a>部分所述。</p><h3 id="可选输出"><a href="#可选输出" class="headerlink" title="可选输出"></a>可选输出</h3><p>在大多数情况下，需要一个 process  来生成输出，并将其添加到输出通道。</p><p>但是，在某些情况下，process  不生成输出的。可以添加<code>optional true</code>到输出声明中，告诉Nextflow如果未创建声明的输出，则不要使进程失败。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">output:<br>    file("output.txt") optional true into outChannel<br></code></pre></td></tr></table></figure><p>在此示例中，希望该过程生成<code>output.txt</code>文件，但是在合法丢失文件的情况下，该过程不会失败。<code>outChannel</code>仅由确实生成的那些进程填充<code>output.txt</code>。</p><h2 id="When-声明"><a href="#When-声明" class="headerlink" title="When 声明"></a>When 声明</h2><p>该<code>when</code>声明允许您定义必须按顺序执行的过程进行验证的条件。这可以是任何评估布尔值的表达式。</p><p>根据各种输入和参数的状态启用&#x2F;禁用过程执行非常有用。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process find &#123;<br>  input:<br>  file proteins<br>  val type from dbtype<br><br>  when:<br>  proteins.name =~ /^BB11.*/ && type == &#x27;nr&#x27;<br><br>  script:<br>  """<br>  blastp -query $proteins -db nr<br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 03 | 输入 input</title>
      <link href="/posts/9930/"/>
      <url>/posts/9930/</url>
      
        <content type="html"><![CDATA[<p>Nextflow  进程 (process) 彼此隔离。</p><p>输入项 (input) 定义从哪个通道 (channels) 接收输入数据。 </p><p>一次只能定义一个输入项，并且它必须包含一个或多个输入。</p><p>输入项遵循以下语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">input:<br>  <input qualifier> <input name> [from <source channel>] [attributes]<br></code></pre></td></tr></table></figure><ul><li>定义以输入限定符和输入名称开头，</li><li>关键字<code>from</code>和接收输入的实际通道。</li><li>指定一些输入可选属性。</li></ul><blockquote><p>当输入名称与通道名称相同时，<code>from</code>可以省略声明的一部分。</p></blockquote><p>输入限定符声明要接收的数据类型。Nextflow使用此信息来应用与每个限定符相关的语义规则，并根据目标执行平台（网格，云等）正确处理它。</p><p>可用的限定符是下表中列出的限定符：</p><table><thead><tr><th>预选赛</th><th>语义的</th></tr></thead><tbody><tr><td>val</td><td>可以按进程脚本中的名称访问收到的输入值。</td></tr><tr><td>env</td><td>可以使用接收到的值来设置名为指定输入名称的环境变量。</td></tr><tr><td>file</td><td>可以将接收到的值作为文件来处理，并在执行上下文中对其进行适当的暂存。</td></tr><tr><td>path</td><td>可以将接收到的值作为路径来处理，从而在执行上下文中正确地暂存文件。</td></tr><tr><td>stdin</td><td>可以将接收到的值转发到流程stdin特殊文件。</td></tr><tr><td>tuple</td><td>可以处理具有上述限定符之一的一组输入值。</td></tr><tr><td>each</td><td>可以对输入集合中的每个条目执行该过程。</td></tr></tbody></table><h3 id="输入值"><a href="#输入值" class="headerlink" title="输入值"></a>输入值</h3><p><code>val</code>限定词中，可以接收任何类型作为输入的数据。可以使用指定的输入名称在流程脚本中对其进行访问，如以下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">num = Channel.from( 1, 2, 3 )<br><br>process basicExample &#123;<br>  input:<br>  val x from num<br><br>  "echo process job $x"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，该过程执行了三次，每次从通道接收到一个值<code>num</code> 并用于处理脚本。因此，它产生类似于以下所示的输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process job 3<br>process job 1<br>process job 2<br></code></pre></td></tr></table></figure><blockquote><p>通道（channel）保证数据项都以相同的顺序传递，但因为该方法以并行方式执行时，不能保证它们以相同的顺序进行处理。在上面的示例中，值<code>3</code>是在其他值之前处理的。</p></blockquote><p>如果与<code>val</code>接收数据的通道具有相同的名称，则<code>from</code>可以省略该部分。</p><p>因此，上面的示例可以写成如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">num = Channel.from( 1, 2, 3 )<br><br>process basicExample &#123;<br>  input:<br>  val num<br><br>  "echo process job $num"<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h3><p><code>file</code>限定词允许在进程执行中处理文件。Nextflow会将其暂存在流程执行目录中，并且可以使用输入声明中指定的名称在脚本中对其进行访问。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">proteins = Channel.fromPath( &#x27;/some/path/*.fa&#x27; )<br><br>process blastThemAll &#123;<br>  input:<br>  file query_file from proteins<br><br>  "blastp -query $&#123;query_file&#125; -db nr"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，所有以后缀<code>.fa</code>结尾的文件都是通过通道发送的<code>proteins</code>。</p><p>然后，这些文件将被该进程接收，该进程将对每个文件执行BLAST查询。</p><p>当文件输入名称与通道名称相同时，<code>from</code>输入声明的一部分可以省略。</p><p>因此，上面的示例可以写成如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">proteins = Channel.fromPath( &#x27;/some/path/*.fa&#x27; )<br><br>process blastThemAll &#123;<br>  input:<br>  file proteins<br><br>  "blastp -query $proteins -db nr"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，文件系统中的文件名没有被触及，即不知道文件名也可以访问该文件，因为可以使用指定了名称的变量在流程脚本中对其进行引用在输入文件的参数声明中。</p><p>在某些情况下，的任务需要使用名称固定的文件，而不必与实际提供的文件一起更改。在这种情况下，可以通过<code>name</code>在输入文件参数声明中指定属性来指定其名称，如以下示例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">input:<br>    file query_file name &#x27;query.fa&#x27; from proteins<br></code></pre></td></tr></table></figure><p>或者使用较短的语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">input:<br>    file &#x27;query.fa&#x27; from proteins<br></code></pre></td></tr></table></figure><p>使用此方法，可以如下所示重写前面的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">proteins = Channel.fromPath( &#x27;/some/path/*.fa&#x27; )<br><br>process blastThemAll &#123;<br>  input:<br>  file &#x27;query.fa&#x27; from proteins<br><br>  "blastp -query query.fa -db nr"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中发生的是，该进程接收到的每个文件都<code>query.fa</code> 在不同的执行上下文（即，执行作业的文件夹）中使用该名称暂存，并且启动了独立的进程执行。</p><p>小费</p><p>这可以在不同时间执行process命令，而不必担心文件名更改。换句话说，Nextflow可以帮助编写由执行环境独立且脱钩的管道任务。这也是为什么应尽可能避免在管道过程中使用引用文件的绝对或相对路径的原因。</p><h3 id="多个输入文件"><a href="#多个输入文件" class="headerlink" title="多个输入文件"></a>多个输入文件</h3><p>进程可以声明一个发出值集合而不是简单值的通道作为输入文件。</p><p>在这种情况下，由输入文件参数定义的脚本变量将保存文件列表。您可以如前所示使用它，引用列表中的所有文件，或者使用常用的方括号表示法访问特定条目。</p><p>当在输入参数中定义了目标文件名并且该过程接收到文件集合时，该文件名将附加一个数字后缀，以表示其在列表中的顺序位置。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">fasta = Channel.fromPath( "/some/path/*.fa" ).buffer(size:3)<br><br>process blastThemAll &#123;<br>    input:<br>    file &#x27;seq&#x27; from fasta<br><br>    "echo seq*"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">seq1 seq2 seq3<br>seq1 seq2 seq3<br>...<br></code></pre></td></tr></table></figure><p>目标输入文件名可以包含<code>*</code>和<code>?</code>通配符，可用于控制暂存文件的名称。下表显示了如何根据接收到的输入集合的基数替换通配符。 </p><table><thead><tr><th>Cardinality</th><th>Name pattern</th><th>Staged file names</th></tr></thead><tbody><tr><td>any</td><td><code>*</code></td><td>命名为源文件</td></tr><tr><td>1</td><td><code>file*.ext</code></td><td><code>file.ext</code></td></tr><tr><td>1</td><td><code>file?.ext</code></td><td><code>file1.ext</code></td></tr><tr><td>1</td><td><code>file??.ext</code></td><td><code>file01.ext</code></td></tr><tr><td>many</td><td><code>file*.ext</code></td><td><code>file1.ext</code>, <code>file2.ext</code>, <code>file3.ext</code>, ..</td></tr><tr><td>many</td><td><code>file?.ext</code></td><td><code>file1.ext</code>, <code>file2.ext</code>, <code>file3.ext</code>, ..</td></tr><tr><td>many</td><td><code>file??.ext</code></td><td><code>file01.ext</code>, <code>file02.ext</code>, <code>file03.ext</code>, ..</td></tr><tr><td>many</td><td><code>dir/*</code></td><td>命名为源文件，在<code>dir</code>子目录中创建</td></tr><tr><td>many</td><td><code>dir??/*</code></td><td>命名为源文件，以逐步建立索引子目录例如创建<code>dir01/</code>，<code>dir02/</code>等等。</td></tr><tr><td>many</td><td><code>dir*/*</code></td><td>同上</td></tr></tbody></table><p>以下片段显示了如何在输入文件声明中使用通配符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">fasta = Channel.fromPath( "/some/path/*.fa" ).buffer(size:3)<br><br>process blastThemAll &#123;<br>    input:<br>    file &#x27;seq?.fa&#x27; from fasta<br><br>    "cat seq1.fa seq2.fa seq3.fa"<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态输入文件名"><a href="#动态输入文件名" class="headerlink" title="动态输入文件名"></a>动态输入文件名</h3><p>使用<code>name</code>file子句或短字符串表示法指定输入文件名时，可以将其他输入值用作文件名字符串中的变量。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process simpleCount &#123;<br>  input:<br>  val x from species<br>  file "$&#123;x&#125;.fa" from genomes<br><br>  """<br>  cat $&#123;x&#125;.fa | grep &#x27;>&#x27;<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，使用<code>x</code>输入值的当前值设置输入文件名。</p><p>这允许使用与当前执行上下文一致的名称在脚本工作目录中暂存输入文件。</p><p>注意：</p><p>在大多数情况下，您不需要使用动态文件名，因为每个进程都在其自己的私有临时目录中执行，并且输入文件将由Nextflow自动登台到该目录中。这样可以保证具有相同名称的输入文件不会相互覆盖。</p><h3 id="输入“路径”类型"><a href="#输入“路径”类型" class="headerlink" title="输入“路径”类型"></a>输入“路径”类型</h3><p>的<code>path</code>输入限定符被Nextflow版本19.10.0引入，这是一个简易替换为<code>file</code>限定符，因此它是后向兼容的语法和用于输入语义<code>file</code>如上所述。</p><p><code>file</code>和<code>path</code>qualifier 之间的重要区别是，第一个期望输入的值是<em>文件</em>对象。当输入是其他类型时，它会自动转换为字符串并将其保存到临时文件中。在某些用例中这可能很有用，但在大多数情况下却是棘手的。</p><p>所述<code>path</code>限定词代替解释字符串值作为输入文件的路径位置，并自动转换为一个文件对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  input:<br>    path x from &#x27;/some/data/file.txt&#x27;<br>  """<br>    your_command --in $x<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>注意</p><p>提供的输入值应该代表即字符串值的绝对路径位置 <strong>必须</strong>与前缀&#x2F;字符或与受支持的协议的URI即<code>file://</code>， <code>http://</code>，<code>s3://</code>等，并且它不能包含特殊字符（例如<code>\n</code>，等）。</p><p>该选项<code>stageAs</code>使您可以控制如何在任务工作目录中命名文件，并提供特定的名称或名称模式，如“ <a href="https://www.nextflow.io/docs/latest/process.html#multiple-input-files">多个输入文件”</a> 部分所述：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  input:<br>    path x, stageAs: &#x27;data.txt&#x27; from &#x27;/some/data/file.txt&#x27;<br>  """<br>    your_command --in data.txt<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>小费</p><p>所述<code>path</code>限定词应当优于<code>file</code>使用Nextflow 19.10.0或更高时，手柄处理输入文件。</p><h3 id="输入“-stdin”"><a href="#输入“-stdin”" class="headerlink" title="输入“ stdin”"></a>输入“ stdin”</h3><p>的<code>stdin</code>输入限定允许您从一信道接收到所述值的转发 <a href="http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29">标准输入</a> 由所述处理中执行的命令的。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">str = Channel.from(&#x27;hello&#x27;, &#x27;hola&#x27;, &#x27;bonjour&#x27;, &#x27;ciao&#x27;).map &#123; it+&#x27;\n&#x27; &#125;<br><br>process printAll &#123;<br>   input:<br>   stdin str<br><br>   """<br>   cat -<br>   """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>它将输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">hola<br>bonjour<br>ciao<br>hello<br></code></pre></td></tr></table></figure><h3 id="输入“-env”类型"><a href="#输入“-env”类型" class="headerlink" title="输入“ env”类型"></a>输入“ env”类型</h3><p>的<code>env</code>限定符允许定义基于从信道接收到的值的过程中的执行上下文的环境变量。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">str = Channel.from(&#x27;hello&#x27;, &#x27;hola&#x27;, &#x27;bonjour&#x27;, &#x27;ciao&#x27;)<br><br>process printEnv &#123;<br><br>    input:<br>    env HELLO from str<br><br>    &#x27;&#x27;&#x27;<br>    echo $HELLO world!<br>    &#x27;&#x27;&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">hello world!<br>ciao world!<br>bonjour world!<br>hola world!<br></code></pre></td></tr></table></figure><h3 id="输入“设置”类型"><a href="#输入“设置”类型" class="headerlink" title="输入“设置”类型"></a>输入“设置”类型</h3><p>警告</p><p>该组输入型已被弃用。请参阅元组。</p><h3 id="输入“-tuple”"><a href="#输入“-tuple”" class="headerlink" title="输入“ tuple”"></a>输入“ tuple”</h3><p>在<code>tuple</code>预选赛中，您可以将多个参数一个参数的定义。当流程在输入中接收需要单独处理的值的元组时，这将很有用。元组中的每个元素都与具有<code>tuple</code>定义的相应元素相关联。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">values = Channel.of( [1, &#x27;alpha&#x27;], [2, &#x27;beta&#x27;], [3, &#x27;delta&#x27;] )<br><br>process tupleExample &#123;<br>    input:<br>    tuple val(x), file(&#x27;latin.txt&#x27;) from values<br><br>    """<br>    echo Processing $x<br>    cat - latin.txt > copy<br>    """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>tuple</code>参数用于定义值<code>x</code>和文件<code>latin.txt</code>，文件将从同一通道接收值。</p><p>在<code>tuple</code>声明的项目可以通过使用下面的限定词来定义：<code>val</code>，<code>env</code>，<code>file</code>和<code>stdin</code>。</p><p>通过应用以下替换规则，可以使用较短的符号：</p><table><thead><tr><th>长</th><th>短</th></tr></thead><tbody><tr><td>值（x）</td><td>X</td></tr><tr><td>文件（x）</td><td>（不支持）</td></tr><tr><td>文档名称’）</td><td>‘名称’</td></tr><tr><td>文件（x：’名称’）</td><td>x：“姓名”</td></tr><tr><td>标准输入</td><td>‘-‘</td></tr><tr><td>env（x）</td><td>（不支持）</td></tr></tbody></table><p>因此，前面的示例可以重写如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">values = Channel.of( [1, &#x27;alpha&#x27;], [2, &#x27;beta&#x27;], [3, &#x27;delta&#x27;] )<br><br>process tupleExample &#123;<br>    input:<br>    tuple x, &#x27;latin.txt&#x27; from values<br><br>    """<br>    echo Processing $x<br>    cat - latin.txt > copy<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>可以按<em>动态</em>方式定义文件名，如“ <a href="https://www.nextflow.io/docs/latest/process.html#dynamic-input-file-names">动态输入文件名”</a>部分中所述。</p><h3 id="输入中继器"><a href="#输入中继器" class="headerlink" title="输入中继器"></a>输入中继器</h3><p>在<code>each</code>预选赛中，您可以重复流程的执行每个项目集合中，每收到一个新的数据的时间。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sequences = Channel.fromPath(&#x27;*.fa&#x27;)<br>methods = [&#x27;regular&#x27;, &#x27;expresso&#x27;, &#x27;psicoffee&#x27;]<br><br>process alignSequences &#123;<br>  input:<br>  file seq from sequences<br>  each mode from methods<br><br>  """<br>  t_coffee -in $seq -mode $mode > result<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，每次过程接收到序列文件作为输入时，该文件都会执行<em>三个</em>任务，这些任务运行带有不同<code>mode</code>参数值的T型咖啡对齐。当您需要为一组给定的参数重复相同的任务时，这很有用。</p><p>由于0.25+版以上的输入中继器也可以应用于文件。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sequences = Channel.fromPath(&#x27;*.fa&#x27;)<br>methods = [&#x27;regular&#x27;, &#x27;expresso&#x27;]<br>libraries = [ file(&#x27;PQ001.lib&#x27;), file(&#x27;PQ002.lib&#x27;), file(&#x27;PQ003.lib&#x27;) ]<br><br>process alignSequences &#123;<br>  input:<br>  file seq from sequences<br>  each mode from methods<br>  each file(lib) from libraries<br><br>  """<br>  t_coffee -in $seq -mode $mode -lib $lib > result<br>  """<br>&#125;<br></code></pre></td></tr></table></figure><p>注意</p><p>声明多个中继器时，将对它们的每个<em>组合</em>执行该过程。</p><p>在后面的示例中，对于<code>sequences</code>通道发出的任何序列输入文件，将执行6个比对，其中3个<code>regular</code>针对每个库文件使用该方法，其他3个<code>expresso</code>始终针对相同的库文件使用该方法。</p><p>暗示</p><p>如果需要在n个元组元素（而不是简单的值或文件）上重复执行过程，请创建一个通道，根据需要组合输入值以多次触发过程执行。在这方面，请参见<a href="https://www.nextflow.io/docs/latest/operator.html#operator-combine">Combine</a>，<a href="https://www.nextflow.io/docs/latest/operator.html#operator-cross">cross</a>和<a href="https://www.nextflow.io/docs/latest/operator.html#operator-phase">phase</a>运算符。</p><h3 id="了解多个输入通道的工作方式"><a href="#了解多个输入通道的工作方式" class="headerlink" title="了解多个输入通道的工作方式"></a>了解多个输入通道的工作方式</h3><p>流程的关键特征是能够处理来自多个通道的输入。</p><p>当将两个或多个通道声明为过程输入时，过程将停止，直到存在完整的输入配置即。它从所有声明为输入的通道中接收输入值。</p><p>验证此条件后，它将消耗来自各个通道的输入值，并生成任务执行，然后重复相同的逻辑，直到一个或多个通道不再有内容。</p><p>这意味着通道值是一个接一个地连续消耗的，即使其他通道中还有其他值，第一个空通道也会导致进程执行停止。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process foo &#123;<br>  echo true<br>  input:<br>  val x from Channel.from(1,2)<br>  val y from Channel.from(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)<br>  script:<br>   """<br>   echo $x and $y<br>   """<br>&#125;<br></code></pre></td></tr></table></figure><p>该过程<code>foo</code>执行两次，因为第一个输入通道仅提供两个值，因此<code>c</code>元素被丢弃。它打印：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1 and a<br>2 and b<br></code></pre></td></tr></table></figure><p>警告</p><p>当使用<em>Value通道</em>（又称为<em>Singleton通道）</em>时，将应用不同的语义。</p><p>这种通道是通过<a href="https://www.nextflow.io/docs/latest/channel.html#channel-value">Channel.value</a>工厂方法创建的，或者在流程输入在<code>from</code>子句中指定简单值时隐式创建的。</p><p>根据定义，<em>值通道</em>绑定到单个值，并且可以无限制地读取该值而不消耗其内容。</p><p>这些属性使得将<em>值通道</em>与一个或多个（队列）通道混合时，不会影响仅取决于其他通道的过程终止，并且其内容会重复应用。</p><p>为了更好地理解此行为，请将前面的示例与以下示例进行比较：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process bar &#123;<br>  echo true<br>  input:<br>  val x from Channel.value(1)<br>  val y from Channel.from(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)<br>  script:<br>   """<br>   echo $x and $y<br>   """<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码段执行该<code>bar</code>过程三次，因为第一个输入是一个<em>值通道</em>，因此可以根据需要读取其内容多次。进程终止由第二通道的内容确定。它打印：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">1 and a<br>1 and b<br>1 and c<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 02 | 脚本</title>
      <link href="/posts/15984/"/>
      <url>/posts/15984/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本是字符串声明，它定义了由过程执行到执行任务的命令。</p><p>一个进程仅包含一个脚本块，并且当该进程包含输入和输出声明时，它必须是最后一个语句。</p><p>输入的字符串在主机系统中作为<a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a>脚本执行。它可以是通常在终端 shell 程序或通用Bash脚本中使用的任何命令，脚本或它们的组合。</p><p>可以在脚本语句中使用的命令的唯一限制是目标执行系统中这些程序的可用性。</p><p>脚本可以是简单字符串或多行字符串，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process doMoreThings &#123;<br><br>  """<br>  blastp -db $db -query query.fa -outfmt 6 > blast_result<br>  cat blast_result | head -n 10 | cut -f 2 > top_hits<br>  blastdbcmd -db $db -entry_batch top_hits > sequences<br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用单引号或双引号定义字符串，并使用三个单引号或三个双引号字符定义多行字符串。</p><p>需要注意，在Bash中，以字符分隔的字符串<code>&quot;</code>支持变量替换，而以字符分隔的字符串<code>&#39;</code>则不支持。</p><p>在上面的代码片段中，<code>$db</code>变量被替换为管道脚本中已经定义的实际值。</p><p>需要在脚本中访问系统环境变量时，有两个选择。</p><ul><li>首选就像使用单引号字符串定义脚本块一样容易。例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process printPath &#123;<br><br>   &#x27;&#x27;&#x27;<br>   echo The path is: $PATH<br>   &#x27;&#x27;&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该解决方案的缺点是，您将无法在脚本中访问在管道脚本上下文中定义的变量。</p><ul><li>要解决此问题，请使用双引号字符串定义脚本，并通过在系统环境变量前添加反斜杠字符来对其进行转义<code>\</code>，如以下示例所示：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process doOtherThings &#123;<br><br>  """<br>  blastp -db \$DB -query query.fa -outfmt 6 > blast_result<br>  cat blast_result | head -n $MAX | cut -f 2 > top_hits<br>  blastdbcmd -db \$DB -entry_batch top_hits > sequences<br>  """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，<code>$MAX</code>必须在<strong>管道脚本定义变量</strong>。 在执行脚本之前，<strong>Nextflow</strong>用实际值替换它。</p><p><code>$DB</code>变量必须存在于<strong>脚本执行环境</strong>中，并且<strong>Bash解释器</strong>将其替换为实际值。</p><p>另外，可以使用<a href="https://www.nextflow.io/docs/latest/process.html#process-shell">Shell</a>块定义，该定义允许脚本包含Bash和Nextflow变量，而不必转义第一个。</p><h3 id="使用其他语言的脚本"><a href="#使用其他语言的脚本" class="headerlink" title="使用其他语言的脚本"></a>使用其他语言的脚本</h3><p>默认情况下，Nextflow流程脚本为Bash脚本，但您不仅限于此。</p><p>您可以使用自己喜欢的脚本语言（例如Perl，Python，Ruby，R等），甚至可以将它们混合在同一管道中。</p><p>管道可以由执行不同的任务的进程组成。使用Nextflow，您可以选择更适合指定进程执行的任务的脚本语言。</p><p>例如，对于某些进程，R可能比Perl有用，在其他进程中，您可能需要使用Python，因为它提供了对库或API等的更好访问。</p><p>要使用<strong>Bash以外的脚本</strong>，只需使用相应的<a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a>声明启动流程脚本 。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process perlStuff &#123;<br><br>    """<br>    #!/usr/bin/perl<br><br>    print &#x27;Hi there!&#x27; . &#x27;\n&#x27;;<br>    """<br><br>&#125;<br><br>process pyStuff &#123;<br><br>    """<br>    #!/usr/bin/python<br><br>    x = &#x27;Hello&#x27;<br>    y = &#x27;world!&#x27;<br>    print "%s - %s" % (x,y)<br>    """<br><br>&#125;<br></code></pre></td></tr></table></figure><p>由于解释器二进制文件的实际位置可以在各个平台上变化，因此为了使脚本更易于移植，在声明时，使用<code>#!/usr/bin/env perl</code>。这是使用<code>env</code>shell命令，后跟解释器的名称，而不是其绝对路径。</p><h3 id="根据条件执行不同脚本"><a href="#根据条件执行不同脚本" class="headerlink" title="根据条件执行不同脚本"></a>根据条件执行不同脚本</h3><p>复杂的过程脚本可能需要评估对输入参数的条件，或使用传统的流量控制语句（即<code>if</code>，<code>switch</code>等），根据当前输入的配置，以执行特定的脚本命令。</p><p>流程脚本可以通过简单地在脚本块前面加上关键字来包含条件语句<code>script:</code>。</p><p>然后，解释器将评估以下所有语句作为必须返回要执行的脚本字符串的代码块。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">seq_to_align = ...<br>mode = &#x27;tcoffee&#x27;<br><br>process align &#123;<br>    input:<br>    file seq_to_aln from sequences<br><br>    script:<br>    if( mode == &#x27;tcoffee&#x27; )<br>        """<br>        t_coffee -in $seq_to_aln > out_file<br>        """<br><br>    else if( mode == &#x27;mafft&#x27; )<br>        """<br>        mafft --anysymbol --parttree --quiet $seq_to_aln > out_file<br>        """<br><br>    else if( mode == &#x27;clustalo&#x27; )<br>        """<br>        clustalo -i $seq_to_aln -o out_file<br>        """<br><br>    else<br>        error "Invalid alignment mode: $&#123;mode&#125;"<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，该过程将根据<code>mode</code>参数的值执行脚本片段。默认情况下它将执行<code>tcoffee</code>命令，将<code>mode</code>变量更改为<code>mafft</code>or <code>clustalo</code>值，其他分支将被执行。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>可以使用模板文件将流程脚本外部化，该模板文件可以在不同的流程之间重复使用，并且可以通过整体管道执行独立地进行测试。</p><p>模板只是Nextflow可以通过使用如下<code>template</code>功能执行的shell脚本文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process template_example &#123;<br><br>    input:<br>    val STR from &#x27;this&#x27;, &#x27;that&#x27;<br><br>    script:<br>    template &#x27;my_script.sh&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Nextflow <code>my_script.sh</code>在目录<code>templates</code>中寻找模板文件，该目录必须存在于Nextflow脚本文件所在的文件夹中（可以使用绝对模板路径提供任何其他位置）。</p><p>模板脚本可以包含基础系统可以执行的任何代码。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">#!/bin/bash<br>echo "process started at `date`"<br>echo $STR<br>:<br>echo "process completed"<br></code></pre></td></tr></table></figure><p>注意<code>$</code>，当脚本作为Nextflow模板运行时，<code>$</code>被解释为Nextflow变量占位符，而单独运行时，被评估为Bash变量。这对于自主地（即独立于Nextflow执行）测试脚本非常有用。</p><p>您只需为脚本中存在的每个Nextflow变量提供一个Bash环境变量。例如，可以在shell终端中输入以下命令来执行上述脚本：<code>STR=&#39;foo&#39; bash templates/my_script.sh</code></p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>该<code>shell</code>块是一个字符串语句，用于定义由进程执行以执行其任务的<em>shell</em>命令。它是<a href="https://www.nextflow.io/docs/latest/process.html#process-script">Script</a>定义的替代方案，但有重要区别，它使用感叹号<code>!</code>字符作为Nextflow变量的变量占位符，代替了通常的美元字符。</p><p>这样，可以在同一段代码中同时使用Nextflow和Bash变量，而不必逃避后者，并使流程脚本更具可读性和易于维护。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process myTask &#123;<br><br>    input:<br>    val str from &#x27;Hello&#x27;, &#x27;Hola&#x27;, &#x27;Bonjour&#x27;<br><br>    shell:<br>    &#x27;&#x27;&#x27;<br>    echo User $USER says !&#123;str&#125;<br>    &#x27;&#x27;&#x27;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的琐碎示例中，<code>$USER</code>变量由Bash解释器管理，而<code>!&#123;str&#125;</code>作为由Nextflow管理的流程输入变量进行处理。</p><p>注意</p><ul><li>Shell脚本定义要求使用单引号<code>&#39;</code>分隔的字符串。使用双引号<code>&quot;</code> 分隔的字符串时，美元变量照常解释为Nextflow变量。请参阅<a href="https://www.nextflow.io/docs/latest/script.html#string-interpolation">字符串插值</a>。</li><li>感叹号前缀变量始终需要用大括号括起来，即被忽略<code>!&#123;str&#125;</code>时<code>!str</code>是有效变量。</li><li>Shell脚本支持使用文件<a href="https://www.nextflow.io/docs/latest/process.html#process-template">模板</a>机制。相同的规则适用于脚本模板中定义的变量。</li></ul><h3 id="本机执行"><a href="#本机执行" class="headerlink" title="本机执行"></a>本机执行</h3><p>Nextflow进程可以执行除系统脚本以外的本机代码，如前几段所示。</p><p>这意味着，您无需指定要作为字符串脚本执行的process命令，而是可以提供一种或多种语言语句来定义它，就像在其余管道脚本中一样。只需使用<code>exec:</code>关键字启动脚本定义块，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">x = Channel.from( &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)<br><br>process simpleSum &#123;<br>    input:<br>    val x<br><br>    exec:<br>    println "Hello Mr. $x"<br>&#125;<br></code></pre></td></tr></table></figure><p>将显示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Hello Mr. b<br>Hello Mr. a<br>Hello Mr. c<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 流程自动化 </tag>
            
            <tag> 流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化流程搭建 01 | Nextflow的介绍与安装</title>
      <link href="/posts/12151/"/>
      <url>/posts/12151/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>生信流程搭建一般有 Shell，Python，Galaxy等流派，为了去尽可能的了解生信流程的搭建过程及压榨计算机性能。我这里使用 Nextflow 作为流程搭建工具，它有着很多强大的功能：</p><ul><li>简化数据密集型pipelines的编写 </li><li>胶水特性：只要可以在Linux系统中运行的程序或不同的编程语言脚本，都可以放在流程中</li><li>支持并行计算环境 </li><li>支持集群</li><li>可重用性高</li></ul><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>使用conda 安装</p><ul><li>安装 conda 环境：<a href="https://blog.csdn.net/u011262253/article/details/88828229">https://blog.csdn.net/u011262253/article/details/88828229</a> </li><li>使用命令安装：<code>conda install nextflow</code></li></ul><h3 id="三、流程的基本构成：Processes"><a href="#三、流程的基本构成：Processes" class="headerlink" title="三、流程的基本构成：Processes"></a>三、流程的基本构成：<em>Processes</em></h3><p>语法格式：</p><figure class="highlight groovy"><table><tr><td class="code"><pre class=" language-hljs groovy">process &lt; name &gt; &#123;<br><br>   [ directives ]<br><br>   <span class="hljs-symbol">input:</span><br>    &lt; process inputs &gt;<br><br>   <span class="hljs-symbol">output:</span><br>    &lt; process outputs &gt;<br><br>   <span class="hljs-symbol"><code class="language-hljs groovy">process &lt; name &gt; &#123;<br><br>   [ directives ]<br><br>   <span class="hljs-symbol">input:</span><br>    &lt; process inputs &gt;<br><br>   <span class="hljs-symbol">output:</span><br>    &lt; process outputs &gt;<br><br>   <span class="hljs-symbol">when:</span><br>    < condition ><br><br>   [script|shell|exec]:<br>   < user script to be executed ><br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到包含几个模块：</p><ul><li>input：输入项</li><li>output：输出项</li><li>when：条件执行</li><li>script|shell|exec：执行脚本</li></ul><p><strong>举个例子：</strong></p><p>新建文件：<code>first_nextflow.nf</code></p><figure class="highlight groovy"><table><tr><td class="code"><pre class=" language-hljs groovy">process sayHello &#123;<br>    echo <span class="hljs-literal">true</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    echo &#x27;Hello world!&#x27; &gt; file</span><br><span class="hljs-string"><code class="language-hljs groovy">process sayHello &#123;<br>    echo <span class="hljs-literal">true</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    echo &#x27;Hello world!&#x27; &gt; file</span><br><span class="hljs-string">    """</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><p><code>nextflow run first_nextflow.nf</code></p><p>结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MzEvYmFLcjZpSThBdmI0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>一个流程里可以写多个 processes，一起构成一个完整的流程。</p><p>Processes 间的通信是通过 input， output 来连接 。</p><h3 id="四、第一个脚本"><a href="#四、第一个脚本" class="headerlink" title="四、第一个脚本"></a>四、第一个脚本</h3><p>将以下示例复制到喜欢的文本编辑器中，然后将其保存到名为 <code>tutorial.nf</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">#!/usr/bin/env nextflow<br><br>params.str = &#x27;Hello world!&#x27;<br><br>process splitLetters &#123;<br><br>    output:<br>    file &#x27;chunk_*&#x27; into letters<br><br>    """<br>    printf &#x27;$&#123;params.str&#125;&#x27; | split -b 6 - chunk_<br>    """<br>&#125;<br><br><br>process convertToUpper &#123;<br><br>    input:<br>    file x from letters.flatten()<br><br>    output:<br>    stdout result<br><br>    """<br>    cat $x | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;<br>    """<br>&#125;<br><br>result.view &#123; it.trim() &#125;<br></code></pre></td></tr></table></figure><p>该脚本定义了两个 Processes。</p><p>第一个将字符串拆分为6个字符，然后将每个字符串写入带有前缀的文件中，</p><p><code>chunk_</code>第二个接收这些文件并将其内容转换为大写字母。</p><p>最后，字符串在<code>result</code>输出，最终输<code>view</code>打印 。</p><p>通过在终端中输入以下命令来执行脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">nextflow run tutorial.nf<br></code></pre></td></tr></table></figure><p>它将输出类似于以下文本的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">N E X T F L O W  ~  version 19.04.0<br>executor >  local (3)<br>[69/c8ea4a] process > splitLetters   [100%] 1 of 1 ✔<br>[84/c8b7f1] process > convertToUpper [100%] 2 of 2 ✔<br>HELLO<br>WORLD!<br></code></pre></td></tr></table></figure><p>可以看到第一个 Processes 执行了一次，第二个过程执行了两次。最后，字符串被打印出来。</p><p><code>convertToUpper</code> Processes 是并行执行的，因此不能保证处理第一个拆分的字符（HELLO）将在执行第二个拆分的字符（WORLD！）之前执行。</p><p>因此，很有可能将以不同的顺序打印出最终结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">WORLD!<br>HELLO<br></code></pre></td></tr></table></figure><blockquote><p>十六进制数字（如<code>22/7548fa</code>）标识唯一的流程执行。这些数字也是执行每个进程的目录的前缀。可以检查由它们生成的文件，使用这些数字来查找特定于进程的执行路径。</p></blockquote><h5 id="修改并恢复"><a href="#修改并恢复" class="headerlink" title="修改并恢复"></a>修改并恢复</h5><p>Nextflow跟踪管道中执行的所有进程。如果修改脚本的某些部分，则仅重新执行实际更改的进程。不会修改未更改的进程，而是使用缓存结果。</p><p>所以，在测试或修改管道的一部分而不必从头开始执行。</p><p>接下来，修改上一个示例中的<code>convertToUpper</code>流程，将流程脚本替换为字符串，使流程如下所示：<code>rev $x</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">process convertToUpper &#123;<br><br>    input:<br>    file x from letters<br><br>    output:<br>    stdout result<br><br>    """<br>    rev $x<br>    """<br>&#125;<br></code></pre></td></tr></table></figure><p>然后以相同的名称保存文件，并通过<code>-resume</code>在命令行中添加选项来执行该文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">nextflow run tutorial.nf -resume<br></code></pre></td></tr></table></figure><p>它将输出类似于以下内容的输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">N E X T F L O W  ~  version 19.04.0<br>executor >  local (2)<br>[69/c8ea4a] process > splitLetters   [100%] 1 of 1, cached: 1 ✔<br>[d0/e94f07] process > convertToUpper [100%] 2 of 2 ✔<br>olleH<br>!dlrow<br></code></pre></td></tr></table></figure><p>将看到<code>splitLetters</code>实际上跳过了流程的执行（流程ID相同），并且从缓存中检索了其结果。第二个过程按预期执行，打印反转的字符串。</p><blockquote><p>默认情况下，管道结果缓存在目录中<code>$PWD/work</code>。根据的脚本，此文件夹可能会占用大量磁盘空间。如果确定不会继续执行管道，请定期清理此文件夹。</p></blockquote><h5 id="管道参数"><a href="#管道参数" class="headerlink" title="管道参数"></a>管道参数</h5><p>管道参数可以通过在变量名前添加前缀<code>params</code>（用点字符分隔）来简单声明。可以在命令行上通过在参数名称前添加双破折号来指定其值，即<code>--paramName</code></p><p>接下来，指定一个不同的输入字符串参数，然后执行前面的示例，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">nextflow run tutorial.nf --str &#x27;Bonjour le monde&#x27;<br></code></pre></td></tr></table></figure><p>在命令行上指定的字符串将覆盖参数的默认值。输出将如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">N E X T F L O W  ~  version 19.04.0<br>executor >  local (4)<br>[8b/16e7d7] process > splitLetters   [100%] 1 of 1 ✔<br>[eb/729772] process > convertToUpper [100%] 3 of 3 ✔<br>m el r<br>edno<br>uojnoB<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生信流程 </tag>
            
            <tag> Nextflow </tag>
            
            <tag> 自动化流程 </tag>
            
            <tag> 流程搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 使用 ORM 操作数据库详解</title>
      <link href="/posts/18398/"/>
      <url>/posts/18398/</url>
      
        <content type="html"><![CDATA[<h3 id="ORM-是个啥？"><a href="#ORM-是个啥？" class="headerlink" title="ORM 是个啥？"></a>ORM 是个啥？</h3><p>在python中的一个默认的编写规范是一切皆对象，这样做使得代码简洁，结构清晰，便于维护和重用代码，同时极大的提升开发效率。</p><p>同样在操作数据库时，一般我们用SQL语句来实现操作，但是放在Python中是一串冗长的字符串，不利于调试和修改，更不符合上面提到的规范。</p><p>所以，有大佬就提出ORM来替代原生的SQL语句，说白了<strong>ORM</strong> 就是要给缩写，代表着 <strong>对象-关系-映射</strong> </p><table><thead><tr><th>简写</th><th>全称</th><th>中文</th></tr></thead><tbody><tr><td>O</td><td>Object</td><td>对象</td></tr><tr><td>R</td><td>Relational</td><td>关系</td></tr><tr><td>M</td><td>Mapping</td><td>映射</td></tr></tbody></table><p>有了ORM，我们来看它与实际的数据库是怎么联系起来的：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvTFNpaDNZWG5yN3RlLnBuZw?x-oss-process=image/format,png" alt="mark"></p><table><thead><tr><th>数据库</th><th>ORM</th></tr></thead><tbody><tr><td>数据库的表（table ）</td><td>类（class）</td></tr><tr><td>记录，行数据（record）</td><td>对象（object）</td></tr><tr><td>字段（field）</td><td>对象的属性（attribute）</td></tr></tbody></table><h3 id="ORM相对原始SQL的优劣势"><a href="#ORM相对原始SQL的优劣势" class="headerlink" title="ORM相对原始SQL的优劣势"></a>ORM相对原始SQL的优劣势</h3><ul><li><strong>优势</strong>：<ul><li>专注业务逻辑开发，提升开发效率</li><li>易于更新维护，重用代码</li><li>会自动完成比如数据消毒，预处理，事务等功能</li><li>不用编写复杂的SQL语句</li></ul></li><li><strong>劣势</strong>：<ul><li>牺牲执行效率，增加查询时间</li><li>无法操作底层数据库，无法实现某些复杂操作</li><li>遗忘SQL语句编写</li></ul></li></ul><h3 id="怎么选择原生SQL和ORM"><a href="#怎么选择原生SQL和ORM" class="headerlink" title="怎么选择原生SQL和ORM"></a>怎么选择原生SQL和ORM</h3><ul><li>对于复杂的SQL语句或数据库层面，推荐使用原始SQL</li><li>对于要处理复杂的业务逻辑，加快开发，推荐使用ORM</li><li>ORM 相对 原始SQL在一般的业务中，损耗其实并不高，可以忽略不计</li></ul><h2 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h2><p>新建项目</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvdmJicUxpbXlMU2tyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>配置数据库</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvRFhXZk1nZ2dIVTFrLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>配置模型</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvT2hRT1VSN25mZ3B2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="字段类型和参数"><a href="#字段类型和参数" class="headerlink" title="字段类型和参数"></a>字段类型和参数</h2><h3 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h3><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 9:45</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Field</span>(models.Model):<br>    <span class="hljs-comment"># 自增字段</span><br>    Auto = models.AutoField()<br>    <span class="hljs-comment"># 自增字段，最大值可拓展到更大</span><br>    BigAuto = models.BigAutoField()<br><br>    <span class="hljs-comment"># 二进制数据</span><br>    Binary = models.BinaryField()<br><br>    <span class="hljs-comment"># 布尔型</span><br>    Boolean = models.BooleanField()<br>    NullBoolean = models.NullBooleanField() <span class="hljs-comment"># 允许为空的布尔型</span><br><br>    <span class="hljs-comment"># 整型</span><br>    PositiveSmallInterger = models.PositiveSmallIntegerField()  <span class="hljs-comment"># 长度为 5字节正整数</span><br>    SmallIntegerField = models.SmallIntegerField()   <span class="hljs-comment"># 长度为 6字节整数</span><br>    PositiveIntegerField = models.PositiveIntegerField()   <span class="hljs-comment"># 长度为 10字节正整数</span><br>    IntegerField = models.IntegerField()   <span class="hljs-comment"># 长度为 11字节正整数</span><br>    BigIntegerField = models.BigIntegerField()   <span class="hljs-comment"># 长度为 20字节正整数</span><br><br>    <span class="hljs-comment"># 字符串类型</span><br>    Char = models.CharField()  <span class="hljs-comment"># varchar</span><br>    Text = models.TextField()  <span class="hljs-comment"># longtext</span><br><br>    <span class="hljs-comment"># 时间日期类型</span><br>    Date = models.DateField()  <span class="hljs-comment"># 年月日</span><br>    DateTime = models.DateTimeField()  <span class="hljs-comment"># 年月日时分秒</span><br>    Duration = models.DurationField()  <span class="hljs-comment"># int，Python timedelta实现</span><br><br>    <span class="hljs-comment"># 浮点型</span><br>    Float = models.FloatField()<br>    Decimal = models.DecimalField()  <span class="hljs-comment"># 需要指定整数或小数有多少位</span><br><br>    <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 9:45</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Field</span>(models.Model):<br>    <span class="hljs-comment"># 自增字段</span><br>    Auto = models.AutoField()<br>    <span class="hljs-comment"># 自增字段，最大值可拓展到更大</span><br>    BigAuto = models.BigAutoField()<br><br>    <span class="hljs-comment"># 二进制数据</span><br>    Binary = models.BinaryField()<br><br>    <span class="hljs-comment"># 布尔型</span><br>    Boolean = models.BooleanField()<br>    NullBoolean = models.NullBooleanField() <span class="hljs-comment"># 允许为空的布尔型</span><br><br>    <span class="hljs-comment"># 整型</span><br>    PositiveSmallInterger = models.PositiveSmallIntegerField()  <span class="hljs-comment"># 长度为 5字节正整数</span><br>    SmallIntegerField = models.SmallIntegerField()   <span class="hljs-comment"># 长度为 6字节整数</span><br>    PositiveIntegerField = models.PositiveIntegerField()   <span class="hljs-comment"># 长度为 10字节正整数</span><br>    IntegerField = models.IntegerField()   <span class="hljs-comment"># 长度为 11字节正整数</span><br>    BigIntegerField = models.BigIntegerField()   <span class="hljs-comment"># 长度为 20字节正整数</span><br><br>    <span class="hljs-comment"># 字符串类型</span><br>    Char = models.CharField()  <span class="hljs-comment"># varchar</span><br>    Text = models.TextField()  <span class="hljs-comment"># longtext</span><br><br>    <span class="hljs-comment"># 时间日期类型</span><br>    Date = models.DateField()  <span class="hljs-comment"># 年月日</span><br>    DateTime = models.DateTimeField()  <span class="hljs-comment"># 年月日时分秒</span><br>    Duration = models.DurationField()  <span class="hljs-comment"># int，Python timedelta实现</span><br><br>    <span class="hljs-comment"># 浮点型</span><br>    Float = models.FloatField()<br>    Decimal = models.DecimalField()  <span class="hljs-comment"># 需要指定整数或小数有多少位</span><br><br>    <span class="hljs-comment"># 高级字段</span><br>    Email = models.EmailField()<br>    Image = models.ImageField()<br>    File = models.FileField()<br>    FilePath = models.FilePathField()<br>    URL = models.URLField()<br>    UUID = models.UUIDField()<br></code></pre></td></tr></table></figure><h3 id="关系型字段"><a href="#关系型字段" class="headerlink" title="关系型字段"></a>关系型字段</h3><p>一对一（OneToOneField）</p><p>多对一（ForeignKey）</p><p>多对多（ManyToManyField）</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(models.Model):<br>    one2one = models.OneToOneField(Field)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(models.Model):<br>    one2one = models.ForeignKey(A)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(models.Model):<br>    one2one = models.OneToOneField(Field)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(models.Model):<br>    one2one = models.ForeignKey(A)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(models.Model):<br>    one2one = models.ManyToManyField(B)<br></code></pre></td></tr></table></figure><h3 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h3><ul><li><strong>所有字段都具有的参数</strong><ul><li>db_column：修改字段名</li><li>primary_key：主键</li><li>verbose_name：字段别名，备注</li><li>unique：值是否唯一</li><li>null：数据空中的值，是否允许为空</li><li>blank：前端表单提交时，是否可以为空，一般null&#x3D;True，blank&#x3D;True</li><li>db_index：是否建立字段索引</li><li>help_text：显示帮助</li><li>editable：后台是否可以编辑</li></ul></li><li><strong>个别字段才有的参数</strong><ul><li>CharField<ul><li>max_length：最大长度值</li></ul></li><li>DateField<ul><li>unique_for_date：该日期的值是否唯一</li><li>unique_for_month：该月份的值是否唯一</li><li>auto_now&#x3D;True：更新数据时间</li><li>auto_now_add&#x3D;True：插入数据时间</li></ul></li><li>DecimalField<ul><li>max_digits：多少位数</li><li>decimal_places：多少位小数，例子（max_digits&#x3D;4，decimal_places&#x3D;2），可以存储11.11，32.55</li></ul></li></ul></li><li><strong>关系型字段的参数</strong><ul><li>related_name：用于外键关联的反向查询，父表查子表</li><li>on_delete：当外键被删除时，要进行什么操作</li></ul></li></ul><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><p>例子：省市县的存储</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressInfo</span>(models.Model):<br>    address = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;地址&quot;</span>)<br>    pid = models.ForeignKey(<span class="hljs-string">&#x27;self&#x27;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;自关联&#x27;</span>, on_delete=models.CASCADE)  <span class="hljs-comment"># 写法一</span><br>    <span class="hljs-comment"># pid = models.ForeignKey(&#x27;AddressInfo&#x27;, null=True, blank=True, verbose_name=&#x27;自关联&#x27;)  # 写法二</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressInfo</span>(models.Model):<br>    address = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;地址&quot;</span>)<br>    pid = models.ForeignKey(<span class="hljs-string">&#x27;self&#x27;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;自关联&#x27;</span>, on_delete=models.CASCADE)  <span class="hljs-comment"># 写法一</span><br>    <span class="hljs-comment"># pid = models.ForeignKey(&#x27;AddressInfo&#x27;, null=True, blank=True, verbose_name=&#x27;自关联&#x27;)  # 写法二</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.address<br></code></pre></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressInfo</span>(models.Model):<br>    address = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;地址&quot;</span>)<br>    pid = models.ForeignKey(<span class="hljs-string">&#x27;self&#x27;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;自关联&#x27;</span>, on_delete=models.CASCADE)  <span class="hljs-comment"># 写法一</span><br>    <span class="hljs-comment"># pid = models.ForeignKey(&#x27;AddressInfo&#x27;, null=True, blank=True, verbose_name=&#x27;自关联&#x27;)  # 写法二</span><br>    note = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;说明&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.address<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment"># 定义数据表名</span><br>        db_table=<span class="hljs-string">&#x27;address&#x27;</span><br>        <span class="hljs-comment"># 按照哪个字段排序</span><br>        <span class="hljs-comment"># ordering=(&#x27;pid&#x27;,)</span><br>        <span class="hljs-comment"># 表别名</span><br>        verbose_name=<span class="hljs-string">&#x27;地址信息&#x27;</span><br>        <span class="hljs-comment"># 表别名复数，用于英文显示</span><br>        verbose_name_plural=verbose_name<br>        <span class="hljs-comment"># 设置基类，不生成数据表，作为其他表的基类</span><br>        <span class="hljs-comment"># abstract=False</span><br>        <span class="hljs-comment"># 设置表权限</span><br>        <span class="hljs-comment"># permissions=((&#x27;定义好的权限&#x27;, &#x27;权限说明&#x27;),)</span><br>        <span class="hljs-comment"># 是否按照Django既定的规则来管理模型类</span><br>        <span class="hljs-comment"># managed=False</span><br>        <span class="hljs-comment"># 联合唯一键</span><br>        <span class="hljs-comment"># unique_together=(&#x27;address&#x27;, &#x27;note&#x27;)  # 另一种写法 ((),())</span><br>        <span class="hljs-comment"># 定义模型类属于哪个应用</span><br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressInfo</span>(models.Model):<br>    address = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;地址&quot;</span>)<br>    pid = models.ForeignKey(<span class="hljs-string">&#x27;self&#x27;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;自关联&#x27;</span>, on_delete=models.CASCADE)  <span class="hljs-comment"># 写法一</span><br>    <span class="hljs-comment"># pid = models.ForeignKey(&#x27;AddressInfo&#x27;, null=True, blank=True, verbose_name=&#x27;自关联&#x27;)  # 写法二</span><br>    note = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;说明&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.address<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment"># 定义数据表名</span><br>        db_table=<span class="hljs-string">&#x27;address&#x27;</span><br>        <span class="hljs-comment"># 按照哪个字段排序</span><br>        <span class="hljs-comment"># ordering=(&#x27;pid&#x27;,)</span><br>        <span class="hljs-comment"># 表别名</span><br>        verbose_name=<span class="hljs-string">&#x27;地址信息&#x27;</span><br>        <span class="hljs-comment"># 表别名复数，用于英文显示</span><br>        verbose_name_plural=verbose_name<br>        <span class="hljs-comment"># 设置基类，不生成数据表，作为其他表的基类</span><br>        <span class="hljs-comment"># abstract=False</span><br>        <span class="hljs-comment"># 设置表权限</span><br>        <span class="hljs-comment"># permissions=((&#x27;定义好的权限&#x27;, &#x27;权限说明&#x27;),)</span><br>        <span class="hljs-comment"># 是否按照Django既定的规则来管理模型类</span><br>        <span class="hljs-comment"># managed=False</span><br>        <span class="hljs-comment"># 联合唯一键</span><br>        <span class="hljs-comment"># unique_together=(&#x27;address&#x27;, &#x27;note&#x27;)  # 另一种写法 ((),())</span><br>        <span class="hljs-comment"># 定义模型类属于哪个应用</span><br>        <span class="hljs-comment"># app_label=&#x27;myapp1</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvOHJBbmNjOUExMEN3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvQjRoeG1ta0dTOWJMLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>建表</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 9:45</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;讲师信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    introduction = models.TextField(default=<span class="hljs-string">&quot;这位同学很懒，木有签名&quot;</span>, verbose_name=<span class="hljs-string">&quot;简洁&quot;</span>)<br>    fans = models.PositiveIntegerField(default=<span class="hljs-string">&quot;0&quot;</span>, verbose_name=<span class="hljs-string">&quot;粉丝数&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;讲师信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.nickname<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;课程信息表&quot;&quot;&quot;</span><br>    title = models.CharField(max_length=<span class="hljs-number">100</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;课程名&quot;</span>)<br>    <span class="hljs-comment"># 老师和课程为多对一关系，使用 ForeignKey 来实现</span><br>    teacher = models.ForeignKey(Teacher, null=<span class="hljs-literal">True</span>, on_delete=models.CASCADE, verbose_name=<span class="hljs-string">&quot;课程讲师&quot;</span>)<br>    <span class="hljs-built_in">type</span> = models.CharField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;实战课&quot;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;免费课&quot;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;其他&quot;</span>)), max_length=<span class="hljs-number">1</span>, default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&quot;课程类&quot;</span>)<br>    price = models.PositiveSmallIntegerField(verbose_name=<span class="hljs-string">&quot;价格&quot;</span>)<br>    volume = models.BigIntegerField(verbose_name=<span class="hljs-string">&quot;销量&quot;</span>)<br>    online = models.DateField(verbose_name=<span class="hljs-string">&quot;上线时间&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;课程信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 返回type的描述信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.get_type_display(), self.title&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;学生信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    <span class="hljs-comment"># 课程与学生是多对多关系</span><br>    course = models.ManyToManyField(Course, verbose_name=<span class="hljs-string">&quot;课程&quot;</span>)<br>    age = models.PositiveSmallIntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>)<br>    gender = models.CharField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;女&quot;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;保密&quot;</span>)), max_length=<span class="hljs-number">1</span>, default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&quot;性别&quot;</span>)<br>    study_time = models.PositiveIntegerField(default=<span class="hljs-string">&quot;0&quot;</span>, verbose_name=<span class="hljs-string">&quot;学习时长(h)&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;学生信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.nickname<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherAssisant</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;助教信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    teacher = models.OneToOneField(Teacher, null=<span class="hljs-literal">True</span>, on_delete=models.SET_NULL, verbose_name=<span class="hljs-string">&quot;讲师&quot;</span>)<br>    hobby = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;爱好&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;助教信息表&quot;</span><br>        db_table = <span class="hljs-string">&quot;courses_assistant&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 9:45</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;讲师信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    introduction = models.TextField(default=<span class="hljs-string">&quot;这位同学很懒，木有签名&quot;</span>, verbose_name=<span class="hljs-string">&quot;简洁&quot;</span>)<br>    fans = models.PositiveIntegerField(default=<span class="hljs-string">&quot;0&quot;</span>, verbose_name=<span class="hljs-string">&quot;粉丝数&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;讲师信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.nickname<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;课程信息表&quot;&quot;&quot;</span><br>    title = models.CharField(max_length=<span class="hljs-number">100</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;课程名&quot;</span>)<br>    <span class="hljs-comment"># 老师和课程为多对一关系，使用 ForeignKey 来实现</span><br>    teacher = models.ForeignKey(Teacher, null=<span class="hljs-literal">True</span>, on_delete=models.CASCADE, verbose_name=<span class="hljs-string">&quot;课程讲师&quot;</span>)<br>    <span class="hljs-built_in">type</span> = models.CharField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;实战课&quot;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;免费课&quot;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;其他&quot;</span>)), max_length=<span class="hljs-number">1</span>, default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&quot;课程类&quot;</span>)<br>    price = models.PositiveSmallIntegerField(verbose_name=<span class="hljs-string">&quot;价格&quot;</span>)<br>    volume = models.BigIntegerField(verbose_name=<span class="hljs-string">&quot;销量&quot;</span>)<br>    online = models.DateField(verbose_name=<span class="hljs-string">&quot;上线时间&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;课程信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 返回type的描述信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.get_type_display(), self.title&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;学生信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    <span class="hljs-comment"># 课程与学生是多对多关系</span><br>    course = models.ManyToManyField(Course, verbose_name=<span class="hljs-string">&quot;课程&quot;</span>)<br>    age = models.PositiveSmallIntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>)<br>    gender = models.CharField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;女&quot;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;保密&quot;</span>)), max_length=<span class="hljs-number">1</span>, default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&quot;性别&quot;</span>)<br>    study_time = models.PositiveIntegerField(default=<span class="hljs-string">&quot;0&quot;</span>, verbose_name=<span class="hljs-string">&quot;学习时长(h)&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;学生信息表&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.nickname<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherAssisant</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;助教信息表&quot;&quot;&quot;</span><br>    nickname = models.CharField(max_length=<span class="hljs-number">30</span>, primary_key=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;昵称&quot;</span>)<br>    teacher = models.OneToOneField(Teacher, null=<span class="hljs-literal">True</span>, on_delete=models.SET_NULL, verbose_name=<span class="hljs-string">&quot;讲师&quot;</span>)<br>    hobby = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;爱好&quot;</span>)<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;创建时间&quot;</span>)<br>    updated_at = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;更新时间&quot;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name = <span class="hljs-string">&quot;助教信息表&quot;</span><br>        db_table = <span class="hljs-string">&quot;courses_assistant&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.nickname<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvdTI1QVMzYVVydXM5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="更改数据库表"><a href="#更改数据库表" class="headerlink" title="更改数据库表"></a>更改数据库表</h3><p>删除模型类的步骤</p><ul><li>删除表模型</li><li>删除项目中<code>migraions</code>文件夹下模型类生成的对应文件</li><li>删除数据库<code>migraions</code>表中的生成记录</li><li>删除数据表</li></ul><p>导入数据</p><p><strong>1.命令行添加</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQvTmtYeGhlRVBLQlYyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>数据库中的数据表</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MjQveHpLeE5Yam1QdDg3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="2-脚本添加"><a href="#2-脚本添加" class="headerlink" title="2. 脚本添加"></a>2. 脚本添加</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 15:29</span><br><span class="hljs-comment"># @File    : orm_data</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> django<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><br>project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br>sys.path.append(project_path)  <span class="hljs-comment"># 将项目路径添加到系统搜寻路径当中</span><br>os.environ[<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>] = <span class="hljs-string">&#x27;orm_baimoc.settings&#x27;</span>  <span class="hljs-comment"># 设置项目的配置文件</span><br>django.setup()<br><br><span class="hljs-keyword">from</span> ormbaimoc.models <span class="hljs-keyword">import</span> Teacher, Course, Student, TeacherAssisant<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_data</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;使用 Django ORM 导入数据&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 讲师数据</span><br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Jack&quot;</span>, introduction=<span class="hljs-string">&quot;Python 工程师&quot;</span>, fans=<span class="hljs-number">123</span>)<br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Allen&quot;</span>, introduction=<span class="hljs-string">&quot;Java 工程师&quot;</span>, fans=<span class="hljs-number">321</span>)<br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Henry&quot;</span>, introduction=<span class="hljs-string">&quot;Golang 工程师&quot;</span>, fans=<span class="hljs-number">888</span>)<br><br>    <span class="hljs-comment"># 课程数据</span><br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Python 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)])<br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Java 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Allen&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)])<br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Golang 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Henry&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)])<br><br>    <span class="hljs-comment"># 学生数据</span><br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;赵同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>:random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>:random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>:random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;吴同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>: random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>: random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>: random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;郑同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>:random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>:random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>:random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;王同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>: random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>: random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>: random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br><br>    <span class="hljs-comment"># 正向添加</span><br>    <span class="hljs-comment"># 销量大于等于 1000 的课程</span><br>    Student.objects.get(nickname=<span class="hljs-string">&quot;赵同学&quot;</span>).course.add(*Course.objects.<span class="hljs-built_in">filter</span>(volume__gte=<span class="hljs-number">1000</span>))<br>    <span class="hljs-comment"># 销量大于 5000 的课程</span><br>    Student.objects.get(nickname=<span class="hljs-string">&quot;王同学&quot;</span>).course.add(*Course.objects.<span class="hljs-built_in">filter</span>(volume__gt=<span class="hljs-number">5000</span>))<br><br>    <span class="hljs-comment"># 反向添加</span><br>    <span class="hljs-comment"># 学习实践大于等于 500 小时的同学</span><br>    Course.objects.get(title=<span class="hljs-string">&quot;Python 系列教程1&quot;</span>).student_set.add(*Student.objects.<span class="hljs-built_in">filter</span>(study_time__gte=<span class="hljs-number">500</span>))<br>    <span class="hljs-comment"># 学习实践小于等于 500 小时的同学</span><br>    Course.objects.get(title=<span class="hljs-string">&quot;Python 系列教程1&quot;</span>).student_set.add(*Student.objects.<span class="hljs-built_in">filter</span>(study_time__lte=<span class="hljs-number">500</span>))<br><br>    <span class="hljs-comment"># 助教数据 get_or_create</span><br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教1&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;慕课网学习&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>:Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>)&#125;)<br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教2&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;看电影&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>: Teacher.objects.get(nickname=<span class="hljs-string">&quot;Allen&quot;</span>)&#125;)<br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教3&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;读书&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>: Teacher.objects.get(nickname=<span class="hljs-string">&quot;Henry&quot;</span>)&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> import_data():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;导入数据成功&quot;</span>)<br><br><span class="hljs-comment"># 其他导入数据方法</span><br><span class="hljs-comment"># fixtures Django serialization 保存</span><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/24 15:29</span><br><span class="hljs-comment"># @File    : orm_data</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> django<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><br>project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br>sys.path.append(project_path)  <span class="hljs-comment"># 将项目路径添加到系统搜寻路径当中</span><br>os.environ[<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>] = <span class="hljs-string">&#x27;orm_baimoc.settings&#x27;</span>  <span class="hljs-comment"># 设置项目的配置文件</span><br>django.setup()<br><br><span class="hljs-keyword">from</span> ormbaimoc.models <span class="hljs-keyword">import</span> Teacher, Course, Student, TeacherAssisant<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_data</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;使用 Django ORM 导入数据&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 讲师数据</span><br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Jack&quot;</span>, introduction=<span class="hljs-string">&quot;Python 工程师&quot;</span>, fans=<span class="hljs-number">123</span>)<br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Allen&quot;</span>, introduction=<span class="hljs-string">&quot;Java 工程师&quot;</span>, fans=<span class="hljs-number">321</span>)<br>    Teacher.objects.create(nickname=<span class="hljs-string">&quot;Henry&quot;</span>, introduction=<span class="hljs-string">&quot;Golang 工程师&quot;</span>, fans=<span class="hljs-number">888</span>)<br><br>    <span class="hljs-comment"># 课程数据</span><br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Python 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)])<br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Java 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Allen&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)])<br>    Course.objects.bulk_create([Course(title=<span class="hljs-string">f&quot;Golang 系列教程<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>,<br>                                       teacher=Teacher.objects.get(nickname=<span class="hljs-string">&quot;Henry&quot;</span>),<br>                                       <span class="hljs-built_in">type</span>=random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>                                       price=random.randint(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>),<br>                                       volume=random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">10000</span>),<br>                                       online=date(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>))<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)])<br><br>    <span class="hljs-comment"># 学生数据</span><br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;赵同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>:random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>:random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>:random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;吴同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>: random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>: random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>: random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;郑同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>:random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>:random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>:random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br>    Student.objects.update_or_create(nickname=<span class="hljs-string">&quot;王同学&quot;</span>, defaults=&#123;<br>        <span class="hljs-string">&quot;age&quot;</span>: random.randint(<span class="hljs-number">18</span>, <span class="hljs-number">58</span>),<br>        <span class="hljs-string">&quot;gender&quot;</span>: random.choice((<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)),<br>        <span class="hljs-string">&quot;study_time&quot;</span>: random.randint(<span class="hljs-number">9</span>, <span class="hljs-number">999</span>),<br>    &#125;)<br><br>    <span class="hljs-comment"># 正向添加</span><br>    <span class="hljs-comment"># 销量大于等于 1000 的课程</span><br>    Student.objects.get(nickname=<span class="hljs-string">&quot;赵同学&quot;</span>).course.add(*Course.objects.<span class="hljs-built_in">filter</span>(volume__gte=<span class="hljs-number">1000</span>))<br>    <span class="hljs-comment"># 销量大于 5000 的课程</span><br>    Student.objects.get(nickname=<span class="hljs-string">&quot;王同学&quot;</span>).course.add(*Course.objects.<span class="hljs-built_in">filter</span>(volume__gt=<span class="hljs-number">5000</span>))<br><br>    <span class="hljs-comment"># 反向添加</span><br>    <span class="hljs-comment"># 学习实践大于等于 500 小时的同学</span><br>    Course.objects.get(title=<span class="hljs-string">&quot;Python 系列教程1&quot;</span>).student_set.add(*Student.objects.<span class="hljs-built_in">filter</span>(study_time__gte=<span class="hljs-number">500</span>))<br>    <span class="hljs-comment"># 学习实践小于等于 500 小时的同学</span><br>    Course.objects.get(title=<span class="hljs-string">&quot;Python 系列教程1&quot;</span>).student_set.add(*Student.objects.<span class="hljs-built_in">filter</span>(study_time__lte=<span class="hljs-number">500</span>))<br><br>    <span class="hljs-comment"># 助教数据 get_or_create</span><br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教1&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;慕课网学习&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>:Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>)&#125;)<br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教2&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;看电影&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>: Teacher.objects.get(nickname=<span class="hljs-string">&quot;Allen&quot;</span>)&#125;)<br>    TeacherAssisant.objects.get_or_create(nickname=<span class="hljs-string">&quot;助教3&quot;</span>,<br>                                          defaults=&#123;<span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;读书&quot;</span>, <span class="hljs-string">&quot;teacher&quot;</span>: Teacher.objects.get(nickname=<span class="hljs-string">&quot;Henry&quot;</span>)&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> import_data():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;导入数据成功&quot;</span>)<br><br><span class="hljs-comment"># 其他导入数据方法</span><br><span class="hljs-comment"># fixtures Django serialization 保存</span><br><span class="hljs-comment"># 数据库层面的导入数据</span><br></code></pre></td></tr></table></figure><h3 id="Model-API"><a href="#Model-API" class="headerlink" title="Model API"></a>Model API</h3><p>基本查询</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/26 18:39</span><br><span class="hljs-comment"># @File    : view</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AddressInfo, Teacher, Course,Student,TeacherAssisant<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;主页&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 查询全部</span><br>        teachers = Teacher.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-built_in">print</span>(teachers)<br><br>        <span class="hljs-comment"># 获取一个值</span><br>        <span class="hljs-comment"># 只能返回一条结果，多条会报错</span><br>        teachers2 = Teacher.objects.get(nickname=<span class="hljs-string">&#x27;Jack&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teachers2, <span class="hljs-built_in">type</span>(teachers2))<br><br>        <span class="hljs-comment"># 查询符合条件的多个值</span><br>        <span class="hljs-comment"># 返回QuerySet，可以是多条结果</span><br>        teachers3 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">for</span> teacher <span class="hljs-keyword">in</span> teachers3:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;讲师姓名：<span class="hljs-subst">&#123;teacher.nickname&#125;</span> --&gt; 粉丝数：<span class="hljs-subst">&#123;teacher.fans&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 字段数据匹配</span><br>        teacher4 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__in=[<span class="hljs-number">888</span>])<br>        <span class="hljs-built_in">print</span>(teacher4)<br><br>        <span class="hljs-comment"># 结果切片</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">all</span>()[:<span class="hljs-number">2</span>])<br>        <span class="hljs-comment"># 排序</span><br>        teacher6 = Teacher.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&#x27;.fans&#x27;</span>)<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> teacher6:<br>            <span class="hljs-built_in">print</span>(t.fans)<br>        <span class="hljs-comment"># 链式查询</span><br>        teacher7 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teacher7)<br><br>        <span class="hljs-comment"># 查询原生SQL</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>).query)<br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/26 18:39</span><br><span class="hljs-comment"># @File    : view</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AddressInfo, Teacher, Course,Student,TeacherAssisant<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;主页&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 查询全部</span><br>        teachers = Teacher.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-built_in">print</span>(teachers)<br><br>        <span class="hljs-comment"># 获取一个值</span><br>        <span class="hljs-comment"># 只能返回一条结果，多条会报错</span><br>        teachers2 = Teacher.objects.get(nickname=<span class="hljs-string">&#x27;Jack&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teachers2, <span class="hljs-built_in">type</span>(teachers2))<br><br>        <span class="hljs-comment"># 查询符合条件的多个值</span><br>        <span class="hljs-comment"># 返回QuerySet，可以是多条结果</span><br>        teachers3 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">for</span> teacher <span class="hljs-keyword">in</span> teachers3:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;讲师姓名：<span class="hljs-subst">&#123;teacher.nickname&#125;</span> --&gt; 粉丝数：<span class="hljs-subst">&#123;teacher.fans&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 字段数据匹配</span><br>        teacher4 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__in=[<span class="hljs-number">888</span>])<br>        <span class="hljs-built_in">print</span>(teacher4)<br><br>        <span class="hljs-comment"># 结果切片</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">all</span>()[:<span class="hljs-number">2</span>])<br>        <span class="hljs-comment"># 排序</span><br>        teacher6 = Teacher.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&#x27;.fans&#x27;</span>)<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> teacher6:<br>            <span class="hljs-built_in">print</span>(t.fans)<br>        <span class="hljs-comment"># 链式查询</span><br>        teacher7 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teacher7)<br><br>        <span class="hljs-comment"># 查询原生SQL</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>).query)<br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">"address.html"</span>)<br></code></pre></td></tr></table></figure><h3 id="返回新-QuerySet-API"><a href="#返回新-QuerySet-API" class="headerlink" title="返回新 QuerySet API"></a>返回新 QuerySet API</h3><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/26 18:39</span><br><span class="hljs-comment"># @File    : view</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Sum, Avg, Max, Min<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AddressInfo, Teacher, Course,Student,TeacherAssisant, GroupConcat<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;主页&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 查询全部</span><br>        teachers = Teacher.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-built_in">print</span>(teachers)<br><br>        <span class="hljs-comment"># 获取一个值</span><br>        <span class="hljs-comment"># 只能返回一条结果，多条会报错</span><br>        teachers2 = Teacher.objects.get(nickname=<span class="hljs-string">&#x27;Jack&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teachers2, <span class="hljs-built_in">type</span>(teachers2))<br><br>        <span class="hljs-comment"># 查询符合条件的多个值</span><br>        <span class="hljs-comment"># 返回QuerySet，可以是多条结果</span><br>        teachers3 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">for</span> teacher <span class="hljs-keyword">in</span> teachers3:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;讲师姓名：<span class="hljs-subst">&#123;teacher.nickname&#125;</span> --&gt; 粉丝数：<span class="hljs-subst">&#123;teacher.fans&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 字段数据匹配</span><br>        teacher4 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__in=[<span class="hljs-number">888</span>])<br>        <span class="hljs-built_in">print</span>(teacher4)<br><br>        <span class="hljs-comment"># 结果切片</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">all</span>()[:<span class="hljs-number">2</span>])<br>        <span class="hljs-comment"># 排序</span><br>        teacher6 = Teacher.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&#x27;.fans&#x27;</span>)<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> teacher6:<br>            <span class="hljs-built_in">print</span>(t.fans)<br>        <span class="hljs-comment"># 链式查询</span><br>        teacher7 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teacher7)<br><br>        <span class="hljs-comment"># 查询原生SQL</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>).query)<br><br><br>        <span class="hljs-comment"># 返回新 Query API</span><br>        <span class="hljs-comment"># 排除</span><br>        <span class="hljs-built_in">print</span>(Student.objects.<span class="hljs-built_in">all</span>().exclude(nickname=<span class="hljs-string">&quot;王同学&quot;</span>))<br>        <span class="hljs-comment"># 排序</span><br>        <span class="hljs-built_in">print</span>(Student.objects.<span class="hljs-built_in">all</span>().exclude(nickname=<span class="hljs-string">&quot;王同学&quot;</span>).reverse())<br>        <span class="hljs-comment"># 修改返回结果的字段名，将nickname改为name</span><br>        students = Student.objects.<span class="hljs-built_in">all</span>().extra(select=&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;nickname&quot;</span>&#125;)<br>        <span class="hljs-keyword">for</span> student <span class="hljs-keyword">in</span> students:<br>            <span class="hljs-built_in">print</span>(student.name)<br><br>        <span class="hljs-comment"># 获取字典或元组形式的 QuerySet</span><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values(<span class="hljs-string">&#x27;nickname&#x27;</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>))<br>        <span class="hljs-comment"># &lt; QuerySet[&#123;&#x27;nickname&#x27;: &#x27;助教1&#x27;, &#x27;hobby&#x27;: &#x27;慕课网学习&#x27;&#125;, &#123;&#x27;nickname&#x27;: &#x27;助教2&#x27;, &#x27;hobby&#x27;: &#x27;看电影&#x27;&#125;, &#123;&#x27;nickname&#x27;: &#x27;助教3&#x27;, &#x27;hobby&#x27;: &#x27;读书&#x27;&#125;] &gt;</span><br><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values_list(<span class="hljs-string">&#x27;nickname&#x27;</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [(&#x27;助教1&#x27;, &#x27;慕课网学习&#x27;), (&#x27;助教2&#x27;, &#x27;看电影&#x27;), (&#x27;助教3&#x27;, &#x27;读书&#x27;)]&gt;</span><br><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values_list(<span class="hljs-string">&#x27;nickname&#x27;</span>, flat=<span class="hljs-literal">True</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [&#x27;助教2&#x27;, &#x27;助教3&#x27;, &#x27;助教1&#x27;]&gt;</span><br><br>        <span class="hljs-comment"># 根据日期获取查询集</span><br>        <span class="hljs-built_in">print</span>(Course.objects.dates(<span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;day&#x27;</span>, order=<span class="hljs-string">&#x27;DESC&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [datetime.date(2020, 7, 26)]&gt;</span><br><br>        <span class="hljs-built_in">print</span>(Course.objects.datetimes(<span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, order=<span class="hljs-string">&#x27;DESC&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [datetime.datetime(2020, 7, 26, 9, 25, 21, tzinfo=&lt;UTC&gt;)]&gt;</span><br><br>        <span class="hljs-comment"># 并集：union、交集：inersection、差集：difference</span><br>        p_240 = Course.objects.<span class="hljs-built_in">filter</span>(price__gte=<span class="hljs-number">240</span>)<br>        p_260 = Course.objects.<span class="hljs-built_in">filter</span>(price__lte=<span class="hljs-number">260</span>)<br>        <span class="hljs-built_in">print</span>(p_240.union(p_260))<br>        <span class="hljs-comment"># 引擎不支持会报错</span><br>        <span class="hljs-comment"># print(p_240.inersection(p_260))</span><br>        <span class="hljs-comment"># print(p_240.difference(p_260))</span><br><br>        <span class="hljs-comment"># 一对多、多对一查询优化：select_related</span><br>        <span class="hljs-comment"># 一对多、多对多查询优化：prefetch_related</span><br>        courses = Course.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> courses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c.title&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.nickname&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.fans&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># (0.000) SELECT @@SQL_AUTO_IS_NULL; args=None</span><br>        <span class="hljs-comment"># (0.000) SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED; args=None</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course`; args=()</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Henry&#x27; LIMIT 21; args=(&#x27;Henry&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Henry&#x27; LIMIT 21; args=(&#x27;Henry&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br><br>        courses = Course.objects.<span class="hljs-built_in">all</span>().select_related(<span class="hljs-string">&#x27;teacher&#x27;</span>)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> courses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c.title&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.nickname&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.fans&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># (0.016) (SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course` WHERE `ormbaimoc_course`.`price` &gt;= 240) UNION (SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course` WHERE `ormbaimoc_course`.`price` &lt;= 260) LIMIT 21; args=(240, 260)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at`, `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_course` LEFT OUTER JOIN `ormbaimoc_teacher` ON (`ormbaimoc_course`.`teacher_id` = `ormbaimoc_teacher`.`nickname`); args=()</span><br><br>        students = Student.objects.<span class="hljs-built_in">filter</span>(age__lt=<span class="hljs-number">30</span>).prefetch_related(<span class="hljs-string">&quot;course&quot;</span>)<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> students:<br>            <span class="hljs-built_in">print</span>(s.course.<span class="hljs-built_in">all</span>())<br>        <span class="hljs-comment"># (0.000) SELECT @@SQL_AUTO_IS_NULL; args=None</span><br>        <span class="hljs-comment"># (0.000) SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED; args=None</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_student`.`nickname`, `ormbaimoc_student`.`age`, `ormbaimoc_student`.`gender`, `ormbaimoc_student`.`study_time`, `ormbaimoc_student`.`created_at`, `ormbaimoc_student`.`updated_at` FROM `ormbaimoc_student` WHERE `ormbaimoc_student`.`age` &lt; 30 ORDER BY `ormbaimoc_student`.`age` ASC; args=(30,)</span><br><br>        <span class="hljs-comment"># 反向查询：父表查询子表</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>).course_set.<span class="hljs-built_in">all</span>())<br>        <span class="hljs-comment"># print(Teacher.objects.get(nickname=&quot;Jack&quot;).teacher.all())</span><br><br>        <span class="hljs-comment"># annotate(): 使用聚合计数，求和，平均等</span><br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Sum(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Avg(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Max(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Min(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br><br>        <span class="hljs-comment"># raw(),执行原始SQL</span><br><br><br>        <span class="hljs-string">&quot;&quot;&quot;不返回 Query API &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 获取对象 ---------------------------------</span><br>        <span class="hljs-comment"># get()</span><br>        <span class="hljs-comment"># get_or_create()</span><br>        <span class="hljs-comment"># first()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.first())<br><br>        <span class="hljs-comment"># last()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.last())<br><br>        <span class="hljs-comment"># latest(), 注意需要设置 get_latest_by = &#x27;created_at&#x27;</span><br>        <span class="hljs-built_in">print</span>(Course.objects.latest())<br><br>        <span class="hljs-comment"># earliest()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.earliest())<br><br>        <span class="hljs-comment"># in_bulk(), 批量插入数据</span><br>        <span class="hljs-built_in">print</span>(Course.objects.in_bulk([<span class="hljs-string">&#x27;Golang 系列教程1&#x27;</span>, <span class="hljs-string">&#x27;Python 系列教程4&#x27;</span>]))<br><br>        <span class="hljs-comment"># 更新对象 ---------------------------------</span><br>        <span class="hljs-comment"># update()</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Golang 系列教程1&quot;</span>).update(price=<span class="hljs-number">6666</span>)<br>        <span class="hljs-comment"># update_or_create()</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Java 系列教程5&quot;</span>).update_or_create(title=<span class="hljs-string">&quot;Java 系列教程5&quot;</span>, price=<span class="hljs-number">888</span>, volume=<span class="hljs-number">55</span>, online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br><br>        <span class="hljs-comment"># 删除对象 ----------------------------------</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;Java 系列教程5&#x27;</span>).delete()<br><br>        <span class="hljs-comment"># 其他操作 exists()，count(), aggregate()，判断是否存在，统计个数，聚合</span><br>        <span class="hljs-built_in">print</span>(Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;test&#x27;</span>).exists())<br>        <span class="hljs-built_in">print</span>(Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;Golang 系列教程1&#x27;</span>).exists())<br>        <span class="hljs-built_in">print</span>(Course.objects.count())<br>        <span class="hljs-built_in">print</span>(Course.objects.aggregate(Max(<span class="hljs-string">&#x27;price&#x27;</span>), Min(<span class="hljs-string">&#x27;price&#x27;</span>), Avg(<span class="hljs-string">&#x27;price&#x27;</span>), Sum(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @Time    : 2020/7/26 18:39</span><br><span class="hljs-comment"># @File    : view</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Sum, Avg, Max, Min<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> AddressInfo, Teacher, Course,Student,TeacherAssisant, GroupConcat<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;主页&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 查询全部</span><br>        teachers = Teacher.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-built_in">print</span>(teachers)<br><br>        <span class="hljs-comment"># 获取一个值</span><br>        <span class="hljs-comment"># 只能返回一条结果，多条会报错</span><br>        teachers2 = Teacher.objects.get(nickname=<span class="hljs-string">&#x27;Jack&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teachers2, <span class="hljs-built_in">type</span>(teachers2))<br><br>        <span class="hljs-comment"># 查询符合条件的多个值</span><br>        <span class="hljs-comment"># 返回QuerySet，可以是多条结果</span><br>        teachers3 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">for</span> teacher <span class="hljs-keyword">in</span> teachers3:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;讲师姓名：<span class="hljs-subst">&#123;teacher.nickname&#125;</span> --&gt; 粉丝数：<span class="hljs-subst">&#123;teacher.fans&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 字段数据匹配</span><br>        teacher4 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__in=[<span class="hljs-number">888</span>])<br>        <span class="hljs-built_in">print</span>(teacher4)<br><br>        <span class="hljs-comment"># 结果切片</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">all</span>()[:<span class="hljs-number">2</span>])<br>        <span class="hljs-comment"># 排序</span><br>        teacher6 = Teacher.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&#x27;.fans&#x27;</span>)<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> teacher6:<br>            <span class="hljs-built_in">print</span>(t.fans)<br>        <span class="hljs-comment"># 链式查询</span><br>        teacher7 = Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(teacher7)<br><br>        <span class="hljs-comment"># 查询原生SQL</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.<span class="hljs-built_in">filter</span>(fans__gte=<span class="hljs-number">100</span>).order_by(<span class="hljs-string">&#x27;nickname&#x27;</span>).query)<br><br><br>        <span class="hljs-comment"># 返回新 Query API</span><br>        <span class="hljs-comment"># 排除</span><br>        <span class="hljs-built_in">print</span>(Student.objects.<span class="hljs-built_in">all</span>().exclude(nickname=<span class="hljs-string">&quot;王同学&quot;</span>))<br>        <span class="hljs-comment"># 排序</span><br>        <span class="hljs-built_in">print</span>(Student.objects.<span class="hljs-built_in">all</span>().exclude(nickname=<span class="hljs-string">&quot;王同学&quot;</span>).reverse())<br>        <span class="hljs-comment"># 修改返回结果的字段名，将nickname改为name</span><br>        students = Student.objects.<span class="hljs-built_in">all</span>().extra(select=&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;nickname&quot;</span>&#125;)<br>        <span class="hljs-keyword">for</span> student <span class="hljs-keyword">in</span> students:<br>            <span class="hljs-built_in">print</span>(student.name)<br><br>        <span class="hljs-comment"># 获取字典或元组形式的 QuerySet</span><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values(<span class="hljs-string">&#x27;nickname&#x27;</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>))<br>        <span class="hljs-comment"># &lt; QuerySet[&#123;&#x27;nickname&#x27;: &#x27;助教1&#x27;, &#x27;hobby&#x27;: &#x27;慕课网学习&#x27;&#125;, &#123;&#x27;nickname&#x27;: &#x27;助教2&#x27;, &#x27;hobby&#x27;: &#x27;看电影&#x27;&#125;, &#123;&#x27;nickname&#x27;: &#x27;助教3&#x27;, &#x27;hobby&#x27;: &#x27;读书&#x27;&#125;] &gt;</span><br><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values_list(<span class="hljs-string">&#x27;nickname&#x27;</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [(&#x27;助教1&#x27;, &#x27;慕课网学习&#x27;), (&#x27;助教2&#x27;, &#x27;看电影&#x27;), (&#x27;助教3&#x27;, &#x27;读书&#x27;)]&gt;</span><br><br>        <span class="hljs-built_in">print</span>(TeacherAssisant.objects.values_list(<span class="hljs-string">&#x27;nickname&#x27;</span>, flat=<span class="hljs-literal">True</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [&#x27;助教2&#x27;, &#x27;助教3&#x27;, &#x27;助教1&#x27;]&gt;</span><br><br>        <span class="hljs-comment"># 根据日期获取查询集</span><br>        <span class="hljs-built_in">print</span>(Course.objects.dates(<span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;day&#x27;</span>, order=<span class="hljs-string">&#x27;DESC&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [datetime.date(2020, 7, 26)]&gt;</span><br><br>        <span class="hljs-built_in">print</span>(Course.objects.datetimes(<span class="hljs-string">&#x27;created_at&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, order=<span class="hljs-string">&#x27;DESC&#x27;</span>))<br>        <span class="hljs-comment"># &lt;QuerySet [datetime.datetime(2020, 7, 26, 9, 25, 21, tzinfo=&lt;UTC&gt;)]&gt;</span><br><br>        <span class="hljs-comment"># 并集：union、交集：inersection、差集：difference</span><br>        p_240 = Course.objects.<span class="hljs-built_in">filter</span>(price__gte=<span class="hljs-number">240</span>)<br>        p_260 = Course.objects.<span class="hljs-built_in">filter</span>(price__lte=<span class="hljs-number">260</span>)<br>        <span class="hljs-built_in">print</span>(p_240.union(p_260))<br>        <span class="hljs-comment"># 引擎不支持会报错</span><br>        <span class="hljs-comment"># print(p_240.inersection(p_260))</span><br>        <span class="hljs-comment"># print(p_240.difference(p_260))</span><br><br>        <span class="hljs-comment"># 一对多、多对一查询优化：select_related</span><br>        <span class="hljs-comment"># 一对多、多对多查询优化：prefetch_related</span><br>        courses = Course.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> courses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c.title&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.nickname&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.fans&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># (0.000) SELECT @@SQL_AUTO_IS_NULL; args=None</span><br>        <span class="hljs-comment"># (0.000) SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED; args=None</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course`; args=()</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Henry&#x27; LIMIT 21; args=(&#x27;Henry&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Henry&#x27; LIMIT 21; args=(&#x27;Henry&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Allen&#x27; LIMIT 21; args=(&#x27;Allen&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_teacher` WHERE `ormbaimoc_teacher`.`nickname` = &#x27;Jack&#x27; LIMIT 21; args=(&#x27;Jack&#x27;,)</span><br><br>        courses = Course.objects.<span class="hljs-built_in">all</span>().select_related(<span class="hljs-string">&#x27;teacher&#x27;</span>)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> courses:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c.title&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.nickname&#125;</span> -- <span class="hljs-subst">&#123;c.teacher.fans&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># (0.016) (SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course` WHERE `ormbaimoc_course`.`price` &gt;= 240) UNION (SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at` FROM `ormbaimoc_course` WHERE `ormbaimoc_course`.`price` &lt;= 260) LIMIT 21; args=(240, 260)</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_course`.`title`, `ormbaimoc_course`.`teacher_id`, `ormbaimoc_course`.`type`, `ormbaimoc_course`.`price`, `ormbaimoc_course`.`volume`, `ormbaimoc_course`.`online`, `ormbaimoc_course`.`created_at`, `ormbaimoc_course`.`updated_at`, `ormbaimoc_teacher`.`nickname`, `ormbaimoc_teacher`.`introduction`, `ormbaimoc_teacher`.`fans`, `ormbaimoc_teacher`.`created_at`, `ormbaimoc_teacher`.`updated_at` FROM `ormbaimoc_course` LEFT OUTER JOIN `ormbaimoc_teacher` ON (`ormbaimoc_course`.`teacher_id` = `ormbaimoc_teacher`.`nickname`); args=()</span><br><br>        students = Student.objects.<span class="hljs-built_in">filter</span>(age__lt=<span class="hljs-number">30</span>).prefetch_related(<span class="hljs-string">&quot;course&quot;</span>)<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> students:<br>            <span class="hljs-built_in">print</span>(s.course.<span class="hljs-built_in">all</span>())<br>        <span class="hljs-comment"># (0.000) SELECT @@SQL_AUTO_IS_NULL; args=None</span><br>        <span class="hljs-comment"># (0.000) SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED; args=None</span><br>        <span class="hljs-comment"># (0.000) SELECT `ormbaimoc_student`.`nickname`, `ormbaimoc_student`.`age`, `ormbaimoc_student`.`gender`, `ormbaimoc_student`.`study_time`, `ormbaimoc_student`.`created_at`, `ormbaimoc_student`.`updated_at` FROM `ormbaimoc_student` WHERE `ormbaimoc_student`.`age` &lt; 30 ORDER BY `ormbaimoc_student`.`age` ASC; args=(30,)</span><br><br>        <span class="hljs-comment"># 反向查询：父表查询子表</span><br>        <span class="hljs-built_in">print</span>(Teacher.objects.get(nickname=<span class="hljs-string">&quot;Jack&quot;</span>).course_set.<span class="hljs-built_in">all</span>())<br>        <span class="hljs-comment"># print(Teacher.objects.get(nickname=&quot;Jack&quot;).teacher.all())</span><br><br>        <span class="hljs-comment"># annotate(): 使用聚合计数，求和，平均等</span><br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Sum(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Avg(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Max(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br>        <span class="hljs-built_in">print</span>(Course.objects.values(<span class="hljs-string">&#x27;teacher&#x27;</span>).annotate(vol=Min(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br><br>        <span class="hljs-comment"># raw(),执行原始SQL</span><br><br><br>        <span class="hljs-string">&quot;&quot;&quot;不返回 Query API &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 获取对象 ---------------------------------</span><br>        <span class="hljs-comment"># get()</span><br>        <span class="hljs-comment"># get_or_create()</span><br>        <span class="hljs-comment"># first()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.first())<br><br>        <span class="hljs-comment"># last()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.last())<br><br>        <span class="hljs-comment"># latest(), 注意需要设置 get_latest_by = &#x27;created_at&#x27;</span><br>        <span class="hljs-built_in">print</span>(Course.objects.latest())<br><br>        <span class="hljs-comment"># earliest()</span><br>        <span class="hljs-built_in">print</span>(Course.objects.earliest())<br><br>        <span class="hljs-comment"># in_bulk(), 批量插入数据</span><br>        <span class="hljs-built_in">print</span>(Course.objects.in_bulk([<span class="hljs-string">&#x27;Golang 系列教程1&#x27;</span>, <span class="hljs-string">&#x27;Python 系列教程4&#x27;</span>]))<br><br>        <span class="hljs-comment"># 更新对象 ---------------------------------</span><br>        <span class="hljs-comment"># update()</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Golang 系列教程1&quot;</span>).update(price=<span class="hljs-number">6666</span>)<br>        <span class="hljs-comment"># update_or_create()</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Java 系列教程5&quot;</span>).update_or_create(title=<span class="hljs-string">&quot;Java 系列教程5&quot;</span>, price=<span class="hljs-number">888</span>, volume=<span class="hljs-number">55</span>, online=date(<span class="hljs-number">2018</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br><br>        <span class="hljs-comment"># 删除对象 ----------------------------------</span><br>        Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;Java 系列教程5&#x27;</span>).delete()<br><br>        <span class="hljs-comment"># 其他操作 exists()，count(), aggregate()，判断是否存在，统计个数，聚合</span><br>        <span class="hljs-built_in">print</span>(Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;test&#x27;</span>).exists())<br>        <span class="hljs-built_in">print</span>(Course.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&#x27;Golang 系列教程1&#x27;</span>).exists())<br>        <span class="hljs-built_in">print</span>(Course.objects.count())<br>        <span class="hljs-built_in">print</span>(Course.objects.aggregate(Max(<span class="hljs-string">&#x27;price&#x27;</span>), Min(<span class="hljs-string">&#x27;price&#x27;</span>), Avg(<span class="hljs-string">&#x27;price&#x27;</span>), Sum(<span class="hljs-string">&#x27;volume&#x27;</span>)))<br></code></pre></td></tr></table></figure><p>参考</p><p><a href="http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html">http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html</a> </p><p><a href="https://www.imooc.com/video/18466">https://www.imooc.com/video/18466</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Django </tag>
            
            <tag> ORM </tag>
            
            <tag> Django RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 数据可视化 03 | 圈图</title>
      <link href="/posts/35727/"/>
      <url>/posts/35727/</url>
      
        <content type="html"><![CDATA[<p>成品预览：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvOTBBTndGVHd3MXFSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="一、环境需求"><a href="#一、环境需求" class="headerlink" title="一、环境需求"></a>一、环境需求</h3><h5 id="R-及-Rstudio-的安装配置"><a href="#R-及-Rstudio-的安装配置" class="headerlink" title="R 及 Rstudio 的安装配置"></a>R 及 Rstudio 的安装配置</h5><p><a href="https://www.baidu.com/link?url=qN76uYgyN4Z_LJxjI1XnHCZr_rBmJWDPJjxT2djdI4uWiFHwza4oEdEe8vgx7cKLeIZd-p_bAZWxUOwucGi1hwX3yKpYrR4vZEn1YVE936W&wd=&eqid=c76b434c002c6af6000000035f13f9c5">一步一步安装及配置R及<em>Rstudio</em>(详细图文)</a></p><h5 id="RCircos安装"><a href="#RCircos安装" class="headerlink" title="RCircos安装"></a>RCircos安装</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">options<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>BioC_mirror<br>options<span class="hljs-punctuation">(</span>BioC_mirror<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/bioc/&quot;</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>BioC_mirror<br><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>requireNamespace<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">,</span> quietly <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br>  install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>BiocManager<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 方法一</span><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;RCircos&quot;</span><span class="hljs-punctuation">,</span>ask <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span>update <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation"><code class="language-hljs R">options<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>BioC_mirror<br>options<span class="hljs-punctuation">(</span>BioC_mirror<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/bioc/&quot;</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">$</span>BioC_mirror<br><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>requireNamespace<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">,</span> quietly <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <br>  install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>BiocManager<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 方法一</span><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;RCircos&quot;</span><span class="hljs-punctuation">,</span>ask <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span>update <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="二、绘制圈图"><a href="#二、绘制圈图" class="headerlink" title="二、绘制圈图"></a>二、绘制圈图</h3><h5 id="0-载入包"><a href="#0-载入包" class="headerlink" title="0.载入包"></a>0.载入包</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 载入包</span><br>library<span class="hljs-punctuation">(</span>RCircos<span class="hljs-punctuation"><code class="language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 载入包</span><br>library<span class="hljs-punctuation">(</span>RCircos<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="1-绘制人染色体圈图"><a href="#1-绘制人染色体圈图" class="headerlink" title="1.绘制人染色体圈图"></a>1.绘制人染色体圈图</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 绘制人染色体圈图 ------------------------------------------------------</span><br><span class="hljs-comment"># 导入内建人类染色体数据</span><br>data<span class="hljs-punctuation">(</span>UCSC.HG19.Human.CytoBandIdeogram<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 设置染色体数据</span><br>cyto.info <span class="hljs-operator">&lt;-</span> UCSC.HG19.Human.CytoBandIdeogram<br><span class="hljs-comment"># 设置不显示的染色体，如 c(1,3)  </span><br>chr.exclude <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-comment"># 设置内部环形个数</span><br>tracks.inside <span class="hljs-operator">&lt;-</span> 10<br><span class="hljs-comment"># 设置外部环形个数  </span><br>tracks.outside <span class="hljs-operator">&lt;-</span> 0<br><br><span class="hljs-comment"># 导入上面四个基本参数</span><br>RCircos.Set.Core.Components<span class="hljs-punctuation">(</span>cyto.info<span class="hljs-punctuation">,</span> chr.exclude<span class="hljs-punctuation">,</span>tracks.inside<span class="hljs-punctuation">,</span> tracks.outside<span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 列出所有绘图参数</span><br>RCircos.List.Plot.Parameters<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘制染色体图形，默认方法显示染色体名称。</span><br>RCircos.Set.Plot.Area<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>     <br>RCircos.Chromosome.Ideogram.Plot<span class="hljs-punctuation">(</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 绘制人染色体圈图 ------------------------------------------------------</span><br><span class="hljs-comment"># 导入内建人类染色体数据</span><br>data<span class="hljs-punctuation">(</span>UCSC.HG19.Human.CytoBandIdeogram<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 设置染色体数据</span><br>cyto.info <span class="hljs-operator">&lt;-</span> UCSC.HG19.Human.CytoBandIdeogram<br><span class="hljs-comment"># 设置不显示的染色体，如 c(1,3)  </span><br>chr.exclude <span class="hljs-operator">&lt;-</span> <span class="hljs-literal">NULL</span><br><span class="hljs-comment"># 设置内部环形个数</span><br>tracks.inside <span class="hljs-operator">&lt;-</span> 10<br><span class="hljs-comment"># 设置外部环形个数  </span><br>tracks.outside <span class="hljs-operator">&lt;-</span> 0<br><br><span class="hljs-comment"># 导入上面四个基本参数</span><br>RCircos.Set.Core.Components<span class="hljs-punctuation">(</span>cyto.info<span class="hljs-punctuation">,</span> chr.exclude<span class="hljs-punctuation">,</span>tracks.inside<span class="hljs-punctuation">,</span> tracks.outside<span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 列出所有绘图参数</span><br>RCircos.List.Plot.Parameters<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘制染色体图形，默认方法显示染色体名称。</span><br>RCircos.Set.Plot.Area<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>     <br>RCircos.Chromosome.Ideogram.Plot<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkva2N0OWF3VlViTm82LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvMHBrVFhtTlZSQ05LLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="2-绘制基因"><a href="#2-绘制基因" class="headerlink" title="2.绘制基因"></a>2.绘制基因</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加基因名称与连线 ------------------------------------------------------</span><br><br><span class="hljs-comment"># 加载内置的RCircos.Gene.Label.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定内容在内侧的环形还是外侧的环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 指定内容在第几个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 1;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Gene.Connector.Plot<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 在染色体上添加基因名称， 指定内容在第几个环形生成</span><br>name.col <span class="hljs-operator">&lt;-</span> 4;<br>track.num <span class="hljs-operator">&lt;-</span> 2;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Gene.Name.Plot<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">,</span> name.col<span class="hljs-punctuation">,</span>track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加基因名称与连线 ------------------------------------------------------</span><br><br><span class="hljs-comment"># 加载内置的RCircos.Gene.Label.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定内容在内侧的环形还是外侧的环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 指定内容在第几个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 1;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Gene.Connector.Plot<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 在染色体上添加基因名称， 指定内容在第几个环形生成</span><br>name.col <span class="hljs-operator">&lt;-</span> 4;<br>track.num <span class="hljs-operator">&lt;-</span> 2;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Gene.Name.Plot<span class="hljs-punctuation">(</span>RCircos.Gene.Label.Data<span class="hljs-punctuation">,</span> name.col<span class="hljs-punctuation">,</span>track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvNmdNaEhEUTZuY2dvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvcDAza1NIbkZzV29BLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.绘制热图</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加热图类型的环形 ---------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Heatmap.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Heatmap.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定以第6列数据生成热图</span><br>data.col <span class="hljs-operator">&lt;-</span> 6;<br><span class="hljs-comment"># 指定内容在第5个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定内容在内侧的环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Heatmap.Plot<span class="hljs-punctuation">(</span>RCircos.Heatmap.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加热图类型的环形 ---------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Heatmap.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Heatmap.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定以第6列数据生成热图</span><br>data.col <span class="hljs-operator">&lt;-</span> 6;<br><span class="hljs-comment"># 指定内容在第5个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定内容在内侧的环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Heatmap.Plot<span class="hljs-punctuation">(</span>RCircos.Heatmap.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvRUw3ZjNhbVlWUm9lLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvdjludm9RWTJRUU5MLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.绘制散点图</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加散点图类型的环形 -------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Scatter.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Scatter.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定以第5列数据图形中散点纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定图形在第6个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 6;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span><br><span class="hljs-comment"># 指定数据大于1的点以红色显示，小于数据1的点以蓝色显示</span><br>by.fold <span class="hljs-operator">&lt;-</span> 1;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Scatter.Plot<span class="hljs-punctuation">(</span>RCircos.Scatter.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span>track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">,</span> by.fold<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加散点图类型的环形 -------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Scatter.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Scatter.Data<span class="hljs-punctuation">)</span>;<br><br><span class="hljs-comment"># 指定以第5列数据图形中散点纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定图形在第6个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 6;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span><br><span class="hljs-comment"># 指定数据大于1的点以红色显示，小于数据1的点以蓝色显示</span><br>by.fold <span class="hljs-operator">&lt;-</span> 1;<br><br><span class="hljs-comment"># 绘图</span><br>RCircos.Scatter.Plot<span class="hljs-punctuation">(</span>RCircos.Scatter.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span>track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">,</span> by.fold<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvOGVOQzNiaXJnTW9JLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvYUhIT3VubHlpOFFtLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="5-绘制折线图"><a href="#5-绘制折线图" class="headerlink" title="5.绘制折线图"></a>5.绘制折线图</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加折线图类型的环形 -------------------------------------------------------------------</span><br><br><span class="hljs-comment"># 加载内置的RCircos.Line.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Line.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定以第5列数据做为图形中拆线的纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定图形在第7个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 7;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><br><span class="hljs-comment"># 将chromosome列加入 `chr`,不然会因为数据格式不一致报错</span><br>RCircos.Line.Data<span class="hljs-operator">$</span>chromosome <span class="hljs-operator">=</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr&quot;</span><span class="hljs-punctuation">,</span>RCircos.Line.Data<span class="hljs-operator">$</span>chromosome<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>RCircos.Line.Plot<span class="hljs-punctuation">(</span>RCircos.Line.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加折线图类型的环形 -------------------------------------------------------------------</span><br><br><span class="hljs-comment"># 加载内置的RCircos.Line.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Line.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定以第5列数据做为图形中拆线的纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 5;<br><span class="hljs-comment"># 指定图形在第7个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 7;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><br><span class="hljs-comment"># 将chromosome列加入 `chr`,不然会因为数据格式不一致报错</span><br>RCircos.Line.Data<span class="hljs-operator">$</span>chromosome <span class="hljs-operator">=</span> paste0<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;chr&quot;</span><span class="hljs-punctuation">,</span>RCircos.Line.Data<span class="hljs-operator">$</span>chromosome<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>RCircos.Line.Plot<span class="hljs-punctuation">(</span>RCircos.Line.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvV0xUb1FVQ3F1OTdILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘制：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvRFd5ZVhWSHRyejlBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.绘制直方图</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加直方图类型的环形 --------------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Histogram.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Histogram.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定以第4列数据做为图形中直方的纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 4;<br><span class="hljs-comment"># 指定图形在第8个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 8;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Histogram.Plot<span class="hljs-punctuation">(</span>RCircos.Histogram.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加直方图类型的环形 --------------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Histogram.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Histogram.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定以第4列数据做为图形中直方的纵坐标</span><br>data.col <span class="hljs-operator">&lt;-</span> 4;<br><span class="hljs-comment"># 指定图形在第8个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 8;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Histogram.Plot<span class="hljs-punctuation">(</span>RCircos.Histogram.Data<span class="hljs-punctuation">,</span> data.col<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvaTJZSXpsUGtZd1ZELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvakRwaGJOVGgxQmRoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="6-绘制网络图"><a href="#6-绘制网络图" class="headerlink" title="6.绘制网络图"></a>6.绘制网络图</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加网络图类型的环形 --------------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Tile.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Tile.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定图形在第9个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 9;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Tile.Plot<span class="hljs-punctuation">(</span>RCircos.Tile.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加网络图类型的环形 --------------------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Tile.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Tile.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定图形在第9个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 9;<br><span class="hljs-comment"># 指定图形在内侧环形生成</span><br>side <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;in&quot;</span>;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Tile.Plot<span class="hljs-punctuation">(</span>RCircos.Tile.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> side<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvMHltVTZ4c3AyWEs3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvVFdEY3lLZEljTnhCLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="7-添加和弦图"><a href="#7-添加和弦图" class="headerlink" title="7.添加和弦图"></a>7.添加和弦图</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 添加一个或多个基因间的联系曲线 ----------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Link.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Link.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定图形在第11个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 11;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Link.Plot<span class="hljs-punctuation">(</span>RCircos.Link.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 加载内置的RCircos.Ribbon.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Ribbon.Data<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 添加一个或多个基因间的联系曲线 ----------------------------------------------------------</span><br><span class="hljs-comment"># 加载内置的RCircos.Link.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Link.Data<span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 指定图形在第11个环形生成</span><br>track.num <span class="hljs-operator">&lt;-</span> 11;<br><span class="hljs-comment"># 绘图</span><br>RCircos.Link.Plot<span class="hljs-punctuation">(</span>RCircos.Link.Data<span class="hljs-punctuation">,</span> track.num<span class="hljs-punctuation">,</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>;<br><span class="hljs-comment"># 加载内置的RCircos.Ribbon.Data数据集</span><br>data<span class="hljs-punctuation">(</span>RCircos.Ribbon.Data<span class="hljs-punctuation">)</span>;<br></code></pre></td></tr></table></figure><p>数据格式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvNzBPWW03dUVSZlV2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>绘图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvUkttcTZuWEtFMXhRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="三、导出PDF"><a href="#三、导出PDF" class="headerlink" title="三、导出PDF"></a>三、导出PDF</h5><p>点击 Export ， 选择Save as PDF</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvT2puU0NDdVRqTWpsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>修改导出大小，最好是正方形的，保存</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvSnpDOEl2MUMybVVXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>会在根目录发现导出的圈图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MTkvOTBBTndGVHd3MXFSLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> R </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G2 基础教程</title>
      <link href="/posts/54170/"/>
      <url>/posts/54170/</url>
      
        <content type="html"><![CDATA[<h1 id="G2-图表组成"><a href="#G2-图表组成" class="headerlink" title="G2 图表组成"></a>G2 图表组成</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为了更好得使用 G2 进行数据可视化，我们需要了解 G2 图表的组成以及相关概念。</p><p>完整的 G2 图表组成如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay8zMTMyNTRhYS1mZjk3LTQzOTYtOTE5Mi0zYzBmOGZjMTY4NjcvYXR0YWNoLzIzNzgvZGEwN2IyN2ZiODg1MjA2YS9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><h2 id="坐标轴-AXES"><a href="#坐标轴-AXES" class="headerlink" title="坐标轴 AXES"></a>坐标轴 AXES</h2><p>每个图表通常包含两个坐标轴，在直角坐标系（笛卡尔坐标系）下，分别为 x 轴和 y 轴，在极坐标轴下，则分别由角度和半径 2 个维度构成。</p><p>每个坐标轴由坐标轴线（line）、刻度线（tickLine）、刻度文本（label）、标题（title）以及网格线（grid）组成。</p><p>查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-axes">Axis 教程</a>获取更多信息。</p><h2 id="图例-LEGEND"><a href="#图例-LEGEND" class="headerlink" title="图例 LEGEND"></a>图例 LEGEND</h2><p>图例作为图表的辅助元素，用于标定不同的数据类型以及数据的范围，用于辅助阅读图表，帮助用户在图表中进行数据的筛选过滤。</p><p>查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-legend">Legend 教程</a>获取更多信息。</p><h2 id="几何标记-GEOM"><a href="#几何标记-GEOM" class="headerlink" title="几何标记 GEOM"></a>几何标记 GEOM</h2><p>几何标记（Geometry），即我们所说的点、线、面这些几何图形，在 G2 中几何标记的类型决定了生成图表的类型。也就是数据被可视化后的实际表现，不同的几何标记都包含对应的图形属性。</p><p>查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-geom">Geom 教程</a>获取更多信息。</p><h2 id="提示信息-TOOLTIP"><a href="#提示信息-TOOLTIP" class="headerlink" title="提示信息 TOOLTIP"></a>提示信息 TOOLTIP</h2><p>当鼠标悬停在某个点上时，会以提示框的形式显示当前点对应的数据的信息，比如该点的值，数据单位等。数据提示框内提示的信息还可以通过格式化函数动态指定。</p><p>查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-tooltip">Tooltip 教程</a>获取更多信息。</p><h2 id="辅助标记-GUIDE"><a href="#辅助标记-GUIDE" class="headerlink" title="辅助标记 GUIDE"></a>辅助标记 GUIDE</h2><p>当需要在图表上绘制一些辅助线、辅助框或者图片时，比如增加平均值线、最高值线或者标示明显的范围区域时，可以使用辅助标记 guide。</p><p>查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-guide">Guide 教程</a>获取更多信息。</p><h1 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h1><p>本节主要讲解如何创建以及配置 Chart 图表对象，主要内容包括图表容器全局样式配置、绘图区、图表宽度自适应等相关内容。</p><h2 id="图表容器"><a href="#图表容器" class="headerlink" title="图表容器"></a>图表容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><div id="c1"></div><br></code></pre></td></tr></table></figure><p>实例化 Chart 对象时，绑定 dom 容器的方式有两种：</p><p><strong>1. 传入 dom 容器的 id</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  width: 1000,<br>  height: 500<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>2. 传入 dom 容器的 html 节点对象</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  container: document.getElementById(&#x27;c1&#x27;),<br>  width: 1000,<br>  height: 500<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>注：为了兼容 G2 3.0 之前的版本，也可使用 <code>id</code> 属性代替 <code>container</code>，用法相同。</p></blockquote><h2 id="图表样式"><a href="#图表样式" class="headerlink" title="图表样式"></a>图表样式</h2><p><strong>1. 图表的宽高</strong></p><p>创建 chart 对象时，需要指定图表的宽高，通过如下方式指定：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  width: 1000,<br>  height: 500<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>2. 图表的样式</strong></p><p>图表样式包括画布背景、绘图区域背景以及内边框，分别对应如下属性：</p><ul><li><p><code>background</code>：用于设置整个 chart 的图表背景样式，包括边框，背景色，透明度，圆角等；</p></li><li><p><code>plotBackground</code>：用于设置 chart 绘图区域的背景样式，包括边框，背景色，透明度，圆角等；</p></li><li><p><code>padding</code>：用于设置边距，用法同 CSS 中的 padding 属性相同, [上，右，下，左]；</p></li></ul><p>用法如下，具体详见 <a href="https://www.yuque.com/antv/g2-docs/api-chart">API 文档</a>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  width: 1000,<br>  height: 500,<br>  padding: [ 20, 20, 95, 80 ] // 上，右，下，左<br>&#125;);<br></code></pre></td></tr></table></figure><p>下图展示了 G2 的图表布局：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL1BmbnZyQ1FSZnVQbUpJcWZLTmtTLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="图表宽度自适应"><a href="#图表宽度自适应" class="headerlink" title="图表宽度自适应"></a>图表宽度自适应</h3><p>默认情况下，G2 图表的宽度需要用户手动设置 <code>width</code> 参数，当需要图表跟随图表容器宽度变化时，则需要开启 <code>forceFit</code> 属性，默认其值为  false，开启方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height : 400<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时，不需要设置 <code>width</code> 属性，即使设置了也不会生效。</p><p>另外还可以手动得调用自适应函数 <code>chart.forceFit()</code> 来响应页面变化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.forceFit(); // 手动调用自适应函数<br></code></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li><p>G2 的图表是根据父容器的宽度来计算宽度，如果父容器隐藏，则会将宽度计算成 0，显示父容器时，需要调用一下 chart.forceFit()。</p></li><li><p>仅当浏览器的窗口变化时，图表会重新计算宽度，其他情况下不进行宽度的计算和自适应。</p></li></ul><h3 id="图表动画"><a href="#图表动画" class="headerlink" title="图表动画"></a>图表动画</h3><p>默认情况下，G2 的图表动画处于开启状态，可以通过如下两种方式关闭图表动画：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 方式一： 设置 animate 属性<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  width: 800,<br>  height : 400,<br>  animate: false // 关闭图表动画<br>&#125;);<br><br>// 方式二： 手动调用 animate 函数<br>chart.animate(false); // 关闭动画<br></code></pre></td></tr></table></figure><p>单个几何标记（折线、面积图）的动画可以在 <a href="https://www.yuque.com/antv/g2-docs/tutorial-geom">Geom</a> 上设置</p><h1 id="装载数据"><a href="#装载数据" class="headerlink" title="装载数据"></a>装载数据</h1><h2 id="如何装载数据"><a href="#如何装载数据" class="headerlink" title="如何装载数据"></a>如何装载数据</h2><p>chart 对象支持两种数据载入的方式：</p><ul><li>方式 1：<code>data</code> 属性传入</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart = new G2.Chart(&#123;<br>  id: &#x27;c1&#x27;,<br>  width: 600,<br>  height: 300,<br>  data: [<br>    &#123; x: &#x27;a&#x27;, y: 1 &#125;,<br>    &#123; x: &#x27;b&#x27;, y: 2 &#125;,<br>    ...<br>  ]<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>方式 2：调用 <code>chart.source(data)</code> 方法，每个字段的<a href="https://www.yuque.com/antv/g2-docs/tutorial-scale">列定义</a>也可以在这里传入</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  x: &#123;<br>    type: &#x27;cat&#x27;<br>  &#125;,<br>  y: &#123;<br>    min: 0<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="支持的数据格式"><a href="#支持的数据格式" class="headerlink" title="支持的数据格式"></a>支持的数据格式</h2><p>G2 支持两种格式的数据源：</p><ol><li><p>JSON 数组</p></li><li><p><a href="https://www.yuque.com/antv/g2-docs/tutorial-dataset">DataView 对象</a></p></li></ol><h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>G2 接收的数据格式非常简单：标准的 JSON 数组，其中每个数组元素是一个标准的 JSON 对象：</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; gender: &#x27;男&#x27;, count: 40 &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 30 &#125;<br>];<br><br>chart.source(data);<br></code></pre></td></tr></table></figure><h3 id="DataView-对象"><a href="#DataView-对象" class="headerlink" title="DataView 对象"></a>DataView 对象</h3><p>详见 <a href="https://www.yuque.com/antv/g2-docs/tutorial-dataset">DataSet 教程</a>。</p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>G2 更新数据的方式主要有三种：</p><ul><li><p>仅仅是更新图表的数据</p></li><li><p>清理所有，重新绘制</p></li><li><p>使用 DataView 时的更新</p></li></ul><h3 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h3><p>如果需要马上更新图表，使用 <code>chart.changeData(data)</code> 即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.changeData(newData);<br></code></pre></td></tr></table></figure><ul><li>view 也支持 <code>view.changeData(data)</code></li></ul><p>如果仅仅是更新数据，而不需要马上更新图表，可以调用 <code>chart.source(data)</code>，需要更新图表时调用 <code>chart.repaint()</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(newData);<br><br>chart.guide().clear();// 清理guide<br>chart.repaint();<br></code></pre></td></tr></table></figure><h3 id="清理图形语法"><a href="#清理图形语法" class="headerlink" title="清理图形语法"></a>清理图形语法</h3><p>更新数据时还可以清除图表上的所有元素，重新定义图形语法，重新绘制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.line().position(&#x27;x*y&#x27;);<br><br>chart.render();<br><br>chart.clear(); // 清理所有<br>chart.source(newData); // 重新加载数据<br>chart.interval().position(&#x27;x*y&#x27;).color(&#x27;z&#x27;);<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="使用-DataView-更新"><a href="#使用-DataView-更新" class="headerlink" title="使用 DataView  更新"></a>使用 DataView  更新</h3><p>由于 <code>DataSet</code> 支持状态量 <code>state</code>，一旦更改状态量，图表即一起刷新，详情查看<a href="https://www.yuque.com/antv/g2-docs/tutorial-dataset"> DataSet 教程</a>。</p><h1 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h1><p>自 G2 3.0 版本开始，原先内置的数据处理模块 frame 从 G2 包中抽离出来，独立成为 DataSet 包。DataSet 的目标是为数据可视化场景提供状态驱动（state driven）的、丰富而强大的数据处理能力。</p><h2 id="术语表"><a href="#术语表" class="headerlink" title="术语表"></a>术语表</h2><table><thead><tr><th>术语</th><th>英文</th><th>描述</th></tr></thead><tbody><tr><td>数据集</td><td>DataSet</td><td>一组数据集合</td></tr><tr><td>数据视图</td><td>DataView</td><td>单个数据视图，目前有普通二维数据（类似一张数据库表）、树形数据、图数据和地理信息数据几种类型</td></tr><tr><td>状态量</td><td>state</td><td>数据集内部流转的控制数据状态的变量</td></tr><tr><td>变换</td><td>Transform</td><td>数据变换函数，数据视图做数据处理时使用，包括图布局、数据补全、数据过滤等等</td></tr><tr><td>连接器</td><td>Connector</td><td>数据接入函数，用于把某种数据源（譬如 csv）载入到某个数据视图上</td></tr></tbody></table><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>在 G2 的 1.x 和 2.x 版本里，统计函数和数据处理是和图形语法混合在一起的。这一方面导致了不必要的隐喻，造成额外的理解成本，另一方面把数据处理模块（ Frame 和 Stat ）内置也限制了 G2 数据处理能力的进一步发展。</p><p>为追求更极致的体验，我们把数据处理部分从 G2 中完全抽离出来，对数据处理本身进行了进一步的抽象，扩展和优化，从而实现了一个独立的数据处理模块 DataSet。</p><p>首先我们把数据处理分为两个大的步骤：数据连接（Connector）和数据转换（Transform）。Connector 负责导入和归一化数据（譬如导入 CSV 数据，导入 GeoJSON 数据等），Transform 负责进行各种数据转换操作（譬如图布局、数据统计、数据补全等）。通过这样的分层，支持了前端社区非常全面的数据处理相关的算法和模块；其次，我们在单个数据视图（DataView）的基础上增加了数据集（DataSet）的概念，通过统一的 DataSet 管理，实现了各个数据视图之间的状态同步和交互。整个数据处理模块的架构如下图。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9zdmcvMTAwOTk2LzE1Mzk4MzYxMTkyMTAtYjVkYjVmOWMtYzFmYS00NmJiLTljMGYtODEyNmMwOGQyOGFiLnN2Zw?x-oss-process=image/format,png" alt="img"></p><p>DataSet 支持状态量（State）可以实现多个图表之间的联动</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="浏览器引入"><a href="#浏览器引入" class="headerlink" title="浏览器引入"></a>浏览器引入</h3><p>可以通过<code>&lt;script&gt;</code>标签引入在线资源或者本地脚本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><!-- 引入在线资源 --><br><script src="https://unpkg.com/@antv/data-set"></script><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><!-- 引入本地脚本 --><br><script src="./data-set.js"></script><br></code></pre></td></tr></table></figure><p>这样，就可以在后续脚本中得到全局变量 DataSet。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><script src="https://unpkg.com/@antv/data-set"></script><br><script><br>const dv = new DataSet.View();<br></script><br></code></pre></td></tr></table></figure><h3 id="通过-npm-安装"><a href="#通过-npm-安装" class="headerlink" title="通过 npm 安装"></a>通过 npm 安装</h3><p><a href="https://www.npmjs.com/package/@antv/data-set">[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-c9ZXrCZb-1594818845135)(https:&#x2F;&#x2F;img.shields.io&#x2F;npm&#x2F;v&#x2F;@antv&#x2F;data-set.svg?style&#x3D;flat-square)]</a></p><p>我们提供了 DataSet 的 npm 包，可以通过下面的命令进行安装。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm install @antv/data-set --save<br></code></pre></td></tr></table></figure><p>安装后即可使用 <code>import</code> 或者 <code>require</code> 进行引用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">import &#123; View &#125; from &#x27;@antv/data-set&#x27;;<br>const dv = new View();<br></code></pre></td></tr></table></figure><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>DataSet 主要完成了以下功能：</p><ul><li><p>源数据的解析，将 CSV, DSV, GeoJSON 转成标准的JSON，查看 <a href="https://www.yuque.com/antv/g2-docs/api-connector">Connector</a></p></li><li><p>加工数据，包括 filter, map, fold(补数据) 等操作，查看 <a href="https://www.yuque.com/antv/g2-docs/api-transform">Transform</a></p></li><li><p>统计函数，汇总统计、百分比、封箱 等统计函数，查看 <a href="https://www.yuque.com/antv/g2-docs/api-transform">Transform</a></p></li><li><p>特殊数据处理，包括 地理数据、矩形树图、桑基图、文字云 的数据处理，查看 <a href="https://www.yuque.com/antv/g2-docs/api-transform">Transform</a></p></li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="单独使用-DataView"><a href="#单独使用-DataView" class="headerlink" title="单独使用 DataView"></a>单独使用 DataView</h3><p>如果仅仅是对数据进行加工，不需要图表联动</p><h3 id="状态量"><a href="#状态量" class="headerlink" title="状态量"></a>状态量</h3><p>在G2 3.0 中使用 DataSet 的状态量(State) 可以很容易的实现图表的联动，步骤如下：</p><ol><li><p>创建 DataSet 对象，指定状态量</p></li><li><p>创建 DataView 对象，在 transform 中使用状态量</p></li><li><p>创建图表，引用前面创建 DataView</p></li><li><p>改变状态量，所有 DataView 更新</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// step1 创建 dataset 指定状态量<br>const ds = new DataSet(&#123;<br>  state: &#123;<br>    year: &#x27;2010&#x27;<br>  &#125;<br>&#125;);<br><br>// step2 创建 DataView<br>const dv = ds.createView().source(data);<br><br>dv.transform(&#123;<br>  type: &#x27;filter&#x27;,<br>  callback(row) &#123;<br>    return row.year === ds.state.year;<br>  &#125;<br>&#125;);<br><br><br>// step3 引用 DataView<br>chart.source(dv);<br><br>// step4 更新状态量<br>ds.setState(&#x27;year&#x27;, &#x27;2012&#x27;);<br></code></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li><p>在 DataSet 创建了状态量后，默认会影响其管理的所有的 DataView， 可以通过 <code>watchingStates</code> 明确的指定受那些状态量影响，设置为空数组时不受状态量的影响。</p></li><li><p>所有引用了 DataSet 管理的 DataView 的图表都会受自动刷新，不需要手工刷新。</p></li></ul><h3 id="图表联动示例"><a href="#图表联动示例" class="headerlink" title="图表联动示例"></a>图表联动示例</h3><p>假设我们有一个 CSV 文件 <code>population-by-age.csv</code>，里面的数据是美国各个州不同年龄段的人口数量，文件内容如下：</p><table><thead><tr><th>State</th><th>小于5岁</th><th>5至13岁</th><th>14至17岁</th><th>18至24岁</th><th>25至44岁</th><th>45至64岁</th><th>65岁及以上</th></tr></thead><tbody><tr><td>WY</td><td>38253</td><td>60890</td><td>29314</td><td>53980</td><td>137338</td><td>147279</td><td>65614</td></tr><tr><td>DC</td><td>36352</td><td>50439</td><td>25225</td><td>75569</td><td>193557</td><td>140043</td><td>70648</td></tr><tr><td>VT</td><td>32635</td><td>62538</td><td>33757</td><td>61679</td><td>155419</td><td>188593</td><td>86649</td></tr><tr><td>ND</td><td>41896</td><td>67358</td><td>33794</td><td>82629</td><td>154913</td><td>166615</td><td>94276</td></tr><tr><td>AK</td><td>52083</td><td>85640</td><td>42153</td><td>74257</td><td>198724</td><td>183159</td><td>50277</td></tr><tr><td>SD</td><td>58566</td><td>94438</td><td>45305</td><td>82869</td><td>196738</td><td>210178</td><td>116100</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>我们希望把 CSV 文件的内容载入，画一个以州为横轴，人口数量为纵轴的层叠柱状图，并且在查看某个柱子的时候，希望能看到对应某个州的对比各个年龄段人口数量的饼图。下面我们来看看应该怎么画？</p><blockquote><p>Step1：创建数据集 DataSet 实例，管理 state 状态量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const ds = new DataSet(&#123;<br>  state: &#123;<br>    currentState: &#x27;WY&#x27;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>Step2：为层叠柱状图创建数据视图 View 实例，装载数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">/*<br> * 如果不需要用到状态管理之类的功能，也可以不基于 DataSet 实例创建数据视图<br> * 直接用 const dv = new DataSet.View();<br> * 本例需要用状态量在不同的数据视图实例之间通信，所以需要有一个 DataSet 实例管理状态量<br> */<br>$.get(&#x27;/assets/data/population-by-age.csv&#x27;, data => &#123;<br>  const dvForAll = ds<br>    .createView(&#x27;populationByAge&#x27;, &#123;<br>      watchingStates: [], // 用空数组，使得这个实例不监听 state 变化<br>    &#125;) // 在 DataSet 实例下创建名为 populationByAge 的数据视图<br>    .source(data, &#123;<br>      type: &#x27;csv&#x27;, // 使用 CSV 类型的 Connector 装载 data<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>Step3：合并人口数量列（新增”年龄段”和”人口”字段，把各个年龄段的人口数量列数据合并到这两列上）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">dvForAll.transform(&#123;<br>  type: &#x27;fold&#x27;,<br>  fields: [ &#x27;小于5岁&#x27;,&#x27;5至13岁&#x27;,&#x27;14至17岁&#x27;,&#x27;18至24岁&#x27;,&#x27;25至44岁&#x27;,&#x27;45至64岁&#x27;,&#x27;65岁及以上&#x27; ],<br>  key: &#x27;age&#x27;,<br>  value: &#x27;population&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>Step4：为饼图创建数据视图实例，继承上一个数据视图的数据，通过状态量 currentState 过滤数据、统计不同年龄段人口占比</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const dvForOneState = ds<br>  .createView(&#x27;populationOfOneState&#x27;)<br>  .source(dvForAll); // 从全量数据继承，写法也可以是 .source(&#x27;populationByAge&#x27;)<br>    <br>dvForOneState<br>  .transform(&#123; // 过滤数据<br>    type: &#x27;filter&#x27;,<br>    callback(row) &#123;<br>      return row.state === ds.state.currentState;<br>    &#125;<br>  &#125;)<br>  .transform(&#123;<br>    type: &#x27;percent&#x27;,<br>    field: &#x27;population&#x27;,<br>    dimension: &#x27;age&#x27;,<br>    as: &#x27;percent&#x27;<br>  &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>Step5：最后使用 G2 绘图、绑定事件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const c1 = new G2.Chart(&#123;<br>  id: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height: 400,<br>&#125;);<br>c1.source(dvForAll);<br>c1.legend(&#123;<br>  position: &#x27;top&#x27;,<br>&#125;);<br>c1.axis(&#x27;population&#x27;, &#123;<br>  label: &#123;<br>    formatter: val => &#123;<br>      return val / 1000000 + &#x27;M&#x27;;<br>    &#125;<br>  &#125;<br>&#125;);<br>c1.intervalStack()<br>  .position(&#x27;state*population&#x27;)<br>  .color(&#x27;age&#x27;)<br>  .select(true, &#123;<br>    mode: &#x27;single&#x27;,<br>    style: &#123;<br>      stroke: &#x27;red&#x27;,<br>      strokeWidth: 5<br>    &#125;<br>  &#125;);<br>c1.on(&#x27;tooltip:change&#x27;, function(evt) &#123;<br>  const items = evt.items || [];<br>  if (items[0]) &#123;<br>    ds.setState(&#x27;currentState&#x27;, items[0].title);<br>  &#125;<br>&#125;);<br><br>const c2 = new G2.Chart(&#123;<br>  id: &#x27;c2&#x27;,<br>  forceFit: true,<br>  height: 300,<br>  padding: 0,<br>&#125;);<br>c2.source(dvForOneState);<br>c2.coord(&#x27;theta&#x27;, &#123;<br>  radius: 0.8 // 设置饼图的大小<br>&#125;);<br>c2.legend(false);<br>c2.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;age&#x27;)<br>  .label(&#x27;age*percent&#x27;,function(age, percent) &#123;<br>    percent = (percent * 100).toFixed(2) + &#x27;%&#x27;;<br>    return age + &#x27; &#x27; + percent;<br>  &#125;);<br><br>c1.render();<br>c2.render();<br></code></pre></td></tr></table></figure><blockquote><p>效果：</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4MzYyNTE0ODAtNDgxMGRhY2EtZWI4Yi00ZGI5LWJlYzktN2UyN2I4ZTVkZDVmLnBuZw?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4MzYyNjE4NTItMjczMzkyNWYtNmQyMC00MTQ0LThjZDQtMzkwMTAzZWI3M2RjLnBuZw?x-oss-process=image/format,png" alt="img"></p><h1 id="Scale-度量"><a href="#Scale-度量" class="headerlink" title="Scale 度量"></a>Scale 度量</h1><h2 id="度量的定义"><a href="#度量的定义" class="headerlink" title="度量的定义"></a>度量的定义</h2><p>度量 Scale，是数据空间到图形空间的转换桥梁，负责原始数据到 [0, 1] 区间数值的相互转换工作，从原始数据到 [0, 1] 区间的转换我们称之为归一化操作。</p><p>不同的数据类型对应不同的度量，如</p><ol><li><p>连续数据类型，如 <code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code> 一组数据，在其原始数值范围 [0, 10] 内通过度量转换至 [0, 1] 范围的数据，变成 <code>0, 0.1, 0.2, ..., 0.9, 1</code>，同时通过 invert 反转，还需要度量后的数值恢复至原始值；</p></li><li><p>分类数据类型，如 <code>[&#39;男&#39;, &#39;女&#39;]</code> 这一组数据，通过度量转换后变成 [0, 1]，同样时通过 invert 反转可恢复至原始值。</p></li></ol><h2 id="度量的功能"><a href="#度量的功能" class="headerlink" title="度量的功能"></a>度量的功能</h2><p>在 G2 中度量用于完成以下功能：</p><ol><li><p>将数据转换到 [0, 1] 范围内，方便将数据映射到位置、颜色、大小等图形属性；</p></li><li><p>将归一化后的数据反转回原始值。例如 <code>分类a</code> 转换成 0.2，那么对应 <code>0.2</code> 需要反转回 <code>分类a</code>；</p></li><li><p>划分数据，用于在坐标轴、图例显示数值的范围、分类等信息。</p></li></ol><p>Scale 的功能非常简单易理解，但是在 G2 的数据处理流程中起着非常重要的承接作用，通过阅读 <a href="https://www.yuque.com/antv/g2-docs/tutorial-data-flow">G2 数据处理流程</a>章节，可以更好得理解度量 Scale。</p><h2 id="度量的类型"><a href="#度量的类型" class="headerlink" title="度量的类型"></a>度量的类型</h2><p>度量的类型是由原始数据的值类型所决定的，所以在介绍度量的类型之前，需要了解下 G2 对数据的分类方式。</p><p>在 G2 中我们按照数值是否连续对数据进行分类：</p><ol><li><p>分类（非连续）数据，又分为有序分类和无序分类；</p></li><li><p>连续数据，时间也是一种连续数据类型。</p></li></ol><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; month: &#x27;一月&#x27;, temperature: 7, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: &#x27;二月&#x27;, temperature: 6.9, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: &#x27;三月&#x27;, temperature: 9.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: &#x27;四月&#x27;, temperature: 14.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: &#x27;五月&#x27;, temperature: 18.2, city: &#x27;berlin&#x27; &#125;<br>]<br><br>// 指定度量(或称 列定义）<br>chart.scale(&#123;<br>  month: &#123;<br>    alias: &#x27;月份&#x27; // 为属性定义别名<br>  &#125;,<br>  temperature: &#123;<br>    alias: &#x27;温度&#x27; // 为属性定义别名<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在上述数据中，<code>month</code> 代表月份，<code>temperature</code> 代表温度，<code>city</code> 代表城市，其中 <code>month</code> 和 <code>city</code> 都是分类类型数据，但是不同的是 <code>month</code> 作为月份是有序的分类类型，而 <code>city</code> 是无序的分类类型，而 <code>temperature</code> 是连续的数值类型。</p><p>根据上述的数据分类方式，G2 提供了不同的度量类型：</p><table><thead><tr><th>数据类型</th><th>度量类型</th></tr></thead><tbody><tr><td>连续</td><td>linear、log、pow、time</td></tr><tr><td>分类（非连续）</td><td>cat、timeCat</td></tr></tbody></table><p>另外 G2 还提供了 <code>identity</code> 类型的度量用于数据源中 <strong>常量</strong> 数据的操作。</p><p>对于 G2 生成的所有度量对象，均拥有以下属性，这些属性均可以由用户进行配置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  type: &#123;string&#125;, // 度量的类型<br>  range: &#123;array&#125;, // 数值范围区间，即度量转换的范围，默认为 [0, 1]<br>  alias: &#123;string&#125;, // 为数据属性定义别名，用于图例、坐标轴、tooltip 的个性化显示<br>  ticks: &#123;array&#125;, // 存储坐标轴上的刻度点文本信息<br>  tickCount: &#123;number&#125;, // 坐标轴上刻度点的个数，不同的度量类型对应不同的默认值<br>  formatter: &#123;function&#125;, // 回调函数，用于格式化坐标轴刻度点的文本显示，会影响数据在坐标轴、图例、tooltip 上的显示<br>&#125;<br></code></pre></td></tr></table></figure><p>默认生成度量的机制如下：</p><ul><li><p>查看用户是否制定了对应字段的数据类型，查看<a href="https://www.yuque.com/antv/g2-docs/tutorial-data-fields">列定义</a></p></li><li><p>如果没有，判断字段的第一条数据的字段类型</p></li><li><ul><li>如果数据中不存在对应的字段，则为 ‘identity’</li></ul></li><li><ul><li>如果是数字则为 ‘linear’；</li></ul></li><li><ul><li>如果是字符串，判定是否是时间格式，如果是时间格式则为时间类型 ‘time’,</li></ul></li><li><ul><li>否则是分类类型 ‘cat’</li></ul></li></ul><p>下面就让我们来详细了解下各个度量的类型：</p><h3 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h3><p>连续的数据值，如这一组数据：[1, 2, 3, 4, 5]，除了通用的属性外，还包含以下自有属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  nice: &#123;boolean&#125;, // 默认为 true，用于优化数值范围，使绘制的坐标轴刻度线均匀分布。例如原始数据的范围为 [3, 97]，如果 nice 为 true，那么就会将数值范围调整为 [0, 100]<br>  min: &#123;number&#125;, // 定义数值范围的最小值<br>  max: &#123;number&#125;, // 定义数值范围的最大值<br>  minLimit: &#123;number&#125;, // 对数据的最小值的限制，无论数据中是否存在比这个值小的数据，生成的坐标点不会小于这个值<br>  maxLimit: &#123;number&#125;, // 对数据的最大值的限制，无论数据中是否存在比这个值大的数据，生成的坐标点不会大于这个值<br>  tickCount: &#123;number&#125;, // 定义坐标轴刻度线的条数，默认为 5<br>  tickInterval: &#123;number&#125;, // 用于指定坐标轴各个刻度点的间距，为原始数据值的差值，tickCount 和 tickInterval 不可以同时声明<br>&#125;<br></code></pre></td></tr></table></figure><p><code>说明</code>：</p><ul><li><p>min,max,minLimt 和 maxLimit 都会影响坐标轴上坐标点的生成</p></li><li><p>min 和 minLimt 的差别主要体现在 如果数据中的数据的范围是 10-20 对于 min: 0 来说，会生成从 0 - 20 范围的坐标点，但是对于 minLimit 来说只要保证生成的坐标点不小于 0 即可，生成的坐标点的范围可能依然在 10 - 20 之间。</p></li><li><p>max 和 maxLimit 的差别同 min 和 minLimit 类似， max 体现在坐标轴上肯定会出现 max 或者比 max 大的值，但是绝对不会出现比 maxLimit 大的值。</p></li></ul><p>通过下面学生成绩的示例来说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;张三&#x27;, score: 53 &#125;,<br>  &#123; name: &#x27;王五&#x27;, score: 92 &#125;<br>];<br><br>chart.source(data);<br>chart.point().position(&#x27;name*score&#x27;).color(&#x27;name&#x27;);<br>img,[object Object],<br></code></pre></td></tr></table></figure><p><code>说明</code></p><ul><li>默认生成的 score 分数的度量的范围是 50 - 95 ，这是 nice: true 的效果（让人看起来更清晰）</li></ul><p>我们知道学生分数的范围是 0 - 100 ,所以 50 - 90 并不满足我们的需求，我们可以限定 min,max 的范围</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;张三&#x27;, score: 53 &#125;,<br>  &#123; name: &#x27;王五&#x27;, score: 92 &#125;<br>];<br><br>chart.source(data, &#123;<br>  score: &#123;<br>    min: 0,<br>    max: 100<br>  &#125;<br>&#125;);<br><br>chart.point().position(&#x27;name*score&#x27;).color(&#x27;name&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1NDI3MTYyMDI1NTktNDY4OGYxOTEtMDg3NS00OGYxLWE4NDQtNDE0Y2VlZjUyZTFkLnBuZw?x-oss-process=image/format,png" alt="img"></p><p><code>说明</code></p><ul><li>此时设置 minLimt 和 maxLimit 并不会改变生成数据度量的范围</li></ul><p>minLimit 和 maxLimit 主要应用的场景是生成的度量范围超出了用户定义的范围如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  score: &#123;<br>    min: 0,<br>    max: 100,<br>    tickCount: 4<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>说明</code>：</p><ul><li><p>由于此时用户设置了 tickCount: 4 为了满足用户对坐标点个数的需求，有时候会扩大数据的范围</p></li><li></li></ul><p>设置了 maxLimit 后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  score: &#123;<br>    min: 0,<br>    maxLimit: 100,<br>    tickCount: 4<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1NDI3MTYxNTM0NjMtMWM0N2Y3YTgtYTEzZC00ZjdkLWE4OGItODA3OGY4YjkxZDc0LnBuZw?x-oss-process=image/format,png" alt="img"></p><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p>连续非线性的 log 类型度量，该度量会将 [1, 10, 100, 1000] 先转换成 [0, 1, 2, 3] 然后再进行归一化操作。log 类型的数据可以将非常大范围的数据映射到一个均匀的范围内。</p><p>log 度量是 linear 的子类，支持所有通用的属性和 linear 度量的属性，特有的属性如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  base: &#123;number&#125;, // log 的基数，默认是 2<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="log-度量的使用场景"><a href="#log-度量的使用场景" class="headerlink" title="log 度量的使用场景"></a>log 度量的使用场景</h4><p>对于以下场景，建议将数据的度量类型指定为 log 类型：</p><ol><li><p>散点图中数据的分布非常广，同时数据分散在几个区间内是，例如分布在 0 - 100， 10000 - 100000，1千万 - 1亿内，这时候适合使用 log 度量；</p></li><li><p>热力图中数据分布不均匀时也会出现只有非常高的数据点附近才有颜色，此时需要使用 log 度量，对数据进行 log 处理。</p></li></ol><p>对比使用未使用 log 和使用了log 后的效果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 数据<br>const data = [<br>  &#123; site: &#x27;站点1&#x27;, pv: 10 &#125;,<br>  &#123; site: &#x27;站点2&#x27;, pv: 99 &#125;,<br>  &#123; site: &#x27;站点3&#x27;, pv: 10000 &#125;<br>];<br><br>chart.source(data, &#123;<br>  pv: &#123;<br>    type: &#x27;log&#x27;,<br>    base: 10<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL3JvTWNzdG1yWWVtYkZXVUhZZWxSLnBuZw?x-oss-process=image/format,png" alt="img"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL1NFVFFlWGRkbHhzcUZOTlBoaUNSLnBuZw?x-oss-process=image/format,png" alt="img"></p><h3 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h3><p>连续非线性的 pow 类型度量，该度量将 [2, 4, 8, 16, 32] 先转换成 [1, 2, 3, 4, 5] 然后再进行归一化操作。</p><p>pow 类型的度量也是 linear 类型的一个子类，除了支持所有通用的属性和 linear 度量的属性外也有自己的属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  exponent: &#123;number&#125;, // 指数，默认是 2<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>连续的时间类型，是一种特殊的连续性数据。time 类型的度量也是 linear 的子类，除了支持所有通用的属性和 linear 度量的属性外，还有自己特殊的属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  mask: &#123;string&#125;, // 指定时间的显示格式，默认：&#x27;YYYY-MM-DD&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：mask 的占位符标准同 <a href="https://momentjs.com/docs/#/displaying/format/">moment</a>、<a href="https://github.com/taylorhakes/fecha">fecha</a>;</p></blockquote><p>目前 G2 会自动识别如下形式的时间格式，当用户需要生成 time 类型的度量时，建议将原始时间数据转换为如下形式：</p><ol><li><p>时间戳，如 1436237115500；</p></li><li><p>时间字符串： ‘2015-03-01’，’2015-03-01 12:01:40’，’2015&#x2F;01&#x2F;05’，’2015-03-01T16:00:00.000Z’。</p></li></ol><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>分类类型数据的度量。除了拥有通用的度量属性外，用户还可以设置 <code>values</code> 属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  values: &#123;array&#125;, // 指定当前字段的分类值<br>&#125;<br></code></pre></td></tr></table></figure><p>G2 在生成 cat 类型的度量时，<code>values</code> 属性的值一般都会从原始数据源中直接获取，但对于下面两种场景，需要用户手动指定 values 值：</p><ul><li>需要指定分类的顺序时，例如：type 字段原始值为 [‘最大’, ‘最小’, ‘适中’]，我们想指定这些分类在坐标轴或者图例上的顺序为 [‘最小’,’适中’,’最大’]。这时候 cat 度量的配置如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data  = [<br>  &#123; a: &#x27;a1&#x27;, b:&#x27;b1&#x27;, type: &#x27;最小&#x27; &#125;,<br>  &#123; a: &#x27;a2&#x27;, b:&#x27;b2&#x27;, type: &#x27;最大&#x27; &#125;,<br>  &#123; a: &#x27;a3&#x27;, b:&#x27;b3&#x27;, type: &#x27;适中&#x27; &#125;<br>];<br>chart.scale(&#x27;type&#x27;, &#123;<br>  type: &#x27;cat&#x27;,<br>  values: [ &#x27;最小&#x27;, &#x27;适中&#x27;, &#x27;最大&#x27; ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果不声明度量的values字段，那么默认的顺序是：‘最小’，‘最大’，‘适中’。</p><ul><li>如果数据中的分类类型使用枚举的方式表示，那么也需要指定 values。</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data  = [<br>  &#123; a: &#x27;a1&#x27;, b:&#x27;b1&#x27;, type: 0 &#125;,<br>  &#123; a: &#x27;a2&#x27;, b:&#x27;b2&#x27;, type: 2 &#125;,<br>  &#123; a: &#x27;a3&#x27;, b:&#x27;b3&#x27;, type: 1 &#125;<br>]<br>chart.scale(&#x27;type&#x27;, &#123;<br>  type: &#x27;cat&#x27;,<br>  values: [ &#x27;最小&#x27;, &#x27;适中&#x27;, &#x27;最大&#x27; ]<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>此处必须指定 ‘cat’ 类型，values 的值必须按照索引跟枚举类型一一对应。</p></blockquote><h3 id="timeCat"><a href="#timeCat" class="headerlink" title="timeCat"></a>timeCat</h3><p>timeCat 度量对应时间数据，但是不是连续的时间类型，而是有序的分类数据。例如股票交易的日期，此时如果使用 time 类型，那么由于节假日没有数据，折线图、k 线图就会发生断裂，所以此时需要使用 timeCat 类型度量将日期转换为有序的分类数据，该度量默认会对数据做排序。</p><p>timeCat 是 cat 度量的子类，除了支持所有通用的属性和 cat 度量的属性外也有自己的属性:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  mask: &#123;string&#125;, // 指定时间的显示格式，默认：&#x27;YYYY-MM-DD&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>timeCat 和 time 类型度量的差别和应用场景</p><ul><li><p>timeCat 是分类类型的度量，所以适合于显示 <code>柱状图</code> 或者固定时间内没有数据的场景（股票图）</p></li><li><p>time 是连续类型的度量，更适合显示折线图、面积图，表现数据的趋势</p></li></ul><h1 id="什么是列定义"><a href="#什么是列定义" class="headerlink" title="什么是列定义"></a>什么是列定义</h1><p>所谓的列定义，即是对<a href="https://www.yuque.com/antv/g2-docs/tutorial-scale">度量 scale</a> 的操作。</p><p>G2 默认提供了一套生成度量的机制，但是这套机制并不能满足全部的需求，因此我们为用户提供了手动指定度量类型的方法，以满足多样的可视化需求，这种使用方式我们称之为 <strong>列定义</strong>。</p><blockquote><p>说明：列定义上的操作可以理解为直接修改数据源中的数据属性，因此它会影响坐标轴、tooltip 提示信息、图例、辅助元素 guide 以及几何标记的标签文本 label 的数据内容显示。</p></blockquote><h2 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h2><p>G2 提供了两种列定义操作方式：</p><ol><li><p><code>chart.source(data, defs);</code> 数据源载入时定义。</p></li><li><p><code>chart.scale(&#39;field&#39;, defs);</code> 该方法会覆盖 <code>chart.source()</code> 中定义的对应字段的列定义。</p></li></ol><h3 id="chart-source-data-defs"><a href="#chart-source-data-defs" class="headerlink" title="chart.source(data, defs)"></a>chart.source(data, defs)</h3><p>这种方式可以一次性为多个数据列进行度量类型的定义。</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const defs = &#123;<br>  &#x27;a&#x27;: &#123;<br>    type: &#x27;time&#x27;, // 指定 time 类型<br>    mask: &#x27;YYYY-MM-DD HH:mm:ss&#x27; // 指定时间的输出格式<br>  &#125;,<br>  &#x27;b&#x27;: &#123;<br>    type: &#x27;linear&#x27;, // 指定 linear 连续类型<br>    min: 0 // 指定度量的最小值<br>  &#125;,<br>  &#x27;c&#x27;: &#123;<br>    type: &#x27;cat&#x27;, // 指定 cat 分类类型<br>    values: [ &#x27;一月&#x27;, &#x27;二月&#x27;, &#x27;三月&#x27; ] // 重新指定 c 属性每一个的值<br>  &#125;<br>&#125;;<br>chart.source(data, defs);<br></code></pre></td></tr></table></figure><h3 id="chart-scale"><a href="#chart-scale" class="headerlink" title="chart.scale()"></a>chart.scale()</h3><p>该方法有两种使用方式：</p><ul><li>为单独某个字段进行列定义</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; type: 0, value: 1 &#125;,<br>  &#123; type: 1, value: 2 &#125;,<br>  &#123; type: 2, value: 3 &#125;<br>];<br>chart.scale(&#x27;type&#x27;, &#123;<br>  type: &#x27;cat&#x27;, // 声明 type 字段为分类类型<br>  values: [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ], // 重新显示的值<br>  alias: &#x27;类型&#x27; // 设置属性的别名<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>为多个字段进行列定义</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; type: 0, value: 1 &#125;,<br>  &#123; type: 1, value: 2 &#125;,<br>  &#123; type: 2, value: 3 &#125;<br>];<br>chart.scale(&#123;<br>  type: &#123;<br>    type: &#x27;cat&#x27;, // 声明 type 字段为分类类型<br>    values: [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ], // 重新显示的值<br>    alias: &#x27;类型&#x27; // 设置属性的别名<br>  &#125;,<br>  value: &#123;<br>    nice: false<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Demo-演示"><a href="#Demo-演示" class="headerlink" title="Demo 演示"></a>Demo 演示</h2><p>该实例为 x 轴和 y 轴的两个数据字段都进行了列定义，将 x 轴的数据指定为 time 类型并指定了时间的显示格式，而 y 轴格式化了显示形式，为其加上了单位 ‘k’，观察图表，tooltip 和 坐标轴都受了列定义的影响。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4MzY4ODg0MzYtZGJmMDI3YmUtMDg2My00NTA5LTliNDItNGZjOThhZTRlNzg2LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; value: 10, time: &#x27;2015-03-01T16:00:00.000Z&#x27; &#125;,<br>  &#123; value: 15, time: &#x27;2015-03-01T16:10:00.000Z&#x27; &#125;,<br>  &#123; value: 26, time: &#x27;2015-03-01T16:20:00.000Z&#x27; &#125;,<br>  &#123; value: 9, time: &#x27;2015-03-01T16:30:00.000Z&#x27; &#125;,<br>  &#123; value: 12, time: &#x27;2015-03-01T16:40:00.000Z&#x27; &#125;,<br>  &#123; value: 23, time: &#x27;2015-03-01T16:50:00.000Z&#x27; &#125;,<br>  &#123; value: 18, time: &#x27;2015-03-01T17:00:00.000Z&#x27; &#125;,<br>  &#123; value: 21, time: &#x27;2015-03-01T17:10:00.000Z&#x27; &#125;,<br>  &#123; value: 22, time: &#x27;2015-03-01T17:20:00.000Z&#x27; &#125;<br>];<br>const chart = new G2.Chart(&#123;<br>  container : &#x27;c1&#x27;,<br>  forceFit: true,<br>  height : 300<br>&#125;);<br>chart.source(data, &#123;<br>  &#x27;time&#x27;: &#123;<br>    type: &#x27;time&#x27;,<br>    nice: false,<br>    mask: &#x27;HH:mm&#x27;<br>  &#125;,<br>  &#x27;value&#x27;: &#123;<br>    formatter: val => &#123;<br>      return val + &#x27; k&#x27;;<br>    &#125;<br>  &#125;<br>&#125;);<br>chart.line().position(&#x27;time*value&#x27;).size(2);<br>chart.render();<br></code></pre></td></tr></table></figure><h1 id="Geom-几何标记"><a href="#Geom-几何标记" class="headerlink" title="Geom 几何标记"></a>Geom 几何标记</h1><h1 id="什么是几何标记"><a href="#什么是几何标记" class="headerlink" title="什么是几何标记"></a>什么是几何标记</h1><p>即我们所说的点、线、面这些几何图形。G2 中并没有特定的图表类型（柱状图、散点图、折线图等）的概念，用户可以单独绘制某一种类型的图表，如饼图，也可以绘制混合图表，比如折线图和柱状图的组合。</p><p>G2 生成的图表的类型，都是由几何标记决定的。可以通过下图直观得理解什么是几何标记：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL2ZmWG9ETnp3blhOSG9heHRqYmZZLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="如何声明几何标记"><a href="#如何声明几何标记" class="headerlink" title="如何声明几何标记"></a>如何声明几何标记</h2><p>创建好 chart 对象之后，就可以通过如下方式选择几何标记的类型：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const geom = chart.point().xx().xx(); // 这里使用了 point 类型的 geom，该方法会返回 geom 对象<br></code></pre></td></tr></table></figure><h2 id="几何标记类型"><a href="#几何标记类型" class="headerlink" title="几何标记类型"></a>几何标记类型</h2><p>目前 G2 支持的几何标记的类型如下：</p><table><thead><tr><th>geom 类型</th><th>描述</th></tr></thead><tbody><tr><td><code>point</code></td><td>点，用于绘制各种点图。</td></tr><tr><td><code>path</code></td><td>路径，无序的点连接而成的一条线，常用于路径图的绘制。</td></tr><tr><td><code>line</code></td><td>线，点按照 x 轴连接成一条线，构成线图。</td></tr><tr><td><code>area</code></td><td>填充线图跟坐标系之间构成区域图，也可以指定上下范围。</td></tr><tr><td><code>interval</code></td><td>使用矩形或者弧形，用面积来表示大小关系的图形，一般构成柱状图、饼图等图表。</td></tr><tr><td><code>polygon</code></td><td>多边形，可以用于构建色块图、地图等图表类型。</td></tr><tr><td><code>edge</code></td><td>两个点之间的链接，用于构建树图和关系图中的边、流程图中的连接线。</td></tr><tr><td><code>schema</code></td><td>自定义图形，用于构建箱型图（或者称箱须图）、蜡烛图（或者称 K 线图、股票图）等图表。</td></tr><tr><td><code>heatmap</code></td><td>用于<strong>热力图</strong>的绘制。</td></tr></tbody></table><h2 id="几何标记和图表类型"><a href="#几何标记和图表类型" class="headerlink" title="几何标记和图表类型"></a>几何标记和图表类型</h2><p>虽然 G2 没有特定的图表类型概念，<strong>但是仍基本支持所有传统图表类型的绘制</strong>。</p><p>下表展示了 G2 中的 geom 几何标记类型和传统图表的对应关系，更多的图表详见 G2 官网的 <a href="https://antv.alipay.com/zh-cn/g2/3.x/demo/index.html">demo</a>。</p><table><thead><tr><th>geom 类型</th><th>图表类型</th><th>备注</th></tr></thead><tbody><tr><td>point</td><td>点图、折线图中的点</td><td>点的形状有很多，也可以使用图片代表点（气泡图），同时点也可以在不同坐标系下显示，所以可以扩展出非常多的图表类型。</td></tr><tr><td>path</td><td>路径图，地图上的路径</td><td>路径图是无序的线图。</td></tr><tr><td>line</td><td>折线图、曲线图、阶梯线图</td><td>在极坐标系下可以转换成雷达图。</td></tr><tr><td>area</td><td>区域图（面积图）、层叠区域图、区间区域图</td><td>极坐标系下可用于绘制雷达区域图。</td></tr><tr><td>interval</td><td>柱状图、直方图、南丁格尔玫瑰图、饼图、条形环图（玉缺图）、漏斗图等</td><td>通过坐标系的转置、变化，可以生成各种常见的图表类型；所有的图表都可以进行层叠、分组。</td></tr><tr><td>polygon</td><td>色块图（像素图）、热力图、地图</td><td>多个点可以构成多边形。</td></tr><tr><td>schema</td><td>k 线图，箱型图</td><td>自定义的图表类型。</td></tr><tr><td>edge</td><td>树图、流程图、关系图</td><td>与点一起构建关系图。</td></tr><tr><td>heatmap</td><td>热力图</td><td>–</td></tr></tbody></table><h2 id="geom-对象方法"><a href="#geom-对象方法" class="headerlink" title="geom 对象方法"></a>geom 对象方法</h2><p>几何标记 geom 对象方法主要有两种：</p><ul><li><p>图形属性（attr）方法：用户设置数据到视觉通道的映射，详细信息查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-attr">图形属性</a></p></li><li><ul><li>position</li></ul></li><li><ul><li>color</li></ul></li><li><ul><li>size</li></ul></li><li><ul><li>shape</li></ul></li><li><ul><li>opacity</li></ul></li><li><p>属性方法之外的方法</p></li><li><ul><li>label(dims, [callback], cfg)几何标记上显示文本</li></ul></li><li><ul><li>tooltip(dims) 映射到 tooltip 的字段</li></ul></li><li><ul><li>style(cfg) 配置图形的样式</li></ul></li><li><ul><li>select(cfg) 图形选中操作</li></ul></li><li><ul><li>active(boolean) 图形激活交互开关</li></ul></li><li><ul><li>animate(cfg) 图形的动画</li></ul></li></ul><blockquote><p>具体 API 详见<a href="https://www.yuque.com/antv/g2-docs/api-geom">文档</a></p></blockquote><h2 id="几何标记和图形形状"><a href="#几何标记和图形形状" class="headerlink" title="几何标记和图形形状"></a>几何标记和图形形状</h2><p>使用几何标记实现各种图表类型时，对于每一种几何标记来说，在绘制的时候有不同的形状（shape)，视觉通道跟图形属性的映射方式不一样也会生成不同的图形：</p><ul><li><p>点图，可以使用圆点、三角形、正方形、十字符号等表示点</p></li><li><p>线图，可以有折线、曲线、点线等</p></li><li><p>多边形，可以是实心的多边形，也可以是空心的仅有边框的多边形</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vcm1zcG9ydGFsL1d2Zm5RZUtVbkhHVlNSZy5wbmc?x-oss-process=image/format,png" alt="img"></p><p>下面提供了 G2 中各个 geom 内置提供的 shape 类型，在后续图形属性章节，会详细介绍 shape 的使用方法。</p><table><thead><tr><th>geom 类型</th><th>shape 类型</th><th>解释</th></tr></thead><tbody><tr><td>point</td><td>‘circle’,’square’,’bowtie’,’diamond’, ‘hexagon’,’triangle’,’triangle-down’,’hollowCircle’, ‘hollowSquare’,’hollowBowtie’, ‘hollowDiamond’,’hollowHexagon’, ‘hollowTriangle’,’hollowTriangle-down’,’cross’,’tick’, ‘plus’,’hyphen’,’line’</td><td>hollow开头的图形都是空心的</td></tr><tr><td>line</td><td>‘line’,’smooth’,’dot’,’dash’, ‘dotSmooth’,’spline’</td><td>dot ：点线，smooth： 平滑线</td></tr><tr><td>area</td><td>‘area’,’smooth’,’line’,’dotLine’, ‘smoothLine’,’dotSmoothLine’</td><td>[area]和[smooth]是填充内容的区域图，其他图表是空心的线图</td></tr><tr><td>interval</td><td>‘rect’,’hollowRect’,’line’, ‘tick’,’stroke’,’funnel’, ‘pyramid’</td><td>[hollowRect]是空心的矩形， [line]和 [tick] 都是线段,stroke：带边框的矩形, ‘funnel’ 漏斗图；’pyramid’ 金字塔图</td></tr><tr><td>polygon</td><td>‘polygon’,’hollow’,’stroke’</td><td>polygon：多边形、hollow：空心多边形和 stroke：带边框的多边形</td></tr><tr><td>schema</td><td>‘box’,’candle’</td><td>目前仅支持箱须图、K线图</td></tr><tr><td>edge</td><td>‘line’,’vhv’,’smooth’,’arc’</td><td>vhv：直角折线，arc：弧线，分为笛卡尔坐标系、极坐标系、带权重和不带权重四种情况。</td></tr></tbody></table><p>以折线图为例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.line().position(&#x27;x*y&#x27;).shape(&#x27;type&#x27;, [&#x27;line&#x27;, &#x27;dot&#x27;]);<br><br>chart.line().position(&#x27;x*y&#x27;).shape(&#x27;type&#x27;, function(type) &#123;<br>    if(type === &#x27;a&#x27;) &#123;<br>        return &#x27;line&#x27;;<br>    &#125; else &#123;<br>        return &#x27;dot&#x27;;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果上面各种几何标记的图形形状没法满足你需求的话，可以进行 <a href="https://www.yuque.com/antv/g2-docs/tutorial-customize-shape">自定义shape</a></p><h1 id="Attr-图形属性"><a href="#Attr-图形属性" class="headerlink" title="Attr 图形属性"></a>Attr 图形属性</h1><h2 id="图形属性"><a href="#图形属性" class="headerlink" title="图形属性"></a>图形属性</h2><p>图形属性对应视觉编码中的视觉通道，是 G2 语法元素非常重要和灵活的一部分，不同的几何标记拥有自己的图形属性。G2 中支持的图形属性有下面几种：</p><ol><li><p>position：位置，二维坐标系内映射至 x 轴、y 轴；</p></li><li><p>color：颜色，包含了色调、饱和度和亮度；</p></li><li><p>size：大小，不同的几何标记对大小的定义有差异；</p></li><li><p>shape：形状，几何标记的形状决定了某个具体图表类型的表现形式，例如点图，可以使用圆点、三角形、图片表示；线图可以有折线、曲线、点线等表现形式；</p></li><li><p>opacity：透明度，图形的透明度，这个属性从某种意义上来说可以使用颜色代替，需要使用 ‘rgba’ 的形式，所以在 G2 中我们独立出来。</p></li></ol><h2 id="图形属性声明语法"><a href="#图形属性声明语法" class="headerlink" title="图形属性声明语法"></a>图形属性声明语法</h2><p>在 G2 中，我们这样定义图形属性的映射语法。</p><p>首先需要明确一点：<strong>图形属性是属于每一个几何标记 geom（Geometry) 的</strong>，所以我们先要声明几何标记，然后再在该几何标记对象上进行图形属性的映射，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.<geomType>().<attrType>(fields[, callback]);<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><p>geomType，几何标记类型，具体支持的类型请阅读<a href="https://www.yuque.com/antv/g2-docs/tutorial-geom">几何标记</a>章节；</p></li><li><p>attrType，图形属性类型，对应视觉通道；</p></li><li><p>fields，参与单个视觉通道映射的字段，可以是单个字段也可以是多个字段，多个字段使用 <code>*</code>分割</p></li><li><p>callback，回调函数，用于定义如何解析视觉通道，如不提供则只用 G2 默认提供的视觉通道解析方式。</p></li></ul><p>除了 <code>attr(fields[, callback])</code> 的函数原型外，G2 为了用户使用的便利性，结合各个视觉通道的特点，还提供了更为便捷的使用方式，在本章后面会进行详细的介绍。</p><p>语法示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point().position(&#x27;a*b&#x27;).color(&#x27;c&#x27;);<br>chart.interval().position(&#x27;a*b&#x27;).color(&#x27;c&#x27;, (cValue) => &#123;<br>  if (cvalue === &#x27;fail&#x27;) &#123;<br>    return &#x27;red&#x27;;<br>  &#125;<br>  return &#x27;green&#x27;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>G2 对于每个图形属性的参数 fields 的解析规则如下：</p><ul><li><p>如果是单个单词，如 <code>color(&#39;a&#39;)</code> 会判断该属性是否是输入数据源的字段属性，如果不是则会将其解析为一个常量；</p></li><li><p>如果是多个属性的映射，需要使用 <code>*</code> 进行连接，G2 会依次对这些字段进行解析和映射，如 <code>position(&#39;cut*price&#39;)</code>；</p></li></ul><h2 id="position-位置属性"><a href="#position-位置属性" class="headerlink" title="position 位置属性"></a>position 位置属性</h2><p>position 位置属性的映射，用于确定由数据中的哪几个字段来确定数据在平面坐标系的位置。通俗地解释，即确定 x 轴和 y 轴的数据字段。它是唯一一个可以用于编码分类又可用于编码定序或者定量的数据属性。</p><p>以下面的语句为例，在 position 属性上，映射了两个属性： cut 和 price，分别表示将 cut 数据值映射至 x 轴坐标点，price 数据值映射至 y 轴坐标点。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point().position(&#x27;cut*price&#x27;);<br></code></pre></td></tr></table></figure><p>下面是对 ‘*’ 连接符的解释：</p><p>以 <code>chart.point().position(&#39;x*y&#39;)</code> 为例，point 代表图形，即最后需要生成点图，而 position 代表位置，<code>position(&#39;x*y&#39;)</code> 代表数据在图形中的位置由 x 和 y 这两个维度的变量决定，x * y 的数据处理结果可以理解为：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0VjdURleWVUT3N6dFZPdXhtWlBlLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>(x1, y1) 这样的数值对，最后就会被转换为画布上对应的坐标点。</p><h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p>从可视化编码的角度对颜色进行分析，可以将颜色分为亮度、饱和度和色调三个视觉通道，其中前两个可以认为是用于编码定量和定序数据的视觉通道，而色调属于编码定性数据的视觉通道。而在 G2 中并不如此详细区分，统一使用 color 方法进行映射配置。</p><p>color 支持的映射语法如下：</p><ul><li><p><code>color(&#39;field&#39;)</code>，field 为数据属性，这时候 G2 会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射；</p></li><li><p><code>color(&#39;field&#39;, colors)</code>，将数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据；</p></li><li><p><code>color(&#39;field&#39;, &#39;color1-color2-colorN&#39;)</code>，指定颜色的渐变路径，用于映射连续的数据；</p></li><li><p><code>color(&#39;field&#39;, callback)</code>，使用回调函数进行颜色值的自定义；可以使用多个字段使用*号连接</p></li><li><p><code>color(&#39;#ffffff&#39;)</code>， 直接指定颜色常量，不进行数据映射。</p></li></ul><h3 id="分类数据的颜色映射"><a href="#分类数据的颜色映射" class="headerlink" title="分类数据的颜色映射"></a>分类数据的颜色映射</h3><p>将 <code>city</code> 属性的数据值映射至制定的颜色来区分不同的城市。</p><p><code>.color(&#39;city&#39;, [ &#39;#1f77b4&#39;, &#39;#ff7f0e&#39;, &#39;#2ca02c&#39; ])</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzg5MTQ3MzAtM2E1ZTYwOWUtOTRhNy00Mzk5LTkyM2ItZDM1ODYwMTZiOWEyLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/avg-temp.json&#x27;, function(data) &#123;<br>  const ds = new DataSet();<br>  const dv = ds.createView().source(data);<br>  dv.transform(&#123;<br>    type: &#x27;fold&#x27;,<br>    fields: [ &#x27;New York&#x27;, &#x27;San Francisco&#x27;, &#x27;Austin&#x27; ],<br>    key: &#x27;city&#x27;,<br>    value: &#x27;value&#x27; <br>  &#125;);<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c1&#x27;,<br>    forceFit: true,<br>    height : 400,<br>    padding: [ 20, 120, 80, 80 ]<br>  &#125;);<br>  chart.source(dv, &#123;<br>    date: &#123;<br>      type: &#x27;time&#x27;,<br>      mask: &#x27;YYYY.MM&#x27;,<br>      tickCount: 12<br>    &#125;,<br>    value: &#123;<br>      alias: &#x27;Temperature, ºF&#x27;<br>    &#125;<br>  &#125;);<br>  chart.axis(&#x27;date&#x27;, &#123;<br>    line: null,<br>    tickLine: &#123;<br>      stroke: &#x27;#000&#x27;,<br>      length: 6 // 刻度线长度<br>    &#125;<br>  &#125;);<br>  chart.axis(&#x27;value&#x27;, &#123;<br>    tickLine: &#123;<br>      stroke: &#x27;#000&#x27;,<br>      length: 6 // 刻度线长度<br>    &#125;,<br>    label: &#123;<br>      textStyle: &#123;<br>        fill: &#x27;#000&#x27;<br>      &#125;<br>    &#125;,<br>    line: &#123;<br>      stroke: &#x27;#000&#x27;<br>    &#125;,<br>    grid: null<br>  &#125;);<br>  chart.line()<br>    .position(&#x27;date*value&#x27;)<br>    .color(&#x27;city&#x27;, [ &#x27;#1f77b4&#x27;, &#x27;#ff7f0e&#x27;, &#x27;#2ca02c&#x27; ])<br>    .shape(&#x27;spline&#x27;)<br>    .size(2);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="连续数据的颜色映射"><a href="#连续数据的颜色映射" class="headerlink" title="连续数据的颜色映射"></a>连续数据的颜色映射</h3><p>对于连续的数据，我们可以为 color 指定颜色渐变的路径，以可视化数据在某一范围的变化趋势。</p><p><code>.color(&#39;Population&#39;, &#39;#e5f5e0-#31a354&#39;)</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzg5NDY3OTItMGI0NmIwNDctMTI4ZS00YzA3LWFlYjItMTNmMWNlYTBiMDA4LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/usa.geo.json&#x27;, function(mapData) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c2&#x27;,<br>    width: 800,<br>    height: 400,<br>    padding: [ 40, 140 ]<br>  &#125;);<br>  chart.legend(false);<br>  chart.axis(false);<br>  chart.tooltip(&#123;<br>    showTitle: false<br>  &#125;);<br>  // 同步度量<br>  chart.scale(&#123;<br>    longitude: &#123;<br>      sync: true<br>    &#125;,<br>    latitude: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  // 绘制地图背景<br>  const ds = new DataSet();<br>  const bgDataView = ds.createView(&#x27;back&#x27;)<br>    .source(mapData, &#123;<br>      type: &#x27;GeoJSON&#x27;<br>    &#125;);<br>  const bgView = chart.view();<br>  bgView.source(bgDataView);<br>  bgView.polygon().position(&#x27;longitude*latitude&#x27;)<br>    .color(&#x27;#e6e6e6&#x27;)<br>    .active(false)<br>    .tooltip(false)<br>    .style(&#123;<br>      stroke: &#x27;#999&#x27;,<br>      lineWidth: 1<br>    &#125;);<br><br>  $.getJSON(&#x27;/assets/data/2014-usa-population.json&#x27;, function(data) &#123;<br>    // 绘制 choropleth map<br>    const view = chart.view();<br>    const userPolygonDv = ds.createView()<br>      .source(data)<br>      .transform(&#123;<br>        geoDataView: bgDataView,<br>        field: &#x27;State&#x27;,<br>        type: &#x27;geo.region&#x27;,<br>        as: [ &#x27;longitude&#x27;, &#x27;latitude&#x27; ]<br>      &#125;);<br>    view.source(userPolygonDv);<br>    view.polygon()<br>      .position(&#x27;longitude*latitude&#x27;)<br>      .color(&#x27;Population&#x27;,&#x27;#e5f5e0-#31a354&#x27;)<br>      .tooltip(&#x27;State*Population&#x27;);<br><br>    // 绘制文字<br>    const textView = chart.view();<br>    const centerDv = ds.createView()<br>      .source(data)<br>      .transform(&#123;<br>        geoDataView: bgDataView,<br>        field: &#x27;State&#x27;,<br>        type: &#x27;geo.centroid&#x27;,<br>        as: [ &#x27;longitude&#x27;, &#x27;latitude&#x27; ]<br>      &#125;);<br>    textView.source(centerDv);<br>    textView.point()<br>      .position(&#x27;longitude*latitude&#x27;)<br>      .size(0)<br>      .label(&#x27;code&#x27;, &#123;<br>        offset: 0,<br>        textStyle: &#123;<br>          fontSize: 10<br>        &#125;<br>      &#125;);<br>    chart.render();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="颜色使用回调函数"><a href="#颜色使用回调函数" class="headerlink" title="颜色使用回调函数"></a>颜色使用回调函数</h3><p>有时候颜色需要根据字段值进行特殊的指定，所以 G2 提供了回调函数来指定图形的颜色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 根据单个字段计算颜色<br>chart.point().position(&#x27;x*y&#x27;).color(&#x27;z&#x27;, z => &#123;<br>  if (z >= 100) &#123;<br>    return &#x27;red&#x27;;<br>  &#125;<br>  return &#x27;blue&#x27;;<br>&#125;);<br><br>// 根据多个字段计算颜色<br>chart.point().position(&#x27;x*y&#x27;).color(&#x27;level*value&#x27;, (level, value) => &#123;<br>  if (level < 2) &#123;<br>    if (value > 10) &#123;<br>      return &#x27;green&#x27;;<br>    &#125;<br>    return &#x27;blue&#x27;;<br>  &#125; else &#123;<br>    if (value > 20) &#123;<br>      return &#x27;#cdcdcd&#x27;;<br>    &#125;<br>    return &#x27;red&#x27;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>color 属性的回调函数一般返回的单个颜色，因为 G2 中所有的 shape 仅支持单个颜色</p></li><li><p>color 属性的回调函数也可以返回数组，数组中有多个颜色，但是这时候需要 shape 支持多颜色的解析，详细情况查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-customize-shape">自定义shape</a>。</p></li></ul><h2 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h2><p>不同的几何标记有不同的 shape（图形形状）。shape 这个视觉通道受其他几个视觉通道影响，比如：interval 几何标记的 shape 可以是填充的矩形 rect 也可是空心的边框矩形，这个就决定了是将 color 映射到填充色上还是映射到边框颜色上。shape 方法的使用方式比较简单，常用于映射分类数据：</p><ul><li><p>shape(‘field’)，将指定的字段映射到内置的 shapes 数组中；</p></li><li><p>shape(‘field’, shapes)，用户自己提供 shapes 数据，来进行数据映射；</p></li><li><p>shape(‘fields’, callback)，使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定；</p></li><li><p>shape(‘circle’)，指定常量，将所有数据值映射到固定的 shape。</p></li></ul><p>另外 G2 提供了自定义 shape 的功能，用户可以自己绘制需要的 shape，详见<a href="https://www.yuque.com/antv/g2-docs/tutorial-customize-shape">如何快速地自定义 shape</a>。</p><h3 id="geom-和-shape"><a href="#geom-和-shape" class="headerlink" title="geom 和 shape"></a>geom 和 shape</h3><p>使用几何标记实现各种图表类型时，对于每一种几何标记来说，图形在绘制的时候有不同的形状（shape)，在<a href="https://www.yuque.com/antv/g2-docs/tutorial-geom">几何标记</a> 章节已列出了目前 G2 提供的 geom 默认支持的 shape。</p><h4 id="demo-演示"><a href="#demo-演示" class="headerlink" title="demo 演示"></a>demo 演示</h4><p><code>.shape(&#39;type&#39;, [ &#39;circle&#39;, &#39;triangle-down&#39;, &#39;square&#39;, &#39;diamond&#39; ])</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzg5ODkxMzAtZmUzZTdjNGYtNDg2NC00OTRlLTkwMzQtZmRjMzNiNGM4MWIyLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/series-scatter.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c3&#x27;,<br>    forceFit: true,<br>    height: 400<br>  &#125;);<br>  chart.source(data, &#123;<br>    x: &#123;<br>      tickInterval: 500<br>    &#125;<br>  &#125;);<br>  chart.point()<br>    .position(&#x27;x*y&#x27;)<br>    .color(&#x27;type&#x27;)<br>    .shape(&#x27;type&#x27;, [ &#x27;circle&#x27;, &#x27;triangle-down&#x27;, &#x27;square&#x27;, &#x27;diamond&#x27; ])<br>    .opacity(0.65)<br>    .size(7);<br>  // 添加辅助元素<br>  chart.guide().text(&#123;<br>    position: [ 250, 550 ], <br>    content: &#x27;0 - 500&#x27;, <br>    style: &#123;<br>      fontSize: 14,<br>      textAlign: &#x27;center&#x27;<br>    &#125;<br>  &#125;);<br>  chart.guide().text(&#123;<br>    position: [ 1000, 550 ], <br>    content: &#x27;500 - 1500&#x27;, <br>    style: &#123;<br>      fontSize: 14,<br>      textAlign: &#x27;center&#x27;<br>    &#125;<br>  &#125;);<br>  chart.guide().text(&#123;<br>    position: [ 1700, 550 ], <br>    content: &#x27;1500 - 2000&#x27;, <br>    style: &#123;<br>      fontSize: 14,<br>      textAlign: &#x27;center&#x27;<br>    &#125;<br>  &#125;);<br>  chart.guide().region(&#123;<br>    start: [ 0, -600 ], <br>    end: [ 500, 600 ]<br>  &#125;);<br>  chart.guide().region(&#123;<br>    start: [ 500, -600 ], <br>    end: [ 1500, 600 ], <br>    style: &#123;<br>      fillOpacity: 0.2<br>    &#125;<br>  &#125;);<br>  chart.guide().region(&#123;<br>    start: [ 1500, -600 ], <br>    end: [ 2000, 600 ], <br>    style: &#123;<br>      fillOpacity: 0.3<br>    &#125;<br>  &#125;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="使用回调函数"><a href="#使用回调函数" class="headerlink" title="使用回调函数"></a>使用回调函数</h3><p>shape 也可以通过字段值来计算，可以在 shape 方法中指定单个或者多个字段，通过回调函数返回指定的 shape。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point()<br>  .position(&#x27;x*y&#x27;)<br>  .shape(&#x27;value&#x27;, (value) => &#123;<br>    if (value > 10) &#123;<br>      return &#x27;circle&#x27;;<br>    &#125;<br>    return &#x27;rect&#x27;;<br>  &#125;);<br><br>// 根据是否有子节点和节点是否展开确定shape<br>chart.point()<br>  .position(&#x27;x*y&#x27;)<br>  .shape(&#x27;children*collapsed&#x27;, (children, collapsed) => &#123;<br>    if (children) &#123;<br>      return collapsed ? &#x27;collapsed-node&#x27; : &#x27;expand-node&#x27;;<br>    &#125;<br>    return &#x27;leaf&#x27;;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>shape 的回调函数中也可以返回数组，G2 根据数组的第一个值来确定 shape，其他值可以作为自定义 shape 的参数,详情查看<a href="https://www.yuque.com/antv/g2-docs/tutorial-customize-shape">自定义shape</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point().position(&#x27;name*value&#x27;)<br>  .size(&#x27;value&#x27;)<br>  .color(&#x27;name&#x27;)<br>  .shape(&#x27;url&#x27;, url => &#123;<br>    return [ &#x27;image&#x27;, url ]; // 根据具体的字段指定 shape<br>  &#125;);<br></code></pre></td></tr></table></figure><p>查看<a href="https://antv.alipay.com/zh-cn/g2/3.x/demo/other/bubble-image.html">自定义气泡的示例</a></p><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><p>对于不同的几何标记含义不完全一致：</p><ul><li><p>对于 point 点来说，size 对应着点的半径；</p></li><li><p>对于 line 线来说，size 对应着线的粗细；</p></li><li><p>对于 interval 柱状图来说，size 对应着柱子的宽度。</p></li></ul><p>所以从可视化的角度分析，大小（size)是一个复杂的视觉通道。</p><p>在 G2 中，支持如下几种方式的映射语法：</p><ul><li><p>size(‘field’)，指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]；</p></li><li><p>size(‘field’, [ min, max ])，指定映射到 size 字段外，还提供了 size 的最大值和最小值范围；</p></li><li><p>size(‘fields’, callback)，使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射；</p></li><li><p>size(10) 直接指定像素大小。</p></li></ul><p>在气泡图中，常常使用 size 图形属性映射，用于编码更多维度的数据。如下例，使用气泡图来可视化每个国家人均国内生产总值同人均寿命之间的相关关系，同时将各个国家人口数据映射至气泡的大小。</p><p><code>.size(&#39;Population&#39;, [ 5, 35 ])</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4MzkwMjY3NjEtYWFmYjA3YzktZTIxYS00OGE2LTk1NTgtYmVjODZiNjMyZTZmLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/bubble-population.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c4&#x27;,<br>    forceFit: true,<br>    height: 400<br>  &#125;);<br>  chart.source(data, &#123;<br>    &#x27;LifeExpectancy&#x27;: &#123;<br>      alias: &#x27;人均寿命（年）&#x27;<br>    &#125;,<br>    &#x27;Population&#x27;: &#123;<br>      type: &#x27;pow&#x27;,<br>      alias: &#x27;人口总数&#x27;<br>    &#125;,<br>    &#x27;GDP&#x27;: &#123;<br>      alias: &#x27;人均国内生产总值($)&#x27;,<br>      tickCount: 10<br>    &#125;,<br>    &#x27;Country&#x27;: &#123;<br>      alias: &#x27;国家/地区&#x27;<br>    &#125;<br>  &#125;);<br>  chart.axis(&#x27;GDP&#x27;, &#123;<br>    label: &#123;<br>      // 格式化坐标轴的显示<br>      formatter: value => &#123;<br>        return (value / 1000).toFixed(0) + &#x27;k&#x27;;<br>      &#125;<br>    &#125;<br>  &#125;);<br>  chart.tooltip(&#123;<br>    showTitle: false // 不显示默认标题<br>  &#125;);<br>  chart.legend(&#x27;Population&#x27;, false);<br>  chart.legend(&#x27;Country&#x27;, false);<br>  chart.point().position(&#x27;GDP*LifeExpectancy&#x27;)<br>    .size(&#x27;Population&#x27;, [ 5, 35 ])<br>    .color(&#x27;continent&#x27;)<br>    .opacity(0.65)<br>    .shape(&#x27;circle&#x27;)<br>    .tooltip(&#x27;Country*Population*GDP*LifeExpectancy&#x27;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="回调函数的使用"><a href="#回调函数的使用" class="headerlink" title="回调函数的使用"></a>回调函数的使用</h3><p>size可以根据数据的字段值通过回调函数计算，可以指定多个字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point().position(&#x27;x*y&#x27;).size(&#x27;z&#x27;, z => &#123;<br>  if (z > 10) &#123;<br>    return 20;<br>  &#125;<br>  return z * 0.5;<br>&#125;);<br><br>chart.point().position(&#x27;x*y&#x27;).size(&#x27;level*text&#x27;, (level, text) => &#123;<br>  if (level === 0) &#123;<br>    return 50;<br>  &#125;<br>  return text.length * 10; // 根据文本长度返回长度<br>&#125;);<br></code></pre></td></tr></table></figure><p>size 函数可以返回一个数组，特别对应<a href="https://www.yuque.com/antv/g2-docs/tutorial-customize-shape">自定义shape</a>时需要计算宽高的图形。</p><h2 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h2><p>透明度在视觉编码过程中，只能进行定量（连续）数据的映射，作为颜色的一个补充使用，所以提供以下快捷方式：</p><ul><li><p><code>opacity(&#39;field&#39;)</code>，指定透明度映射的字段，透明度默认的范围为 [0, 1]；</p></li><li><p><code>opacity(0.5)</code>，直接指定透明度常量；</p></li><li><p><code>opacity(&#39;field&#39;, callback)</code>，使用回调函数获取透明度。</p></li></ul><h2 id="更多图形属性的映射"><a href="#更多图形属性的映射" class="headerlink" title="更多图形属性的映射"></a>更多图形属性的映射</h2><p>除了上面指定的视觉通道外，G2 3.0 还在 <a href="https://www.yuque.com/antv/g2-docs/api-geom#3wvmyd">geom.style()</a> 方法中允许用户使用回调函数，可以对任何图形属性进行映射，但是不会自动生成图例</p><h2 id="Geom-支持的图形属性"><a href="#Geom-支持的图形属性" class="headerlink" title="Geom 支持的图形属性"></a>Geom 支持的图形属性</h2><p>前面提到过，每种几何标记支持的视觉通道有所差异，数据和视觉通道的映射关系也不完全相同。<br>下表列出了各个 geom 几何标记对各个图形属性的支持情况：</p><table><thead><tr><th>几何标记</th><th>position</th><th>color</th><th>size</th><th>shape</th><th>opacity</th></tr></thead><tbody><tr><td>point</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>path、line</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>area</td><td>支持</td><td>支持</td><td><code>不支持</code></td><td>支持</td><td>支持</td></tr><tr><td>interval</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>polygon</td><td>支持</td><td>支持</td><td><code>不支持</code></td><td>支持</td><td>支持</td></tr><tr><td>edge</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>schema</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>contour</td><td>支持</td><td>支持</td><td>支持</td><td><code>不支持</code></td><td>支持</td></tr><tr><td>heatmap</td><td>支持</td><td>支持</td><td>支持</td><td><code>不支持</code></td><td><code>不支持</code></td></tr></tbody></table><h1 id="Coord-坐标系"><a href="#Coord-坐标系" class="headerlink" title="Coord 坐标系"></a>Coord 坐标系</h1><h2 id="坐标系介绍"><a href="#坐标系介绍" class="headerlink" title="坐标系介绍"></a>坐标系介绍</h2><p>坐标系是将两种位置标度结合在一起组成的 2 维定位系统，描述了数据是如何映射到图形所在的平面。</p><p>G2 包含了两种类型坐标系（polar、theta、helix 均属于极坐标），目前所有的坐标系均是 2 维的。</p><h2 id="如何设置坐标系"><a href="#如何设置坐标系" class="headerlink" title="如何设置坐标系"></a>如何设置坐标系</h2><p>G2 默认提供的坐标系类型为笛卡尔坐标系，当不满足用户需求时，可以通过调用下面的语法声明需要使用的坐标系：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord(&#x27;coordType&#x27;[, cfg]);<br></code></pre></td></tr></table></figure><table><thead><tr><th>coordType</th><th>说明</th></tr></thead><tbody><tr><td><code>rect</code></td><td>直角坐标系，目前仅支持二维，由 x, y 两个互相垂直的坐标轴构成。</td></tr><tr><td><code>polar</code></td><td>极坐标系，由角度和半径 2 个维度构成。</td></tr><tr><td><code>theta</code></td><td>一种特殊的极坐标系，半径长度固定，仅仅将数据映射到角度，常用于饼图的绘制。</td></tr><tr><td><code>helix</code></td><td>螺旋坐标系，基于阿基米德螺旋线。</td></tr></tbody></table><h2 id="坐标系类型及配置"><a href="#坐标系类型及配置" class="headerlink" title="坐标系类型及配置"></a>坐标系类型及配置</h2><p>坐标系可以分为笛卡尔坐标系和非笛卡尔坐标系，非笛卡尔坐标系即极坐标（helix 螺旋坐标系也是极坐标的一种），由角度和半径这两个维度来确定位置。</p><p>利用极坐标可生成饼图、玫瑰图和雷达图等，常被用于周期性数据，比如时间和方向数据。</p><p>坐标系类型的变换会改变几何标记的形状：在极坐标系中，矩形将变为圆环的一部分，而地图中两点间的最短路径也将不是直线。</p><p>例如下图展示的层叠柱状图，在不同坐标系下就变换成了其他的图表类型：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay9mZDliYTY0Yi1iNTY5LTRjMWQtYWNiOS1kNGRhZDM1MDAyNTgvYXR0YWNoLzIzNzgvNDRhZjdiNDM1ZjBkM2Y4OC9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>上图左侧为层叠柱状图，中间的饼图则是层叠柱状图在极坐标下对 x y 两个坐标轴进行转置后的结果，其中 x 轴被映射为半径，y 轴被映射成了角度。而最右边的牛眼图则相反，y 轴映射为半径。</p><h3 id="坐标系配置"><a href="#坐标系配置" class="headerlink" title="坐标系配置"></a>坐标系配置</h3><p>极坐标均支持 <code>startAngle</code> 和 <code>endAngle</code> 这两个属性配置。</p><p>（1）对于 <code>polar</code> 和 <code>theta</code> 这两种坐标系类型，可以进行如下属性的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord(&#x27;polar&#x27; || &#x27;theta&#x27; || &#x27;helix&#x27;, &#123;<br>  startAngle: 弧度, // 起始弧度<br>  endAngle: 弧度, // 结束弧度<br>  innerRadius: 0 至 1 范围的数值, // 用于空心部分的半径设置<br>  radius: 0 至 1 范围的数值 // 实心圆的半径大小设置<br>&#125;);<br></code></pre></td></tr></table></figure><p>效果如图所示：</p><p><code>chart.coord(&#39;theta&#39;, &#123; innerRadius: 0.5 &#125;);</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL3hReGJ6cVFUakVMT3ZyS1NGRWtoLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord(&#x27;polar&#x27;, &#123;<br>  radius: 0.5,<br>  startAngle: -Math.PI / 6,<br>  endAngle: 7 * Math.PI /6<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL1lieHBvQlJ1SXJOc2FNTk9DbWNHLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord(&#x27;helix&#x27;, &#123;<br>  startAngle: 0.5 * Math.PI,<br>  endAngle: 12.5 * Math.PI,<br>  radius: 0.8<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0VXSENhdEh5bkRmUVRQQnl5ZlZwLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>这里需要说明的是，G2 极坐标默认的起始角度和结束角度如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay84NTk1MGE0Mi05NTc5LTQ0Y2ItYjY1Ni04ZGQyOGM5YTAxNGEvYXR0YWNoLzIzNzgvZDY0ODY3OTE4NGM2OTc3Yy9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><h2 id="坐标系变换"><a href="#坐标系变换" class="headerlink" title="坐标系变换"></a>坐标系变换</h2><p>G2 提供的坐标系支持一系列的变换操作：</p><ul><li><p>rotate: 旋转，默认按照坐标系中心旋转；</p></li><li><p>scale: 放大、缩小，默认按照坐标系中心放大、缩小；</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord(&#x27;rect&#x27;).scale(0.7, 1.2);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vcm1zcG9ydGFsL2JBSVNsYUV2SVVwcUlGVkJpWEtvLmdpZg" alt="img"></p><ul><li>transpose: x，y 轴交换，例如柱状图转换成水平柱状图（条形图）；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay8zYjMxOWJmNy1mNWFlLTQxNjUtOTc1My1hMWZiZDU4Y2MyMDkvYXR0YWNoLzIzNzgvNjJiYzA4MmU4YmViMGY3OC9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><ul><li>reflect: 镜像, 沿 x 方向镜像或者沿 y 轴方向映射。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay8zZTAyZDg2NS1mY2ZjLTRhZmQtOWZmYS02NmExMjk5YjMxYjUvYXR0YWNoLzIzNzgvNDIyNWZkNzQ4M2Y1NDE1NS9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>以下是 G2 中坐标系变换的使用语法，当需要进行多种坐标系变换时，可以直接进行链式调用，如下代码所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.coord().rotate(90).scale(1.3, 5).reflect(&#x27;x&#x27;).transpose();<br></code></pre></td></tr></table></figure><h2 id="相关实例"><a href="#相关实例" class="headerlink" title="相关实例"></a>相关实例</h2><ul><li><p><a href="https://antv.alipay.com/zh-cn/g2/3.x/demo/pie/clock.html">环图</a></p></li><li><p><a href="https://antv.alipay.com/zh-cn/g2/3.x/demo/gauge/basic.html">仪表盘</a></p></li></ul><h1 id="Axis-坐标轴"><a href="#Axis-坐标轴" class="headerlink" title="Axis 坐标轴"></a>Axis 坐标轴</h1><h1 id="坐标轴配置"><a href="#坐标轴配置" class="headerlink" title="坐标轴配置"></a>坐标轴配置</h1><p>G2 的图表坐标轴配置方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(field, &#123;<br>  title: null // 不展示标题<br>  // ...<br>&#125;);<br></code></pre></td></tr></table></figure><p>参数 field 为对应的数据维度。</p><h2 id="坐标轴的组成"><a href="#坐标轴的组成" class="headerlink" title="坐标轴的组成"></a>坐标轴的组成</h2><p>使用 G2 对坐标轴进行配置之前，需要了解 G2 的坐标轴的组成。</p><p>G2 生成的坐标轴由如下五部分组成：</p><ol><li><p>标题 title</p></li><li><p>坐标轴线 line</p></li><li><p>文本 label</p></li><li><p>刻度线 tickLine</p></li><li><p>网格 grid</p></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL1h5SHJRcFdLZ0hDQ2JjdFJ6d1ZULnBuZw?x-oss-process=image/format,png" alt="img"></p><p>通常的图表都有 x 轴和 y 轴，默认情况下，x 轴显示在图表的底部，y 轴显示在左侧（多个 y 轴时可以是显示在左右两侧）。通过为坐标轴配置 <code>position</code> 属性可以改变坐标轴的显示位置，具体可详见 <a href="https://www.yuque.com/antv/g2-docs/api-chart#frgaiw">api</a>。</p><h3 id="坐标轴标题-title"><a href="#坐标轴标题-title" class="headerlink" title="坐标轴标题 title"></a>坐标轴标题 title</h3><p>默认情况下，我们会为每条坐标轴生成标题，标题名默认为该轴对应数据字段的属性名。通过如下代码，用户可以配置标题的显示样式或者关闭标题显示。在G2 3.0 中由于大多数场景下用户不显示 title 所以我们默认关闭了 title 的显示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  title: null // 不展示 xField 对应坐标轴的标题<br>&#125;);<br><br>chart.axis(&#x27;xField&#x27;, &#123;<br>  title: &#123;&#125; // 展示 xField 对应坐标轴的标题<br>&#125;);<br><br>chart.axis(&#x27;xField&#x27;, &#123;<br>  title: &#123;<br>    textStyle: &#123;<br>      fontSize: 12, // 文本大小<br>      textAlign: &#x27;center&#x27;, // 文本对齐方式<br>      fill: &#x27;#999&#x27;, // 文本颜色<br>      // ...<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>当需要为<strong>坐标轴设置别名</strong>时，需要在列定义中为对应数据字段设置 <code>alias</code> 属性，如下所示，更多关于列定义的内容请查看<a href="https://www.yuque.com/antv/g2-docs/tutorial-data-fields">列定义</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.scale(&#x27;xField&#x27;, &#123;<br>  alias: &#x27;这里设置标题的别名&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><p>更多关于坐标轴 title 属性的配置请查看API文档相关内容 <a href="https://www.yuque.com/antv/g2-docs/api-chart#frgaiw">axis 的 title 属性配置</a>。</p><h3 id="坐标轴线-line"><a href="#坐标轴线-line" class="headerlink" title="坐标轴线 line"></a>坐标轴线 line</h3><p>在 <code>line</code> 属性上进行坐标轴线的配置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  line: &#123;<br>    lineWidth: 2, // 设置线的宽度<br>    stroke: &#x27;red&#x27;, // 设置线的颜色<br>    lineDash: [ 3, 3 ] // 设置虚线样式<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>上述代码效果如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay8yMjM0NDAwNi0wYzNiLTQ4YTYtOTEwZi0zY2UwMzYxM2M3YzgvYXR0YWNoLzIzNzgvYjQ4YzNjYTVkMTFhMDQyMS9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><h3 id="坐标轴文本-label"><a href="#坐标轴文本-label" class="headerlink" title="坐标轴文本 label"></a>坐标轴文本 label</h3><ul><li>不展示文本</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  label: null<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>配置文本显示样式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  label: &#123;<br>    offset: &#123;number&#125;, // 设置坐标轴文本 label 距离坐标轴线的距离<br>    textStyle: &#123;<br>      textAlign: &#x27;center&#x27;, // 文本对齐方向，可取值为： start middle end<br>      fill: &#x27;#404040&#x27;, // 文本的颜色<br>      fontSize: &#x27;12&#x27;, // 文本大小<br>      fontWeight: &#x27;bold&#x27;, // 文本粗细<br>      rotate: 30, <br>      textBaseline: &#x27;top&#x27; // 文本基准线，可取 top middle bottom，默认为middle<br>    &#125; || &#123;function&#125;, // 文本样式，支持回调 <br>    autoRotate: &#123;boolean&#125; // 是否需要自动旋转，默认为 true<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>格式化坐标轴文本显示</li></ul><p>为 <code>formatter</code> 属性定义回调函数，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  label: &#123;<br>    // 使用 formatter 回调函数<br>    formatter: val => &#123;<br>      return val + &#x27;元&#x27;;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在坐标轴上配置 formatter 仅在坐标轴上的文本有效，如果想要使得 tooltip 和图例上的信息也格式化，需要在列定义时指定格式化函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  xField: &#123;<br>    formatter: val => &#123;<br>      return val + &#x27;元&#x27;;<br>    &#125;<br>  &#125;<br>&#125;);<br><br>// 或者<br>chart.scale(&#x27;xField&#x27;, &#123;<br>  formatter: val => &#123;<br>    return val + &#x27;元&#x27;;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4MzkzNjUyNTEtNzY0YjgwYTktODYzOC00ZTRmLWExMTctZjhkZDNiNTU0YjFlLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; x: 95, y: 95, z: 13.8, name: &#x27;BE&#x27;, country: &#x27;Belgium&#x27; &#125;,<br>  &#123; x: 86.5, y: 102.9, z: 14.7, name: &#x27;DE&#x27;, country: &#x27;Germany&#x27; &#125;,<br>  &#123; x: 80.8, y: 91.5, z: 15.8, name: &#x27;FI&#x27;, country: &#x27;Finland&#x27; &#125;,<br>  &#123; x: 80.4, y: 102.5, z: 12, name: &#x27;NL&#x27;, country: &#x27;Netherlands&#x27; &#125;,<br>  &#123; x: 80.3, y: 86.1, z: 11.8, name: &#x27;SE&#x27;, country: &#x27;Sweden&#x27; &#125;,<br>  &#123; x: 78.4, y: 70.1, z: 16.6, name: &#x27;ES&#x27;, country: &#x27;Spain&#x27; &#125;,<br>  &#123; x: 74.2, y: 68.5, z: 14.5, name: &#x27;FR&#x27;, country: &#x27;France&#x27; &#125;,<br>  &#123; x: 73.5, y: 83.1, z: 10, name: &#x27;NO&#x27;, country: &#x27;Norway&#x27; &#125;,<br>  &#123; x: 71, y: 93.2, z: 24.7, name: &#x27;UK&#x27;, country: &#x27;United Kingdom&#x27; &#125;,<br>  &#123; x: 69.2, y: 57.6, z: 10.4, name: &#x27;IT&#x27;, country: &#x27;Italy&#x27; &#125;,<br>  &#123; x: 68.6, y: 20, z: 16, name: &#x27;RU&#x27;, country: &#x27;Russia&#x27; &#125;,<br>  &#123; x: 65.5, y: 126.4, z: 35.3, name: &#x27;US&#x27;, country: &#x27;United States&#x27; &#125;,<br>  &#123; x: 65.4, y: 50.8, z: 28.5, name: &#x27;HU&#x27;, country: &#x27;Hungary&#x27; &#125;,<br>  &#123; x: 63.4, y: 51.8, z: 15.4, name: &#x27;PT&#x27;, country: &#x27;Portugal&#x27; &#125;,<br>  &#123; x: 64, y: 82.9, z: 31.3, name: &#x27;NZ&#x27;, country: &#x27;New Zealand&#x27; &#125;<br>];<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height: 350,<br>  padding: [ 20, 0, 80, 80 ],<br>  plotBackground: &#123;<br>    stroke: &#x27;#ccc&#x27;, // 边颜色<br>    lineWidth: 1 // 边框粗细<br>  &#125; // 绘图区域背景设置<br>&#125;);<br>chart.source(data, &#123;<br>  x: &#123;<br>    alias: &#x27;Daily fat intake&#x27;, // 定义别名<br>    tickInterval: 5, // 自定义刻度间距<br>    nice: false, // 不对最大最小值优化<br>    max: 96, // 自定义最大值<br>    min: 62 // 自定义最小是<br>  &#125;,<br>  y: &#123;<br>    alias: &#x27;Daily sugar intake&#x27;,<br>    tickInterval: 50,<br>    nice: false,<br>    max: 165,<br>    min: 0<br>  &#125;,<br>  z: &#123;<br>    alias: &#x27;Obesity(adults) %&#x27;<br>  &#125;<br>&#125;);<br>// 开始配置坐标轴<br>chart.axis(&#x27;x&#x27;, &#123;<br>  label: &#123;<br>    formatter: val => &#123;<br>      return val + &#x27; gr&#x27;; // 格式化坐标轴显示文本<br>    &#125;<br>  &#125;,<br>  grid: &#123;<br>    lineStyle: &#123;<br>      stroke: &#x27;#d9d9d9&#x27;,<br>      lineWidth: 1,<br>      lineDash: [ 2, 2 ]<br>    &#125;<br>  &#125;<br>&#125;);<br>chart.axis(&#x27;y&#x27;, &#123;<br>  title: &#123;<br>    offset: 70,<br>  &#125;,<br>  label: &#123;<br>    formatter: val => &#123;<br>      if (val > 0) &#123;<br>        return val + &#x27; gr&#x27;;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;);<br>chart.legend(false);<br>chart.tooltip(&#123;<br>  title: &#x27;country&#x27;<br>&#125;);<br>chart<br>  .point()<br>  .position(&#x27;x*y&#x27;)<br>  .size(&#x27;z&#x27;, [ 10, 40 ])<br>  .label(&#x27;name*country&#x27;, &#123;<br>    offset: 0, // 文本距离图形的距离<br>    textStyle: &#123;<br>      fill: &#x27;#000&#x27;,<br>      fontWeight: &#x27;bold&#x27;, // 文本粗细<br>      shadowBlur: 5, // 文本阴影模糊<br>      shadowColor: &#x27;#fff&#x27; // 阴影颜色<br>    &#125;<br>  &#125;)<br>  .color(&#x27;#3182bd&#x27;)<br>  .opacity(0.5)<br>  .shape(&#x27;circle&#x27;)<br>  .tooltip(&#x27;x*y*z&#x27;);<br>chart.guide().line(&#123;<br>  start: [ 65, &#x27;min&#x27; ],<br>  end: [ 65, &#x27;max&#x27; ],<br>  text: &#123;<br>    content: &#x27;Safe fat intake 65g/day&#x27;,<br>    position: &#x27;end&#x27;,<br>    autoRotate: false,<br>    style: &#123;<br>      textAlign: &#x27;start&#x27;<br>    &#125;<br>  &#125;,<br>&#125;);<br>chart.guide().line(&#123;<br>  start: [ &#x27;min&#x27;, 50 ],<br>  end: [ &#x27;max&#x27;, 50 ],<br>  text: &#123;<br>    content: &#x27;Safe sugar intake 50g/day&#x27;,<br>    position: &#x27;end&#x27;,<br>    style: &#123;<br>      textAlign: &#x27;end&#x27;<br>    &#125;<br>  &#125;<br>&#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><ul><li>使用 html 自定义 label</li></ul><p>在一些比较个性化的可视化需求里，通常会使用可视化隐喻，比如会使用人物照片来代替人物名字，使得可视化更直观。</p><p>这时可以通过为 <code>label</code> 进行如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  label: &#123;<br>    htmlTemplate: value => &#123;<br>      return &#x27;<img src="&#x27; +imageMap[value] + &#x27;" width="30px"/>&#x27;;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;John&#x27;, vote: 35654 &#125;,<br>  &#123; name: &#x27;Damon&#x27;, vote: 65456 &#125;,<br>  &#123; name: &#x27;Patrick&#x27;, vote: 45724 &#125;,<br>  &#123; name: &#x27;Mark&#x27;, vote: 13654 &#125;<br>];<br>const imageMap = &#123;<br>  &#x27;John&#x27;: &#x27;https://zos.alipayobjects.com/rmsportal/mYhpaYHyHhjYcQf.png&#x27;,<br>  &#x27;Damon&#x27;: &#x27;https://zos.alipayobjects.com/rmsportal/JBxkqlzhrlkGlLW.png&#x27;,<br>  &#x27;Patrick&#x27;: &#x27;https://zos.alipayobjects.com/rmsportal/zlkGnEMgOawcyeX.png&#x27;,<br>  &#x27;Mark&#x27;: &#x27;https://zos.alipayobjects.com/rmsportal/KzCdIdkwsXdtWkg.png&#x27;<br>&#125;<br><br>const chart = new G2.Chart(&#123;<br>  container : &#x27;c2&#x27;,<br>  width : 600,<br>  height : 250<br>&#125;);<br>chart.source(data, &#123;<br>  vote: &#123;<br>    min: 0<br>  &#125;<br>&#125;);<br>chart.legend(false);<br>chart.axis(&#x27;name&#x27;, &#123;<br>  label: &#123;<br>    htmlTemplate: value => &#123;<br>      return &#x27;<img src="&#x27; +imageMap[value] + &#x27;" style="width:30px;max-width:none;"/>&#x27;;<br>    &#125;<br>  &#125;,<br>  tickLine: null<br>&#125;);<br>chart.interval()<br>  .position(&#x27;name*vote&#x27;)<br>  .color(&#x27;name&#x27;, [ &#x27;#7f8da9&#x27;, &#x27;#fec514&#x27;, &#x27;#db4c3c&#x27;, &#x27;#daf0fd&#x27; ])<br>  .size(20)<br>  .label(&#x27;name&#x27;);<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="坐标轴刻度线-tickLine"><a href="#坐标轴刻度线-tickLine" class="headerlink" title="坐标轴刻度线 tickLine"></a>坐标轴刻度线 tickLine</h3><p>在 tickLine 上可以配置坐标轴刻度线的长短（length）、颜色（stroke）、粗细（lineWidth），或者控制它的展示（tickLine: null，不展示刻度线）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  tickLine: &#123;<br>    lineWidth: 2,<br>    length: 10,<br>    stroke: &#x27;red&#x27;,<br>    alignWithLabel:true<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>value 可以设置负值，使得tickLine的方向相反</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;genre&#x27;, &#123;<br>  tickLine: &#123;<br>    length: -10<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk0OTQwMjktMWZhNzljNDQtMDk0My00OTg1LWE4ZGEtYmE4ZmI4MGQyOTU5LnBuZw?x-oss-process=image/format,png" alt="img"></p><ul><li>alignWithLabel 设置为负值，且数据类型为category时，tickLine的样式变为category数据专有样式。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;genre&#x27;, &#123;<br>  tickLine: &#123;<br>    alignWithLabel: false<br>  &#125;<br>&#125;);<br>img,[object Object],<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk1MTUwOTEtNDc5MGM1MGMtN2ZiNS00YjdkLWI5NDEtZDY5MDliNzdkYjM3LnBuZw?x-oss-process=image/format,png" alt="img"></p><h3 id="坐标轴子刻度线-subTickLine"><a href="#坐标轴子刻度线-subTickLine" class="headerlink" title="坐标轴子刻度线 subTickLine"></a>坐标轴子刻度线 subTickLine</h3><p>通过设置 <code>subTickCount</code> 属性可以为两个主刻度间设置子刻度线的个数，同时通过 <code>subTickLine</code> 设置子刻度线样式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  subTickCount: 3,<br>  subTickLine: &#123;<br>    length: 3,<br>    stroke: &#x27;#545454&#x27;,<br>    lineWidth: 1<br>  &#125;,<br>  tickLine: &#123;<br>    length: 5,<br>    lineWidth: 2,<br>    stroke: &#x27;#000&#x27;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk1MzU0ODktY2EzM2M2ZGEtOWU5Ni00YWY3LTk3NGYtZTVmMzczYTFjNDk1LnBuZw?x-oss-process=image/format,png" alt="img"></p><h3 id="网格-grid"><a href="#网格-grid" class="headerlink" title="网格 grid"></a>网格 grid</h3><p>默认情况下，G2 会为 y 坐标轴生成网格线，而 x 轴不展示网格线。网格线的配置属性名为 <code>grid</code>，只要为坐标轴配置 grid 属性即可展示网格线。</p><p>在 <code>grid</code> 属性中配置网格显示的样式，如下代码所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.axis(&#x27;xField&#x27;, &#123;<br>  grid: &#123;<br>    type: &#x27;line&#x27;,<br>    lineStyle: &#123;<br>      stroke: &#x27;#d9d9d9&#x27;,<br>      lineWidth: 1,<br>      lineDash: [ 4, 4 ]<br>    &#125;,<br>    align: &#x27;center&#x27; // 网格顶点从两个刻度中间开始<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="其他配置-1"><a href="#其他配置-1" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="设置坐标轴显示范围"><a href="#设置坐标轴显示范围" class="headerlink" title="设置坐标轴显示范围"></a>设置坐标轴显示范围</h3><p>每一种坐标轴范围的选择都会导致最后可视化结果的不同，坐标轴显示范围的设置需要在<a href="https://www.yuque.com/antv/g2-docs/tutorial-data-fields">列定义</a>中配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 方式 1<br>chart.source(data, &#123;<br>  xField: &#123;<br>    type: &#x27;linear&#x27;,<br>    min: 0,<br>    max: 1000<br>  &#125;<br>&#125;); <br>// 方式 2<br>chart.scale(&#x27;xField&#x27;, &#123;<br>  type: &#x27;linear&#x27;,<br>  min: 0, <br>  max: 1000<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="设置坐标轴刻度线个数"><a href="#设置坐标轴刻度线个数" class="headerlink" title="设置坐标轴刻度线个数"></a>设置坐标轴刻度线个数</h3><p>默认的坐标轴刻度线个数是 5 个，通过列定义，用户可以自定义坐标轴刻度线的个数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  xField: &#123;<br>    type: &#x27;timeCat&#x27;, // 声明该数据的类型<br>    tickCount: 9<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="设置坐标轴刻度线间距"><a href="#设置坐标轴刻度线间距" class="headerlink" title="设置坐标轴刻度线间距"></a>设置坐标轴刻度线间距</h3><p>对于连续类型的数据，G2 还支持设置坐标轴刻度线的间距（<code>tickInterval</code> 属性），同样需要在列定义中进行配置，但是需要说明的是，<code>tickInterval</code> 为原始数据值的差值，并且 <code>tickCount</code> 和 <code>tickInterval</code> 不可以同时声明。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  xField: &#123;<br>    type: &#x27;linear&#x27;,<br>    tickInterval: 1000<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="坐标系两端保留一定的空白"><a href="#坐标系两端保留一定的空白" class="headerlink" title="坐标系两端保留一定的空白"></a>坐标系两端保留一定的空白</h3><p>对于分类数据的坐标轴两边默认会留下一定的空白，连续数据的坐标轴的两端没有空白刻度</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vYmFzZW1lbnQvc2t5bGFyay8wYWQ2MzgzZDE0NzkxODk1NjgyOTU4OTQ5ZDc1NWYvYXR0YWNoLzQwODAvOTAwL2ltYWdlLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>是否两端有空白是列定义里面 range 属性决定的，分类列的 range 的默认值是 [ 1 &#x2F; (count - 1), 1 - 1 &#x2F; (count - 1) ]，可以修改这个值达到改变空白大小的目的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.source(data, &#123;<br>  xField: &#123;<br>    type: &#x27;cat&#x27;,<br>    range: [ 0, 1 ]<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="坐标轴在其他坐标系下的显示"><a href="#坐标轴在其他坐标系下的显示" class="headerlink" title="坐标轴在其他坐标系下的显示"></a>坐标轴在其他坐标系下的显示</h3><p>不同的坐标系下坐标轴的显示不一样，默认的配置项也不同</p><ul><li><p>极坐标下的坐标轴上栅格线有圆形和多边形两种；</p></li><li><p>theta、helix 坐标系默认不显示坐标轴；</p></li><li><p>polar 坐标系发生 transpose 时也不显示坐标轴。</p></li></ul><h1 id="Legend-图例"><a href="#Legend-图例" class="headerlink" title="Legend 图例"></a>Legend 图例</h1><h1 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h1><p>图例（legend）是图表的辅助元素，使用颜色、大小、形状区分不同的数据类型，用于图表中数据的筛选。G2 会根据设置图形属性映射以及数据的类型自动生成不同的图例。</p><ul><li><p>shape, color, size 这三个图形属性如果判断接收的参数是数据源的字段时，会自动生成不同的图例；</p></li><li><p>shape 属性，会根据不同的 shape 类型生成图例；</p></li><li><p>color 属性, 会赋予不同的图例项不同的颜色来区分图形；</p></li><li><p>size 属性, 在图例上显示图形的大小。</p></li></ul><p>通过 <code>chart.legend([field, ]false)</code> 可以关闭图例。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0tOenVQbmNEanBtbGNoSXpMblFNLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="如何配置图例"><a href="#如何配置图例" class="headerlink" title="如何配置图例"></a>如何配置图例</h2><p>调用 <code>chart.legend()</code> 进行图例的配置，使用方法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.legend(&#123; <br>  position: &#x27;bottom&#x27;, // 设置图例的显示位置<br>  itemGap: 20 // 图例项之间的间距<br>&#125;);<br><br>chart.legend(&#x27;cut&#x27;, false); // 不显示 cut 字段对应的图例<br><br>chart.legend(&#x27;price&#x27;, &#123;<br>  title: null // 不展示图例 title<br>&#125;);<br><br>chart.legend(false); //所有的图例都不显示<br></code></pre></td></tr></table></figure><h2 id="图例整体样式设置"><a href="#图例整体样式设置" class="headerlink" title="图例整体样式设置"></a>图例整体样式设置</h2><table><thead><tr><th>属性名</th><th>解释</th><th>默认值</th></tr></thead><tbody><tr><td>position</td><td>图例的显示位置，支持12个定位位置，配置值 ‘left-top’,’left-center’,’left-bottom’,’right-top’,’right-top’,’right-bottom’,’top-left’,’top-center’,’top-bottom’,’bottom-left’,’bottom-center’,’bottom-right’。也可使用’left’(默认为left-bottom’),’right’(默认为’right-bottom’),’top’(默认为top-center’),’bottom’(默认为bottom-center’)定位。</td><td>‘bottom-center’</td></tr><tr><td>title</td><td>用于图例标题的显示样式配置，如果值为 null 则不展示。</td><td>左右两侧图例默认展示标题，上下图例默认不展示标题</td></tr><tr><td>background</td><td>用于图例背景色的配置</td><td>默认没有背景色</td></tr><tr><td>offsetX</td><td>整个图例的水平偏移距离</td><td>–</td></tr><tr><td>offsetY</td><td>整个图例的垂直偏移距离</td><td>–</td></tr><tr><td>width</td><td>图例的整体宽度（用于连续图例）</td><td>20</td></tr><tr><td>height</td><td>图例的整体高度（用于连续图例）</td><td>156</td></tr><tr><td>autoWrap</td><td>图例项过多时是否自动换行（用于分类图例）</td><td>true，自动换行</td></tr><tr><td>marker</td><td>配置图例 marker 的显示样式，支持指定 <code>point</code> 几何标记支持的所有 shape(除去 ‘rect’)：’circle’, ‘square’, ‘bowtie’, ‘diamond’, ‘hexagon’, ‘triangle’, ‘triangle-down’, ‘hollowCircle’, ‘hollowSquare’, ‘hollowBowtie’, ‘hollowDiamond’, ‘hollowHexagon’, ‘hollowTriangle’, ‘hollowTriangle-down’, ‘cross’, ‘tick’, ‘plus’, ‘hyphen’, ‘line’</td><td>不同的几何标记不同的 marker</td></tr><tr><td>attachLast</td><td>是否启用尾部跟随图例（适用于<code>line</code>、<code>lineStack</code>、<code>area</code>、<code>areaStack</code>图表类型)</td><td>false</td></tr><tr><td>clickable</td><td>图例项是否可以点击</td><td>true</td></tr><tr><td>hoverable</td><td>是否默认开启鼠标 hover 到图例项上的交互</td><td>true</td></tr><tr><td>selectedMode</td><td>clickable 为 true 时生效，图例的选中模式，单选或者多选</td><td>‘multiple’ 默认多选</td></tr><tr><td>onHover</td><td>自定义图例项鼠标 hover 事件，hoverable 为 false 不生效</td><td>–</td></tr><tr><td>onClick</td><td>自定义图例项点击事件， clickable 为 false 不生效</td><td>–</td></tr></tbody></table><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk3OTAwNjQtNWNmM2YxYjktYTI4Ny00YzY0LWFjOGEtY2ZjMjdkMDI0NzUzLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; year: &#x27;Year 1800&#x27;, region: &#x27;Africa&#x27;, population: 107 &#125;,<br>  &#123; year: &#x27;Year 1900&#x27;, region: &#x27;Africa&#x27;, population: 133 &#125;,<br>  &#123; year: &#x27;Year 2012&#x27;, region: &#x27;Africa&#x27;, population: 1052 &#125;,<br>  &#123; year: &#x27;Year 1800&#x27;, region: &#x27;America&#x27;, population: 31 &#125;,<br>  &#123; year: &#x27;Year 1900&#x27;, region: &#x27;America&#x27;, population: 156 &#125;,<br>  &#123; year: &#x27;Year 2012&#x27;, region: &#x27;America&#x27;, population: 954 &#125;,<br>  &#123; year: &#x27;Year 1800&#x27;, region: &#x27;Asia&#x27;, population: 635 &#125;,<br>  &#123; year: &#x27;Year 1900&#x27;, region: &#x27;Asia&#x27;, population: 947 &#125;,<br>  &#123; year: &#x27;Year 2012&#x27;, region: &#x27;Asia&#x27;, population: 4250 &#125;,<br>  &#123; year: &#x27;Year 1800&#x27;, region: &#x27;Europe&#x27;, population: 203 &#125;,<br>  &#123; year: &#x27;Year 1900&#x27;, region: &#x27;Europe&#x27;, population: 408 &#125;,<br>  &#123; year: &#x27;Year 2012&#x27;, region: &#x27;Europe&#x27;, population: 740 &#125;,<br>  &#123; year: &#x27;Year 1800&#x27;, region: &#x27;Oceania&#x27;, population: 2 &#125;,<br>  &#123; year: &#x27;Year 1900&#x27;, region: &#x27;Oceania&#x27;, population: 6 &#125;,<br>  &#123; year: &#x27;Year 2012&#x27;, region: &#x27;Oceania&#x27;, population: 38 &#125;<br>];<br><br>const chart = new G2.Chart(&#123;<br>  container: &#x27;legendMarker&#x27;,<br>  width: 600,<br>  height: 350,<br>  padding: [ 20, 90, 95, 80 ]<br>&#125;);<br><br>chart.source(data);<br>chart.coord().transpose();<br>chart.legend(&#123;<br>  title: null, // 不展示图例的标题<br>  marker: &#x27;square&#x27; // 设置图例 marker 的显示样式<br>&#125;);<br>chart.intervalDodge().position(&#x27;region*population&#x27;).color(&#x27;year&#x27;).label(&#x27;population&#x27;);<br>chart.render();<br></code></pre></td></tr></table></figure><h2 id="各个图例项样式设置"><a href="#各个图例项样式设置" class="headerlink" title="各个图例项样式设置"></a>各个图例项样式设置<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL216RnVhbVFLV21EeEdqa0RtTWtuLnBuZw?x-oss-process=image/format,png" alt="img"></h2><table><thead><tr><th>属性名</th><th>解释</th><th>默认值</th></tr></thead><tbody><tr><td>allowAllCanceled</td><td>(分类图例)是否保留一项不能取消勾选，默认为 false，即最后一项不能取消勾选</td><td>false</td></tr><tr><td>unCheckColor</td><td>未选中时marker的颜色</td><td>‘#bfbfbf’</td></tr><tr><td>textStyle</td><td>图例项文本的样式配置</td><td>{fill: ‘#3c3c3c’}</td></tr><tr><td>itemWidth</td><td>图例项的宽度，当图例有很多图例项，并且用户想要这些图例项在同一平面内垂直对齐，此时这个属性可帮用户实现此效果</td><td>–</td></tr><tr><td>itemFormatter</td><td>用于格式化图例每项的文本显示，是个回调函数</td><td>–</td></tr></tbody></table><h2 id="图例的选择模式设置"><a href="#图例的选择模式设置" class="headerlink" title="图例的选择模式设置"></a>图例的选择模式设置</h2><p>在 G2 中，图例分为两种：</p><ol><li><p>分类图例；</p></li><li><p>连续图例。</p></li></ol><p>对于分类图例的筛选，G2 提供了三种方式：</p><ol><li><p><code>selectedMode: &#39;multiple&#39;</code> 多选，默认配置；</p></li><li><p><code>selectedMode: &#39;single&#39;</code> 单选；</p></li><li><p><code>clickable: false</code> 禁用筛选。</p></li></ol><p>对于连续图例，声明 <code>slidable: false</code> 关闭筛选操作，默认开启筛选操作。</p><p>通过如下代码即可进行配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 对分类图例进行配置<br>chart.legend(&#123;<br>  selectedMode: &#x27;single&#x27; <br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk4MjkxNTItZDMwZDI1ODItYjRkZS00MGY2LTg5NjEtMWE0MjkyODEzYzFiLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名0&#x27;, 完成人数: 37, 未完成人数: 9 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名2&#x27;, 完成人数: 29, 未完成人数: 10 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名8&#x27;, 完成人数: 59, 未完成人数: 14 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名9&#x27;, 完成人数: 60, 未完成人数: 8 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名10&#x27;, 完成人数: 83, 未完成人数: 14 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名12&#x27;, 完成人数: 67, 未完成人数: 21 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名14&#x27;, 完成人数: 46, 未完成人数: 18 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名17&#x27;, 完成人数: 19, 未完成人数: 27 &#125;,<br>  &#123; 部门: &#x27;部门0&#x27;, 小组: &#x27;组名19&#x27;, 完成人数: 74, 未完成人数: 17 &#125;,<br>  &#123; 部门: &#x27;部门1&#x27;, 小组: &#x27;组名15&#x27;, 完成人数: 34, 未完成人数: 19 &#125;,<br>  &#123; 部门: &#x27;部门1&#x27;, 小组: &#x27;组名20&#x27;, 完成人数: 71, 未完成人数: 25 &#125;,<br>  &#123; 部门: &#x27;部门1&#x27;, 小组: &#x27;组名26&#x27;, 完成人数: 28, 未完成人数: 23 &#125;,<br>  &#123; 部门: &#x27;部门1&#x27;, 小组: &#x27;组名29&#x27;, 完成人数: 90, 未完成人数: 24 &#125;,<br>  &#123; 部门: &#x27;部门2&#x27;, 小组: &#x27;组名7&#x27;, 完成人数: 50, 未完成人数: 5 &#125;,<br>  &#123; 部门: &#x27;部门2&#x27;, 小组: &#x27;组名11&#x27;, 完成人数: 86, 未完成人数: 26 &#125;,<br>  &#123; 部门: &#x27;部门2&#x27;, 小组: &#x27;组名13&#x27;, 完成人数: 63, 未完成人数: 16 &#125;,<br>  &#123; 部门: &#x27;部门2&#x27;, 小组: &#x27;组名27&#x27;, 完成人数: 76, 未完成人数: 2 &#125;,<br>  &#123; 部门: &#x27;部门2&#x27;, 小组: &#x27;组名28&#x27;, 完成人数: 13, 未完成人数: 28 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名1&#x27;, 完成人数: 33, 未完成人数: 16 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名3&#x27;, 完成人数: 14, 未完成人数: 1 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名4&#x27;, 完成人数: 43, 未完成人数: 25 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名16&#x27;, 完成人数: 45, 未完成人数: 13 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名18&#x27;, 完成人数: 50, 未完成人数: 21 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名22&#x27;, 完成人数: 43, 未完成人数: 7 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名23&#x27;, 完成人数: 38, 未完成人数: 6 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名24&#x27;, 完成人数: 33, 未完成人数: 24 &#125;,<br>  &#123; 部门: &#x27;部门3&#x27;, 小组: &#x27;组名25&#x27;, 完成人数: 13, 未完成人数: 27 &#125;,<br>  &#123; 部门: &#x27;部门4&#x27;, 小组: &#x27;组名5&#x27;, 完成人数: 98, 未完成人数: 4 &#125;,<br>  &#123; 部门: &#x27;部门4&#x27;, 小组: &#x27;组名6&#x27;, 完成人数: 88, 未完成人数: 12 &#125;,<br>  &#123; 部门: &#x27;部门4&#x27;, 小组: &#x27;组名21&#x27;, 完成人数: 52, 未完成人数: 9 &#125;<br>];<br> <br>const DataView = DataSet.DataView;<br>const dv = new DataView();<br>dv.source(data)<br>  .transform(&#123;<br>    type: &#x27;sort&#x27;,<br>    callback: (obj1, obj2) => &#123;<br>      return obj1[&#x27;部门&#x27;] > obj2[&#x27;部门&#x27;] ? 1 : -1;<br>    &#125;<br>  &#125;)<br>  .transform(&#123;<br>    type: &#x27;map&#x27;,<br>    callback: obj => &#123;<br>      obj[&#x27;完成人数&#x27;] *= -1; // 将完成人数转换成负数<br>      return obj;<br>    &#125;<br>  &#125;)<br>  .transform(&#123;<br>    type: &#x27;fold&#x27;,<br>    fields: [&#x27;完成人数&#x27;, &#x27;未完成人数&#x27;],<br>    key: &#x27;完成状态&#x27;,<br>    value: &#x27;人数&#x27;<br>  &#125;);<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height: 400,<br>  padding: [ 5, 100, 80 ]<br>&#125;);<br>chart.source(dv);<br>chart.filter(&#x27;部门&#x27;, val => &#123;<br>  return val === &#x27;部门0&#x27;;<br>&#125;);<br>chart.coord().transpose();<br>// 关键代码：设置对应图例的选择模式<br>chart.legend(&#x27;部门&#x27;, &#123;<br>  selectedMode: &#x27;single&#x27;,<br>  position: &#x27;right-bottom&#x27;,<br>  hoverable: false<br>&#125;);<br>chart.legend(&#x27;完成状态&#x27;, false);<br>chart.axis(&#x27;人数&#x27;, &#123;<br>  label: &#123;<br>    formatter: value => &#123;<br>      value = parseInt(value);<br>      return Math.abs(value); // 将负数格式化成正数<br>    &#125;<br>  &#125;<br>&#125;);<br>chart.interval()<br>  .position(&#x27;小组*人数&#x27;)<br>  .color(&#x27;部门&#x27;)<br>  .shape(&#x27;完成状态&#x27;, [ &#x27;rect&#x27;, &#x27;hollowRect&#x27; ])<br>  .style(&#123;<br>    lineWidth: 1<br>  &#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h2 id="使用-html-渲染图例"><a href="#使用-html-渲染图例" class="headerlink" title="使用 html 渲染图例"></a>使用 html 渲染图例</h2><p>G2 支持使用 html 渲染图例，方式非常简单，只要声明 <code>useHtml: true</code> 即可。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4Mzk4NjMwNzctMzVkOTE3M2YtZTg5ZS00MTUyLTg1M2YtMTM4NGE3MjIzZDc1LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.legend(&#123;<br>  useHtml: true,<br>  containerTpl: &#123;string&#125;, // 可选，默认容器模板不满足要求时使用<br>  itemTpl: &#123;string&#125; | &#123;function&#125;, // 可选，用户设置的图例项 html 模板，默认提供的模板不满足要求时使用<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; country: &#x27;Lithuania&#x27;, litres: 501.9 &#125;,<br>  &#123; country: &#x27;Czech Republic&#x27;, litres: 301.9 &#125;,<br>  &#123; country: &#x27;Ireland&#x27;, litres: 201.1 &#125;,<br>  &#123; country: &#x27;Germany&#x27;, litres: 165.8 &#125;,<br>  &#123; country: &#x27;Australia&#x27;, litres: 139.9 &#125;,<br>  &#123; country: &#x27;Austria&#x27;, litres: 128.3 &#125;,<br>  &#123; country: &#x27;UK&#x27;, litres: 99 &#125;,<br>  &#123; country: &#x27;Belgium&#x27;, litres: 60 &#125;,<br>  &#123; country: &#x27;The Netherlands&#x27;, litres: 50 &#125;<br>];<br><br>const ds = new DataSet();<br>const dv = ds.createView()<br>  .source(data)<br>  .transform(&#123;<br>    type: &#x27;percent&#x27;,<br>    field: &#x27;litres&#x27;,<br>    dimension: &#x27;country&#x27;,<br>    as: &#x27;percent&#x27;<br>  &#125;);<br><br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c2&#x27;,<br>  width: 500,<br>  height: 500,<br>  padding: [ 20, 120, 20, 160 ]<br>&#125;);<br>chart.source(dv, &#123;<br>  percent: &#123;<br>    formatter: val => &#123;<br>      val = (val * 100).toFixed(2) + &#x27;%&#x27;;<br>      return val;<br>    &#125;<br>  &#125;,<br>  nice: false<br>&#125;);<br>chart.coord(&#x27;theta&#x27;, &#123;<br>  innerRadius: 0.3,<br>  radius: 1<br>&#125;);<br>chart.tooltip(&#123;<br>  showTitle: false, // 不展示标题<br>  itemTpl: &#x27;<li data-index=&#123;index&#125;><span style="color:&#123;color&#125;">&#123;name&#125;:</span>&#123;value&#125;</li>&#x27;<br>&#125;);<br>chart.legend(&#123;<br>  useHtml: true,<br>  position: &#x27;right&#x27;,<br>  containerTpl: &#x27;<div class="g2-legend">&#x27; +<br>    &#x27;<table class="g2-legend-list" style="list-style-type:none;margin:0;padding:0;"></table>&#x27; +<br>    &#x27;</div>&#x27;,<br>  itemTpl: (value, color, checked, index) => &#123;<br>    const obj = dv.rows[index];<br>    checked = checked ? &#x27;checked&#x27; : &#x27;unChecked&#x27;;<br>    return &#x27;<tr class="g2-legend-list-item item-&#x27; + index + &#x27; &#x27; + checked +<br>      &#x27;" data-value="&#x27; + value + &#x27;" data-color=&#x27; + color +<br>      &#x27; style="cursor: pointer;font-size: 14px;">&#x27; +<br>      &#x27;<td width=150 style="border: none;padding:0;"><i class="g2-legend-marker" style="width:10px;height:10px;display:inline-block;margin-right:10px;background-color:&#x27; + color + &#x27;;"></i>&#x27; +<br>      &#x27;<span class="g2-legend-text">&#x27; + value + &#x27;</span></td>&#x27; +<br>      &#x27;<td style="text-align: right;border: none;padding:0;">&#x27; + obj.litres + &#x27;</td>&#x27; +<br>      &#x27;</tr>&#x27;;<br>  &#125;,<br>  offsetX: 15,<br>  &#x27;g2-legend&#x27;: &#123;<br>    marginLeft: &#x27;100px&#x27;,<br>    marginTop: &#x27;-107px&#x27;<br>  &#125;,<br>  &#x27;g2-legend-list&#x27;: &#123;<br>    border: &#x27;none&#x27;<br>  &#125;<br>&#125;);<br>chart.filter(&#x27;country&#x27;, val => &#123;<br>  return val !== &#x27;UK&#x27;;<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;country&#x27;, [ &#x27;#67b7dc&#x27;, &#x27;#84b761&#x27;, &#x27;#fdd400&#x27;, &#x27;#cc4748&#x27;, &#x27;#cd82ad&#x27;, &#x27;#2f4074&#x27;, &#x27;#448e4d&#x27;, &#x27;#b7b83f&#x27;, &#x27;#b9783f&#x27; ])<br>  .label(&#x27;percent&#x27;, &#123;<br>    formatter: (val, item) => &#123;<br>      return item.point.country + &#x27;: &#x27; + val;<br>    &#125;<br>  &#125;)<br>  .style(&#123;<br>    lineWidth: 2,<br>    stroke: &#x27;#fff&#x27;<br>  &#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>1.隐藏图例</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.legend(false); // 隐藏全部图例<br>chart.legend(&#x27;x&#x27;, false); // 只隐藏 x 维度对应的图例<br></code></pre></td></tr></table></figure><ul><li>2.更改图例位置</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.legend(&#x27;x&#x27;, &#123;<br>  position: &#x27;bottom&#x27;<br>&#125;); // 只更改 x 维度对应的图例的显示位置<br></code></pre></td></tr></table></figure><ul><li>3.图例显示位置不够</li></ul><p>调整 padding 值（padding 的介绍详见<a href="https://www.yuque.com/antv/g2-docs/tutorial-creating-chart#ocqogt">创建图表之图表样式</a>）。</p><h1 id="Tooltip-提示信息"><a href="#Tooltip-提示信息" class="headerlink" title="Tooltip 提示信息"></a>Tooltip 提示信息</h1><p>提示信息(tooltip)，是指当鼠标悬停在图表上的某点时，以提示框的形式展示该点的数据，比如该点的值，数据单位等。tooltip 内显示的信息完全可以通过格式化函数动态指定；通过调用 <code>chart.tooltip(false)</code> 即可不启用提示信息功能。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL1ZMTmhrS1JBTGFmUHREQ0laRnFBLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="tooltip-配置语法"><a href="#tooltip-配置语法" class="headerlink" title="tooltip 配置语法"></a>tooltip 配置语法</h2><p>在 G2 中提供了个层次的配置 tooltip 的方法，</p><ol><li><p>设置在 chart 对象上的tooltip 样式、功能相关的配置，</p></li><li><p>设置在每个几何标记对象上的 tooltip 配置，具体如下：</p></li></ol><p>（1） chart 上的 tooltip 方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.tooltip(true, cfg); // 开启 tooltip，并设置 tooltip 配置信息<br>chart.tooltip(cfg); // 省略 true, 直接设置 tooltip 配置信息<br>chart.tooltip(false); // 关闭 tooltip<br></code></pre></td></tr></table></figure><p>常用的 tooltip 配置信息如下，注意，G2 的 tooltip 是使用 html 进行渲染的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.tooltip(&#123;<br>  triggerOn: &#x27;mousemove&#x27; | &#x27;click&#x27; | &#x27;none&#x27;, // tooltip 的触发方式，默认为 mousemove <br>  showTitle: &#123;boolean&#125;, // 是否展示 title，默认为 true<br>  crosshairs: &#123;<br>    type: &#x27;rect&#x27; || &#x27;x&#x27; || &#x27;y&#x27; || &#x27;cross&#x27;,<br>    style: &#123;<br>      // 图形样式<br>    &#125;<br>  &#125;, // tooltip 辅助线配置<br>  offset: 10, // tooltip 距离鼠标的偏移量<br>  containerTpl: &#x27;<div class="g2-tooltip">&#x27;<br>    + &#x27;<div class="g2-tooltip-title" style="margin:10px 0;"></div>&#x27;<br>    + &#x27;<ul class="g2-tooltip-list"></ul></div>&#x27;, // tooltip 容器模板<br>  itemTpl: &#x27;<li data-index=&#123;index&#125;><span style="background-color:&#123;color&#125;;width:8px;height:8px;border-radius:50%;display:inline-block;margin-right:8px;"></span>&#123;name&#125;: &#123;value&#125;</li>&#x27;, // tooltip 每项记录的默认模板<br>  inPlot: true, // 将 tooltip 展示在指定区域内<br>  follow: true， // tooltip 是否跟随鼠标移动<br>  shared: true || false, // 默认为 true, false 表示只展示单条 tooltip<br>  position: &#x27;left&#x27; || &#x27;right&#x27; || &#x27;top&#x27; || &#x27;bottom&#x27; // 固定位置展示 tooltip<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay83NTA3MjVkNC0yZTU4LTQ0MjAtYjg4Ni00YWJlMWMwMzM1YzIvYXR0YWNoLzIzNzgvYWQ4ZmUyZGFhNTU3YWQ2Mi9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>更详细的配置请查看 <a href="https://www.yuque.com/antv/g2-docs/api-chart#tooltip">tooltip api</a>。</p><p>（2）geom 对象上的 tooltip 配置</p><ol><li>可以在 geom 几何标记上配置 tooltip 的显示内容，如下语法所示：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.<geom>.tooltip(&#x27;field1*field2...*fieldN&#x27;);<br></code></pre></td></tr></table></figure><p>这个时候 tooltip 的显示内容如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96b3MuYWxpcGF5b2JqZWN0cy5jb20vc2t5bGFyay9hOTJkMTIxYS01ODc5LTQyYWQtYjEyYy0xYjRjYzNjNzlmNjkvYXR0YWNoLzIzNzgvYjgwMTNlOWRkMTBmZDYzNC9pbWFnZS5wbmc?x-oss-process=image/format,png" alt="img"></p><ol><li>使用回调函数自定义 tooltip 信息, 默认情况下tooltip 的每一项包含以下信息：</li></ol><ul><li><p>title 标题，默认tooltip 的标题取第一项的 title</p></li><li><p>name 标题</p></li><li><p>value 值</p></li><li><p>color 图例项对应的颜色</p></li><li><p>index 索引值<br>所以在回调函数中可以通过修改这几个值，达到自定义tooltip 的目的</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.<geom>.tooltip(&#x27;a*b&#x27;, (a, b) => &#123;<br>  return &#123;<br>    name: a,<br>    value: b<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>除了调用 <code>chart.tooltip(false)</code> 关闭 tooltip 外，还可以在 geom 上关闭 tooltip。配置方法如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.point().tooltip(false);<br></code></pre></td></tr></table></figure><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><p>tooltip 的目的是为了展示数据点相关的数据，具体展示的内容完全可以通过多种灵活的方式来实现。</p><h3 id="指定-tooltip-的显示信息"><a href="#指定-tooltip-的显示信息" class="headerlink" title="指定 tooltip 的显示信息"></a>指定 tooltip 的显示信息</h3><p>如果 G2 默认生成的 tooltip 展示内容不满足需求，用户可以通过调用几何标记的 tooltip 方法手动指定要显示的 tooltip 内容。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAwNDU4NjgtNzQ4OTJjMjgtNTEyNi00NDhiLWJmY2MtM2FkY2Q3NWU5NjY2LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; month: 0, tem: 7, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 1, tem: 6.9, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 2, tem: 9.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 3, tem: 14.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 4, tem: 18.2, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 5, tem: 21.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 6, tem: 25.2, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 7, tem: 26.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 8, tem: 23.3, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 9, tem: 18.3, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 10, tem: 13.9, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 11, tem: 9.6, city: &#x27;tokyo&#x27; &#125;<br>];<br><br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c0&#x27;,<br>  width: 800,<br>  height: 300<br>&#125;);<br><br>const defs = &#123;<br>  &#x27;month&#x27;:&#123;<br>    type: &#x27;cat&#x27;,<br>    alias: &#x27;月份&#x27;, // 别名，如果没有别名显示成字段名 month<br>    values: [ &#x27;一月&#x27;, &#x27;二月&#x27;, &#x27;三月&#x27;, &#x27;四月&#x27;, &#x27;五月&#x27;, &#x27;六月&#x27;, &#x27;七月&#x27;, &#x27;八月&#x27;, &#x27;九月&#x27;, &#x27;十月&#x27;, &#x27;十一月&#x27;, &#x27;十二月&#x27; ]<br>  &#125;,<br>  &#x27;tem&#x27;: &#123;<br>    alias: &#x27;温度&#x27;<br>  &#125;<br>&#125;;<br><br>chart.source(data,defs);<br><br>chart.tooltip(true, &#123;<br>  showTitle: false // 默认标题不显示<br>&#125;);<br>chart.line().position(&#x27;month*tem&#x27;).tooltip(&#x27;month*tem&#x27;);<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="格式化-tooltip-的显示内容"><a href="#格式化-tooltip-的显示内容" class="headerlink" title="格式化 tooltip 的显示内容"></a>格式化 tooltip 的显示内容</h3><p>当需要格式化 tooltip 的显示内容时，有两种方式：</p><ol><li><p>大部分场景下，可以使用 <code>geom.tooltip(&#39;x*y*z&#39;, callback)</code> 同 <code>chart.tooltip(&#123; itemTpl: &#39;xxx&#39;&#125;)</code> 的方式。</p></li><li><p>对于复杂的场景，可以监听 chart 对象上的 <code>tooltip:change</code> 事件。这个事件会返回如下参数：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  x: 当前鼠标的 x 坐标,<br>  y: 当前鼠标的 y 坐标,<br>  tooltip: 当前的 tooltip 对象<br>  items: 数组对象，当前 tooltip 显示的每条内容<br>&#125;<br></code></pre></td></tr></table></figure><p>每一项的内容</p><ul><li><p>title 标题，默认tooltip 的标题取第一项的 title</p></li><li><p>name 标题</p></li><li><p>value 值</p></li><li><p>color 图例项对应的颜色</p></li><li><p>index 索引值</p></li></ul><p>通过修改 items 的内容就可以修改 tooltip 的展示内容了。</p><h4 id="使用-geom-tooltip-回调"><a href="#使用-geom-tooltip-回调" class="headerlink" title="使用 geom.tooltip() 回调"></a>使用 geom.tooltip() 回调</h4><p>这种方式通常需要同 chart.tooltip() 结合使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">//自定义模板，自定义tooltip展示<br>chart.tooltip(&#123;<br>  itemTpl: &#x27;<li>&#123;x&#125;: &#123;y&#125;</li>&#x27;<br>&#125;);<br>chart.line().position(&#x27;x*y&#x27;).tooltip(&#x27;x*y&#x27;, (x, y) => &#123;<br>  return &#123;<br>    x, <br>    y<br>  &#125;; // 返回的参数名对应 itemTpl 中的变量名<br>);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAxMDAyMjEtYWU1OWNmZTctYWQ5NC00MTI1LTlhNGMtMDY2MzYxMmJlYTdhLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;Microsoft Internet Explorer&#x27;, value: 30 &#125;,<br>  &#123; name: &#x27;Chrome&#x27;, value: 20 &#125;,<br>  &#123; name: &#x27;Firefox&#x27;, value: 10 &#125;,<br>  &#123; name: &#x27;Safari&#x27;, value: 10 &#125;,<br>  &#123; name: &#x27;Opera&#x27;, value: 15 &#125;,<br>  &#123; name: &#x27;Others&#x27;, value: 15 &#125;<br>];<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height: 400<br>&#125;);<br>chart.source(data);<br>chart.coord(&#x27;theta&#x27;, &#123; innerRadius: 0.6, radius: 0.8 &#125;);<br>chart.tooltip(&#123;<br>  showTitle: false,<br>  itemTpl: &#x27;<li>&#123;name&#125;: &#123;value&#125;</li>&#x27;<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;value&#x27;)<br>  .color(&#x27;name&#x27;)<br>  .tooltip(&#x27;name*value&#x27;, (name, value) => &#123;<br>    return &#123;<br>      name: name,<br>      value: value + &#x27;%&#x27;<br>    &#125;;<br>  &#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h4 id="监听-tooltip-change-事件"><a href="#监听-tooltip-change-事件" class="headerlink" title="监听 tooltip:change 事件"></a>监听 tooltip:change 事件</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAxNDM5OTEtZDQ4MzI0YjUtZTFmOC00NzliLTk3YzEtMTA3ZGEzYjYyZjczLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [ // 数据<br>  &#123; time: 1428163200000, start: 469, end: 480 &#125;,<br>  &#123; time: 1428163203600, start: 480, end: 430 &#125;,<br>  &#123; time: 1428163207200, start: 430, end: 410 &#125;,<br>  &#123; time: 1428163210800, start: 410, end: 420 &#125;,<br>  &#123; time: 1428163214400, start: 420, end: 440 &#125;,<br>  &#123; time: 1428163218000, start: 440, end: 460 &#125;,<br>  &#123; time: 1428163221600, start: 460, end: 410 &#125;,<br>  &#123; time: 1428163225200, start: 410, end: 440 &#125;,<br>  &#123; time: 1428163228800, start: 440, end: 490 &#125;<br>];<br><br>const DataView = DataSet.DataView;<br>const dv = new DataView();<br>dv.source(data).transform(&#123;<br>  type: &#x27;map&#x27;, <br>  callback: obj => &#123;<br>    obj.range = [ obj.start, obj.end ];<br>    obj.trend = (obj.start <= obj.end) ? &#x27;上涨&#x27; : &#x27;下跌&#x27;;<br>    return obj;<br>  &#125;<br>&#125;);<br><br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c2&#x27;,<br>  width: 800,<br>  height: 400,<br>  padding: [ 20, 50, 95, 80 ]<br>&#125;);<br>chart.source(dv, &#123;<br>  &#x27;time&#x27;: &#123; // 设置日期类型<br>    type: &#x27;time&#x27;,<br>    mask: &#x27;YYYY-MM-DD HH:MM:ss&#x27;<br>  &#125;,<br>  &#x27;trend&#x27;: &#123; <br>    alias: &#x27;趋势&#x27;<br>  &#125;<br>&#125;);<br>chart.interval()<br>  .position(&#x27;time*range&#x27;)<br>  .color(&#x27;trend&#x27;, [ &#x27;#1bbd19&#x27;, &#x27;#fa513a&#x27; ])<br>  .size(20);<br>chart.render();<br>chart.on(&#x27;tooltip:change&#x27;, function(ev) &#123;<br>  const items = ev.items; // tooltip显示的项<br>  const origin = items[0]; // 将一条数据改成多条数据<br>  const range = origin.point._origin.range;<br>  items.splice(0); // 清空<br>  items.push(Object.assign(&#123;<br>    name: &#x27;开始值&#x27;,<br>    marker: true,<br>    value: range[0]<br>  &#125;, origin));<br>  items.push(Object.assign(&#123;<br>    name: &#x27;结束值&#x27;,<br>    marker: true,<br>    value: range[1]<br>  &#125;, origin));<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="自定义-html-模板"><a href="#自定义-html-模板" class="headerlink" title="自定义 html 模板"></a>自定义 html 模板</h3><p>G2 也支持使用自定义的 html 展示 tooltip。配置方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.tooltip(true, &#123;<br>  containerTpl: &#x27;<div class="g2-tooltip">&#x27;<br>    + &#x27;<div class="g2-tooltip-title" style="margin:10px 0;"></div>&#x27;<br>    + &#x27;<ul class="g2-tooltip-list"></ul></div>&#x27;,<br>  itemTpl: &#x27;<li data-index=&#123;index&#125;><span style="background-color:&#123;color&#125;;width:8px;height:8px;border-radius:50%;display:inline-block;margin-right:8px;"></span>&#123;name&#125;: &#123;value&#125;</li>&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p><code>containerTpl</code> tooltip 容器模板 ，注意一定要包含以下 class:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><div class="g2-tooltip"><br>  <!-- tooltip 标题 --><br>  <div class="g2-tooltip-title" style="margin:10px 0;"></div><br>  <!-- tooltip 内容列表容器 --><br>  <ul class="g2-tooltip-list"></ul><br></div><br></code></pre></td></tr></table></figure><blockquote><p><code>itemTpl</code> tooltip 每项记录的默认模板:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><li data-index=&#123;index&#125;><br>  <!-- 每项记录的 marker --><br>  <span style="background-color:&#123;color&#125;;width:8px;height:8px;border-radius:50%;display:inline-block;margin-right:8px;"></span><br>  &#123;name&#125;: &#123;value&#125;<br></li><br></code></pre></td></tr></table></figure><p>对于 tooltip 的显示样式的配置，用户可以：</p><ol><li><p>在自定义模板时使用内联的方式直接定义；</p></li><li><p>在 html 页面的 style 标签内，为对应的 dom 标签设置样式；</p></li><li><p>在 <code>chart.tooltip(cfg)</code> 中设置属性，如下，具体的说明详见 <a href="https://www.yuque.com/antv/g2-docs/api-chart#tooltip">API</a></p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.tooltip(&#123;<br>  &#x27;g2-tooltip&#x27;: &#123;<br>    position: &#x27;absolute&#x27;,<br>    visibility: &#x27;hidden&#x27;,<br>    border : &#x27;1px solid #efefef&#x27;,<br>    backgroundColor: &#x27;white&#x27;,<br>    color: &#x27;#000&#x27;,<br>    opacity: "0.8",<br>    padding: &#x27;5px 15px&#x27;,<br>    &#x27;transition&#x27;: &#x27;top 200ms,left 200ms&#x27;<br>  &#125;, // 设置 tooltip 的 css 样式<br>  &#x27;g2-tooltip-list&#x27;: &#123;<br>    margin: &#x27;10px&#x27;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="其他配置-2"><a href="#其他配置-2" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="显示辅助线（辅助框）"><a href="#显示辅助线（辅助框）" class="headerlink" title="显示辅助线（辅助框）"></a>显示辅助线（辅助框）</h3><p>默认线图和区域图会显示辅助线、柱状图会显示辅助框，当用户需要显示辅助线（框）时，可以通过配置 <code>crosshairs</code> 属性设置，crosshairs 支持四种展示形式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">crosshairs: &#123;<br>  type: &#x27;rect&#x27; || &#x27;x&#x27; || &#x27;y&#x27; || &#x27;cross&#x27;,<br>  style: &#123;<br>    // 图形样式<br>  &#125;<br>&#125;, // tooltip 辅助线配置<br></code></pre></td></tr></table></figure><blockquote><p>crosshairs.type 说明：</p></blockquote><ul><li><p>rect: 矩形框</p></li><li><p>x: 水平辅助线</p></li><li><p>y: 垂直辅助线</p></li><li><p>cross: 十字辅助线</p></li></ul><p>‘line’, ‘area’, ‘path’ 默认会展示垂直辅助线；‘interval’， 默认会展示矩形背景框。</p><h3 id="改变-tooltip-触发方式"><a href="#改变-tooltip-触发方式" class="headerlink" title="改变 tooltip 触发方式"></a>改变 tooltip 触发方式</h3><p>通过配置 <code>triggerOn</code> 参数来改变 tooltip 的触发方式，可配置值为：</p><ul><li><p><code>mousemove</code>: 鼠标移动至目标区域触发，默认方式；</p></li><li><p><code>click</code>: 鼠标点击目标区域触发</p></li><li><p><code>none</code>: 不触发 tooltip，由用户调用 <code>chart.showTooltip(point)</code> 和 <code>chart.hideTooltip()</code> 来控制提示框的显示隐藏。</p></li></ul><p>当然在任何触发方式下，用户都可以通过调用 <code>chart.showTooltip(point)</code> 可以控制在固定的位置显示提示信息，参数 <code>point</code> 为画布上的坐标点，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const point = &#123;<br>  x: 23,<br>  y: 30<br>&#125;;<br></code></pre></td></tr></table></figure><p>另外还提供了 <code>chart.getXY(&#123;xField: value, yField: value&#125;)</code> 方法，用于获取数据对应在画布空间的坐标。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAxOTEwMjgtZmRlZDg0NWMtOGNkYi00MTEyLThmYmQtZmUzNmJkNTg4YWIxLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; time: &#x27;2016-10-25 00:00:00&#x27;, runCount: 4, type: 2, runTime: 2 &#125;,<br>  &#123; time: &#x27;2016-10-25 00:30:00&#x27;, runCount: 2, type: 6, runTime: 3 &#125;,<br>  &#123; time: &#x27;2016-10-25 01:00:00&#x27;, runCount: 13, type: 2, runTime: 5 &#125;,<br>  &#123; time: &#x27;2016-10-25 01:30:00&#x27;, runCount: 9, type: 9, runTime: 1 &#125;,<br>  &#123; time: &#x27;2016-10-25 02:00:00&#x27;, runCount: 5, type: 2, runTime: 3 &#125;,<br>  &#123; time: &#x27;2016-10-25 02:30:00&#x27;, runCount: 8, type: 2, runTime: 1 &#125;,<br>  &#123; time: &#x27;2016-10-25 03:00:00&#x27;, runCount: 13, type: 1, runTime: 2 &#125;,<br>  &#123; time: &#x27;2016-10-25 03:30:00&#x27;, runCount: 4, type: 2, runTime: 2 &#125;,<br>  &#123; time: &#x27;2016-10-25 04:00:00&#x27;, runCount: 2, type: 6, runTime: 3 &#125;,<br>  &#123; time: &#x27;2016-10-25 04:30:00&#x27;, runCount: 13, type: 2, runTime: 5 &#125;,<br>  &#123; time: &#x27;2016-10-25 05:00:00&#x27;, runCount: 9, type: 9, runTime: 1 &#125;,<br>  &#123; time: &#x27;2016-10-25 05:30:00&#x27;, runCount: 5, type: 2, runTime: 3 &#125;<br>];<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c3&#x27;,<br>  forceFit: true,<br>  height: 300,<br>  padding: [ 50, 80 ]<br>&#125;);<br>chart.source(data);<br>chart.scale(&#x27;time&#x27;,&#123;<br>  type: &#x27;timeCat&#x27;,<br>  mask: &#x27;HH:MM&#x27;,<br>  tickCount:12,<br>  nice:true,<br>&#125;);<br>chart.scale(&#x27;runCount&#x27;, &#123;<br>  alias: &#x27;运行数量&#x27;,<br>  min: 0<br>&#125;);<br>chart.scale(&#x27;runTime&#x27;, &#123;<br>  alias: &#x27;运行时间(ms)&#x27;<br>&#125;);<br>chart.tooltip(&#123;<br>  triggerOn: &#x27;click&#x27; // 鼠标点击触发 tooltip<br>&#125;); // 关闭 tooltip<br>chart.legend(false); // 不显示图例<br>chart.line()<br>  .position(&#x27;time*runTime&#x27;)<br>  .color(&#x27;#5ed470&#x27;)<br>  .size(2)<br>  .shape(&#x27;smooth&#x27;); // 绘制曲线图<br>chart.point()<br>  .position(&#x27;time*runTime&#x27;)<br>  .color(&#x27;#5ed470&#x27;)<br>  .size(5)<br>  .shape(&#x27;circle&#x27;)<br>  .style(&#123;<br>    cursor: &#x27;pointer&#x27;<br>  &#125;); // 绘制点图<br>chart.render();<br><br>// 初始化到最新一个点<br>const lastPoint  = chart.get(&#x27;plotRange&#x27;).br;<br>chart.showTooltip(lastPoint);<br></code></pre></td></tr></table></figure><h1 id="Guide-辅助元素"><a href="#Guide-辅助元素" class="headerlink" title="Guide 辅助元素"></a>Guide 辅助元素</h1><p>Guide 作为 G2 图表的辅助元素，主要用于在图表上标识额外的标记注解。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL2Vrckh0Q2tkZk10dGpuQVhxQXBILnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="guide-类型"><a href="#guide-类型" class="headerlink" title="guide 类型"></a>guide 类型</h2><p>G2 目前支持 <strong>9</strong> 种辅助标记类型：</p><ul><li><p>line：辅助线（可带文本），例如表示平均值或者预期分布的直线；</p></li><li><p>image：辅助图片，在图表上添加辅助图片；</p></li><li><p>text：辅助文本，指定位置添加文本说明；</p></li><li><p>region：辅助框，框选一段图区，设置背景、边框等；</p></li><li><p>regionFilter:区域着色，将图表中位于矩形选区中的图形元素提取出来，重新着色；</p></li><li><p>html：辅助 html，指定位置添加自定义 html，显示自定义信息；</p></li><li><p>arc：辅助弧线。</p></li><li><p>dataMarker:特殊数据点标注，多用于折线图和面积图</p></li><li><p>dataRegion:特殊数据区间标注，多用于折线图和面积图</p></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>下面列出了各个 guide 辅助标记类型的使用，更详细的配置项参见 <a href="https://www.yuque.com/antv/g2-docs/api-chart#gokznc">Guide API</a>。</p><p>guide 辅助标记用于标示位置的方式主要有两种</p><ul><li><p>原始数据的值 如： {time: ‘2010-01-01’, value: 100} 或者 [‘2010-01-01’, 100]</p></li><li><p>图表绘图区域的相对位置，从左上角计算 如：[‘50%’, ‘50%’]</p></li></ul><p><code>注意</code>：</p><ul><li><p>原始数据和百分比的方式不能混用，不支持[‘2010-01-01’, ‘50%’]</p></li><li><p>不同 guide 中标示位置的参数不完全相同，主要是 start, end, position</p></li></ul><h3 id="line-辅助线"><a href="#line-辅助线" class="headerlink" title="line 辅助线"></a>line 辅助线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().line(&#123;<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 辅助线起始位置，值为原始数据值，支持 callback<br>  end: &#123;object&#125; | &#123;function&#125;|| &#123;array&#125;,// 辅助线结束位置，值为原始数据值，支持 callback<br>  lineStyle: &#123;<br>    stroke: &#x27;#999&#x27;, // 线的颜色<br>    lineDash: [ 0, 2, 2 ], // 虚线的设置<br>    lineWidth: 3 // 线的宽度<br>  &#125;, // 图形样式配置<br>  text: &#123;<br>    position: &#x27;start&#x27; | &#x27;center&#x27; | &#x27;end&#x27; | &#x27;39%&#x27; | 0.5, // 文本的显示位置<br>    autoRotate: &#123;boolean&#125;, // 是否沿线的角度排布，默认为 true<br>    style: &#123;<br>      // 文本图形样式配置<br>    &#125;,<br>    content: &#123;string&#125;, // 文本的内容<br>    offsetX: &#123;number&#125;, // x 方向的偏移量<br>    offsetY: &#123;number&#125; // y 方向的偏移量<br>  &#125; // 文本配置<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAzNzM3NzUtOGFlNTJjYjctYjFiOC00ZWYzLTkwNTMtMDA2NzIxYWJmNjFjLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const DataView = DataSet.DataView;<br>$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const dv = (new DataView()).source(data);<br>  const caratAvg = dv.mean(&#x27;carat&#x27;); // 计算克拉数均值<br>  const priceAvg = dv.mean(&#x27;price&#x27;); // 计算价格均值<br>  const chart = new G2.Chart(&#123; // 创建图表<br>    container : &#x27;c1&#x27;,<br>    forceFit: true,<br>    height: 450<br>  &#125;);<br> <br>  chart.source(data); // 设置数据源<br>  chart.point().position(&#x27;carat*price&#x27;);<br>  chart.guide().line(&#123;<br>    start: [ caratAvg, 0 ], // 使用数组格式<br>    end: [ caratAvg, 20000 ],<br>    text: &#123;<br>      position: &#x27;end&#x27;,<br>      autoRotate: false,<br>      content: &#x27;克拉数均值:&#x27; + caratAvg<br>    &#125;<br>  &#125;);<br>  chart.guide().line(&#123;<br>    start: &#123;<br>      carat: 0,<br>      price: priceAvg<br>    &#125;, // 使用对象格式<br>    end: &#123;<br>      carat: 4,<br>      price: priceAvg<br>    &#125;,<br>    text: &#123;<br>      position: &#x27;end&#x27;,<br>      autoRotate: false,<br>      content: &#x27;价格均值:&#x27; + priceAvg,<br>      style: &#123;<br>        textAlign: &#x27;end&#x27;<br>      &#125;<br>    &#125;<br>  &#125;);<br>  chart.render(); // 图表渲染<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="image-辅助图片"><a href="#image-辅助图片" class="headerlink" title="image 辅助图片"></a>image 辅助图片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 辅助图片 image，只是指定了 start，则该点表示图片左上角坐标<br>chart.guide().image(&#123;<br>  top: &#123;boolean&#125;, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层<br>  zIndex: &#123;number&#125;,<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 图片起始位置， 值为原始数据值，支持 callback<br>  src: &#123;string&#125;, // 图片路径<br>  width: &#123;number&#125;,<br>  height: &#123;number&#125;,<br>  offsetX: &#123;number&#125;, // x 方向的偏移量<br>  offsetY: &#123;number&#125; // y 方向偏移量<br>&#125;);<br>// 辅助图片 image，通过指定 start 和 end 确定图片的位置和宽高<br>chart.guide().image(&#123;<br>  top: &#123;boolean&#125;, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层 <br>  start: &#123;array&#125; | &#123;function&#125; | &#123;array&#125;, // 图片起始位置， 值为原始数据值，支持 callback<br>  end: &#123;array&#125; | &#123;function&#125; | &#123;array&#125;, // 图片结束位置， 值为原始数据值，支持 callback<br>  src: &#123;string&#125;, // 图片路径<br>  offsetX: &#123;number&#125;, // x 方向的偏移量<br>  offsetY: &#123;number&#125; // y 方向偏移量<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDAzOTc0NjYtZDNkNTYzNmQtYWFkMy00YjUxLWJiMjUtODMyOTFjMzUyM2VjLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const DataView = DataSet.DataView;<br>$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const dv = new DataView();<br>  dv.source(data).transform(&#123;<br>    type: &#x27;bin.histogram&#x27;,<br>    field: &#x27;depth&#x27;,<br>    binWidth: 0.5,<br>    as: [ &#x27;depth&#x27;, &#x27;count&#x27; ],<br>  &#125;);<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c2&#x27;,<br>    forceFit: true,<br>    height: 450<br>  &#125;);<br>  chart.source(dv);<br>  chart.tooltip(&#123;<br>    crosshairs: false<br>  &#125;);<br>  chart.interval().position(&#x27;depth*count&#x27;).shape(&#x27;hollowRect&#x27;);<br><br>  chart.guide().image(&#123;<br>    start: [ 55, 200 ],<br>    src: &#x27;https://os.alipayobjects.com/rmsportal/IUYwZOlOpysCUsl.png&#x27;,<br>    width: 60,<br>    height: 100<br>  &#125;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="text-辅助文本"><a href="#text-辅助文本" class="headerlink" title="text 辅助文本"></a>text 辅助文本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().text(&#123;<br>  top: &#123;boolean&#125;, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层<br>  zIndex: &#123;number&#125;,<br>  position: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 文本的起始位置，值为原始数据值，支持 callback<br>  content: <br>  style: &#123;<br>    fill: &#x27;#666&#x27;, // 文本颜色<br>    fontSize: &#x27;12&#x27;, // 文本大小<br>    fontWeight: &#x27;bold&#x27; // 文本粗细<br>    rotate: 30 // 旋转角度<br>  &#125;, // 文本的图形样式属性<br>  offsetX: &#123;number&#125;, // x 方向的偏移量<br>  offsetY: &#123;number&#125; // y 方向偏移量<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA0MjkyNzctNTNhOGUzNmMtOGE3ZS00MWNmLTkzZmQtNDNjYTdjMmFiNDQ0LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const colors = G2.Global.colors;<br>$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123; // 创建图表<br>    container : &#x27;c3&#x27;,<br>    forceFit: true,<br>    height: 450,<br>    padding: [ 20, 90, 60, 80 ]<br>  &#125;);<br>  const defs = &#123;<br>    &#x27;cut&#x27;: &#123;<br>      type: &#x27;cat&#x27;,<br>      values:[ &#x27;Ideal&#x27;, &#x27;Premium&#x27;, &#x27;Very-Good&#x27;, &#x27;Good&#x27;, &#x27;Fair&#x27; ]<br>    &#125;<br>  &#125;;<br>  chart.source(data, defs); // 设置数据源<br>  chart.legend(false);<br>  chart.pointJitter().position(&#x27;cut*depth&#x27;).color(&#x27;cut&#x27;);<br>  chart.guide().text(&#123;<br>    position: [ &#x27;Ideal&#x27;, 67 ], <br>    content: &#x27;越完美的钻石切割工艺越集中&#x27;, <br>    style: &#123;<br>      fill: colors[0],<br>      textAlign: &#x27;center&#x27;,<br>      fontSize: 14<br>    &#125;<br>  &#125;);<br>  chart.guide().text(&#123;<br>    position: [ &#x27;Fair&#x27;, 63 ], <br>    content: &#x27;越差的钻石切割工艺越分散&#x27;, <br>    style: &#123;<br>      fill: colors[4],<br>      textAlign: &#x27;center&#x27;,<br>      fontSize: 14<br>    &#125;<br>  &#125;);<br>  chart.render(); // 图表渲染<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="region-辅助框"><a href="#region-辅助框" class="headerlink" title="region 辅助框"></a>region 辅助框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().region(&#123;<br>  top: &#123;boolean&#125;, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 辅助框起始位置，值为原始数据值，支持 callback <br>  end: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;,// 辅助框结束位置，值为原始数据值，支持 callback<br>  style: &#123;<br>    lineWidth: 0, // 辅助框的边框宽度<br>    fill: &#x27;#f80&#x27;, // 辅助框填充的颜色<br>    fillOpacity: 0.1, // 辅助框的背景透明度<br>    stroke: &#x27;#ccc&#x27; // 辅助框的边框颜色设置<br>  &#125; // 辅助框的图形样式属性<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA0NTI4ODEtMDVlNDY3NzYtYTQ5OC00MDM3LTk3NDEtOWMyZGYzNmE2NjVlLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; month: 0, tem: 7, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 1, tem: 6.9, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 2, tem: 9.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 3, tem: 14.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 4, tem: 18.2, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 5, tem: 21.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 6, tem: 25.2, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 7, tem: 26.5, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 8, tem: 23.3, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 9, tem: 18.3, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 10, tem: 13.9, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 11, tem: 9.6, city: &#x27;tokyo&#x27; &#125;,<br>  &#123; month: 0, tem: -0.2, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 1, tem: 0.8, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 2, tem: 5.7, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 3, tem: 11.3, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 4, tem: 17, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 5, tem: 22, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 6, tem: 24.8, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 7, tem: 24.1, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 8, tem: 20.1, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 9, tem: 14.1, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 10, tem: 8.6, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 11, tem: 2.5, city: &#x27;newYork&#x27; &#125;,<br>  &#123; month: 0, tem: -0.9, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 1, tem: 0.6, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 2, tem: 3.5, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 3, tem: 8.4, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 4, tem: 13.5, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 5, tem: 17, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 6, tem: 18.6, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 7, tem: 17.9, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 8, tem: 14.3, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 9, tem: 9, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 10, tem: 3.9, city: &#x27;berlin&#x27; &#125;,<br>  &#123; month: 11, tem: 1, city: &#x27;berlin&#x27; &#125;<br>];<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c4&#x27;,<br>  forceFit: true,<br>  height: 450<br>&#125;);<br>chart.source(data);<br>chart.line().position(&#x27;month*tem&#x27;).color(&#x27;city&#x27;);<br>chart.guide().region(&#123;<br>  start: [ 5, &#x27;min&#x27; ], <br>  end: [ 7, &#x27;max&#x27; ]<br>&#125;); // 6月 - 8月最低温度<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="辅助-html"><a href="#辅助-html" class="headerlink" title="辅助 html"></a>辅助 html</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().html(&#123;<br>  position: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // html 的中心位置， 值为原始数据值，支持 callback<br>  alignX: &#x27;left&#x27; | &#x27;middle&#x27; | &#x27;right&#x27;,<br>  alignY: &#x27;top&#x27; | &#x27;middle&#x27; | &#x27;bottom&#x27;,<br>  offsetX: &#123;number&#125;,<br>  offsetY: &#123;number&#125;,<br>  html: &#123;string&#125;, // html 代码，也支持callback,可能是最大值、最小值之类的判定<br>  zIndex: &#123;number&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA0Nzk4MTQtMzk3NTJmNjEtMDcxYy00MTQ1LTg3MDUtZWZjMDI2NGUyYzJlLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const DataView = DataSet.DataView;<br>$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const dv = (new DataView()).source(data);<br>  const caratAvg = dv.mean(&#x27;carat&#x27;); // 计算克拉数均值<br>  const priceAvg = dv.mean(&#x27;price&#x27;); // 计算价格均值<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c5&#x27;,<br>    forceFit: true,<br>    height: 450<br>  &#125;);<br>  chart.source(data);<br>  chart.point().position(&#x27;carat*price&#x27;);<br>  // 坐标点<br>  const point = [ 3.5, 12000 ];<br>  //html字符串<br>  const tooltipHtml = "<div style=&#x27;border: 2px solid #0f8de8;width: 50px;height: 26px;color: #0f8de8;position: relative;&#x27;>" +<br>      "<span style=&#x27;color:#63c6c2;font-size:15px&#x27;>异常值</span>" +<br>      "<div style=&#x27;width: 0;height: 0;border-bottom: 8px solid #0f8de8;border-right:10px solid transparent;position: absolute;top: 16px;left: 46px;&#x27;></div>" +<br>      "</div>";<br>  chart.guide().html(&#123;<br>    position: point, <br>    html: tooltipHtml, <br>    alignX: &#x27;right&#x27;,<br>    alignY: &#x27;bottom&#x27;,<br>    offsetX: 10<br>  &#125;);<br>  chart.render(); // 图表渲染<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="辅助-regionFilter"><a href="#辅助-regionFilter" class="headerlink" title="辅助 regionFilter"></a>辅助 regionFilter</h3><p>将图表中位于矩形选区中的图形元素提取出来，重新着色，可以用于区域筛选、图表分段着色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().regionFilter(&#123;<br>  top: &#123;boolean&#125;, // 指定 giude 是否绘制在 canvas 最上层，默认为 true, 即绘制在最上层<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 辅助框起始位置，值为原始数据值，支持 callback <br>  end: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;,// 辅助框结束位置，值为原始数据值，支持 callback<br>  color:&#x27;#ccc&#x27; //染色色值<br>  apply:&#123;array&#125; //可选,设定regionFilter只对特定geom类型起作用，如apply:[&#x27;area&#x27;],默认regionFilter的作用域为整个图表<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA1MjczOTUtZjQ4OTNlZGItNzg2Ny00M2RlLThiNDYtMWFjMGE5ZmYwNmE4LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>    &#123; year: &#x27;1991&#x27;, value: 15468 &#125;,<br>    &#123; year: &#x27;1992&#x27;, value: 16100 &#125;,<br>    &#123; year: &#x27;1993&#x27;, value: 15900 &#125;,<br>    &#123; year: &#x27;1994&#x27;, value: 17409 &#125;,<br>    &#123; year: &#x27;1995&#x27;, value: 17000 &#125;,<br>    &#123; year: &#x27;1996&#x27;, value: 31056 &#125;,<br>    &#123; year: &#x27;1997&#x27;, value: 31982 &#125;,<br>    &#123; year: &#x27;1998&#x27;, value: 32040 &#125;,<br>    &#123; year: &#x27;1999&#x27;, value: 33233 &#125;<br>  ];<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c6&#x27;,<br>    forceFit: true,<br>    height: 450<br>  &#125;);<br>  chart.source(data);<br>  chart.scale(&#123;<br>    value: &#123;<br>      min: 10000<br>    &#125;,<br>    year: &#123;<br>      range: [ 0, 1 ]<br>    &#125;<br>  &#125;);<br>  chart.axis(&#x27;value&#x27;, &#123;<br>    label: &#123;<br>      formatter: val => &#123;<br>        return (val / 10000).toFixed(1) + &#x27;k&#x27;;<br>      &#125;<br>    &#125;<br>  &#125;);<br>  chart.tooltip(&#123;<br>    crosshairs: &#123;<br>      type: &#x27;line&#x27;<br>    &#125;<br>  &#125;);<br><br>  chart.line().position(&#x27;year*value&#x27;).size(2);<br><br>  chart.guide().regionFilter(&#123;<br>    start: [ &#x27;1991&#x27;, &#x27;min&#x27; ],<br>    end: [ &#x27;1995&#x27;, &#x27;max&#x27; ],<br>    color: &#x27;#178fff&#x27;<br>  &#125;);<br>  chart.guide().regionFilter(&#123;<br>    start: [ &#x27;1995&#x27;, &#x27;min&#x27; ],<br>    end: [ &#x27;1999&#x27;, &#x27;max&#x27; ],<br>    color: &#x27;#2ec15a&#x27;<br>  &#125;);<br>  chart.render();<br></code></pre></td></tr></table></figure><h3 id="arc-辅助弧线"><a href="#arc-辅助弧线" class="headerlink" title="arc 辅助弧线"></a>arc 辅助弧线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().arc(&#123;<br>  top: true | false, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 辅助框起始位置，值为原始数据值，支持 callback <br>  end: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;,// 辅助框结束位置，值为原始数据值，支持 callback<br>  style: &#123;&#125; // 图形样式属性<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li>arc 辅助弧线，仅在 polar <a href="https://www.yuque.com/antv/g2-docs/tutorial-coord">坐标系（Coord）</a>下生效</li></ul><h3 id="dataMarker-特殊数据标注点"><a href="#dataMarker-特殊数据标注点" class="headerlink" title="dataMarker 特殊数据标注点"></a>dataMarker 特殊数据标注点</h3><p>对图表中的某个特殊数据点进行标注。默认状态的特殊数据标注点由point、line、text三部分组成，同时开放接口对各部分是否显示及显示样式等进行设置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().dataMarker(&#123;<br>  top:true | false, // 指定 giude 是否绘制在 canvas 最上层，默认为true, 即绘制在最上层<br>  position: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 标注点起始位置，值为原始数据值，支持 callback ,<br>  content: &#123;string&#125;, // 显示的文本内容<br>  style: &#123;<br>    text: &#123;object&#125;,<br>    point:&#123;object&#125;,<br>    line:&#123;object&#125;<br>  &#125;,//可选，文本/point/line样式<br>  display:&#123;<br>    text:&#123;boolean&#125;,<br>    point:&#123;boolean&#125;,<br>    line:&#123;boolean&#125;<br>  &#125;,//可选，是否显示文本/point/line，默认为全部显示<br>  lineLength:&#123;number&#125;,//可选，line长度，default为30<br>  direction:&#x27;upward&#x27; | &#x27;downward&#x27; //可选，朝向，默认为upwaard<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li>dataMarker 特殊数据标注点，适用于折线图和面积图</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA2MTg0NTQtYzUwNzgzYWEtMDcxNy00YzE4LWIyYzItNWE3YzRkYTIxZGQwLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var data = [&#123; year: &#x27;1991&#x27;,value: 3&#125;, <br>            &#123; year: &#x27;1992&#x27;,value: 4&#125;, <br>            &#123; year: &#x27;1993&#x27;,value: 3.5&#125;, <br>            &#123; year: &#x27;1994&#x27;,value: 5&#125;, <br>            &#123; year: &#x27;1995&#x27;,value: 4.9&#125;, <br>            &#123; year: &#x27;1996&#x27;,value: 6&#125;, <br>            &#123; year: &#x27;1997&#x27;,value: 7&#125;, <br>            &#123; year: &#x27;1998&#x27;,value: 9&#125;, <br>            &#123; year: &#x27;1999&#x27;,value: 13&#125;];<br>var chart = new G2.Chart(&#123;<br>  container: &#x27;c7&#x27;,<br>  forceFit: true,<br>  height: window.innerHeight<br>&#125;);<br>chart.source(data);<br>chart.scale(&#x27;value&#x27;, &#123;<br>  min: 0<br>&#125;);<br>chart.scale(&#x27;year&#x27;, &#123;<br>  range: [0, 1]<br>&#125;);<br>chart.line().position(&#x27;year*value&#x27;);<br>chart.guide().dataMarker(&#123;<br>  position: [ &#x27;1997&#x27;, 7 ],<br>  content: &#x27;特殊数据标注点&#x27;<br>&#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="dataRegion-特殊数据区间标注"><a href="#dataRegion-特殊数据区间标注" class="headerlink" title="dataRegion 特殊数据区间标注"></a>dataRegion 特殊数据区间标注</h3><p>对图表中的某个特殊数据区间进行标注。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.guide().dataRegion(&#123;<br>  top:true | false, // 指定 giude 是否绘制在 canvas 最上层，默认为 true, 即绘制在最上层<br>  start: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 标注点起始位置，值为原始数据值，支持 callback ,<br>  end: &#123;object&#125; | &#123;function&#125; | &#123;array&#125;, // 标注点结束位置，值为原始数据值，支持 callback ,<br>  content: &#123;string&#125;, // 显示的文本内容<br>  style: &#123;<br>    text: &#123;object&#125;,<br>    point:&#123;object&#125;,<br>    line:&#123;object&#125;<br>  &#125;,//可选，文本/point/line样式<br>  display:&#123;<br>    text:&#123;boolean&#125;,<br>    point:&#123;boolean&#125;,<br>    line:&#123;boolean&#125;<br>  &#125;,//可选，是否显示文本/point/line，默认为全部显示<br>  lineLength:&#123;number&#125;,//可选，line长度，default为30<br>  direction:&#x27;upward&#x27; | &#x27;downward&#x27; //可选，朝向，默认为upwaard<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>注意</code>：</p><ul><li>dataRegion 特殊数据区间标注，适用于折线图和面积图</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA2NTQ0MjQtMGM1N2VmZWMtNGM5MC00OTk0LWEyOWItNWNmMjQwNGNiY2Q5LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var data = [&#123; year: &#x27;1991&#x27;,value: 3&#125;, <br>            &#123; year: &#x27;1992&#x27;,value: 4&#125;, <br>            &#123; year: &#x27;1993&#x27;,value: 3.5&#125;, <br>            &#123; year: &#x27;1994&#x27;,value: 5&#125;, <br>            &#123; year: &#x27;1995&#x27;,value: 4.9&#125;, <br>            &#123; year: &#x27;1996&#x27;,value: 6&#125;, <br>            &#123; year: &#x27;1997&#x27;,value: 7&#125;, <br>            &#123; year: &#x27;1998&#x27;,value: 9&#125;, <br>            &#123; year: &#x27;1999&#x27;,value: 13&#125;];<br>var chart = new G2.Chart(&#123;<br>  container: &#x27;c8&#x27;,<br>  forceFit: true,<br>  height: window.innerHeight<br>&#125;);<br>chart.source(data);<br>chart.scale(&#x27;value&#x27;, &#123;<br>  min: 0<br>&#125;);<br>chart.scale(&#x27;year&#x27;, &#123;<br>  range: [0, 1]<br>&#125;);<br>chart.line().position(&#x27;year*value&#x27;);<br>chart.guide().dataRegion(&#123;<br>  start: [ &#x27;1994&#x27;, 5 ],<br>  end: [ &#x27;1996&#x27;, 6 ],<br>  content: &#x27;数据区间标注&#x27;,<br>  lineLength: 50<br>&#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="动态辅助标记"><a href="#动态辅助标记" class="headerlink" title="动态辅助标记"></a>动态辅助标记</h3><p>辅助标记接受的位置信息的参数都是原始数据值，辅助标记一旦生成后就是固定了位置，如果数据发生改变，辅助标记就需要删除掉重新创建</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 清除图表<br>chart.clear();<br>// 重新声明图形语法<br>chart.point().position(&#x27;carat*price&#x27;);<br>chart.guide().html([ newX, newY ], htmlstring);<br>chart.render();<br></code></pre></td></tr></table></figure><ul><li>newX,newY 是重新计算的位置</li></ul><p>如果数据是动态更新的那么这个过程需要频繁进行，基于这种场景 guide 提供两种计算动态位置的：</p><ul><li><p>可以使用’min’, ‘median’, ‘max’ 字符串代表原始值的最小值、平均值、最大值，例如： [0, ‘min’] 表示 x 轴上数值为 0，y 轴位置在数值的最小值上；</p></li><li><p>表示位置的数组可以换成回调函数，函数原型： <code>function(xScale, yScale) &#123;return [];&#125;</code></p></li><li><ul><li>xScale, yScale 映射到 x 轴上的字段生成的度量，详情查看 <a href="https://www.yuque.com/antv/g2-docs/tutorial-scale">度量</a>,<a href="https://www.yuque.com/antv/g2-docs/api-chart#eh2hbw"> ap</a>i;</li></ul></li><li><ul><li>分类度量常用的值是 <code>values</code> 包含了所有的分类，连续度量常用的是 min, max</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDA2OTU1MDEtNzFlYWY4YjEtYWQ5ZC00YmNjLTlkODQtNDZiMmNhNDA2NzFiLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [];                                                 <br>const time = Math.floor((new Date()).getTime() / 1000) * 1000;                             <br>                                                                <br>for (let i = -19; i <= 0; i++) &#123;                                    <br>  data.push(&#123;                                                 <br>    time: time + i * 3 * 1000,                                     <br>    value: Math.random() + .25                                      <br>  &#125;);                                                         <br>&#125;   <br><br>// 查找最大值<br>function findMax() &#123;<br>  let maxValue = 0;<br>  let maxObj = null;<br>  data.forEach(obj => &#123;<br>    if (obj.value > maxValue) &#123;<br>      maxValue = obj.value;<br>      maxObj = obj;<br>    &#125;<br>  &#125;);<br>  return maxObj;<br>&#125;<br><br>const chart = new G2.Chart(&#123; // 创建图表<br>  container: &#x27;c9&#x27;,<br>  forceFit: true,<br>  height: 450<br>&#125;);<br><br>chart.source(data, &#123;<br>  time: &#123;<br>    type: &#x27;time&#x27;,<br>    mask: &#x27;HH:mm:ss&#x27;<br>  &#125;<br>&#125;);<br><br>chart.line().position(&#x27;time*value&#x27;);<br>// 添加一条虚线<br>chart.guide().line(&#123;<br>  start: [ &#x27;min&#x27;, 0.25 ], <br>  end: [ &#x27;max&#x27;, 0.25] <br>&#125;);<br>chart.guide().text(&#123;<br>  position() &#123;<br>    const obj = findMax();<br>    return [ obj.time, obj.value ];<br>  &#125;,<br>  content: &#x27;最大值&#x27;<br>&#125;);<br><br>chart.render();<br><br>setInterval(function() &#123;<br>  data.shift();<br>  data.push(&#123;<br>    time: new Date().getTime(),<br>    value: Math.random() + .25<br>  &#125;);<br>  chart.changeData(data);<br>&#125;, 3000);<br></code></pre></td></tr></table></figure><h1 id="Facet-分面"><a href="#Facet-分面" class="headerlink" title="Facet 分面"></a>Facet 分面</h1><p>分面，将一份数据按照某个维度分隔成若干子集，然后创建一个图表的矩阵，将每一个数据子集绘制到图形矩阵的窗格中。</p><p>总结起来，分面其实提供了两个功能：</p><ol><li><p>按照指定的维度划分数据集；</p></li><li><p>对图表进行排版。</p></li></ol><p>对于探索型数据分析来说，分面是一个强大有力的工具，能帮你迅速地分析出数据各个子集模式的异同。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0hsVUpkamZZQ0VlZU9Lc0JSRW5wLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="如何设置分面"><a href="#如何设置分面" class="headerlink" title="如何设置分面"></a>如何设置分面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.facet(type, &#123;<br>  fileds: [field1, field2...],<br>  showTitle: true, // 显示标题<br>  autoSetAxis: true,// 自动设置坐标轴的文本，避免重复和遮挡<br>  padding: 10, // 每个view 之间的间距<br>  /**<br>   * 创建每个分面中的视图<br>   * @param  &#123;object&#125; view  视图对象<br>   * @param  &#123;object&#125; facet facet中有行列等信息，常见属性：data rows cols rowIndex colIndex rowField colField<br>   * @return &#123;null&#125;<br>   */<br>  eachView(view, facet) &#123;&#125;,<br>  // 列标题<br>  colTitle: &#123;<br>    offsetY: -15,<br>    style: &#123;<br>      fontSize: 14,<br>      textAlign: &#x27;center&#x27;,<br>      fill: &#x27;#444&#x27;<br>    &#125;<br>  &#125;,<br>  // 行标题<br>  rowTitle: &#123;<br>    offsetX: 15,<br>    style: &#123;<br>      fontSize: 14,<br>      textAlign: &#x27;center&#x27;,<br>      rotate: 90,<br>      fill: &#x27;#444&#x27;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><p>第一个参数 <code>type</code> 用于指定分面的类型；</p></li><li><p><code>fileds</code> 属性用于指定数据集划分依据的字段；</p></li><li><p><code>eachView</code> 回调函数中创建各个视图的图表类型；</p></li></ul><p>也可以设置每个分面之间的间距 padding</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.facet(&#x27;list&#x27;, &#123;<br>  fileds: [ &#x27;cut&#x27;, &#x27;carat&#x27; ],<br>  padding: 20 // 各个分面之间的间距，也可以是数组 [top, right, bottom, left]<br>&#125;);<br></code></pre></td></tr></table></figure><p>更多配置信息，请查阅 <a href="https://www.yuque.com/antv/g2-docs/api-chart#cizqmm">Facet API</a>。</p><h2 id="分面的类型"><a href="#分面的类型" class="headerlink" title="分面的类型"></a>分面的类型</h2><p>G2 支持的分面类型如下表所示：</p><table><thead><tr><th>分面类型</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#07bbpg">rect</a></td><td><strong>默认类型</strong>，指定 2 个维度作为行列，形成图表的矩阵。</td></tr><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#toe6pw">list</a></td><td>指定一个维度，可以指定一行有几列，超出自动换行。</td></tr><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#3cattw">circle</a></td><td>指定一个维度，沿着圆分布。</td></tr><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#bn95db">tree</a></td><td>指定多个维度，每个维度作为树的一级，展开多层图表。</td></tr><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#ncc9xr">mirror</a></td><td>指定一个维度，形成镜像图表。</td></tr><tr><td><a href="https://www.yuque.com/antv/g2-docs/tutorial-facet#gz4qqf">matrix</a></td><td>指定一个维度，形成矩阵分面。</td></tr></tbody></table><h3 id="rect-矩形分面"><a href="#rect-矩形分面" class="headerlink" title="rect 矩形分面"></a>rect 矩形分面</h3><p>rect 矩形分面是 G2 的默认分面类型。支持按照一个或者两个维度的数据划分，按照先列后行的顺序。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.facet(&#x27;rect&#x27;, &#123;<br>  fields: [ &#x27;cut&#x27;, &#x27;clarity&#x27; ],<br>  eachView(view) &#123;<br>    view.point().position(&#x27;carat*price&#x27;).color(&#x27;cut&#x27;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>分面矩阵每列按照 <code>cut</code> 字段划分，每行按照 <code>clarity</code> 字段划分。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEyMTI1NzgtMGRmODgwOWUtOWUyNi00ODYwLWIxNzEtODhlY2I3YjY0NWE3LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c1&#x27;,<br>    forceFit: true,<br>    height: 600,<br>    padding: [ 30, 80, 80, 80 ]<br>  &#125;);<br>  chart.source(data, &#123;<br>    carat: &#123;<br>      sync: true<br>    &#125;,<br>    price: &#123;<br>      sync: true<br>    &#125;,<br>    cut: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  chart.facet(&#x27;rect&#x27;, &#123;<br>    fields: [ &#x27;cut&#x27;, &#x27;clarity&#x27; ],<br>    eachView(view) &#123;<br>      view.point().position(&#x27;carat*price&#x27;).color(&#x27;cut&#x27;);<br>    &#125;<br>  &#125;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>可以将 <code>fields</code> 字段中表示行和列的字段名时，可以设置行或者列为 <code>null</code>,会变成单行或者单列的分面</li></ul><h3 id="list-水平列表分面"><a href="#list-水平列表分面" class="headerlink" title="list 水平列表分面"></a>list 水平列表分面</h3><p>该类型分面可以通过设置 <code>cols</code> 属性来指定每行可显示分面的个数，超出时会自动换行。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEyNjA0MTEtZGIyYzMwY2QtOGRlMC00ZjFhLWI2YWYtM2Q3MGFjOGY0MTNjLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/diamond.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c2&#x27;,<br>    width: 800,<br>    height: 400,<br>    padding: [ 30, 90, 80, 80 ]<br>  &#125;);<br>  chart.source(data, &#123;<br>    carat: &#123;<br>      sync: true<br>    &#125;,<br>    price: &#123;<br>      sync: true<br>    &#125;,<br>    cut: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  chart.facet(&#x27;list&#x27;, &#123;<br>    fields: [ &#x27;cut&#x27; ],<br>    cols: 3, // 超过3个换行<br>    padding: 30,<br>    eachView(view) &#123;<br>      view.point().position(&#x27;carat*price&#x27;).color(&#x27;cut&#x27;);<br>    &#125;<br>  &#125;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="circle-圆形分面"><a href="#circle-圆形分面" class="headerlink" title="circle 圆形分面"></a>circle 圆形分面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEyOTMyNTMtM2JiM2M3YzEtNzI3OC00ZmMyLTgzZmItMDE5YzU4N2NjZGU5LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const DataView = DataSet.DataView;<br>$.getJSON(&#x27;/assets/data/diamond.json&#x27;,function (data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c3&#x27;,<br>    width: 600,<br>    height: 600,<br>    animate: false,<br>    padding: [ 20, 20, 70, 20 ]<br>  &#125;);<br>  chart.source(data, &#123;<br>    mean: &#123;<br>      sync: true<br>    &#125;,<br>    cut: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  chart.coord(&#x27;polar&#x27;);<br>  chart.axis(false);<br>  chart.facet(&#x27;circle&#x27;, &#123;<br>    fields: [ &#x27;clarity&#x27; ],<br>    padding: 0,<br>    eachView(view, facet) &#123;<br>      const data = facet.data;<br>      const dv = new DataView();<br>      dv.source(data).transform(&#123;<br>        type: &#x27;aggregate&#x27;,<br>        fields: [ &#x27;price&#x27; ],<br>        operations: [ &#x27;mean&#x27; ],<br>        as: [ &#x27;mean&#x27; ],<br>        groupBy: [ &#x27;cut&#x27; ]<br>      &#125;);<br>      view.source(dv);<br>      view.interval().position(&#x27;cut*mean&#x27;).color(&#x27;cut&#x27;);<br>    &#125;<br>  &#125;); // 分面设置<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="tree-树形分面"><a href="#tree-树形分面" class="headerlink" title="tree 树形分面"></a>tree 树形分面</h3><p>树形分面一般用于展示存在层次结构的数据，展示的是整体和部分之间的关系</p><p>提供了 <code>line</code> 和 <code>lineSmooth</code> 两个属性，用于配置连接各个分面的线的样式，其中：</p><ul><li><p>line，用于配置线的显示属性。</p></li><li><p>lineSmooth，各个树节点的连接线是否是平滑的曲线，默认为 false。</p></li></ul><p>下图展示了树形多层级的分面。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEzMjE1NjEtNmQwYjIyN2ItZjZkMC00MWI5LWJmNmQtNTRlNjZmOGM1OTI4LnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; gender: &#x27;男&#x27;, count: 40, class: &#x27;一班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 30, class: &#x27;一班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;男&#x27;, count: 35, class: &#x27;二班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 45, class: &#x27;二班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;男&#x27;, count: 20, class: &#x27;三班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 35, class: &#x27;三班&#x27;, grade: &#x27;一年级&#x27; &#125;,<br>  &#123; gender: &#x27;男&#x27;, count: 30, class: &#x27;一班&#x27;, grade: &#x27;二年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 40, class: &#x27;一班&#x27;, grade: &#x27;二年级&#x27; &#125;,<br>  &#123; gender: &#x27;男&#x27;, count: 25, class: &#x27;二班&#x27;, grade: &#x27;二年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 32, class: &#x27;二班&#x27;, grade: &#x27;二年级&#x27; &#125;,<br>  &#123; gender: &#x27;男&#x27;, count: 28, class: &#x27;三班&#x27;, grade: &#x27;二年级&#x27; &#125;,<br>  &#123; gender: &#x27;女&#x27;, count: 36, class: &#x27;三班&#x27;, grade: &#x27;二年级&#x27; &#125;<br>];<br>const DataView = DataSet.DataView;<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c4&#x27;,<br>  width: 800,<br>  height: 400,<br>  animate: false,<br>  padding: [ 0, 90, 80, 80 ]<br>&#125;);<br>chart.source(data);<br>chart.coord(&#x27;theta&#x27;);<br>chart.tooltip(&#123;<br>  showTitle: false<br>&#125;);<br>chart.facet(&#x27;tree&#x27;, &#123;<br>  fields: [ &#x27;grade&#x27;,&#x27;class&#x27; ],<br>  line: &#123;<br>    stroke: &#x27;#00a3d7&#x27;<br>  &#125;,<br>  lineSmooth: true,<br>  eachView(view, facet) &#123;<br>    const data = facet.data;<br>    const dv = new DataView();<br>    dv.source(data).transform(&#123;<br>      type: &#x27;percent&#x27;,<br>      field: &#x27;count&#x27;,<br>      dimension: &#x27;gender&#x27;,<br>      as: &#x27;percent&#x27;<br>    &#125;);<br>    view.source(dv, &#123;<br>      percent: &#123;<br>        formatter(val) &#123;<br>          return (val * 100).toFixed(2) + &#x27;%&#x27;;<br>        &#125;<br>      &#125;<br>    &#125;);<br>    view.intervalStack().position(&#x27;percent&#x27;).color(&#x27;gender&#x27;);<br>  &#125;<br>&#125;); <br>chart.render();<br></code></pre></td></tr></table></figure><h3 id="mirror-镜像分面"><a href="#mirror-镜像分面" class="headerlink" title="mirror 镜像分面"></a>mirror 镜像分面</h3><p>镜像分面一般用于对比两类数据的场景，例如 男女的比例、正确错误的对比等</p><p>通过配置 <code>transpose</code> 属性为 true，可以将镜像分面翻转。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEzNjAwNDEtZmQ5OTgzZWYtMDVmZi00NTc2LTk5YTUtNDI4YjBkNmNmNjFhLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$.getJSON(&#x27;/assets/data/population.json&#x27;, function(data) &#123;<br>  const tmp = [];<br>  const dates = [];<br>  const selEl = $(&#x27;#selYear&#x27;);<br>  data.male.values.forEach(function(obj) &#123;<br>    if (dates.indexOf(obj.date) === -1) &#123;<br>      dates.push(obj.date);<br>    &#125;<br>    obj.age_groups.forEach(function(subObject) &#123;<br>      subObject.gender = &#x27;male&#x27;;<br>      subObject.date = obj.date;<br>      tmp.push(subObject);<br>    &#125;);<br>  &#125;);<br>  data.female.values.forEach(function(obj) &#123;<br>    obj.age_groups.forEach(function(subObject) &#123;<br>      subObject.gender = &#x27;female&#x27;;<br>      subObject.date = obj.date;<br>      tmp.push(subObject);<br>    &#125;);<br>  &#125;);<br>  dates.forEach(date => &#123;<br>    $(&#x27;<option value="&#x27; + date + &#x27;">&#x27; + new Date(date * 1000).getFullYear() + &#x27;</option>&#x27;).appendTo(selEl);<br>  &#125;);<br>  const ds = new DataSet(&#123;<br>    state: &#123;<br>      date: dates[0]<br>    &#125;<br>  &#125;);<br><br>  const dv = ds.createView()<br>    .source(tmp)<br>    .transform(&#123;<br>      type: &#x27;filter&#x27;,<br>      callback(row) &#123; // 判断某一行是否保留，默认返回true<br>        return new Date(row.date * 1000).getFullYear() === new Date(ds.state.date * 1000).getFullYear();<br>      &#125;<br>    &#125;);<br><br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c5&#x27;,<br>    forceFit: true,<br>    height: 600<br>  &#125;);<br><br>  chart.source(dv, &#123;<br>    age: &#123;<br>      sync: true,<br>      tickCount: 11<br>    &#125;,<br>    total_percentage: &#123;<br>      sync: true,<br>      formatter(v) &#123;<br>        return v + &#x27;%&#x27;;<br>      &#125;<br>    &#125;,<br>    gender: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  chart.facet(&#x27;mirror&#x27;, &#123;<br>    fields: [ &#x27;gender&#x27; ],<br>    transpose: true,<br>    eachView(view) &#123;<br>      view.interval().position(&#x27;age*total_percentage&#x27;)<br>        .color(&#x27;gender&#x27;, [ &#x27;rgb(113,192,235)&#x27;, &#x27;rgb(246,170,203)&#x27; ]);<br>    &#125;<br>  &#125;);<br>  chart.render();<br>  selEl.on(&#x27;change&#x27;, function() &#123;<br>    const val = selEl.val();<br>    const date = parseInt(val);<br>    ds.setState(&#x27;date&#x27;, date);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="matrix-矩阵分面"><a href="#matrix-矩阵分面" class="headerlink" title="matrix 矩阵分面"></a>matrix 矩阵分面</h3><p>矩阵分面主要对比数据中多个字段之间的关系，例如常见的散点矩阵图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDEzOTA3NTAtNzk3ZTk0OGMtZTYwMy00ZjQ0LWE2NGUtMzg4OTg5ODliNzkyLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const DataView = DataSet.DataView;<br>$.getJSON(&#x27;/assets/data/iris.json&#x27;, function(data) &#123;<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c6&#x27;,<br>    forceFit: true,<br>    height: 600<br>  &#125;);<br><br>  chart.source(data, &#123;<br>    Species: &#123;<br>      sync: true<br>    &#125;<br>  &#125;);<br>  chart.facet(&#x27;matrix&#x27;, &#123;<br>    fields: [ &#x27;SepalLength&#x27;, &#x27;SepalWidth&#x27;, &#x27;PetalLength&#x27;, &#x27;PetalWidth&#x27; ],<br>    eachView(view, facet) &#123;<br>      if (facet.rowIndex === facet.colIndex) &#123;<br>        const dv = new DataView();<br>        dv.source(facet.data)<br>          .transform(&#123;<br>            type: &#x27;bin.histogram&#x27;,<br>            field: facet.colField,  // 对应数轴上的一个点<br>            bins: 30,               // 分箱个数<br>            as: [ facet.colField, &#x27;count&#x27; ],<br>            groupBy: [ &#x27;Species&#x27; ]<br>          &#125;);<br>        view.source(dv.rows);<br>        view.intervalStack()<br>          .position(facet.colField + &#x27;*count&#x27;)<br>          .color(&#x27;Species&#x27;, [ &#x27;#880000&#x27;, &#x27;#008800&#x27;, &#x27;#000088&#x27; ]);<br>      &#125; else &#123;<br>        view.point()<br>          .position([ facet.colField, facet.rowField ])<br>          .color(&#x27;Species&#x27;, [ &#x27;#880000&#x27;, &#x27;#008800&#x27;, &#x27;#000088&#x27; ]);<br>      &#125;<br>    &#125;<br>  &#125;);<br>  chart.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Theme-图表皮肤"><a href="#Theme-图表皮肤" class="headerlink" title="Theme 图表皮肤"></a>Theme 图表皮肤</h1><p>在图表样式上，G2 提供了丰富的自定义配置选项，既可从全局设置，也支持 Chart 级别的主题设置和局部设置数据层级的设置。</p><h2 id="图表主题"><a href="#图表主题" class="headerlink" title="图表主题"></a>图表主题</h2><p>G2 默认提供了两种图表主题： default、dark。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0VRYWRDalZGZmFYanVQYlN5U0pwLnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="图表样式设置"><a href="#图表样式设置" class="headerlink" title="图表样式设置"></a>图表样式设置</h2><h3 id="新增主题"><a href="#新增主题" class="headerlink" title="新增主题"></a>新增主题</h3><p>新增主题可以使用 Global 上的 registerTheme 接口。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const &#123; Global &#125; = G2; // 获取 Global 全局对象<br>Global.registerTheme(&#x27;newTheme&#x27;, &#123;<br>  colors: [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yello&#x27; ]<br>&#125;); // 传入两个参数，一个参数是主题的名称，另一个参数是主题配置项<br></code></pre></td></tr></table></figure><p>这样就可以在全局切换这个主题或者在 chart 新建的时候指定设置的主题了。</p><h3 id="全局图表主题切换"><a href="#全局图表主题切换" class="headerlink" title="全局图表主题切换"></a>全局图表主题切换</h3><p>直接传入主题名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const &#123; Global &#125; = G2; // 获取 Global 全局对象<br>Global.setTheme(&#x27;dark&#x27;); // 传入值为 &#x27;default&#x27;、&#x27;dark&#x27; 的一种，如果不是，那么使用 default 主题。<br></code></pre></td></tr></table></figure><h3 id="变更全局样式"><a href="#变更全局样式" class="headerlink" title="变更全局样式"></a>变更全局样式</h3><p>G2 图表样式的配置项都是设置到全局变量 <code>G2.Global</code> 上，可以通过如下两种方式进行局部的样式设置：</p><p>（1）方式一： 直接赋值给全局对象 Global，但是不推荐</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">G2.Global.animate = false ; // 关闭默认动画<br>G2.Global.colors = [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27; ]; // 更改默认的颜色<br></code></pre></td></tr></table></figure><p>(2) 方式二： 使用 Global.setTheme 方法。推荐使用这种方式，使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const theme = G2.Util.deepMix(&#123;<br>  animate: false,<br>  colors: &#123;...&#125;,<br>  shapes: &#123;...&#125;<br>  // 具体的配置项详见 api/global.html<br>&#125;, G2.Theme);<br><br>G2.Global.setTheme(theme); // 将主题设置为用户自定义的主题<br></code></pre></td></tr></table></figure><p>对于数据级别或者更细粒度的样式设置，可以通过 geom 对象上的 color 图形属性方法或者各个 chart 配置项上的图形属性设置。</p><p>更多 Global 上关于主题的配置属性，可以直接查看 <code>G2.Global</code> 的返回值。</p><h4 id="demo-演示-1"><a href="#demo-演示-1" class="headerlink" title="demo 演示"></a>demo 演示</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDE1NTA3NjAtMTlhOGM3ZTMtMGM2OS00YjFiLTk1OTctOWZlMWQyY2EwYTViLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const Util = G2.Util;<br>const theme = Util.deepMix(&#123;<br>  shape: &#123;<br>    polygon: &#123;<br>      stroke: &#x27;#213c51&#x27;, // 地图轮廓线颜色<br>      lineWidth: 1 // 地图轮廓线宽度<br>    &#125;,<br>    hollowPoint: &#123;<br>      fill: &#x27;#21273b&#x27;, // 点的填充颜色<br>      lineWidth: 2, // 点的边框宽度<br>      radius: 3 // 点的半径<br>    &#125;,<br>    interval: &#123;<br>      fillOpacity: 1 // 填充透明度设置<br>    &#125;<br>  &#125;,<br>  axis: &#123;<br>    bottom: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 底部标签文本的颜色<br>      &#125;<br>    &#125;,<br>    left: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 左部标签文本的颜色<br>      &#125;<br>    &#125;,<br>    right: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 右部标签文本的颜色<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;, G2.Global);<br>G2.Global.setTheme(theme);<br><br>$.getJSON(&#x27;/assets/data/world.geo.json&#x27;, function(mapData) &#123;<br>  const userData = [];<br>  const features = mapData.features;<br>  for(let i=0; i<features.length; i++) &#123;<br>    const name = features[i].properties.name;<br>    userData.push(&#123;<br>      "name": name,<br>      "value": Math.round(Math.random()*1000)<br>    &#125;);<br>  &#125;<br><br>  // 绘制地图背景<br>  const ds = new DataSet();<br>  const bgDataView = ds.createView(&#x27;back&#x27;)<br>    .source(mapData, &#123;<br>      type: &#x27;GeoJSON&#x27;<br>    &#125;)<br>    .transform(&#123;<br>      type: &#x27;geo.projection&#x27;,<br>      projection: &#x27;geoMercator&#x27;<br>    &#125;);<br>  const userPolygonDv = ds.createView()<br>    .source(userData)<br>    .transform(&#123;<br>      geoDataView: bgDataView,<br>      field: &#x27;name&#x27;,<br>      type: &#x27;geo.region&#x27;,<br>      as: [ &#x27;longitude&#x27;, &#x27;latitude&#x27; ]<br>  &#125;);<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c1&#x27;,<br>    forceFit: true,<br>    height: 400,<br>    padding: 0<br>  &#125;);<br>  chart.source(userPolygonDv);<br>  chart.coord().reflect();<br>  chart.tooltip(&#123;<br>    showTitle: false<br>  &#125;);<br>  chart.axis(false);<br>  chart.legend(false);<br>  chart.polygon()<br>    .position(&#x27;longitude*latitude&#x27;)<br>    .color(&#x27;value&#x27;,&#x27;#39ccf4-#20546b&#x27;)<br>    .style(&#123;<br>      lineWidth: 1,<br>      stroke: &#x27;#999&#x27;<br>    &#125;);<br>  chart.render();<br><br>  const data = [<br>    &#123; time: &#x27;10:10&#x27;, call: 4, waiting: 2, people: 2 &#125;,<br>    &#123; time: &#x27;10:15&#x27;, call: 2, waiting: 6, people: 3 &#125;,<br>    &#123; time: &#x27;10:20&#x27;, call: 13, waiting: 2, people: 5 &#125;,<br>    &#123; time: &#x27;10:25&#x27;, call: 9, waiting: 9, people: 1 &#125;,<br>    &#123; time: &#x27;10:30&#x27;, call: 5, waiting: 2, people: 3 &#125;,<br>    &#123; time: &#x27;10:35&#x27;, call: 8, waiting: 2, people: 1 &#125;,<br>    &#123; time: &#x27;10:40&#x27;, call: 13, waiting: 1, people: 2 &#125;<br>  ];<br>  const dv = new DataSet.DataView();<br>  dv.source(data).transform(&#123;<br>    type: &#x27;fold&#x27;,<br>    fields: [ &#x27;call&#x27;,&#x27;waiting&#x27; ],<br>    key: &#x27;type&#x27;,<br>    value: &#x27;count&#x27;,<br>    retains: [ &#x27;time&#x27;, &#x27;people&#x27; ]<br>  &#125;);<br>  const chart2 = new G2.Chart(&#123;<br>    container: &#x27;c2&#x27;,<br>    forceFit: true,<br>    height: 250<br>  &#125;);<br>  chart2.source(dv, &#123;<br>    &#x27;count&#x27;: &#123; alias: &#x27;话务量（通）&#x27;, min: 0 &#125;,<br>    &#x27;people&#x27;: &#123; alias: &#x27;人数（人）&#x27;, min: 0 &#125;<br>  &#125;);<br>  chart2.legend(false);// 不显示图例<br>  chart2.intervalStack().position(&#x27;time*count&#x27;).color(&#x27;type&#x27;, [ &#x27;#348cd1&#x27;, &#x27;#43b5d8&#x27; ]); // 绘制层叠柱状图<br>  chart2.line().position(&#x27;time*people&#x27;).color(&#x27;#5ed470&#x27;).size(4).shape(&#x27;smooth&#x27;); // 绘制曲线图<br>  chart2.point().position(&#x27;time*people&#x27;).color(&#x27;#5ed470&#x27;).tooltip(false); // 绘制点图<br>  chart2.render();<br>&#125;);<br></code></pre></td></tr></table></figure><p>Global 上可以配置的信息：</p><ul><li>全局的控制变量：柱子的默认宽度、版本号、折线图遇到 Null 时的处理策略</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const Global = &#123;<br>  version: &#x27;3.2.0-beta.3&#x27;,<br>  renderer2d: &#x27;canvas&#x27;,<br>  // renderer2d: &#x27;svg&#x27;,<br>  trackable: true,<br>  animate: true,<br>  snapArray: [ 0, 1, 2, 4, 5, 10 ],<br>  // 指定固定 tick 数的逼近值<br>  snapCountArray: [ 0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10 ],<br>  widthRatio: &#123; // 宽度所占的分类的比例<br>    column: 1 / 2, // 一般的柱状图占比 1/2<br>    rose: 0.9999999, // 玫瑰图柱状占比 1<br>    multiplePie: 1 / 1.3 // 多层的饼图、环图<br>  &#125;,<br>  // 折线图、区域图、path 当只有一个数据时，是否显示成点<br>  showSinglePoint: false,<br>  connectNulls: false,<br>  scales: &#123;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>更多的查看：<a href="https://github.com/antvis/g2/blob/master/src/global.js">https://github.com/antvis/g2/blob/master/src/global.js</a></p><ul><li>默认的皮肤样式，查看 <a href="https://github.com/antvis/g2/blob/master/src/theme/default.js">https://github.com/antvis/g2/blob/master/src/theme/default.js</a></li></ul><h3 id="Chart-级别主题切换"><a href="#Chart-级别主题切换" class="headerlink" title="Chart 级别主题切换"></a>Chart 级别主题切换</h3><p>同一个上下文现在支持多种主题共存，上述两个图表，通过给第二个图表指定主题，可以切换其主题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const chart2 = new G2.Chart(&#123;<br>  container: &#x27;c2&#x27;,<br>  forceFit: true,<br>  height: 250,<br>  theme: &#x27;dark&#x27;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDE2MDA1NjEtNDQzMGVlYjctZjc4Zi00NjlmLWFmNWUtNzMxYTQ0ZDkyNWZjLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const Util = G2.Util;<br>const theme = Util.deepMix(&#123;<br>  shape: &#123;<br>    polygon: &#123;<br>      stroke: &#x27;#213c51&#x27;, // 地图轮廓线颜色<br>      lineWidth: 1 // 地图轮廓线宽度<br>    &#125;,<br>    hollowPoint: &#123;<br>      fill: &#x27;#21273b&#x27;, // 点的填充颜色<br>      lineWidth: 2, // 点的边框宽度<br>      radius: 3 // 点的半径<br>    &#125;,<br>    interval: &#123;<br>      fillOpacity: 1 // 填充透明度设置<br>    &#125;<br>  &#125;,<br>  axis: &#123;<br>    bottom: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 底部标签文本的颜色<br>      &#125;<br>    &#125;,<br>    left: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 左部标签文本的颜色<br>      &#125;<br>    &#125;,<br>    right: &#123;<br>      label: &#123;<br>        textStyle: &#123; fill: &#x27;#999&#x27;&#125; // 右部标签文本的颜色<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;, G2.Global);<br>G2.Global.setTheme(theme);<br><br>$.getJSON(&#x27;/assets/data/world.geo.json&#x27;, function(mapData) &#123;<br>  const userData = [];<br>  const features = mapData.features;<br>  for(let i=0; i<features.length; i++) &#123;<br>    const name = features[i].properties.name;<br>    userData.push(&#123;<br>      "name": name,<br>      "value": Math.round(Math.random()*1000)<br>    &#125;);<br>  &#125;<br><br>  // 绘制地图背景<br>  const ds = new DataSet();<br>  const bgDataView = ds.createView(&#x27;back&#x27;)<br>    .source(mapData, &#123;<br>      type: &#x27;GeoJSON&#x27;<br>    &#125;)<br>    .transform(&#123;<br>      type: &#x27;geo.projection&#x27;,<br>      projection: &#x27;geoMercator&#x27;<br>    &#125;);<br>  const userPolygonDv = ds.createView()<br>    .source(userData)<br>    .transform(&#123;<br>      geoDataView: bgDataView,<br>      field: &#x27;name&#x27;,<br>      type: &#x27;geo.region&#x27;,<br>      as: [ &#x27;longitude&#x27;, &#x27;latitude&#x27; ]<br>  &#125;);<br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;c3&#x27;,<br>    forceFit: true,<br>    height: 400,<br>    padding: 0<br>  &#125;);<br>  chart.source(userPolygonDv);<br>  chart.coord().reflect();<br>  chart.tooltip(&#123;<br>    showTitle: false<br>  &#125;);<br>  chart.axis(false);<br>  chart.legend(false);<br>  chart.polygon()<br>    .position(&#x27;longitude*latitude&#x27;)<br>    .color(&#x27;value&#x27;,&#x27;#39ccf4-#20546b&#x27;)<br>    .style(&#123;<br>      lineWidth: 1,<br>      stroke: &#x27;#999&#x27;<br>    &#125;);<br>  chart.render();<br><br>  const data = [<br>    &#123; time: &#x27;10:10&#x27;, call: 4, waiting: 2, people: 2 &#125;,<br>    &#123; time: &#x27;10:15&#x27;, call: 2, waiting: 6, people: 3 &#125;,<br>    &#123; time: &#x27;10:20&#x27;, call: 13, waiting: 2, people: 5 &#125;,<br>    &#123; time: &#x27;10:25&#x27;, call: 9, waiting: 9, people: 1 &#125;,<br>    &#123; time: &#x27;10:30&#x27;, call: 5, waiting: 2, people: 3 &#125;,<br>    &#123; time: &#x27;10:35&#x27;, call: 8, waiting: 2, people: 1 &#125;,<br>    &#123; time: &#x27;10:40&#x27;, call: 13, waiting: 1, people: 2 &#125;<br>  ];<br>  const dv = new DataSet.DataView();<br>  dv.source(data).transform(&#123;<br>    type: &#x27;fold&#x27;,<br>    fields: [ &#x27;call&#x27;,&#x27;waiting&#x27; ],<br>    key: &#x27;type&#x27;,<br>    value: &#x27;count&#x27;,<br>    retains: [ &#x27;time&#x27;, &#x27;people&#x27; ]<br>  &#125;);<br>  const chart2 = new G2.Chart(&#123;<br>    container: &#x27;c4&#x27;,<br>    forceFit: true,<br>    height: 250,<br>    theme: &#x27;dark&#x27;<br>  &#125;);<br>  chart2.source(dv, &#123;<br>    &#x27;count&#x27;: &#123; alias: &#x27;话务量（通）&#x27;, min: 0 &#125;,<br>    &#x27;people&#x27;: &#123; alias: &#x27;人数（人）&#x27;, min: 0 &#125;<br>  &#125;);<br>  chart2.legend(false);// 不显示图例<br>  chart2.intervalStack().position(&#x27;time*count&#x27;).color(&#x27;type&#x27;, [ &#x27;#348cd1&#x27;, &#x27;#43b5d8&#x27; ]); // 绘制层叠柱状图<br>  chart2.line().position(&#x27;time*people&#x27;).color(&#x27;#5ed470&#x27;).size(4).shape(&#x27;smooth&#x27;); // 绘制曲线图<br>  chart2.point().position(&#x27;time*people&#x27;).color(&#x27;#5ed470&#x27;).tooltip(false); // 绘制点图<br>  chart2.render();<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Label-图形文本"><a href="#Label-图形文本" class="headerlink" title="Label 图形文本"></a>Label 图形文本</h1><p>恰当的文本标注可以提高可视化图表的可读性。除了提供文本标签标注的功能之外，G2 还支持文本的格式化以及自定义 html 文本标签的功能。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL2xTYXNZa0xVTEZJSFlJcEVJZVV3LnBuZw?x-oss-process=image/format,png" alt="img"></p><h2 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h2><p>在每个几何标记 geom 上调用 label 方法，指定需要显示的数据维度即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 指定显示文本标签<br>chart.point().position(&#x27;x*y&#x27;).label(&#x27;x&#x27;);<br>// 格式化文本标签的显示内容<br>chart.interval().position(&#x27;x*y&#x27;).label(&#x27;x&#x27;, &#123;<br>  offset: &#123;number&#125;, // 设置坐标轴文本 label 距离坐标轴线的距离<br>  textStyle: &#123;<br>    textAlign: &#x27;center&#x27;, // 文本对齐方向，可取值为： start middle end<br>    fill: &#x27;#404040&#x27;, // 文本的颜色<br>    fontSize: &#x27;12&#x27;, // 文本大小<br>    fontWeight: &#x27;bold&#x27;, // 文本粗细<br>    textBaseline: &#x27;top&#x27; // 文本基准线，可取 top middle bottom，默认为middle<br>  &#125; || &#123;function&#125;, // 支持回调 <br>  rotate: 30,<br>  autoRotate: &#123;boolean&#125; // 是否需要自动旋转，默认为 true<br>  formatter: &#123;function&#125;, // 回调函数，用于格式化坐标轴上显示的文本信息<br>  htmlTemplate: &#123;function&#125;, // 使用 html 自定义 label<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDE3NjM3MDQtZWM4OTFkOTMtMWExNi00ZWI3LWFhNTUtMzYxNmI5ZjBlMDkyLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; genre: &#x27;Sports&#x27;, sold: 275 &#125;,<br>  &#123; genre: &#x27;Strategy&#x27;, sold: 115 &#125;,<br>  &#123; genre: &#x27;Action&#x27;, sold: 120 &#125;,<br>  &#123; genre: &#x27;Shooter&#x27;, sold: 350 &#125;,<br>  &#123; genre: &#x27;Other&#x27;, sold: 150 &#125;<br>];<br><br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c0&#x27;,<br>  height: 300,<br>  forceFit: true,<br>  padding: [ 40, 20, 95, 80 ]<br>&#125;);<br><br>chart.source(data, &#123;<br>  genre: &#123;<br>    alias: &#x27;游戏种类&#x27; // 列定义，定义该属性显示的别名<br>  &#125;,<br>  sold: &#123;<br>    alias: &#x27;销售量&#x27;<br>  &#125;<br>&#125;);<br>chart.interval().position(&#x27;genre*sold&#x27;).color(&#x27;genre&#x27;).label(&#x27;sold&#x27;);<br>chart.render();<br></code></pre></td></tr></table></figure><p>更多配置项请查看 <a href="https://www.yuque.com/antv/g2-docs/api-geom#84ebds">label</a> api。</p><h2 id="格式化文本"><a href="#格式化文本" class="headerlink" title="格式化文本"></a>格式化文本</h2><p>如果默认提供的 label 显示形式不满足需求时，可以在 label 中定义 formatter 回调函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.interval().position(&#x27;x*y&#x27;).label(&#x27;x&#x27;, &#123;<br>  /**<br>   * 文本格式化函数<br>   * @param  &#123;string&#125; text  每条记录 x 属性的值<br>   * @param  &#123;object&#125; item  映射后的每条数据记录，是一个对象，可以从里面获取你想要的数据信息<br>   * @param  &#123;number&#125; index 每条记录的索引<br>   * @return &#123;string&#125;       返回格式化后的文本<br>   */<br>  formatter: (text, item, index) => &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDE3OTA0ODYtNmVmNDg4YWEtODEyYy00ZGRmLWE5ZDEtMWM2ZGYzMmNkOTRhLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;Microsoft Internet Explorer&#x27;, value: 56.33 &#125;,<br>  &#123; name: &#x27;Chrome&#x27;, value: 24.03 &#125;,<br>  &#123; name: &#x27;Firefox&#x27;, value: 10.38 &#125;,<br>  &#123; name: &#x27;Safari&#x27;,  value: 4.77 &#125;,<br>  &#123; name: &#x27;Opera&#x27;, value: 0.91 &#125;,<br>  &#123; name: &#x27;Proprietary or Undetectable&#x27;, value: 0.2 &#125;<br>];<br>const dv = new DataSet.DataView();<br>dv.source(data).transform(&#123;<br>  type: &#x27;percent&#x27;,<br>  field: &#x27;value&#x27;,<br>  dimension: &#x27;name&#x27;,<br>  as: &#x27;percent&#x27;<br>&#125;);<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  width: 800,<br>  height: 400<br>&#125;);<br>chart.source(dv);<br>// 重要：绘制饼图时，必须声明 theta 坐标系<br>chart.coord(&#x27;theta&#x27;, &#123;<br>  radius: 0.8 // 设置饼图的大小<br>&#125;);<br>chart.tooltip(&#123;<br>  showTitle: false<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;name&#x27;)<br>  .tooltip(&#x27;name*percent&#x27;, (name, percent) => &#123;<br>    return &#123;<br>      name,<br>      value: (percent * 100).toFixed(2) + &#x27;%&#x27;<br>    &#125;;<br>  &#125;)<br>  .label(&#x27;name&#x27;, &#123;<br>    formatter: (text, item, index) => &#123;<br>      const point = item.point; // 每个弧度对应的点<br>      let percent = point[&#x27;percent&#x27;];<br>      percent = (percent * 100).toFixed(2) + &#x27;%&#x27;;<br>      return text + &#x27; &#x27; + percent;<br>    &#125;<br>  &#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h2 id="自定义-html-文本"><a href="#自定义-html-文本" class="headerlink" title="自定义 html 文本"></a>自定义 html 文本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.interval().position(&#x27;x*y&#x27;).label(&#x27;x&#x27;, &#123;<br>  /**<br>   * 创建 html 文本<br>   * @param  &#123;string&#125; text  每条记录 x 属性的值<br>   * @param  &#123;object&#125; item  映射后的每条数据记录，是一个对象，可以从里面获取你想要的数据信息<br>   * @param  &#123;number&#125; index 每条记录的索引<br>   * @return &#123;string&#125;       返回 html 字符串<br>   */<br>  htmlTemplate: (text, item, index) => &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>label 除了可以格式化文本的显示，也支持使用 html 自定义显示的样式。只需要定义 htmlTemplate 格式化文本的回调函数即可，如下例所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDE4MjQ5MTItOWQ0M2U3NDktYzY4ZC00N2JkLTlkMzktZThmNGE0MDVkOGYxLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;示例 A&#x27;, value: 38.8 &#125;,<br>  &#123; name: &#x27;示例 B&#x27;, value: 9.15 &#125;,<br>  &#123; name: &#x27;示例 C&#x27;, value: 26.35 &#125;,<br>  &#123; name: &#x27;示例 D &#x27;,  value: 22.6 &#125;,<br>  &#123; name: &#x27;示例 E&#x27;, value: 3.1 &#125;<br>];<br>const dv = new DataSet.DataView();<br>dv.source(data).transform(&#123;<br>  type: &#x27;percent&#x27;,<br>  field: &#x27;value&#x27;,<br>  dimension: &#x27;name&#x27;,<br>  as: &#x27;percent&#x27;<br>&#125;);<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c2&#x27;,<br>  width: 800,<br>  height: 400<br>&#125;);<br>chart.source(dv);<br>// 重要：绘制饼图时，必须声明 theta 坐标系<br>chart.coord(&#x27;theta&#x27;, &#123;<br>  radius: 0.8 // 设置饼图的大小<br>&#125;);<br>chart.tooltip(&#123;<br>  showTitle: false<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;name&#x27;)<br>  .tooltip(&#x27;name*percent&#x27;, (name, percent) => &#123;<br>    return &#123;<br>      name: name,<br>      value: (percent * 100).toFixed(2) + &#x27;%&#x27;<br>    &#125;;<br>  &#125;)<br>  .label(&#x27;name&#x27;, &#123;<br>    labelLine: false, // 不显示文本的连接线<br>    offset: 30, // 文本距离图形的距离<br>    htmlTemplate: (text, item, index) => &#123;<br>      const point = item.point; // 每个弧度对应的点<br>      let percent = point[&#x27;percent&#x27;];<br>      percent = (percent * 100).toFixed(2) + &#x27;%&#x27;;<br>      return &#x27;<span class="title" style="display: inline-block;width: 50px;">&#x27; + text + &#x27;</span><br><span style="color:&#x27; + point.color + &#x27;">&#x27; + percent + &#x27;</span>&#x27;; // 自定义 html 模板<br>    &#125;<br>  &#125;);<br>chart.render();<br></code></pre></td></tr></table></figure><h1 id="图表事件"><a href="#图表事件" class="headerlink" title="图表事件"></a>图表事件</h1><p>chart 对象提供了各种事件支持，以响应用户的操作，方便用户扩展交互。开发者可以监听这些事件，然后通过回调函数做相应的处理，比如跳转到一个地址，或者弹出对话框，或者做数据下钻等等。</p><p>G2 中的事件用法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.on(&#x27;eventType&#x27;, fn); // 绑定事件<br>chart.off(&#x27;eventType&#x27;, fn); // 移除事件<br></code></pre></td></tr></table></figure><p>其中 eventType 对应事件名称，均使用小写。</p><p>对于事件的移除，<code>chart.off(&#39;eventType&#39;, fn)</code> 其中如果 fn 不指定，表示删除所有 eventType 事件，如果 eventType 和 fn 都不指定，则表示删除 chart 上所有的事件。</p><p>在 G2 中，我们将事件分为如下事件：</p><ol><li>画布基础事件，如 mousedown click dblclick 等；</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.on(&#x27;mousedown&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;mousemove&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;mouseleave&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;mouseup&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;click&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;dblclick&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;touchstart&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;touchmove&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;touchend&#x27;, ev => &#123;&#125;);<br></code></pre></td></tr></table></figure><ol><li>绘图区域事件，如 plotmove plotclick 等；</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.on(&#x27;plotenter&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;plotmove&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;plotleave&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;plotclick&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;plotdblclick&#x27;, ev => &#123;&#125;);<br></code></pre></td></tr></table></figure><ol><li>tooltip 事件；</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.on(&#x27;tooltip:show&#x27;, ev => &#123;&#125;); // tooltip 展示<br>chart.on(&#x27;tooltip:hide&#x27;, ev => &#123;&#125;); // tooltip 隐藏<br>chart.on(&#x27;tooltip:change&#x27;, ev => &#123;&#125;); // tooltip 内容发生变化的时候<br></code></pre></td></tr></table></figure><ol><li>图形元素事件，即组成图表的各种图形元素；我们以 『图形元素名』+ 『基础事件名』 的方式来组合图形元素上的事件，帮助用户进行更精准的事件监听，同时也给交互提供了更大的可能性。</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDIwMTYzMTQtNDgyODI1OTItYmJiNi00YzU0LWEwOWUtYTQ3MWVjOTFhMTFiLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">chart.on(&#x27;point:click&#x27;, ev => &#123;&#125;);<br>chart.on(&#x27;axis-label:click&#x27;, ev => &#123;&#125;);<br>img,[object Object],<br></code></pre></td></tr></table></figure><p>下图展示了图表各个组件的名称：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0lYUlpKVktXWUVkYWZZQXpic1hPLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>详细的使用详见 <a href="https://www.yuque.com/antv/g2-docs/api-chart#deduxh">api</a>。</p><h2 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="示例-1：饼图点击跳转"><a href="#示例-1：饼图点击跳转" class="headerlink" title="示例 1：饼图点击跳转"></a>示例 1：饼图点击跳转</h3><p>先来看一个简单的点击饼图后跳转至相应页面的例子。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDIwNTQwMDYtZjhlODhiOGEtOTkxZi00MTlkLWFlZjgtY2M3MTc5ZTQ5NjA2LnBuZw?x-oss-process=image/format,png" alt="img"></p><p>通过监听 <code>interval:click</code> 事件，然后根据 <code>ev</code> 参数中的 data 字段的 <code>_origin</code> 属性值获取被点击区域的原始数据，以获取对应浏览器的名称。</p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;IE&#x27;, value: 56.33 &#125;,<br>  &#123; name: &#x27;Chrome&#x27;, value: 24.03 &#125;,<br>  &#123; name: &#x27;Firefox&#x27;, value: 10.38 &#125;,<br>  &#123; name: &#x27;Safari&#x27;,  value: 4.77 &#125;,<br>  &#123; name: &#x27;Opera&#x27;, value: 0.91 &#125;,<br>  &#123; name: &#x27;Unknown&#x27;, value: 0.2 &#125;<br>];<br>const DataView = DataSet.DataView;<br>const dv = new DataView();<br>dv.source(data).transform(&#123;<br>  type: &#x27;percent&#x27;,<br>  field: &#x27;value&#x27;,<br>  dimension: &#x27;name&#x27;,<br>  as: &#x27;percent&#x27;<br>&#125;);<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c1&#x27;,<br>  forceFit: true,<br>  height: 400<br>&#125;);<br>chart.source(dv);<br>// 重要：绘制饼图时，必须声明 theta 坐标系<br>chart.coord(&#x27;theta&#x27;, &#123;<br>  radius: 0.8 // 设置饼图的大小<br>&#125;);<br>chart.tooltip(&#123;<br>  showTitle: false<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;name&#x27;)<br>  .tooltip(&#x27;name*percent&#x27;, (name, percent) => &#123;<br>    return &#123;<br>      name,<br>      value: (percent * 100).toFixed(2) + &#x27;%&#x27;<br>    &#125;;<br>  &#125;)<br>  .style(&#123;<br>    cursor: &#x27;pointer&#x27;<br>  &#125;)<br>  .label(&#x27;name&#x27;);<br><br>chart.render();<br><br>chart.on(&#x27;interval:click&#x27;, ev => &#123;<br>  const data = ev.data;<br>  if (data) &#123;<br>    const name = data._origin[&#x27;name&#x27;];<br>    window.open(&#x27;http://www.baidu.com/s?wd=&#x27; + name);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><p>通过 interval:click 监听饼图的点击事件</p></li><li><p>通过 style 方法中设置 cursor: ‘pointer’ 改变鼠标形状</p></li></ul><h3 id="示例-2：动态改变-tooltip-显示信息"><a href="#示例-2：动态改变-tooltip-显示信息" class="headerlink" title="示例 2：动态改变 tooltip 显示信息"></a>示例 2：动态改变 tooltip 显示信息</h3><p>通过监听 <code>tooltip:change</code> 事件，可以做到动态得改变 tooltip 的显示信息，以完成 tooltip 的高度个性化定制。</p><p><code>tooltip:change</code> 事件的参数格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">&#123;<br>  items: array, // tooltip 上显示的记录信息<br>  tooltip: object, // 当前 tooltip 对象<br>  x: number, // 鼠标点击的 x 坐标点<br>  y: number // 鼠标点击的 y 坐标点<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>ev.items[0]</code> 获取 tooltip 上的第一条记录数据，重复复制该记录的 <code>value</code> 属性。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDIwOTAxMDQtZWM2YzVkMWEtYjljZi00MDEyLWIxZTktNzIwYTNmMDNlNzQxLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const data = [<br>  &#123; name: &#x27;示例 A&#x27;, value: 38.8 &#125;,<br>  &#123; name: &#x27;示例 B&#x27;, value: 9.15 &#125;,<br>  &#123; name: &#x27;示例 C&#x27;, value: 26.35 &#125;,<br>  &#123; name: &#x27;示例 D &#x27;,  value: 22.6 &#125;,<br>  &#123; name: &#x27;示例 E&#x27;, value: 3.1 &#125;<br>];<br>const dv = new DataSet.DataView();<br>dv.source(data).transform(&#123;<br>  type: &#x27;percent&#x27;,<br>  field: &#x27;value&#x27;,<br>  dimension: &#x27;name&#x27;,<br>  as: &#x27;percent&#x27;<br>&#125;);<br>const chart = new G2.Chart(&#123;<br>  container: &#x27;c2&#x27;,<br>  width: 800,<br>  height: 400<br>&#125;);<br>chart.source(dv);<br>// 重要：绘制饼图时，必须声明 theta 坐标系<br>chart.coord(&#x27;theta&#x27;, &#123;<br>  radius: 0.8 // 设置饼图的大小<br>&#125;);<br>chart.tooltip(&#123;<br>  showTitle: false<br>&#125;);<br>chart.intervalStack()<br>  .position(&#x27;percent&#x27;)<br>  .color(&#x27;name&#x27;);<br>chart.render();<br><br>chart.on(&#x27;tooltip:change&#x27;, ev => &#123;<br>  const item = ev.items[0]; // 获取tooltip要显示的内容<br>  item.value = &#x27;格式化-&#x27; + (item.value * 100).toFixed(2) + &#x27;%&#x27;;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="图表交互"><a href="#图表交互" class="headerlink" title="图表交互"></a>图表交互</h1><p>G2 默认内置的交互包括：</p><ol><li><p>active 激活；</p></li><li><p>select 选中。</p></li></ol><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>开启以及关闭 shape 对于鼠标 hover 时的响应效果，G2 默认为各个 shape 内置了 active 效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">geom.active(false); // 关闭默认响应<br>geom.active(true); // 开启默认响应<br></code></pre></td></tr></table></figure><h2 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h2><p>各个几何标记 geom 选中的模式包含如下三种：</p><ol><li><p>不可选中；</p></li><li><p>单选；</p></li><li><p>多选；</p></li><li><p>选中是否可取消选中。</p></li></ol><p>选中模式的设置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">geom.select(false); // 关闭<br>geom.select(true); // 打开<br>geom.select([true,] &#123;<br>  mode: &#x27;single&#x27; || &#x27;multiple&#x27;, // 选中模式，单选、多选<br>  style: &#123;&#125;, // 选中后 shape 的样式<br>  cancelable: true | false, // 选中之后是否允许取消选中，默认允许取消选中<br>  animate: true | false // 选中是否执行动画，默认执行动画<br>&#125;);<br></code></pre></td></tr></table></figure><p>默认情况下，G2 中只有饼图支持选中交互，其他 geom 的选中模式默认情况下都是关闭的。</p><p>下面通过一个实例来演示选中 <code>select(enable, cfg)</code> 方法的使用。</p><h3 id="示例：地图省市下钻"><a href="#示例：地图省市下钻" class="headerlink" title="示例：地图省市下钻"></a>示例：地图省市下钻</h3><p>本例中的地图 GeoJSON 数据请访问该地址获取：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><script src="https://a.alipayobjects.com/g/datavis/china-geojson/1.0.0/index.js"></script><br></code></pre></td></tr></table></figure><p>或者 <a href="https://github.com/antvis/china-geojson">github</a>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAxOC9wbmcvMTAwOTk2LzE1Mzk4NDIzMDM4NjAtNDI3NjdmYTAtYjg3OC00MWFjLWE1MTQtYjczMDNkOWIyNWFiLnBuZw?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">let provinceChart;<br>  function processData(mapData) &#123;<br>    // 构造虚拟数据<br>    const userData = [];<br>    const features = mapData.features;<br>    for (let i = 0; i < features.length; i++) &#123;<br>      const name = features[i].properties.name;<br>      userData.push(&#123;<br>        name: name,<br>        value: Math.round(Math.random() * 1000),<br>      &#125;);<br>    &#125;<br>    const ds = new DataSet();<br>    const geoDataView = ds.createView().source(mapData, &#123;<br>      type: &#x27;GeoJSON&#x27;,<br>    &#125;); // geoJSON 经纬度数据<br><br>    // 用户数据<br>    const dvData = ds.createView().source(userData);<br>    dvData.transform(&#123;<br>      type: &#x27;geo.region&#x27;,<br>      field: &#x27;name&#x27;,<br>      geoDataView: geoDataView,<br>      as: [&#x27;longitude&#x27;, &#x27;latitude&#x27;],<br>    &#125;);<br><br>    return dvData;<br>  &#125;<br><br>  function renderProvinceChart(name) &#123;<br>    const provinceData = ChinaGeoJSON[name];<br>    provinceChart && provinceChart.destroy();<br>    provinceChart = null;<br>    if (!provinceData) &#123;<br>      return;<br>    &#125;<br>    const dv = processData(provinceData);<br><br>    // start: 计算地图的最佳宽高<br>    const longitudeRange = dv.range(&#x27;longitude&#x27;);<br>    const latitudeRange = dv.range(&#x27;latitude&#x27;);<br>    const ratio = (longitudeRange[1] - longitudeRange[0]) / (latitudeRange[1] - latitudeRange[0]);<br>    let width;<br>    let height;<br>    if (ratio > 1) &#123;<br>      width = 450;<br>      height = width / ratio;<br>    &#125; else &#123;<br>      width = 350 * ratio;<br>      height = 350;<br>    &#125;<br>    // end: 计算地图的最佳宽高<br><br>    provinceChart = new G2.Chart(&#123;<br>      container: &#x27;province&#x27;,<br>      width,<br>      height,<br>      padding: 0<br>    &#125;);<br>    provinceChart.source(dv);<br>    provinceChart.axis(false);<br>    provinceChart.tooltip(&#123;<br>      showTitle: false,<br>    &#125;);<br>    provinceChart<br>      .polygon()<br>      .position(&#x27;longitude*latitude&#x27;)<br>      .label(&#x27;name&#x27;, &#123;<br>        textStyle: &#123;<br>          fill: &#x27;#fff&#x27;,<br>          fontSize: 10,<br>          shadowBlur: 2,<br>          shadowColor: &#x27;rgba(0, 0, 0, .45)&#x27;<br>        &#125;,<br>      &#125;)<br>      .style(&#123;<br>        stroke: &#x27;#fff&#x27;,<br>        lineWidth: 1,<br>      &#125;)<br>      .color(&#x27;value&#x27;, &#x27;#BAE7FF-#1890FF-#0050B3&#x27;);<br>      provinceChart.render();<br>  &#125;<br><br>  const mapData = ChinaGeoJSON[&#x27;China&#x27;];<br>  const chinaDv = processData(mapData);<br>  const longitudeRange = chinaDv.range(&#x27;longitude&#x27;);<br>  const latitudeRange = chinaDv.range(&#x27;latitude&#x27;);<br>  const ratio = (longitudeRange[1] - longitudeRange[0]) / (latitudeRange[1] - latitudeRange[0]);<br><br>  const chart = new G2.Chart(&#123;<br>    container: &#x27;china&#x27;,<br>    width: 250,<br>    height: 250 / ratio,<br>    padding: 0,<br>    animate: false<br>  &#125;);<br><br>  chart.source(chinaDv);<br>  chart.tooltip(&#123;<br>    showTitle: false,<br>  &#125;);<br>  chart.axis(false);<br>  chart<br>    .polygon()<br>    .position(&#x27;longitude*latitude&#x27;)<br>    .tooltip(&#x27;name&#x27;)<br>    .style(&#123;<br>      stroke: &#x27;#bfbfbf&#x27;,<br>      lineWidth: 1,<br>      fill: &#x27;#e3e3e3&#x27;,<br>      globalAlpha: 0.85,<br>      cursor: &#x27;pointer&#x27;, // 设置鼠标手势<br>    &#125;)<br>    .select(&#123;<br>      // 设置是否允许选中以及选中样式<br>      mode: &#x27;single&#x27;, // 多选还是单选<br>      style: &#123;<br>        fill: &#x27;#1890ff&#x27;, // 选中的样式<br>      &#125;,<br>    &#125;);<br>  chart.render();<br><br>  const shapes = chart.getAllGeoms()[0].getShapes();<br>  for (let i = 0, len = shapes.length; i < len; i++) &#123;<br>    const shape = shapes[i];<br>    const origin = shape.get(&#x27;origin&#x27;)[&#x27;_origin&#x27;];<br>    const name = origin.name;<br>    if (name === &#x27;浙江&#x27;) &#123;<br>      renderProvinceChart(name);<br>      chart.getAllGeoms()[0].setShapeSelected(shape);<br>    &#125;<br>  &#125;<br><br>  chart.on(&#x27;plotclick&#x27;, function(ev) &#123;<br>    const shape = ev.shape;<br>    if (!shape || !shape.name) &#123;<br>      return false;<br>    &#125;<br>    if (shape.get(&#x27;selected&#x27;)) &#123;<br>      const item = shape.get(&#x27;origin&#x27;);<br>      const data = item[&#x27;_origin&#x27;];<br>      const name = data.name;<br>      renderProvinceChart(name);<br>    &#125; else &#123;<br>      provinceChart && provinceChart.clear();<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信自动化分析流程 nf-core 的离线运行（图文详解）</title>
      <link href="/posts/19587/"/>
      <url>/posts/19587/</url>
      
        <content type="html"><![CDATA[<p>Nextflow 包括流程代码，软件，参考基因组，甚至远程数据源</p><p>由于众所周知的原因，需要在离线系统运行流程，下面我们来安装 nf-core。</p><h3 id="Nextflow"><a href="#Nextflow" class="headerlink" title="Nextflow"></a>Nextflow</h3><p>在 Linux 系统安装好 Nextflow</p><p>下载最新版：<a href="https://github.com/nextflow-io/nextflow/releases">https://github.com/nextflow-io/nextflow/releases</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MzAvSW12VTVkcDRWZ2VXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><code>chmod +x nextflow-20.04.1-all</code></p><p><code>./nextflow-20.04.1</code></p><p>安装好后，修改配置文件禁止Nextflow自动更新</p><p><code>vim ~/.bashrc</code></p><p>在最末尾加入</p><p><code>export NXF_OFFLINE=&#39;TRUE&#39; </code></p><p><code>source ~/.bashrc</code></p><h3 id="流程代码"><a href="#流程代码" class="headerlink" title="流程代码"></a>流程代码</h3><p>一般，一个离线流程包括源码，软件和配置文件。nf-core 提供了一个辅助工具 helper tool 帮助我们搭建。</p><p>运行<code>nf-core list</code>查看有哪些流程</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MzAvTTRsd2ZDWHZ2Zlh6LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>离线下载<code>nf-core/rnaseq</code></p><p><code>nf-core download  nf-core/rnaseq</code></p><p>加入<code>--singularity </code>，可以获取 Singularity container </p><blockquote><p>什么是Singularity ？</p><p><a href="https://singularity.lbl.gov/">https://singularity.lbl.gov/</a> </p></blockquote><p>下载下来会是一个安装包，解压即可</p><p>运行该流程，<code>nextflow run &lt;directory&gt;</code></p><blockquote><p><a href="https://nf-co.re/tools#downloading-pipelines-for-offline-use">https://nf-co.re/tools#downloading-pipelines-for-offline-use</a> </p></blockquote><h3 id="使用-iGenomes-参考基因组"><a href="#使用-iGenomes-参考基因组" class="headerlink" title="使用 iGenomes 参考基因组"></a>使用 iGenomes 参考基因组</h3><p>一些流程需要参考基因组和 AWS-iGenomes 的集成。这里需要下载这些相关的离线资源。</p><h4 id="Illumina-iGenomes"><a href="#Illumina-iGenomes" class="headerlink" title="Illumina iGenomes"></a>Illumina iGenomes</h4><p>为了更容易的使用参考基因组，Illumina 开发了一个名为 iGenomes 的项目。</p><blockquote><p>iGenomes:&lt;<a href="https://support.illumina.com/sequencing/sequencing_software/igenome.html">https://support.illumina.com/sequencing/sequencing_software/igenome.html</a> </p></blockquote><p>nf-core 将iGenomes在 AWS S3上，创建了AWS-iGenomes </p><p>下载：<a href="https://ewels.github.io/AWS-iGenomes/">https://ewels.github.io/AWS-iGenomes/</a> </p><p>一般情况，使用<code>--genome GRCh38 </code>即可自动下载</p><p>为了减少时间和带宽的浪费，最好做个本地资源。然后通过设置指定参考基因组的位置。</p><p><code>params.igenomes_base = &#39;/path/to/data/igenomes/&#39; </code></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>使用<code>--genome GRCh38 </code>就会调用本地资源。</p><h3 id="自定义参考"><a href="#自定义参考" class="headerlink" title="自定义参考"></a>自定义参考</h3><p>如果你不能使用 AWS-iGenomes  ，可以在命令行上提供参考基因组路径。</p><h5 id="配置自定义参考"><a href="#配置自定义参考" class="headerlink" title="配置自定义参考"></a>配置自定义参考</h5><p>如果重复使用相同的引用，则将这些路径保存在nextflow配置文件中会更方便。支持AWS-iGenomes的管道也可以配置为支持自定义基因组ID和路径。 </p><figure class="highlight yaml"><table><tr><td class="code"><pre class=" language-hljs yaml"><span class="hljs-string">params</span> &#123;<br>  <span class="hljs-string">genomes</span> &#123;<br>    <span class="hljs-string">&#x27;YOUR-ID&#x27;</span> &#123;<br>      <span class="hljs-string">fasta</span>  <span class="hljs-string">=</span> <span class="hljs-string">&#x27;&lt;PATH TO FASTA FILE&gt;/genome.fa&#x27;</span><br>    &#125;<br>    <span class="hljs-string">&#x27;OTHER-GENOME&#x27;</span> &#123;<br>      <span class="hljs-string">//</span> [<span class="hljs-string">..</span>]<br>    &#125;<br>  &#125;<br>  <span class="hljs-string">//</span> <span class="hljs-string">Optional</span> <span class="hljs-bullet">-</span> <span class="hljs-string">default</span> <span class="hljs-string">genome.</span> <span class="hljs-string">Ignored</span> <span class="hljs-string">if</span> <span class="hljs-string">--genome</span> <span class="hljs-string">&#x27;OTHER-GENOME&#x27;</span> <span class="hljs-string">specified</span> <span class="hljs-string">on</span> <span class="hljs-string">command</span> <span class="hljs-string">line</span><br>  <span class="hljs-string">genome</span> <span class="hljs-string">=</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-string">params</span> &#123;<br>  <span class="hljs-string">genomes</span> &#123;<br>    <span class="hljs-string">&#x27;YOUR-ID&#x27;</span> &#123;<br>      <span class="hljs-string">fasta</span>  <span class="hljs-string">=</span> <span class="hljs-string">&#x27;&lt;PATH TO FASTA FILE&gt;/genome.fa&#x27;</span><br>    &#125;<br>    <span class="hljs-string">&#x27;OTHER-GENOME&#x27;</span> &#123;<br>      <span class="hljs-string">//</span> [<span class="hljs-string">..</span>]<br>    &#125;<br>  &#125;<br>  <span class="hljs-string">//</span> <span class="hljs-string">Optional</span> <span class="hljs-bullet">-</span> <span class="hljs-string">default</span> <span class="hljs-string">genome.</span> <span class="hljs-string">Ignored</span> <span class="hljs-string">if</span> <span class="hljs-string">--genome</span> <span class="hljs-string">&#x27;OTHER-GENOME&#x27;</span> <span class="hljs-string">specified</span> <span class="hljs-string">on</span> <span class="hljs-string">command</span> <span class="hljs-string">line</span><br>  <span class="hljs-string">genome</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;YOUR-ID&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用自定义的参考"><a href="#使用自定义的参考" class="headerlink" title="使用自定义的参考"></a>使用自定义的参考</h5><p><code>--genome YOUR-ID</code></p><h2 id="流程配置"><a href="#流程配置" class="headerlink" title="流程配置"></a>流程配置</h2><p>Nextflow 特性之一是可以在几乎任何计算框架下运行。支持高性能计算框架 HPC execution schedulers （包括Slurm，SGE，PBS，LSF）和云计算框架（AWS Batch，Google Cloud）。</p><p>每个nt-core 流程都配了合理的默认值，根据需要覆盖相应的值即可。</p><p><strong>最好不要通过修改流程源码来配置nf-core流程</strong>。如果编辑源码会导致更新不可用，同时也会失去可重复性。</p><p>流程可以通过命令<code>-profile</code>来执行配置文件。可以在逗号分割的列表中指定多个配置文件。或者，你可以创建自己的配置文件。</p><p>大多数用户需要指定<code>executor</code>来告诉 Nextflow 如何提交任务给 job scheduler (<em>e.g.</em> SGE, LSF, SLURM, PBS, AWS Batch <em>etc.</em>) 。这个步骤可以通过配置文件来完成。</p><blockquote><p>如何指定 Executor</p><p><a href="https://www.nextflow.io/docs/latest/executor.html#executor-page">https://www.nextflow.io/docs/latest/executor.html#executor-page</a> </p></blockquote><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>每个 nf-core 流程都会附带有docker,singularity和conda的配置文件。使用这些文件就可以指导流程运行相关软件。</p><h3 id="共享配置"><a href="#共享配置" class="headerlink" title="共享配置"></a>共享配置</h3><p>如果使用其他人共享的系统，最好去使用<a href="https://github.com/nf-core/configs">https://github.com/nf-core/configs</a> 的配置文件。这些是nf-core运行时所加载的配置。</p><p>您可能会发现您的系统已经有一个共享的配置文件（请参阅<a href="https://github.com/nf-core/configs%EF%BC%89%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%EF%BC%8C%E8%AF%B7%E6%8C%89%E7%85%A7%E5%AD%98%E5%82%A8%E5%BA%93%E8%87%AA%E8%BF%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E8%AF%B4%E6%98%8E%E6%B7%BB%E5%8A%A0%E9%9B%86%E7%BE%A4%E3%80%82">https://github.com/nf-core/configs）。如果没有，请按照存储库自述文件中的说明添加集群。</a> </p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>如果您是唯一运行此管道的人，则可以创建一个本地配置文件并使用它。 Nextflow在三个位置来查找这些文件： </p><ol><li>用户家目录: <code>~/.nextflow/config</code></li><li>分析工作目录: <code>nextflow.config</code></li><li>在命令中指定路径: <code>-c path/to/config</code> (可指定多个)</li></ol><p>配置参数会依次加载并覆盖先前的值。 配置加载顺序是：</p><p>硬编码流程的默认设置 &gt;&gt; 用户家目录 &gt;&gt; 工作目录 &gt;&gt; 命令<code>-c</code>顺序执行 &gt;&gt; 命令<code>--parameter</code>指定参数</p><blockquote><p>更多参数：<a href="https://www.nextflow.io/docs/latest/config.html">https://www.nextflow.io/docs/latest/config.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 转录组 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高速下载 EBI NCBI 测序数据（SRA，Fastq等）</title>
      <link href="/posts/61322/"/>
      <url>/posts/61322/</url>
      
        <content type="html"><![CDATA[<h3 id="一、测试环境及工具"><a href="#一、测试环境及工具" class="headerlink" title="一、测试环境及工具"></a>一、测试环境及工具</h3><ul><li>Linux（Ubuntu 18.04.1）</li><li>Aspera （Aspera Connect version 3.9.9.177872）</li></ul><p>Aspera 适用于所有的 Linux 版本，可以按步骤测试在CentOS，Fedora等其他 Linux 发行版的效果</p><h3 id="二、Conda-方式安装-Aspera"><a href="#二、Conda-方式安装-Aspera" class="headerlink" title="二、Conda 方式安装 Aspera"></a>二、Conda 方式安装 Aspera</h3><p><code>conda install -y -c hcc aspera-cli</code></p><blockquote><p>这里需要安装Conda (这是一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a> </p></blockquote><h3 id="三、传统方式安装-Aspera"><a href="#三、传统方式安装-Aspera" class="headerlink" title="三、传统方式安装 Aspera"></a>三、传统方式安装 Aspera</h3><p><strong>官网下载：</strong><a href="http://downloads.asperasoft.com/en/downloads/8?list">http://downloads.asperasoft.com/en/downloads/8?list</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MDcvZGdVeVJCb2JLRHZILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>csdn下载：</strong> <a href="https://download.csdn.net/download/u011262253/10402259">https://download.csdn.net/download/u011262253/10402259</a></p><p><strong>wget 下载：</strong><code>wget https://download.asperasoft.com/download/sw/connect/3.9.9/ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.tar.gz</code></p><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><h5 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h5><p><code>tar -zxvf ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.tar.gz</code></p><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5><p><code>./ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.sh</code></p><h5 id="3-配置许可"><a href="#3-配置许可" class="headerlink" title="3. 配置许可"></a>3. 配置许可</h5><p><code>sudo cp ~/.aspera/connect/etc/aspera-license /usr/local/bin/</code></p><h5 id="4-配置程序环境变量"><a href="#4-配置程序环境变量" class="headerlink" title="4. 配置程序环境变量"></a>4. 配置程序环境变量</h5><p><code>vim ~/.bashrc </code></p><p>在末尾加上你的<code>aspera</code>所在目录</p><p><code>export PATH=&quot;/home/baimoc/.aspera/connect/bin:$PATH&quot;</code></p><p>立马生效</p><p><code>source ~/.bashrc</code></p><h5 id="5-配置秘钥"><a href="#5-配置秘钥" class="headerlink" title="5. 配置秘钥"></a>5. 配置秘钥</h5><p>新建配置目录</p><p><code>mkdir /home/baimoc/.aspera/config/ </code></p><p>复制到配置目录</p><p><code>cp ~/.aspera/connect/etc/asperaweb_id_dsa.openssh /home/baimoc/.aspera/config/ </code></p><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><h5 id="1-一个例子"><a href="#1-一个例子" class="headerlink" title="1. 一个例子"></a>1. 一个例子</h5><p><code>ascp -QT -L /home/baimoc/logs -l 100M -P33001  -i /home/baimoc/.aspera/config/asperaweb_id_dsa.openssh era-fasp@fasp.sra.ebi.ac.uk:/vol1/fastq/SRR689/SRR689233/SRR689233_1.fastq.gz ./out_path</code></p><h5 id="2-常用参数介绍"><a href="#2-常用参数介绍" class="headerlink" title="2. 常用参数介绍"></a>2. 常用参数介绍</h5><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ascp</td><td>aspera的可执行文件</td></tr><tr><td>-QT</td><td>禁用进度显示</td></tr><tr><td>-L &#x2F;home&#x2F;baimoc&#x2F;logs</td><td>日志文件路径</td></tr><tr><td>-l 100M</td><td>最大传输</td></tr><tr><td>-P33001</td><td>SSH传输端口</td></tr><tr><td>-i  &#x2F;home&#x2F;baimoc&#x2F;.aspera&#x2F;config&#x2F;asperaweb_id_dsa.openssh</td><td>密钥文件路径</td></tr><tr><td><a href="mailto:&#101;&#x72;&#97;&#x2d;&#102;&#97;&#x73;&#x70;&#64;&#102;&#x61;&#x73;&#x70;&#x2e;&#x73;&#114;&#97;&#46;&#x65;&#x62;&#105;&#x2e;&#x61;&#x63;&#x2e;&#x75;&#107;">&#101;&#x72;&#97;&#x2d;&#102;&#97;&#x73;&#x70;&#64;&#102;&#x61;&#x73;&#x70;&#x2e;&#x73;&#114;&#97;&#46;&#x65;&#x62;&#105;&#x2e;&#x61;&#x63;&#x2e;&#x75;&#107;</a>:&#x2F;vol1&#x2F;fastq&#x2F;SRR689&#x2F;SRR689233&#x2F;SRR689233_1.fastq.gz</td><td>资源路径</td></tr><tr><td>.&#x2F;out_path</td><td>文件保存路径</td></tr></tbody></table><h5 id="3-下载地址的构建"><a href="#3-下载地址的构建" class="headerlink" title="3. 下载地址的构建"></a>3. 下载地址的构建</h5><p>EBI<code>era-fasp@fasp.sra.ebi.ac.uk:/vol1/ERA012/ERA012008/sff/library08_GJ6U61T06.sff</code></p><p>NCBI：<code>anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/SRR/SRR507/SRR5077625/SRR5077625.sra</code></p><p>可以看到最关键的前缀是：<code>era-fasp@fasp.sra.ebi.ac.uk:</code>或<code>anonftp@ftp-private.ncbi.nlm.nih.gov:</code></p><h5 id="4-EBI查询整个项目的资源文件"><a href="#4-EBI查询整个项目的资源文件" class="headerlink" title="4. EBI查询整个项目的资源文件"></a>4. EBI查询整个项目的资源文件</h5><p><a href="https://www.ebi.ac.uk/ena/browser/view/PRJNA189204">https://www.ebi.ac.uk/ena/browser/view/PRJNA189204</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MDcvYmNPelAyY3VZVnJtLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="6-查看下载链接"><a href="#6-查看下载链接" class="headerlink" title="6. 查看下载链接"></a>6. 查看下载链接</h5><p>提取对应列，即可下载相应的资源文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MDcvVjBLTng5bnM0eWt5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="五、为什么这里要建议选EBI，而不用NCBI？"><a href="#五、为什么这里要建议选EBI，而不用NCBI？" class="headerlink" title="五、为什么这里要建议选EBI，而不用NCBI？"></a>五、为什么这里要建议选EBI，而不用NCBI？</h3><p>这个是在 NCBI 下载时的链接及提示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MDcvcnV6YWdBMzRCZUx1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA3MDcvUlFtYU8wR0tDd21WLnBuZw?x-oss-process=image/format,png" alt="mark"><br>简单来说就是：</p><ul><li>现在NCBI正在将数据传输至亚马逊云 AWS 和 谷歌云 GS</li><li>美国境内服务器免费，其他的服务器收费，用户自己掏钱</li><li>由于正在迁移，所以NCBI也不保证数据的完整性</li><li>虽然也提供了免费的链接，但是实测速度奇慢无比</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> SRA </tag>
            
            <tag> NCBI </tag>
            
            <tag> EBI </tag>
            
            <tag> Fastq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 更新软件镜像源</title>
      <link href="/posts/28658/"/>
      <url>/posts/28658/</url>
      
        <content type="html"><![CDATA[<h4 id="1-打开设置"><a href="#1-打开设置" class="headerlink" title="1.打开设置"></a>1.打开设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">cd /etc/apt/<br>cp sources.list  sources.list.bak<br>vi  /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h4 id="2-打开后粘贴最新镜像源"><a href="#2-打开后粘贴最新镜像源" class="headerlink" title="2.打开后粘贴最新镜像源"></a>2.打开后粘贴最新镜像源</h4><p>比如，清华的镜像，最新版：<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</a> </p><p>选择自己的 Ubuntu 版本，复制下面的代码到 <code>sources.list</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MzAvU0JEcTZySWdpOW92LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br><br># 预发布软件源，不建议启用<br># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="3-最后更新本地源"><a href="#3-最后更新本地源" class="headerlink" title="3.最后更新本地源"></a>3.最后更新本地源</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">apt update    # 更新本地 apt 源<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> apt </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细胞周期预测 | 单细胞转录组(scRNA-seq)分析_03</title>
      <link href="/posts/4473/"/>
      <url>/posts/4473/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>前置知识：<a href="https://blog.csdn.net/u011262253/article/details/102943870">原创 Seurat 包图文详解 | 单细胞转录组(scRNA-seq)分析02</a> </p><p>使用Seurat包来运行，主要实现两个功能：</p><ul><li>通过marker基因计算细胞周期评分</li><li>基于评分在预处理过程中，减轻单细胞转录组数据中细胞周期异质性影响</li></ul><h3 id="二、预处理"><a href="#二、预处理" class="headerlink" title="二、预处理"></a>二、预处理</h3><p>数据来自：<a href="http://www.bloodjournal.org/content/early/2016/06/30/blood-2016-05-716480?sso-checked=true">http://www.bloodjournal.org/content/early/2016/06/30/blood-2016-05-716480?sso-checked=true</a></p><p>数据下载：<a href="https://www.dropbox.com/s/3dby3bjsaf5arrw/cell_cycle_vignette_files.zip?dl=1">https://www.dropbox.com/s/3dby3bjsaf5arrw/cell_cycle_vignette_files.zip?dl=1</a></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 读取表达矩阵的第一行作为表头，第一列作为行名</span><br>exp.mat <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span>file <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./data/cell_cycle_vignette_files/nestorawa_forcellcycle_expressionMatrix.txt&quot;</span><span class="hljs-punctuation">,</span> header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <br>                      as.is <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 细胞周期的Marker基因</span><br>s.genes <span class="hljs-operator">&lt;-</span> cc.genes<span class="hljs-operator">$</span>s.genes<br>g2m.genes <span class="hljs-operator">&lt;-</span> cc.genes<span class="hljs-operator">$</span>g2m.genes<br><br><span class="hljs-comment"># 创建并初始化 Seurat 对象</span><br>marrow <span class="hljs-operator">&lt;-</span> CreateSeuratObject<span class="hljs-punctuation">(</span>counts <span class="hljs-operator">=</span> exp.mat<span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 读取表达矩阵的第一行作为表头，第一列作为行名</span><br>exp.mat <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span>file <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./data/cell_cycle_vignette_files/nestorawa_forcellcycle_expressionMatrix.txt&quot;</span><span class="hljs-punctuation">,</span> header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <br>                      as.is <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 细胞周期的Marker基因</span><br>s.genes <span class="hljs-operator">&lt;-</span> cc.genes<span class="hljs-operator">$</span>s.genes<br>g2m.genes <span class="hljs-operator">&lt;-</span> cc.genes<span class="hljs-operator">$</span>g2m.genes<br><br><span class="hljs-comment"># 创建并初始化 Seurat 对象</span><br>marrow <span class="hljs-operator">&lt;-</span> CreateSeuratObject<span class="hljs-punctuation">(</span>counts <span class="hljs-operator">=</span> exp.mat<span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">)</span><br>marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果直接使用 <code>FindCariableFeatures</code> 找高异质性基因。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ndims.print <span class="hljs-operator">=</span> <span class="hljs-number">6</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimHeatmap<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ndims.print <span class="hljs-operator">=</span> <span class="hljs-number">6</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimHeatmap<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvYXhucnBPczZ3N0M1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>在PCA后，会发现PC8与PC10中包括TOP2A和MKI67的细胞周期mark。可以尝试数据中回归该信号，避免影响下游分析。</p><h3 id="三、获取细胞周期分数"><a href="#三、获取细胞周期分数" class="headerlink" title="三、获取细胞周期分数"></a>三、获取细胞周期分数</h3><p>首先，我们根据每个细胞的G2 &#x2F; M和S期标志物的表达为其分配分数。这些标记物组在表达水平上应该是反相关的，并且不表达它们的细胞可能不会循环并处于G1期。</p><p>我们在<code>CellCycleScoring</code>函数中分配分数，该函数将S和G2 &#x2F; M分数存储在对象元数据中，以及G2M，S或G1阶段中每个单元格的预测分类。<code>CellCycleScoring</code>也可以通过传递将Seurat对象的标识设置为细胞周期阶段<code>set.ident = TRUE</code>（原始标识存储为<code>old.ident</code>）。请注意，Seurat在下游细胞周期回归中不使用离散分类（G2M &#x2F; G1 &#x2F; S）。相反，它使用G2M和S期的定量评分。但是，如果有兴趣，我们会提供预测的分类。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">marrow <span class="hljs-operator">&lt;-</span> CellCycleScoring<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> s.features <span class="hljs-operator">=</span> s.genes<span class="hljs-punctuation">,</span> g2m.features <span class="hljs-operator">=</span> g2m.genes<span class="hljs-punctuation">,</span> set.ident <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 查看细胞周期分数和阶段分配</span><br>head<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">[[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 可视化整个细胞周期标记的分布</span><br>RidgePlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;PCNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;TOP2A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MCM6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MKI67&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ncol <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation"><code class="language-hljs R">marrow <span class="hljs-operator">&lt;-</span> CellCycleScoring<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> s.features <span class="hljs-operator">=</span> s.genes<span class="hljs-punctuation">,</span> g2m.features <span class="hljs-operator">=</span> g2m.genes<span class="hljs-punctuation">,</span> set.ident <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 查看细胞周期分数和阶段分配</span><br>head<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">[[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 可视化整个细胞周期标记的分布</span><br>RidgePlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;PCNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;TOP2A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MCM6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MKI67&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ncol <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvZVJmMFA0cnFCM0tRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 对细胞周期基因做PCA，揭示了细胞完全按阶段分离</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 对细胞周期基因做PCA，揭示了细胞完全按阶段分离</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvNmJpTEpkU3lBWFZiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="四、在数据缩放期间回归出细胞周期得分"><a href="#四、在数据缩放期间回归出细胞周期得分" class="headerlink" title="四、在数据缩放期间回归出细胞周期得分"></a>四、在数据缩放期间回归出细胞周期得分</h3><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> vars.to.regress <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;S.Score&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;G2M.Score&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 高可变基因上的PCA不再返回与细胞周期相关的成分</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 仅对细胞周期基因运行PCA时，细胞不再按细胞周期阶段分离</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation"><code class="language-hljs R">marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> vars.to.regress <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;S.Score&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;G2M.Score&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 高可变基因上的PCA不再返回与细胞周期相关的成分</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 仅对细胞周期基因运行PCA时，细胞不再按细胞周期阶段分离</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvM2wwNWtWV3VCbFFtLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>由于最佳的细胞周期标记在组织和物种之间极为保守，因此我们发现此程序可在各种数据集上稳定可靠地工作。 </p><h3 id="五、备用工作流程"><a href="#五、备用工作流程" class="headerlink" title="五、备用工作流程"></a>五、备用工作流程</h3><p>上面的过程将删除与细胞周期相关的所有信号。在某些情况下，会对下游分析产生负面影响，尤其是在分化过程中（如鼠类造血），在此过程中干细胞处于静止状态，分化的细胞正在增殖（反之亦然）。</p><p>在这种情况下，清除所有细胞周期效应也会使干细胞和祖细胞之间的区别变得模糊。</p><p>作为替代方案，建议逐步淘汰G2M和S期评分之间的差异。</p><p>这意味着将维持分离非循环细胞和循环细胞的信号，但是增殖细胞之间的细胞周期相位差异（通常没用）将被从数据中去除。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">marrow<span class="hljs-operator">$</span>CC.Difference <span class="hljs-operator">&lt;-</span> marrow<span class="hljs-operator">$</span>S.Score <span class="hljs-operator">-</span> marrow<span class="hljs-operator">$</span>G2M.Score<br>marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> vars.to.regress <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CC.Difference&quot;</span><span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># PCA减少细胞周期效应</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 在细胞周期基因上运行PCA时，活跃增殖的细胞与G1细胞仍然不同，但是在活跃增殖的细胞中，G2M和S期细胞会聚在一起</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation"><code class="language-hljs R">marrow<span class="hljs-operator">$</span>CC.Difference <span class="hljs-operator">&lt;-</span> marrow<span class="hljs-operator">$</span>S.Score <span class="hljs-operator">-</span> marrow<span class="hljs-operator">$</span>G2M.Score<br>marrow <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> vars.to.regress <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CC.Difference&quot;</span><span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> rownames<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># PCA减少细胞周期效应</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> nfeatures.print <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 在细胞周期基因上运行PCA时，活跃增殖的细胞与G1细胞仍然不同，但是在活跃增殖的细胞中，G2M和S期细胞会聚在一起</span><br>marrow <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>s.genes<span class="hljs-punctuation">,</span> g2m.genes<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>marrow<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvekNNSzNSdGttMDhBLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> R </tag>
            
            <tag> 单细胞转录组 </tag>
            
            <tag> 细胞周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命可以用更少的氨基酸编码蛋白质吗？</title>
      <link href="/posts/41005/"/>
      <url>/posts/41005/</url>
      
        <content type="html"><![CDATA[<p>蛋白质是生命活动的主要承担者，生命进化最终都会体现在蛋白质的功能的多样化上。蛋白质是由20种氨基酸编码的，相比于ATGC的DNA遗传编码信息，氨基酸字母表显示出极大地复杂性和多样性。这就产生了一系列非常有趣的问题：生命为什么会选择20种氨基酸作为标准字母表？更少的氨基酸能否组成或满足一个蛋白质执行功能的基本组成单元？我们能否用更少的氨基酸创造出摆脱当前遗传法则，设计更为独特的生命？<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvaDlXRlFPakI2TEQ4LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><h3 id="一、氨基酸约化"><a href="#一、氨基酸约化" class="headerlink" title="一、氨基酸约化"></a>一、氨基酸约化</h3><p>理论上，具有相似性质、原子排列或频率分布的天然氨基酸可以被合并，并用更小数量的约化字母表来表示编码的氨基酸，这个过程就叫氨基酸约化。 最简单的约化方案是以极性或者亲疏水性作为标准，将20种氨基酸只约化为两个字母，最终会得到约化氨基酸字母表。当然，这种极端的方法产生的蛋白质，一定长度的序列所能承载的信息实在太少，几乎不可能完成复杂的生命活动。那如果是3个，5个，10个呢？比如，我们使用氨基酸在不同蛋白质二级结构中的偏好性来约化20种氨基酸构成的蛋白质字母表。下图这个蛋白质，通过氨基酸约化分析，它的三维结构与二级结构有极高的匹配度。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvRkdkZDNRRVZzZGxZLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>另外，氨基酸字母表的大小直接决定motif序列的复杂性和多样性。Motif 序列是一类蛋白质共有的一段氨基酸序列，也就是说这个 Motif 序列是这类蛋白质所共享的。比如，常见的是转录因子的结合位点，蛋白质的结合位点等等。总的来说，氨基酸序列logo作为蛋白质序列保守度的可视化图形，对研究同源蛋白质的系统发育和功能差异，以及蛋白质定向分子设计具有非常重要的意义。</p><p>但是，传统的 Motif Logo 包括了20种氨基酸字母，显示出极大地复杂性和多样性。由于在 Logo 生成过程中缺少对氨基酸性质等生物学因素的考虑，往往会导致对蛋白质功能进化保守性的评估出现偏差，引入冗余信息掩盖关键氨基酸序列信息。利用氨基酸约化分析的不同方案去应用到 motif 的可视化中就可以很好的解决这个问题。基于约化氨基酸的信息学 Motif logo 具有更多的信息学和生物学意义，更好的反映了蛋白序列的功能保守性。</p><h3 id="二、氨基酸约化-Motif"><a href="#二、氨基酸约化-Motif" class="headerlink" title="二、氨基酸约化 Motif"></a>二、氨基酸约化 Motif</h3><p>我们通过一个工具 RaacLogo 来完成约化 Motif 的构建，网址：<a href="http://bioinfor.imu.edu.cn/raaclogo">http://bioinfor.imu.edu.cn/raaclogo</a> 。</p><p>这里包含了40多种聚类算法和74种约化后的氨基酸字母，这些字母被提取生成673个约化的氨基酸簇(RAACs)，用于简化复杂的logo字母。当20个氨基酸按照一定的相似性聚类到更小的字母表中，蛋白质的复杂性就会大大降低，减少了信息冗余，相应的一些功能保守区域将被更清晰地显示出来。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvaThsUGRyMmt2cFIyLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>我们拿溶菌酶C（Lysozyme C，LYC）来获取约化氨基酸 Motif。这种酶具有溶菌作用，而且从鸡到人无处不在。首先收集从鸡到人的21个溶菌酶C比对序列，网站默认提供这个比对序列。然后，选择约化方案（极性&#x2F;中性&#x2F;疏水性，RKEDQN，GASTPHY，CLVIMFW），经过 RaacLogo 处理的 Motif 会非常整洁和简单，可以反映出高度的序列同源性。下面是详细步骤：</p><p><strong>1.首先输入已经对比好的序列</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvZjB2MEs2TWlSMGQ4LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>2.选择一个氨基酸约化方案</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcva01SREdxQnh3QWNMLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>3.点击 <code>Submit</code> 提交任务</strong></p><p><strong>4.我们选择其中一个方案</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvb21OakI3VERCdEY5LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>5.生成三种 Logo</strong></p><p>原生氨基酸Motif，通过颜色和字母显示约化 Motif，通过颜色显示约化 Motif，可以通过右上角的导出相应的图片。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvOWZKRFBPamN2c1g5LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>可以看到，尽管LYC的氨基酸编码在从鸡到人的进化过程中发生了很大的变化，但我们可以看到，LYC的整体氨基酸特性在约化后仍保持不变，并且LYC的同源功能得以维持。</p><h3 id="三、基于氨基酸约化提取特征"><a href="#三、基于氨基酸约化提取特征" class="headerlink" title="三、基于氨基酸约化提取特征"></a>三、基于氨基酸约化提取特征</h3><p>另一个应用是基于目前如火如荼的机器学习，我们都知道，做机器学习最关键的步骤就是特征提取。通过约化氨基酸来做特征提取，不仅可以减少过拟合的机会，而且会极大地降低计算维度，去除冗余信息。从而利用这些特征来做蛋白质的分类与预测。</p><p><strong>1.进入网站 RaacBook</strong></p><p><a href="http://bioinfor.imu.edu.cn/raacbook">http://bioinfor.imu.edu.cn/raacbook</a> </p><p>选择 <code>Analysis</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvT0NMRUQ0Y0F5Y2ZQLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>2.输入整理好的数据集</strong></p><p>比如，预测是否为分泌蛋白质，就需要整理好分泌蛋白的数据集与非分泌蛋白的数据集。以 Fasta 的格式导入输入框。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvRnJlTkVGTk9VdFN0LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>3.选择约化方案</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvVU5tZGswTE5MWGEzLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>4.到了这一步可以选择默认参数提交，得到结果</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvZHdHMjBvYjlIUktpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>5.我们的特征在<code>Download</code>下</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvUHd2VUptTVdHcE45LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>6.如果你熟悉机器学习，利用这个序列就可以来做蛋白质分类器</strong></p><p>但是，如果不熟悉也没关系，RaacBook 也提供了自动化的流程，完成蛋白质分类器的训练。</p><h3 id="四、基于氨基酸约化训练模型"><a href="#四、基于氨基酸约化训练模型" class="headerlink" title="四、基于氨基酸约化训练模型"></a>四、基于氨基酸约化训练模型</h3><p><strong>1.进入网站 RaacBook</strong></p><p><a href="http://bioinfor.imu.edu.cn/raacbook">http://bioinfor.imu.edu.cn/raacbook</a> </p><p>选择 <code>Machine learning</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvY1BobzZPMXozVnBGLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>2.提供两个数据集</strong></p><p>这两个数据集，可以是任意两种蛋白质序列。比如，和之前一样去预测是否为分泌蛋白质，就需要整理好分泌蛋白的数据集与非分泌蛋白的两个数据集，然后以 Fasta 的格式上传。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvaXZMaUw4aHIwUUlyLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>3.选择参数</strong></p><p>K-tuple：也叫K-mer，也就是说K个氨基酸作为一个整体做特征</p><p>Type：也就是分类方案</p><p>Method：机器学习方法，有KNN，SVM，RF，目前该工具正在更新更多的方法<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvODczSFB6SUduUUtQLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>4.提交拿结果</strong></p><p>会拿到训练的ROC曲线，这个结果的好坏取决于之前选择的参数。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvWXZZQ3hCYzNEU3hsLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>5.下载训练结果</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvaXhIS3YyclFxUmN5LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p><strong>6.拿到模型就可以去预测未知的序列</strong></p><p>我们拿一个预测器来试试，比如防御素蛋白的预测器</p><p><a href="http://bioinfor.imu.edu.cn/idpf">http://bioinfor.imu.edu.cn/idpf</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvREpnMDdrNlJOc3NrLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>输入一段序列，我们去预测蛋白质<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvd2RUNEFISk9EZENPLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>查看结果</p><p>可以看到，这几段序列会有不同的打分值，如果一个标签的占比高，就意味着这段序列极有可能是这个标签。比如，Psd1 这段序列就是植物中的一种防御素蛋白。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvWXV0WWZ2b2hlNTN6LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><h3 id="五、模型自动训练的扩展"><a href="#五、模型自动训练的扩展" class="headerlink" title="五、模型自动训练的扩展"></a>五、模型自动训练的扩展</h3><p>机器学习中模型训练会消耗大量的硬件资源和时间，因此现在开发该工具的团队正在提供可以在本地运行的自动训练，以 Python 包的形式来使用与 RaacBook 类似的功能，敬请期待。先看看目前的进展图：</p><p>会提供更多的模型训练结果评估信息：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvamlwNFdkd2lqZVdBLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>筛选最优特征<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcvTGVZeldpWDVLWEU3LnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>ROC评估信息<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcva1I5TFBvV2ZOenpDLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>高维特征缩减和可视化<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MTcva0ttNDBDTlBnVW5PLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>总的来说，蛋白质氨基酸约化分析是对生命进化本质的探索，对于蛋白质合成、拓扑结构预测，功能预测分类以及药物设计等具有重要的意义。 </p><p>如果对氨基酸约化的研究方向感兴趣可以联系：</p><p>左永春教授：<a href="mailto:&#121;&#x63;&#x7a;&#x75;&#x6f;&#x40;&#105;&#109;&#117;&#46;&#101;&#x64;&#117;&#46;&#x63;&#110;">&#121;&#x63;&#x7a;&#x75;&#x6f;&#x40;&#105;&#109;&#117;&#46;&#101;&#x64;&#117;&#46;&#x63;&#110;</a> </p><p>郑磊博士：<a href="mailto:&#98;&#x61;&#x69;&#109;&#x6f;&#x63;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#98;&#x61;&#x69;&#109;&#x6f;&#x63;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> 蛋白质 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 特征提取 </tag>
            
            <tag> 氨基酸约化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Pycharm 中玩转 GitHub（图文详解）</title>
      <link href="/posts/7229/"/>
      <url>/posts/7229/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200603215938971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="一、Git-的诞生"><a href="#一、Git-的诞生" class="headerlink" title="一、Git 的诞生"></a>一、Git 的诞生</h3><p>在1991年，大佬 Linus 构建了开源操作系统，并命名为 Linux，随后带领全世界计算机爱好者逐渐完善系统 。这个系统可能有人陌生，有人熟系。Linux 几乎渗透到我们生活的方方面面，比如是大部分网站应用数据与服务的载体。包括手机的 Android 系统，车载系统，智能终端等等也是基于Linux内核完成。</p><p>Linux 在开发伊始，Linux 开源社区的人们通过将源代码文件通过 diff 的方式发送给 Linus 大佬，然后 Linus 使用多年的功力手工将这些代码整合到 Linus。但是，随着社区提供的代码越来越多，Linus 也扛不住了。</p><p>这时候，就需要一款工具可以将不同人，不同来源的代码整合到软件的主代码中。而且可以对源代码修改，删除等等改动一一记录，方便后续的调试和整合。这样做既可以提高工作效率，方便调试，同时也避免了人为错误导致软件的不稳定。总之，这款工具的使用对 Linux 的发展必不可少。</p><p>及时雨来自商业版本控制系统 BitKeeper，它向 Linus抛出了橄榄枝，允许 Linux 开发社区免费使用。但是，问题在于社区里都是计算机技术狂热者，这相当于给了饿了几天的人一个包子，说你不能吃肉馅，只能吃皮。于是，有人对这个控制系统产生了想法，Samba（Linux的文件共享和打印机通信协议）的开发者  Andrew 开始尝试破解 BitKeeper，尝尝肉馅是什么味。好景不长，BitKeeper 的开发公司 BitMover 发现了社区有人在破解他们的软件，而且还不止 Andrew 一人，于是公司看透了这群”绿林好汉”，在2005年 BitKeeper 收回了 Linux 社区的免费使用权。</p><p>没有了免费的版本控制系统，日子还得过，Linux 的代码量还在与日俱增，Linux 社区要给商业软件低头了吗？</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvVkkyZDd2UWlxZ3FmLnBuZw?x-oss-process=image/format,png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center" alt="mark"></p><p>事实是，并没有。</p><p>2005 年，Linus 为了解决这一问题，他自己花了两周时间开发了一个分布式版本控制系统 Git，你没有看错是两周时间，大佬的世界我不懂。</p><p>一个月后，Git 完成 Linux 系统源码接管任务，随后 Git 迅速在开源社区间流行。</p><h3 id="二、GitHub-的出生"><a href="#二、GitHub-的出生" class="headerlink" title="二、GitHub 的出生"></a>二、GitHub 的出生</h3><p> Git 可以在本地执行，但是这只是你一个人在玩代码。如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><p> 2008年， GitHub 应运而生，它为每个人提供了远程仓库，并且提供了相应的社区化服务。 </p><p>GitHub的上线为开源项目提供了立足之地，我们熟系的 JQuery，PHP 等开源项目开始从独立的社区迁移到 GitHub。而正如 Apache 开源基金会所提倡的先社区而后代码，一个强有力的社区能使一款有潜力的软件持续的向好发展。 </p><p>其实，我们现在看生信文献的时候，只有涉及到生信软件发布，数据流程处理，在线软件等等与编程相关的上线项目都会首先发布在GitHub，并提供 GitHub 克隆地址。</p><p>2018年，微软宣布以 75 亿美元收购 GitHub。</p><p>2019年，GitHub 宣布开发者可以免费最多四人协作的私人仓库。这一权限的开放，使得我们大部分的实验人员都可以更好的加入 GitHub 社区，完成多人协作任务。</p><p>历史的拐点就是这么神奇，如果没有 Andrew 的破解，BitKeeper的愤怒，Linus 也不会创造出 Git，也更不会有现在免费的 GitHub。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvYXVOVmhwMFJJRUlXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="三、GitHub和Git-对我们来说有什么用？"><a href="#三、GitHub和Git-对我们来说有什么用？" class="headerlink" title="三、GitHub和Git 对我们来说有什么用？"></a>三、GitHub和Git 对我们来说有什么用？</h3><p>从上面的故事可以看出，Git 和 GitHub 要解决的是多人协作完成不同地点，不同时间提交源码并整合到最终项目的问题。总结下：</p><ul><li>版本管理：通过使用快照等方式，可以将你的代码修改可以提交到 Git 库。只要提交，全部的数据就会被记录一个版本，而且Git很难执行不可逆操作，这就意味着只要提交，数据想丢都难。</li><li>协同修改：多人并行不悖的修改服务器端的同一个文件，数据备份 </li><li>文件状态：不仅保存目录和文件的当前状态， 还能够保存每一个提交过的历史状态，很赞的功能就是，可以将历史代码回溯到某个时间点的状态。</li><li>权限控制：团队中每个人对文件具有不同权限，也可以接受非团队合并源码</li><li>分支管理：将不同来源，功能整合与主要代码中，允许开发团队在工作过程中多条生产线同时推进任务， 进一步提高效率 </li><li>分布式：同一个Git仓库，可以分布到不同的机器上，这就意味着代码可以在云端和本地都有一套完整的仓库，除了离线使用的便利，提高了执行速度，多个拷贝也提高了数据安全性。</li></ul><p>接下来我们完成 Git，GitHub 在 Pycharm 的安装：</p><h3 id="四、安装-Git"><a href="#四、安装-Git" class="headerlink" title="四、安装 Git"></a>四、安装 Git</h3><p><strong>CentOS</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo yum install git-all<br>git --version<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvNGRRejdRVXZVc1FILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>Ubuntu</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo apt-get install git<br></code></pre></td></tr></table></figure><p><strong>Windows</strong></p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvaG1KV29pd0NBSjkxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="五、本地-Git-关联-GitHub-远程仓库"><a href="#五、本地-Git-关联-GitHub-远程仓库" class="headerlink" title="五、本地 Git 关联 GitHub 远程仓库"></a>五、本地 Git 关联 GitHub 远程仓库</h3><p>1.生成秘钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ssh-keygen -t rsa -C "XXXX@XXX.com"<br></code></pre></td></tr></table></figure><ul><li>第一步确定秘钥生成目录，直接回车</li><li>第二三步输入密码</li><li>秘钥生成后，进入秘钥目录，比如我的为<code>/c/Users/baimo/.ssh/id_rsa</code>，复制备用</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvTUNiNTF1bkM2VVBnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.进入 GitHub <a href="https://www.github.com/">https://www.github.com</a>，打开<code>设置</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvVmdZMUhES2xvUkRPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.新建一个 SSH key<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvc2JpTVEzdFhlNXJCLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.填写 SSH key<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvejh2SUw5Rk5iUThkLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.新建 GitHub 仓库<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvV085bFEyaHM3bUNELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.填写信息，创建 GitHub 仓库<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvOW95N3ZLNk5uYjd2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.完成后你的仓库后，类似这样，红框为 git 地址<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvaHlrSEg3T0NXTjJxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>8.将 GitHub 仓库与我们本地的 Git 仓库进行关联</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">git remote add origin https://github.com/qqdb/example01.git<br></code></pre></td></tr></table></figure><blockquote><p>origin 后的 url 就是 GitHub 仓库地址，在上一步中获取</p></blockquote><p>9.将本地 Git 仓库提交到 GitHub 远程仓库</p><p>第一次提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">git push -u origin master<br></code></pre></td></tr></table></figure><p>之后提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">git push origin master<br></code></pre></td></tr></table></figure><blockquote><p>如果报错：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvbVY4S2g5QUZDR3BqLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">git push -f origin master<br></code></pre></td></tr></table></figure><p>这是一种强制上传方案，第一次可以使用，今后不建议使用。因为这条命令会直接覆盖远程仓库的版本信息。</p></blockquote><h3 id="六、推送本地仓库到-GitHub"><a href="#六、推送本地仓库到-GitHub" class="headerlink" title="六、推送本地仓库到 GitHub"></a>六、推送本地仓库到 GitHub</h3><p>1.进入设置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvU0ducUZVc1NMTGtlLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.登录 GitHub 账号<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvSzY1bm9Qa1BGUktFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.配置 Git<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvcFlGU3JLY29yOGJGLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.使用<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvazFlclFuVng4dGlpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.配置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvbVBVWVRwMDNpeFV3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.上传，这里一般会全部上传到GitHub，如果有大文件可以考虑取消勾选。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvR0FDb0lNQ0Zid2RSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.上传成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvSjB0TTlza1ZxZlA5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="七、将-GitHub-仓库克隆到本地"><a href="#七、将-GitHub-仓库克隆到本地" class="headerlink" title="七、将 GitHub 仓库克隆到本地"></a>七、将 GitHub 仓库克隆到本地</h3><p>1.进入配置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvdGIyRGcxS1VkeEhiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.克隆项目</p><p>克隆自己的项目<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvTzhrdkpKZ0NmRjZ3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>克隆大佬的项目<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvS0ppYk9FRDlreW44LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>完成后会有读条<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvME84MUZ1QkJQZEQ5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.从 Pycharm 中查看 Github<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvcHR1RmM5amFIdGlxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.一般的 Git 操作<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvVDczbVNhb1M3Y0ZvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="八、参与-GitHub-项目"><a href="#八、参与-GitHub-项目" class="headerlink" title="八、参与 GitHub 项目"></a>八、参与 GitHub 项目</h3><p>1.Fork 一个项目</p><blockquote><p><code>Fork</code>是GitHub存储库的副本，可在不影响原始项目的情况下更改代码。</p></blockquote><p>比如，<a href="https://github.com/scikit-learn/scikit-learn">https://github.com/scikit-learn/scikit-learn</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvUGFsM2hmeVZZOUY4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.进入 Pycharm 的版本控制界面<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvdGIyRGcxS1VkeEhiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.克隆大佬项目<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvZ092eElTdHhvUVhQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>等进度条跑完<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvTzNjRjloZmM3Uk1sLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们会得到项目的仓库<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvM2ZibFBkZnpsT2FuLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.查看项目参与者的操作日志<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvOTNWcWVPaDlUQnVYLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.项目参与者创建<code>pull</code>请求<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvc1lkYVBXekxwc3JKLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>填写<code>pull</code>请求<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvTUJHSncwZ3BiZnZULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>项目的维护者管理<code>pull</code>请求<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvZkFQZ3R3MjBNM1NULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>查看<code>pull</code>请求信息<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjMvTlJPZ3A2V0xXTWV3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>Git 和 GitHub 的使用方法远远不止这些，更多技巧稍后更新。</p><p><a href="https://zhuanlan.zhihu.com/p/140485845">白墨：搭建 Python 高效开发环境： Pycharm + Anaconda</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105155581">Pycharm 中安装及使用 Jupyter （图文详解）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105068542">如何在 Pycharm 中高效使用 R 语言 （图文详解）</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST框架 | 封装_Respose 类</title>
      <link href="/posts/35713/"/>
      <url>/posts/35713/</url>
      
        <content type="html"><![CDATA[<h2 id="一、封装"><a href="#一、封装" class="headerlink" title="一、封装"></a>一、封装</h2><p>可以发现在给客户端返回数据都有固定的格式，比如 json。我们为了减少重复代码，重写Response 类</p><p><code>utils/response.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIResponse</span>(<span class="hljs-title class_ inherited__">Response</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data_status=<span class="hljs-number">0</span>, data_msg=<span class="hljs-string">&#x27;ok&#x27;</span>, results=<span class="hljs-literal">None</span>, http_status=<span class="hljs-literal">None</span>, headers=<span class="hljs-literal">None</span>, exception=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                 **kwargs</span>):<br>        <span class="hljs-comment"># data 的初始状态：状态码与状态信息</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: data_status,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: data_msg,<br>        &#125;<br>        <span class="hljs-comment"># data 的响应数据体</span><br>        <span class="hljs-keyword">if</span> results <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            data[<span class="hljs-string">&#x27;results&#x27;</span>] = results<br>        <span class="hljs-comment"># data 响应的其他内容</span><br>        data.update(kwargs)<br>        <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIResponse</span>(<span class="hljs-title class_ inherited__">Response</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data_status=<span class="hljs-number">0</span>, data_msg=<span class="hljs-string">&#x27;ok&#x27;</span>, results=<span class="hljs-literal">None</span>, http_status=<span class="hljs-literal">None</span>, headers=<span class="hljs-literal">None</span>, exception=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                 **kwargs</span>):<br>        <span class="hljs-comment"># data 的初始状态：状态码与状态信息</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: data_status,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: data_msg,<br>        &#125;<br>        <span class="hljs-comment"># data 的响应数据体</span><br>        <span class="hljs-keyword">if</span> results <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            data[<span class="hljs-string">&#x27;results&#x27;</span>] = results<br>        <span class="hljs-comment"># data 响应的其他内容</span><br>        data.update(kwargs)<br>        <span class="hljs-built_in">super</span>().__init__(data=data, status=http_status, headers=headers,<br>                 exception=exception)<br></code></pre></td></tr></table></figure><h2 id="二、调用"><a href="#二、调用" class="headerlink" title="二、调用"></a>二、调用</h2><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookV2</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(request_data, <span class="hljs-built_in">dict</span>):<br>            pks = [pk]<br>            request_data = [request_data]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> pk <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(request_data, <span class="hljs-built_in">list</span>):<br>            pks = []<br>            <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> request_data:<br>                pk = dic.pop(<span class="hljs-string">&#x27;pk&#x27;</span>, <span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> pk:<br>                    pks.append(pk)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;list data error&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;data error&#x27;</span>)<br>        pks_objs = []<br>        new_request_data = []<br>        <span class="hljs-keyword">for</span> index, pk <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pks):<br>            <span class="hljs-keyword">try</span>:<br>                obj = models.Book.objects.get(pk=pk, is_delete=<span class="hljs-literal">False</span>)<br>                pks_objs.append(obj)<br>                new_request_data.append(request_data[index])<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">continue</span><br><br>        book_ser = serializers.BookV2ModelSerializer(instance=pks_objs, data=new_request_data, partial=<span class="hljs-literal">True</span>, many=<span class="hljs-literal">True</span>)<br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_objs = book_ser.save()<br><br>        book_objs_data = serializers.BookV2ModelSerializer(book_objs, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> APIResponse(results=book_objs_data, http_status=<span class="hljs-number">201</span>, token=<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookV2</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(request_data, <span class="hljs-built_in">dict</span>):<br>            pks = [pk]<br>            request_data = [request_data]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> pk <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(request_data, <span class="hljs-built_in">list</span>):<br>            pks = []<br>            <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> request_data:<br>                pk = dic.pop(<span class="hljs-string">&#x27;pk&#x27;</span>, <span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">if</span> pk:<br>                    pks.append(pk)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;list data error&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;data error&#x27;</span>)<br>        pks_objs = []<br>        new_request_data = []<br>        <span class="hljs-keyword">for</span> index, pk <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pks):<br>            <span class="hljs-keyword">try</span>:<br>                obj = models.Book.objects.get(pk=pk, is_delete=<span class="hljs-literal">False</span>)<br>                pks_objs.append(obj)<br>                new_request_data.append(request_data[index])<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">continue</span><br><br>        book_ser = serializers.BookV2ModelSerializer(instance=pks_objs, data=new_request_data, partial=<span class="hljs-literal">True</span>, many=<span class="hljs-literal">True</span>)<br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_objs = book_ser.save()<br><br>        book_objs_data = serializers.BookV2ModelSerializer(book_objs, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> APIResponse(results=book_objs_data, http_status=<span class="hljs-number">201</span>, token=<span class="hljs-string">"mytoken"</span>)<br></code></pre></td></tr></table></figure><h2 id="三、测试接口"><a href="#三、测试接口" class="headerlink" title="三、测试接口"></a>三、测试接口</h2><p>正常返回</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTgvbXJPc1F3ZThrcEdjLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>list error</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTgvQWNRVXBFd01ob2lrLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>data error</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTgvS003QTJsakoxbDBlLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 10 | 频率认证组件</title>
      <link href="/posts/8145/"/>
      <url>/posts/8145/</url>
      
        <content type="html"><![CDATA[<h2 id="一、频率组件"><a href="#一、频率组件" class="headerlink" title="一、频率组件"></a>一、频率组件</h2><p>通过分析源码了解频率认证组件的方法调用过程</p><p>APIView 的 dispatch 中使用 initial 方法实现初始化并进行三大认证，第三步进行权限组件调用</p><p><code>rest_framework/views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 定义默认频率类</span><br>    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)    <br>    <br>    <span class="hljs-comment"># 频率认证</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_throttles</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 频率间隔时间</span><br>        throttle_durations = []<br>        <span class="hljs-keyword">for</span> throttle <span class="hljs-keyword">in</span> self.get_throttles():<br>            <span class="hljs-comment"># 是否限次</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> throttle.allow_request(request, self):<br>                <span class="hljs-comment"># 被限次后，还需等待多长时间才能访问</span><br>                throttle_durations.append(throttle.wait())<br><br>        <span class="hljs-comment"># throttle_durations 非空，被加入等待时间，调用下面方法</span><br>        <span class="hljs-keyword">if</span> throttle_durations:<br>            durations = [<br>                duration <span class="hljs-keyword">for</span> duration <span class="hljs-keyword">in</span> throttle_durations<br>                <span class="hljs-keyword">if</span> duration <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br>            ]<br><br>            duration = <span class="hljs-built_in">max</span>(durations, default=<span class="hljs-literal">None</span>)<br>            self.throttled(request, duration)<br>                <br>    <span class="hljs-comment"># 获取频率</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_throttles</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-comment"># 由频率类 throttle_classes 定义</span><br>        <span class="hljs-keyword">return</span> [throttle() <span class="hljs-keyword">for</span> throttle <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 定义默认频率类</span><br>    throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)    <br>    <br>    <span class="hljs-comment"># 频率认证</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_throttles</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 频率间隔时间</span><br>        throttle_durations = []<br>        <span class="hljs-keyword">for</span> throttle <span class="hljs-keyword">in</span> self.get_throttles():<br>            <span class="hljs-comment"># 是否限次</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> throttle.allow_request(request, self):<br>                <span class="hljs-comment"># 被限次后，还需等待多长时间才能访问</span><br>                throttle_durations.append(throttle.wait())<br><br>        <span class="hljs-comment"># throttle_durations 非空，被加入等待时间，调用下面方法</span><br>        <span class="hljs-keyword">if</span> throttle_durations:<br>            durations = [<br>                duration <span class="hljs-keyword">for</span> duration <span class="hljs-keyword">in</span> throttle_durations<br>                <span class="hljs-keyword">if</span> duration <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br>            ]<br><br>            duration = <span class="hljs-built_in">max</span>(durations, default=<span class="hljs-literal">None</span>)<br>            self.throttled(request, duration)<br>                <br>    <span class="hljs-comment"># 获取频率</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_throttles</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-comment"># 由频率类 throttle_classes 定义</span><br>        <span class="hljs-keyword">return</span> [throttle() <span class="hljs-keyword">for</span> throttle <span class="hljs-keyword">in</span> self.throttle_classes]<br></code></pre></td></tr></table></figure><p>在 drf 设置文件查看默认权限配置</p><p>可以看到默认设置中并没有对访问频率做限制，也就是说可以无限次访问</p><p><code>rest_framework/settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 默认频率类配置</span><br>DEFAULTS = &#123;<br>    <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 默认频率类配置</span><br>DEFAULTS = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [],<br>&#125;<br></code></pre></td></tr></table></figure><p>详细看drf的默认频次类</p><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseThrottle</span>:<br><span class="hljs-comment"># 判断是否限次</span><br>    <span class="hljs-comment"># 无限次：返回True</span><br>    <span class="hljs-comment"># 限次：返回 False</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">allow_request</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 如果继承，必须重新</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&#x27;.allow_request() must be overridden&#x27;</span>)<br><br>    <span class="hljs-comment"># 定义访问频率</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ident</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span><br><span class="hljs-string">        if present and number of proxies is &gt; 0. If not use all of</span><br><span class="hljs-string">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        xff = request.META.get(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)<br>        remote_addr = request.META.get(<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>)<br>        num_proxies = api_settings.NUM_PROXIES<br><br>        <span class="hljs-keyword">if</span> num_proxies <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> num_proxies == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xff <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> remote_addr<br>            addrs = xff.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            client_addr = addrs[-<span class="hljs-built_in">min</span>(num_proxies, <span class="hljs-built_in">len</span>(addrs))]<br>            <span class="hljs-keyword">return</span> client_addr.strip()<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(xff.split()) <span class="hljs-keyword">if</span> xff <span class="hljs-keyword">else</span> remote_addr<br><br>    <span class="hljs-comment"># 如果被限次，还需要等待多长时间才能再访问</span><br>    <span class="hljs-comment"># 返回等待时间</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wait</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRateThrottle</span>(<span class="hljs-title class_ inherited__">BaseThrottle</span>):<br>    cache = default_cache<br>    timer = time.time<br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br>    scope = <span class="hljs-literal">None</span><br>    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES<br><br>    <span class="hljs-comment"># </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;rate&#x27;</span>, <span class="hljs-literal">None</span>):<br>            self.rate = self.get_rate()<br>        self.num_requests, self.duration = self.parse_rate(self.rate)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Should return a unique cache-key which can be used for throttling.</span><br><span class="hljs-string">        Must be overridden.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        May return `None` if the request should not be throttled.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&#x27;.get_cache_key() must be overridden&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Determine the string representation of the allowed request rate.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;scope&#x27;</span>, <span class="hljs-literal">None</span>):<br>            msg = (<span class="hljs-string">&quot;You must set either `.scope` or `.rate` for &#x27;%s&#x27; throttle&quot;</span> %<br>                   self.__class__.__name__)<br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(msg)<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self.THROTTLE_RATES[self.scope]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            msg = <span class="hljs-string">&quot;No default throttle rate set for &#x27;%s&#x27; scope&quot;</span> % self.scope<br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(msg)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_rate</span>(<span class="hljs-params">self, rate</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Given the request rate string, return a two tuple of:</span><br><span class="hljs-string">        &lt;allowed number of requests&gt;, &lt;period of time in seconds&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> rate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>        num, period = rate.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        num_requests = <span class="hljs-built_in">int</span>(num)<br>        duration = &#123;<span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;m&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;h&#x27;</span>: <span class="hljs-number">3600</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">86400</span>&#125;[period[<span class="hljs-number">0</span>]]<br>        <span class="hljs-keyword">return</span> (num_requests, duration)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">allow_request</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 如果是 None，无限次访问</span><br>        <span class="hljs-keyword">if</span> self.rate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        self.key = self.get_cache_key(request, view)<br>        <span class="hljs-keyword">if</span> self.key <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        self.history = self.cache.get(self.key, [])<br>        self.now = self.timer()<br><br>        <span class="hljs-comment"># 减少次数</span><br>        <span class="hljs-keyword">while</span> self.history <span class="hljs-keyword">and</span> self.history[-<span class="hljs-number">1</span>] &lt;= self.now - self.duration:<br>            self.history.pop()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.history) &gt;= self.num_requests:<br>            <span class="hljs-keyword">return</span> self.throttle_failure()<br>        <span class="hljs-keyword">return</span> self.throttle_success()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_success</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 访问成功，记录次数</span><br>        self.history.insert(<span class="hljs-number">0</span>, self.now)<br>        self.cache.<span class="hljs-built_in">set</span>(self.key, self.history, self.duration)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Called when a request to the API has failed due to throttling.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wait</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the recommended next request time in seconds.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.history:<br>            remaining_duration = self.duration - (self.now - self.history[-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            remaining_duration = self.duration<br><br>        available_requests = self.num_requests - <span class="hljs-built_in">len</span>(self.history) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> available_requests &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">return</span> remaining_duration / <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseThrottle</span>:<br><span class="hljs-comment"># 判断是否限次</span><br>    <span class="hljs-comment"># 无限次：返回True</span><br>    <span class="hljs-comment"># 限次：返回 False</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">allow_request</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 如果继承，必须重新</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&#x27;.allow_request() must be overridden&#x27;</span>)<br><br>    <span class="hljs-comment"># 定义访问频率</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ident</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span><br><span class="hljs-string">        if present and number of proxies is &gt; 0. If not use all of</span><br><span class="hljs-string">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        xff = request.META.get(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)<br>        remote_addr = request.META.get(<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>)<br>        num_proxies = api_settings.NUM_PROXIES<br><br>        <span class="hljs-keyword">if</span> num_proxies <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> num_proxies == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xff <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> remote_addr<br>            addrs = xff.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            client_addr = addrs[-<span class="hljs-built_in">min</span>(num_proxies, <span class="hljs-built_in">len</span>(addrs))]<br>            <span class="hljs-keyword">return</span> client_addr.strip()<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(xff.split()) <span class="hljs-keyword">if</span> xff <span class="hljs-keyword">else</span> remote_addr<br><br>    <span class="hljs-comment"># 如果被限次，还需要等待多长时间才能再访问</span><br>    <span class="hljs-comment"># 返回等待时间</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wait</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRateThrottle</span>(<span class="hljs-title class_ inherited__">BaseThrottle</span>):<br>    cache = default_cache<br>    timer = time.time<br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br>    scope = <span class="hljs-literal">None</span><br>    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES<br><br>    <span class="hljs-comment"># </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;rate&#x27;</span>, <span class="hljs-literal">None</span>):<br>            self.rate = self.get_rate()<br>        self.num_requests, self.duration = self.parse_rate(self.rate)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Should return a unique cache-key which can be used for throttling.</span><br><span class="hljs-string">        Must be overridden.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        May return `None` if the request should not be throttled.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&#x27;.get_cache_key() must be overridden&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Determine the string representation of the allowed request rate.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;scope&#x27;</span>, <span class="hljs-literal">None</span>):<br>            msg = (<span class="hljs-string">&quot;You must set either `.scope` or `.rate` for &#x27;%s&#x27; throttle&quot;</span> %<br>                   self.__class__.__name__)<br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(msg)<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self.THROTTLE_RATES[self.scope]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            msg = <span class="hljs-string">&quot;No default throttle rate set for &#x27;%s&#x27; scope&quot;</span> % self.scope<br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(msg)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_rate</span>(<span class="hljs-params">self, rate</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Given the request rate string, return a two tuple of:</span><br><span class="hljs-string">        &lt;allowed number of requests&gt;, &lt;period of time in seconds&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> rate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>        num, period = rate.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        num_requests = <span class="hljs-built_in">int</span>(num)<br>        duration = &#123;<span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;m&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;h&#x27;</span>: <span class="hljs-number">3600</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">86400</span>&#125;[period[<span class="hljs-number">0</span>]]<br>        <span class="hljs-keyword">return</span> (num_requests, duration)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">allow_request</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 如果是 None，无限次访问</span><br>        <span class="hljs-keyword">if</span> self.rate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        self.key = self.get_cache_key(request, view)<br>        <span class="hljs-keyword">if</span> self.key <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        self.history = self.cache.get(self.key, [])<br>        self.now = self.timer()<br><br>        <span class="hljs-comment"># 减少次数</span><br>        <span class="hljs-keyword">while</span> self.history <span class="hljs-keyword">and</span> self.history[-<span class="hljs-number">1</span>] &lt;= self.now - self.duration:<br>            self.history.pop()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.history) &gt;= self.num_requests:<br>            <span class="hljs-keyword">return</span> self.throttle_failure()<br>        <span class="hljs-keyword">return</span> self.throttle_success()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_success</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 访问成功，记录次数</span><br>        self.history.insert(<span class="hljs-number">0</span>, self.now)<br>        self.cache.<span class="hljs-built_in">set</span>(self.key, self.history, self.duration)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Called when a request to the API has failed due to throttling.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wait</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the recommended next request time in seconds.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.history:<br>            remaining_duration = self.duration - (self.now - self.history[-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            remaining_duration = self.duration<br><br>        available_requests = self.num_requests - <span class="hljs-built_in">len</span>(self.history) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> available_requests &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">return</span> remaining_duration / <span class="hljs-built_in">float</span>(available_requests)<br><br></code></pre></td></tr></table></figure><h2 id="二、自定义频率类"><a href="#二、自定义频率类" class="headerlink" title="二、自定义频率类"></a>二、自定义频率类</h2><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1. 代码实现"></a>1. 代码实现</h4><ul><li><p>继承 SimpleRateThrottle</p></li><li><p>设置 scope 类属性，属性值为任意见名知意的字符串</p></li><li><p>在 settings 配置中，配置drf的DEFAULT_THROTTLE_RATES，格式为 {scope: ‘次数&#x2F;时间’}</p></li><li><p>在自定义频率类中重写 get_cache_key 方法</p><ul><li>限制的对象返回：与限制信息有关的字符串</li><li>不限制的对象返回： None</li></ul></li><li><p>实现根据自定义权限规则，确定是否有权限</p></li><li><p>进行全局或局部配置</p><ul><li>全局：配置文件 settings.py</li><li>局部：在视图类 import</li></ul></li><li><p>测试接口：前台在请求头携带认证信息，且默认规范用 Authorization 字段携带认证信息</p></li></ul><p><code>throttles.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<br><br><br><span class="hljs-comment"># 短信频率限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSRateThrottle</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    scope = <span class="hljs-string">&#x27;sms&#x27;</span><br><br>    <span class="hljs-comment"># 只对提交手机号的 get 方法进行限制</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        mobile = request.query_params.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(mobile)<br>        <span class="hljs-comment"># 没有手机号，不做频率限制</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> mobile:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 返回可以根据手机号动态变化，且不易重复的字符串，作为操作缓存的 key</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;throttle_<span class="hljs-subst">&#123;self.scope&#125;</span>_<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<br><br><br><span class="hljs-comment"># 短信频率限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSRateThrottle</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    scope = <span class="hljs-string">&#x27;sms&#x27;</span><br><br>    <span class="hljs-comment"># 只对提交手机号的 get 方法进行限制</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        mobile = request.query_params.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(mobile)<br>        <span class="hljs-comment"># 没有手机号，不做频率限制</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> mobile:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># 返回可以根据手机号动态变化，且不易重复的字符串，作为操作缓存的 key</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;throttle_<span class="hljs-subst">&#123;self.scope&#125;</span>_<span class="hljs-subst">&#123;mobile&#125;</span>&#x27;</span><br><br></code></pre></td></tr></table></figure><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 配置频率限制条件</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;3/min&#x27;</span>, <span class="hljs-comment"># 用户 一分钟可访问三次</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-comment"># 游客无限制</span><br>        <span class="hljs-string">&#x27;sms&#x27;</span>: <span class="hljs-string">&#x27;1/min&#x27;</span> <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 配置频率限制条件</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;3/min&#x27;</span>, <span class="hljs-comment"># 用户 一分钟可访问三次</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-comment"># 游客无限制</span><br>        <span class="hljs-string">&#x27;sms&#x27;</span>: <span class="hljs-string">&#x27;1/min&#x27;</span> <span class="hljs-comment"># sms 一分钟可访问一次</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> api.throttles <span class="hljs-keyword">import</span> SMSRateThrottle<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    throttle_classes = [SMSRateThrottle]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Verification code successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> api.throttles <span class="hljs-keyword">import</span> SMSRateThrottle<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SMSAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    throttle_classes = [SMSRateThrottle]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Verification code successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Verification code successful&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^sms/$&#x27;</span>, views.SMSAPIView.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-接口测试"><a href="#2-接口测试" class="headerlink" title="2. 接口测试"></a>2. 接口测试</h4><p>第一次调用<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvVXQ5amJOM0tQSTJRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>调用一次后，第二次返回<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvYjRWZFk4OFU2WVFCLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 网站 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 09 | 权限组件</title>
      <link href="/posts/16334/"/>
      <url>/posts/16334/</url>
      
        <content type="html"><![CDATA[<h2 id="一、权限组件"><a href="#一、权限组件" class="headerlink" title="一、权限组件"></a>一、权限组件</h2><h4 id="1-分析源码"><a href="#1-分析源码" class="headerlink" title="1. 分析源码"></a>1. 分析源码</h4><p>通过分析源码了解权限组件的方法调用过程</p><p>APIView 的 dispatch 中使用 initial 方法实现初始化并进行三大认证，第二步进行权限组件调用</p><p><code>rest_framework/views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 定义默认权限类</span><br>    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)    <br>    <br>    <span class="hljs-comment"># 权限认证</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_permissions</span>(<span class="hljs-params">self, request</span>):        <br>       <span class="hljs-comment"># 遍历权限对象列表得到一堆权限器，进行权限认证</span><br>        <span class="hljs-keyword">for</span> permission <span class="hljs-keyword">in</span> self.get_permissions():<br>            <span class="hljs-comment"># 权限类 has_permission 做权限认证</span><br>            <span class="hljs-comment"># 参数：权限对象self，请求对象request，视图类对象</span><br>            <span class="hljs-comment"># 返回值：有权限返回 True，无权限返回 False</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> permission.has_permission(request, self):<br>                self.permission_denied(<br>                    request, message=<span class="hljs-built_in">getattr</span>(permission, <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-literal">None</span>)<br>                )<br>                <br>     <span class="hljs-comment"># 获取权限</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_permissions</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 由权限类定义</span><br>        <span class="hljs-keyword">return</span> [permission() <span class="hljs-keyword">for</span> permission <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 定义默认权限类</span><br>    permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)    <br>    <br>    <span class="hljs-comment"># 权限认证</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_permissions</span>(<span class="hljs-params">self, request</span>):        <br>       <span class="hljs-comment"># 遍历权限对象列表得到一堆权限器，进行权限认证</span><br>        <span class="hljs-keyword">for</span> permission <span class="hljs-keyword">in</span> self.get_permissions():<br>            <span class="hljs-comment"># 权限类 has_permission 做权限认证</span><br>            <span class="hljs-comment"># 参数：权限对象self，请求对象request，视图类对象</span><br>            <span class="hljs-comment"># 返回值：有权限返回 True，无权限返回 False</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> permission.has_permission(request, self):<br>                self.permission_denied(<br>                    request, message=<span class="hljs-built_in">getattr</span>(permission, <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-literal">None</span>)<br>                )<br>                <br>     <span class="hljs-comment"># 获取权限</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_permissions</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 由权限类定义</span><br>        <span class="hljs-keyword">return</span> [permission() <span class="hljs-keyword">for</span> permission <span class="hljs-keyword">in</span> self.permission_classes]<br></code></pre></td></tr></table></figure><p>在 drf 设置文件查看默认权限配置</p><p><code>rest_framework/settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 默认权限类配置</span><br>DEFAULTS = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 默认权限类配置</span><br>DEFAULTS = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>查看默认系统权限的实现</p><p><code>rest_framework/permissions.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AllowAny</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Allow any access.</span><br><span class="hljs-string">    This isn&#x27;t strictly required, since you could use an empty</span><br><span class="hljs-string">    permission_classes list, but it&#x27;s useful because it makes the intention</span><br><span class="hljs-string">    more explicit.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-comment"># 游客与登录用户都拥有所有权限</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAuthenticated</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Allows access only to authenticated users.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 只有合法用户有权限，游客无任何权限：</span><br>        <span class="hljs-comment"># 有值且认证通过</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(request.user <span class="hljs-keyword">and</span> request.user.is_authenticated)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAdminUser</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br><span class="hljs-comment"># is_staff：后台管理用户</span><br>    <span class="hljs-comment"># 后台管理用户由所有权限，游客无权限</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(request.user <span class="hljs-keyword">and</span> request.user.is_staff)<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAuthenticatedOrReadOnly</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(<br>            <span class="hljs-comment"># 如果是读请求，不校验用户，直接返回</span><br>            request.method <span class="hljs-keyword">in</span> SAFE_METHODS <span class="hljs-keyword">or</span><br>            <span class="hljs-comment"># 登录用户有所有权限，游客只读</span><br>            request.user <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AllowAny</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Allow any access.</span><br><span class="hljs-string">    This isn&#x27;t strictly required, since you could use an empty</span><br><span class="hljs-string">    permission_classes list, but it&#x27;s useful because it makes the intention</span><br><span class="hljs-string">    more explicit.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-comment"># 游客与登录用户都拥有所有权限</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAuthenticated</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Allows access only to authenticated users.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 只有合法用户有权限，游客无任何权限：</span><br>        <span class="hljs-comment"># 有值且认证通过</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(request.user <span class="hljs-keyword">and</span> request.user.is_authenticated)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAdminUser</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br><span class="hljs-comment"># is_staff：后台管理用户</span><br>    <span class="hljs-comment"># 后台管理用户由所有权限，游客无权限</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(request.user <span class="hljs-keyword">and</span> request.user.is_staff)<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsAuthenticatedOrReadOnly</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(<br>            <span class="hljs-comment"># 如果是读请求，不校验用户，直接返回</span><br>            request.method <span class="hljs-keyword">in</span> SAFE_METHODS <span class="hljs-keyword">or</span><br>            <span class="hljs-comment"># 登录用户有所有权限，游客只读</span><br>            request.user <span class="hljs-keyword">and</span><br>            request.user.is_authenticated<br>        )<br></code></pre></td></tr></table></figure><p>总结以上的系统权限类：</p><ul><li><p>AllowAny：游客与登录用户有所有权限</p></li><li><p>IsAuthenticated：登录用户有所有权限，游客无权限</p></li><li><p>IsAdminUser：后台管理用户由所有权限，游客无权限</p></li><li><p>IsAuthenticatedOrReadOnly：登录用户有所有权限，游客只读</p></li></ul><h4 id="2-全局配置权限"><a href="#2-全局配置权限" class="headerlink" title="2. 全局配置权限"></a>2. 全局配置权限</h4><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 配置默认权限类</span><br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 配置默认权限类</span><br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-局部配置权限"><a href="#3-局部配置权限" class="headerlink" title="3. 局部配置权限"></a>3. 局部配置权限</h4><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> IsAuthenticated, IsAuthenticatedOrReadOnly<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-comment"># 只有登录后才能访问</span><br><span class="hljs-comment"># 这里认证用的是之前的 MyAuthentication</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticatedAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [IsAuthenticated]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Authenticated successful&#x27;</span>)<br><br><span class="hljs-comment"># 游客只读，用户无限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticatedOrReadOnlyAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [IsAuthenticatedOrReadOnly]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Read successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> IsAuthenticated, IsAuthenticatedOrReadOnly<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-comment"># 只有登录后才能访问</span><br><span class="hljs-comment"># 这里认证用的是之前的 MyAuthentication</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticatedAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [IsAuthenticated]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Authenticated successful&#x27;</span>)<br><br><span class="hljs-comment"># 游客只读，用户无限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticatedOrReadOnlyAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [IsAuthenticatedOrReadOnly]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Read successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;All successful&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^auth/$&#x27;</span>, views.AuthenticatedAPIView.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^auth/$&#x27;</span>, views.AuthenticatedAPIView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth2/$&#x27;</span>, views.AuthenticatedOrReadOnlyAPIView.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="4-接口测试"><a href="#4-接口测试" class="headerlink" title="4. 接口测试"></a>4. 接口测试</h4><p>只有登录后才能访问<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvZEIwS0p5MlM5cEd1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>登录用户和游客可读<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvTzVXc3lMd1Z4ZVZoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>登录用户有所有权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvRnNTUzEzRmxZN2pFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="二、自定义权限类"><a href="#二、自定义权限类" class="headerlink" title="二、自定义权限类"></a>二、自定义权限类</h2><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1. 代码实现"></a>1. 代码实现</h4><ul><li><p>继承 BasePermission</p></li><li><p>重写 has_permission 方法</p></li><li><p>实现根据自定义权限规则，确定是否有权限</p></li><li><p>认证规则：</p><ul><li>满足设置的用户条件，代表有权限，返回 True</li><li>不满足设置的用户条件，代表无权限，返回 False</li></ul></li><li><p>进行全局或局部配置</p><ul><li>全局：配置文件 settings.py</li><li>局部：在视图类 import</li></ul></li><li><p>测试接口：前台在请求头携带认证信息，且默认规范用 Authorization 字段携带认证信息</p></li></ul><p>自定义权限类<code>permissions.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission, SAFE_METHODS<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Group<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPermission</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># values_list(falt=True) 获取列表转为集合，与目标求交集</span><br>        group = Group.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&#x27;administrator&#x27;</span>).first()<br>        groups = request.user.groups.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(<br>            request.method <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>, <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) <span class="hljs-keyword">or</span><br>            group <span class="hljs-keyword">and</span> groups <span class="hljs-keyword">and</span><br>            group <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission, SAFE_METHODS<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Group<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPermission</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># values_list(falt=True) 获取列表转为集合，与目标求交集</span><br>        group = Group.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&#x27;administrator&#x27;</span>).first()<br>        groups = request.user.groups.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(<br>            request.method <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>, <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) <span class="hljs-keyword">or</span><br>            group <span class="hljs-keyword">and</span> groups <span class="hljs-keyword">and</span><br>            group <span class="hljs-keyword">in</span> groups<br>        )<br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> IsAuthenticated, IsAuthenticatedOrReadOnly<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> api.permissions <span class="hljs-keyword">import</span> MyPermission<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-comment"># 游客和登录用户只读，登录用户属于管理员分组无限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminOrReadOnlyAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [MyPermission]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Mypermission Read successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> IsAuthenticated, IsAuthenticatedOrReadOnly<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> api.permissions <span class="hljs-keyword">import</span> MyPermission<br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><span class="hljs-comment"># 游客和登录用户只读，登录用户属于管理员分组无限制</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminOrReadOnlyAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    permission_classes = [MyPermission]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Mypermission Read successful&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Mypermission All successful&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, views.LoginView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth/$&#x27;</span>, views.AuthenticatedAPIView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth2/$&#x27;</span>, views.AuthenticatedOrReadOnlyAPIView.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, views.LoginView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth/$&#x27;</span>, views.AuthenticatedAPIView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth2/$&#x27;</span>, views.AuthenticatedOrReadOnlyAPIView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^auth3/$&#x27;</span>, views.AdminOrReadOnlyAPIView.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2. 测试接口"></a>2. 测试接口</h4><p>有认证信息且正确，有所有权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvQU9iTmR4OXR6cm16LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>无认证信息，或有错误认证信息，无写权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvV2NMSHhxMlJSNHQwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>无认证信息，有读权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvSkRRNEFwV3Qzb1VZLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 网站 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 08 | 认证组件</title>
      <link href="/posts/9145/"/>
      <url>/posts/9145/</url>
      
        <content type="html"><![CDATA[<h2 id="一、认证组件"><a href="#一、认证组件" class="headerlink" title="一、认证组件"></a>一、认证组件</h2><h4 id="1-分析源码"><a href="#1-分析源码" class="headerlink" title="1. 分析源码"></a>1. 分析源码</h4><p>通过分析源码了解认证组件的方法调用过程</p><p>APIView 的 dispatch 中使用 initial 方法实现初始化并进行三大认证，第一步就是认证组件</p><p><code>rest_framework/views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_authentication</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Perform authentication on the incoming request.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Note that if you override this and simply &#x27;pass&#x27;, then authentication</span><br><span class="hljs-string">        will instead be performed lazily, the first time either</span><br><span class="hljs-string">        `request.user` or `request.auth` is accessed.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        <span class="hljs-comment"># 这里调用 perform_authentication 实现认证</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_authentication</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Perform authentication on the incoming request.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Note that if you override this and simply &#x27;pass&#x27;, then authentication</span><br><span class="hljs-string">        will instead be performed lazily, the first time either</span><br><span class="hljs-string">        `request.user` or `request.auth` is accessed.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 去 request 中调用 user 方法属性</span><br>        request.user<br></code></pre></td></tr></table></figure><p>request.user 去 request 中找 user 方法属性，找到认证方法实现过程</p><p><code>rest_framework/request.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the user associated with the current request, as authenticated</span><br><span class="hljs-string">        by the authentication classes provided to the request.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 属性来源是 _属性名</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_user&#x27;</span>):<br>            <span class="hljs-comment"># 回收错误信息</span><br>            <span class="hljs-keyword">with</span> wrap_attributeerrors():<br>                <span class="hljs-comment"># 没用户，认证处用户</span><br>                self._authenticate()<br>        <span class="hljs-comment"># 有用户，直接返回用户</span><br>        <span class="hljs-keyword">return</span> self._user<br>    <br>    <span class="hljs-comment"># 认证方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_authenticate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Attempt to authenticate the request using each authentication instance</span><br><span class="hljs-string">        in turn.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        <span class="hljs-comment"># 遍历拿到认证器，进行认证</span><br>        <span class="hljs-comment"># self.authenticators，配置的一堆认证类产生的认证类对象组成的 list</span><br>        <span class="hljs-keyword">for</span> authenticator <span class="hljs-keyword">in</span> self.authenticators:<br>            <span class="hljs-comment"># 该方法被 try 包裹，代表该方法会抛异常，抛异常代表认证失败</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 认证器（对象）调用认证方法 authenticate（认证类对象self，request 请求对象）</span><br>                <span class="hljs-comment"># 返回值：登录的用户与认证的信息组成的 tuple                </span><br>                user_auth_tuple = authenticator.authenticate(self)<br>            <span class="hljs-keyword">except</span> exceptions.APIException:<br>                <span class="hljs-comment"># 非法用户</span><br>                self._not_authenticated()<br>                <span class="hljs-keyword">raise</span><br>                <br><span class="hljs-comment"># 处理返回值</span><br>            <span class="hljs-keyword">if</span> user_auth_tuple <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self._authenticator = authenticator<br>                <span class="hljs-comment"># 合法用户</span><br>                <span class="hljs-comment"># 如果有返回值，就将登录用户与登录认证分别保存到 request.user request.auth</span><br>                self.user, self.auth = user_auth_tuple<br>                <span class="hljs-keyword">return</span><br>            <br><span class="hljs-comment"># 游客</span><br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the user associated with the current request, as authenticated</span><br><span class="hljs-string">        by the authentication classes provided to the request.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 属性来源是 _属性名</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_user&#x27;</span>):<br>            <span class="hljs-comment"># 回收错误信息</span><br>            <span class="hljs-keyword">with</span> wrap_attributeerrors():<br>                <span class="hljs-comment"># 没用户，认证处用户</span><br>                self._authenticate()<br>        <span class="hljs-comment"># 有用户，直接返回用户</span><br>        <span class="hljs-keyword">return</span> self._user<br>    <br>    <span class="hljs-comment"># 认证方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_authenticate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Attempt to authenticate the request using each authentication instance</span><br><span class="hljs-string">        in turn.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        <span class="hljs-comment"># 遍历拿到认证器，进行认证</span><br>        <span class="hljs-comment"># self.authenticators，配置的一堆认证类产生的认证类对象组成的 list</span><br>        <span class="hljs-keyword">for</span> authenticator <span class="hljs-keyword">in</span> self.authenticators:<br>            <span class="hljs-comment"># 该方法被 try 包裹，代表该方法会抛异常，抛异常代表认证失败</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 认证器（对象）调用认证方法 authenticate（认证类对象self，request 请求对象）</span><br>                <span class="hljs-comment"># 返回值：登录的用户与认证的信息组成的 tuple                </span><br>                user_auth_tuple = authenticator.authenticate(self)<br>            <span class="hljs-keyword">except</span> exceptions.APIException:<br>                <span class="hljs-comment"># 非法用户</span><br>                self._not_authenticated()<br>                <span class="hljs-keyword">raise</span><br>                <br><span class="hljs-comment"># 处理返回值</span><br>            <span class="hljs-keyword">if</span> user_auth_tuple <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self._authenticator = authenticator<br>                <span class="hljs-comment"># 合法用户</span><br>                <span class="hljs-comment"># 如果有返回值，就将登录用户与登录认证分别保存到 request.user request.auth</span><br>                self.user, self.auth = user_auth_tuple<br>                <span class="hljs-keyword">return</span><br>            <br><span class="hljs-comment"># 游客</span><br>        <span class="hljs-comment"># 如果返回值 user_auth_tuple，代表认证通过，但是没有登录用户和登录认证信息，代表游客</span><br>        self._not_authenticated()<br></code></pre></td></tr></table></figure><p>寻找 authenticators 如何定义</p><p><code>rest_framework/views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-comment"># The following policies may be set at either globally, or per-view.</span><br>    <span class="hljs-comment"># 配置认证类</span><br>    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span><br><span class="hljs-string">        but with extra hooks for startup, finalize, and exception handling.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.args = args<br>        self.kwargs = kwargs<br>        <span class="hljs-comment"># 请求模块（解析模块）</span><br>        request = self.initialize_request(request, *args, **kwargs)<br>        self.request = request<br>        self.headers = self.default_response_headers  <span class="hljs-comment"># deprecate?</span><br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 进入三大认证模块</span><br>            self.initial(request, *args, **kwargs)<br><br>            <span class="hljs-comment"># Get the appropriate handler method</span><br>            <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> self.http_method_names:<br>                handler = <span class="hljs-built_in">getattr</span>(self, request.method.lower(),<br>                                  self.http_method_not_allowed)<br>            <span class="hljs-keyword">else</span>:<br>                handler = self.http_method_not_allowed<br><br>            response = handler(request, *args, **kwargs)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>            response = self.handle_exception(exc)<br><br>        self.response = self.finalize_response(request, response, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> self.response<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_request</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the initial request object.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        parser_context = self.get_parser_context(request)<br><br>        <span class="hljs-keyword">return</span> Request(<br>            request,<br>            <span class="hljs-comment"># 获取解析类</span><br>            parsers=self.get_parsers(),<br>            <span class="hljs-comment"># 获取认证器</span><br>            authenticators=self.get_authenticators(),<br>            negotiator=self.get_content_negotiator(),<br>            parser_context=parser_context<br>        )<br><br>        <span class="hljs-comment"># 获取认证器</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_authenticators</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Instantiates and returns the list of authenticators that this view can use.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 实例化一堆认证类对象</span><br>        <span class="hljs-keyword">return</span> [auth() <span class="hljs-keyword">for</span> auth <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-comment"># The following policies may be set at either globally, or per-view.</span><br>    <span class="hljs-comment"># 配置认证类</span><br>    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span><br><span class="hljs-string">        but with extra hooks for startup, finalize, and exception handling.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.args = args<br>        self.kwargs = kwargs<br>        <span class="hljs-comment"># 请求模块（解析模块）</span><br>        request = self.initialize_request(request, *args, **kwargs)<br>        self.request = request<br>        self.headers = self.default_response_headers  <span class="hljs-comment"># deprecate?</span><br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 进入三大认证模块</span><br>            self.initial(request, *args, **kwargs)<br><br>            <span class="hljs-comment"># Get the appropriate handler method</span><br>            <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> self.http_method_names:<br>                handler = <span class="hljs-built_in">getattr</span>(self, request.method.lower(),<br>                                  self.http_method_not_allowed)<br>            <span class="hljs-keyword">else</span>:<br>                handler = self.http_method_not_allowed<br><br>            response = handler(request, *args, **kwargs)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>            response = self.handle_exception(exc)<br><br>        self.response = self.finalize_response(request, response, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> self.response<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_request</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns the initial request object.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        parser_context = self.get_parser_context(request)<br><br>        <span class="hljs-keyword">return</span> Request(<br>            request,<br>            <span class="hljs-comment"># 获取解析类</span><br>            parsers=self.get_parsers(),<br>            <span class="hljs-comment"># 获取认证器</span><br>            authenticators=self.get_authenticators(),<br>            negotiator=self.get_content_negotiator(),<br>            parser_context=parser_context<br>        )<br><br>        <span class="hljs-comment"># 获取认证器</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_authenticators</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Instantiates and returns the list of authenticators that this view can use.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 实例化一堆认证类对象</span><br>        <span class="hljs-keyword">return</span> [auth() <span class="hljs-keyword">for</span> auth <span class="hljs-keyword">in</span> self.authentication_classes]<br></code></pre></td></tr></table></figure><p>了解到认证器是通过一系列人证类对象实例化后定义</p><p>我们进去 SessionAuthentication 查看默认配置的认证类的实现</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionAuthentication</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Use Django&#x27;s session framework for authentication.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns a `User` if the request session currently has a logged in user.</span><br><span class="hljs-string">        Otherwise returns `None`.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-comment"># 得到用户</span><br>        user = <span class="hljs-built_in">getattr</span>(request._request, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-literal">None</span>)<br><br>        <span class="hljs-comment"># Unauthenticated, CSRF validation not required</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> user.is_active:<br>            <span class="hljs-comment"># 没有解析出，代表游客</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 解析出用户后，要重新启用 csrf 认证</span><br>        <span class="hljs-comment"># 如果 csrf 认证失败，就出现异常，认证为非法用户</span><br>        self.enforce_csrf(request)<br><br>        <span class="hljs-comment"># CSRF passed with authenticated user</span><br>        <span class="hljs-comment"># 认证为合法用户，没有返回认证信息</span><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicAuthentication</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    HTTP Basic authentication against username/password.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    www_authenticate_realm = <span class="hljs-string">&#x27;api&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns a `User` if a correct username and password have been supplied</span><br><span class="hljs-string">        using HTTP Basic authentication.  Otherwise returns `None`.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 获取认证信息：该认证信息是两段式（basic 认证字符串）</span><br>        auth = get_authorization_header(request).split()<br><br>        <span class="hljs-comment"># 没有认证信息，认证为游客</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> auth <span class="hljs-keyword">or</span> auth[<span class="hljs-number">0</span>].lower() != <span class="hljs-string">b&#x27;basic&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 有认证信息，格式错误，认证为非法用户</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(auth) == <span class="hljs-number">1</span>:<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. No credentials provided.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(auth) &gt; <span class="hljs-number">2</span>:<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. Credentials string should not contain spaces.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br><br>        <span class="hljs-keyword">try</span>:<br>            auth_parts = base64.b64decode(auth[<span class="hljs-number">1</span>]).decode(HTTP_HEADER_ENCODING).partition(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">except</span> (TypeError, UnicodeDecodeError, binascii.Error):<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. Credentials not correctly base64 encoded.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br><br>        userid, password = auth_parts[<span class="hljs-number">0</span>], auth_parts[<span class="hljs-number">2</span>]<br>        <span class="hljs-comment"># 认证信息处理出用户主键和密码，进一步得到用户对象</span><br>        <span class="hljs-keyword">return</span> self.authenticate_credentials(userid, password, request)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_credentials</span>(<span class="hljs-params">self, userid, password, request=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Authenticate the userid and password against username and password</span><br><span class="hljs-string">        with optional request for context.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        credentials = &#123;<br>            get_user_model().USERNAME_FIELD: userid,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: password<br>        &#125;<br>        user = authenticate(request=request, **credentials)<br><br>        <span class="hljs-comment"># 如果没有该用户或非活跃用户，认证为非法用户</span><br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="hljs-string">&#x27;Invalid username/password.&#x27;</span>))<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.is_active:<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="hljs-string">&#x27;User inactive or deleted.&#x27;</span>))<br><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionAuthentication</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Use Django&#x27;s session framework for authentication.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns a `User` if the request session currently has a logged in user.</span><br><span class="hljs-string">        Otherwise returns `None`.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-comment"># 得到用户</span><br>        user = <span class="hljs-built_in">getattr</span>(request._request, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-literal">None</span>)<br><br>        <span class="hljs-comment"># Unauthenticated, CSRF validation not required</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> user.is_active:<br>            <span class="hljs-comment"># 没有解析出，代表游客</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 解析出用户后，要重新启用 csrf 认证</span><br>        <span class="hljs-comment"># 如果 csrf 认证失败，就出现异常，认证为非法用户</span><br>        self.enforce_csrf(request)<br><br>        <span class="hljs-comment"># CSRF passed with authenticated user</span><br>        <span class="hljs-comment"># 认证为合法用户，没有返回认证信息</span><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicAuthentication</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    HTTP Basic authentication against username/password.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    www_authenticate_realm = <span class="hljs-string">&#x27;api&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns a `User` if a correct username and password have been supplied</span><br><span class="hljs-string">        using HTTP Basic authentication.  Otherwise returns `None`.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 获取认证信息：该认证信息是两段式（basic 认证字符串）</span><br>        auth = get_authorization_header(request).split()<br><br>        <span class="hljs-comment"># 没有认证信息，认证为游客</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> auth <span class="hljs-keyword">or</span> auth[<span class="hljs-number">0</span>].lower() != <span class="hljs-string">b&#x27;basic&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 有认证信息，格式错误，认证为非法用户</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(auth) == <span class="hljs-number">1</span>:<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. No credentials provided.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(auth) &gt; <span class="hljs-number">2</span>:<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. Credentials string should not contain spaces.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br><br>        <span class="hljs-keyword">try</span>:<br>            auth_parts = base64.b64decode(auth[<span class="hljs-number">1</span>]).decode(HTTP_HEADER_ENCODING).partition(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">except</span> (TypeError, UnicodeDecodeError, binascii.Error):<br>            msg = _(<span class="hljs-string">&#x27;Invalid basic header. Credentials not correctly base64 encoded.&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(msg)<br><br>        userid, password = auth_parts[<span class="hljs-number">0</span>], auth_parts[<span class="hljs-number">2</span>]<br>        <span class="hljs-comment"># 认证信息处理出用户主键和密码，进一步得到用户对象</span><br>        <span class="hljs-keyword">return</span> self.authenticate_credentials(userid, password, request)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_credentials</span>(<span class="hljs-params">self, userid, password, request=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Authenticate the userid and password against username and password</span><br><span class="hljs-string">        with optional request for context.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        credentials = &#123;<br>            get_user_model().USERNAME_FIELD: userid,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: password<br>        &#125;<br>        user = authenticate(request=request, **credentials)<br><br>        <span class="hljs-comment"># 如果没有该用户或非活跃用户，认证为非法用户</span><br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="hljs-string">&#x27;Invalid username/password.&#x27;</span>))<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.is_active:<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="hljs-string">&#x27;User inactive or deleted.&#x27;</span>))<br><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Basic realm="%s"&#x27;</span> % self.www_authenticate_realm<br></code></pre></td></tr></table></figure><p>我们现在查看默认认证类配置定义位置</p><p><code>rest_framework/setting.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">DEFAULTS = &#123;<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 默认认证类配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string"><code class="language-hljs python">DEFAULTS = &#123;<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 默认认证类配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span><br>    ],<br>&#125;<br></code></pre></td></tr></table></figure><p>根据这个，现在就可以自定义项目配置文件</p><h4 id="2-全局配置认证"><a href="#2-全局配置认证" class="headerlink" title="2. 全局配置认证"></a>2. 全局配置认证</h4><p>编写自己项目的<code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 配置默认认证类</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 配置默认认证类</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span><br>    ],<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、自定义认证类"><a href="#二、自定义认证类" class="headerlink" title="二、自定义认证类"></a>二、自定义认证类</h2><p>可以看到以上默认的认证类，所有的规则都是固定的。尤其是做session认证时，会调用csrf，但是对于前后端分离的情况，这种规则并不友好。</p><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1. 代码实现"></a>1. 代码实现</h4><ul><li><p>继承 BasicAuthentication</p></li><li><p>重写 authenticate 方法</p></li><li><p>实现根据自定义认证规则，确定是否有权限</p></li><li><p>认证规则：</p><ul><li><pre><code>  游客：无认证信息，返回 None</code></pre></li><li><pre><code>  非法用户：有认证信息，认证失败，抛异常</code></pre></li><li><pre><code>  合法用户：有认证信息，认证成功，返回元组</code></pre></li></ul></li><li><p>进行全局或局部配置</p><ul><li>全局：配置文件 settings.py</li><li>局部：在视图类 import</li></ul></li><li><p>前台在请求头携带认证信息，且默认规范用 Authorization 字段携带认证信息</p></li></ul><p><code>authentications.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BasicAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">BasicAuthentication</span>):<br>    <span class="hljs-comment"># 重新 authenticate 方法，自定义认证规则</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 认证规则要基于条件：</span><br>        <span class="hljs-comment">#       游客：无认证信息，返回 None</span><br>        <span class="hljs-comment">#       非法用户：有认证信息，认证失败，抛异常</span><br>        <span class="hljs-comment">#       合法用户：有认证信息，认证成功，返回元组</span><br>        <span class="hljs-comment"># 前台在请求头携带认证信息，且默认规范用 Authorization 字段携带认证信息</span><br>        <span class="hljs-comment"># 后端固定在请求对象的 META字典中 HTTP_AUTHORIZATION 获取</span><br>        auth = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>, <span class="hljs-literal">None</span><br>                                )<br><br>        <span class="hljs-comment"># 游客认证</span><br>        <span class="hljs-keyword">if</span> auth <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 设置认证字段规则（两端式）：“auth 认证字符串”</span><br>        auth_list = auth.split()<br><br>        <span class="hljs-comment"># 校验合法还是非法用户</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(auth_list) != <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> auth_list[<span class="hljs-number">0</span>].lower() != <span class="hljs-string">&#x27;auth&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;The authentication information is incorrect! Illegal user&#x27;</span>)<br><br>        <span class="hljs-comment"># 合法的用户需要进一步从 auth_list[1] 解析</span><br>        <span class="hljs-comment"># 假设一种情况：信息为 abc.123.xyz 就可以解析 admin 用户</span><br>        <span class="hljs-comment"># 实际开发时，该逻辑一定需要校验用户</span><br>        <span class="hljs-keyword">if</span> auth_list[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;abc.123.xyz&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;User verification failed! Illegal user&#x27;</span>)<br><br>        user = models.User.objects.<span class="hljs-built_in">filter</span>(username=<span class="hljs-string">&#x27;baimoc&#x27;</span>).first()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;User data is incorrect! Illegal user&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BasicAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">BasicAuthentication</span>):<br>    <span class="hljs-comment"># 重新 authenticate 方法，自定义认证规则</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 认证规则要基于条件：</span><br>        <span class="hljs-comment">#       游客：无认证信息，返回 None</span><br>        <span class="hljs-comment">#       非法用户：有认证信息，认证失败，抛异常</span><br>        <span class="hljs-comment">#       合法用户：有认证信息，认证成功，返回元组</span><br>        <span class="hljs-comment"># 前台在请求头携带认证信息，且默认规范用 Authorization 字段携带认证信息</span><br>        <span class="hljs-comment"># 后端固定在请求对象的 META字典中 HTTP_AUTHORIZATION 获取</span><br>        auth = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>, <span class="hljs-literal">None</span><br>                                )<br><br>        <span class="hljs-comment"># 游客认证</span><br>        <span class="hljs-keyword">if</span> auth <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 设置认证字段规则（两端式）：“auth 认证字符串”</span><br>        auth_list = auth.split()<br><br>        <span class="hljs-comment"># 校验合法还是非法用户</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(auth_list) != <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> auth_list[<span class="hljs-number">0</span>].lower() != <span class="hljs-string">&#x27;auth&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;The authentication information is incorrect! Illegal user&#x27;</span>)<br><br>        <span class="hljs-comment"># 合法的用户需要进一步从 auth_list[1] 解析</span><br>        <span class="hljs-comment"># 假设一种情况：信息为 abc.123.xyz 就可以解析 admin 用户</span><br>        <span class="hljs-comment"># 实际开发时，该逻辑一定需要校验用户</span><br>        <span class="hljs-keyword">if</span> auth_list[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;abc.123.xyz&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;User verification failed! Illegal user&#x27;</span>)<br><br>        user = models.User.objects.<span class="hljs-built_in">filter</span>(username=<span class="hljs-string">&#x27;baimoc&#x27;</span>).first()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;User data is incorrect! Illegal user&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> (user, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;api.authentications.MyAuthentication&#x27;</span><br>    ],<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 如果认证通过，request.user 就一定有值</span><br>        <span class="hljs-comment"># 游客：AnonymousUser</span><br>        <span class="hljs-comment"># 用户：User</span><br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> GenericAPIView<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSet<br><br><span class="hljs-keyword">from</span> utils.response <span class="hljs-keyword">import</span> APIResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 如果认证通过，request.user 就一定有值</span><br>        <span class="hljs-comment"># 游客：AnonymousUser</span><br>        <span class="hljs-comment"># 用户：User</span><br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Login successful&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, views.LoginView.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-接口测试"><a href="#2-接口测试" class="headerlink" title="2. 接口测试"></a>2. 接口测试</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjEvTG5jc3JFV3VSSnBxLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 网站 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 07 | 三大认证与权限六表</title>
      <link href="/posts/47542/"/>
      <url>/posts/47542/</url>
      
        <content type="html"><![CDATA[<h2 id="一、三大认证"><a href="#一、三大认证" class="headerlink" title="一、三大认证"></a>一、三大认证</h2><h4 id="1-认证组件：校验用户"><a href="#1-认证组件：校验用户" class="headerlink" title="1. 认证组件：校验用户"></a>1. 认证组件：校验用户</h4><ul><li>游客：无认证信息，校验通过，直接进入下一步权限认证校验</li><li>合法用户：带正确认证信息，校验通过，将用户存储在 request.user 中，再下一步权限认证校验</li><li>非法用户：带错误认证信息，校验失败，抛出异常，返回 403 权限异常结果</li></ul><p>详细：<a href="https://blog.csdn.net/u011262253/article/details/106265981">Django REST 框架详解 08 | 认证组件</a></p><h4 id="2-权限组件：校验用户权限"><a href="#2-权限组件：校验用户权限" class="headerlink" title="2. 权限组件：校验用户权限"></a>2. 权限组件：校验用户权限</h4><ul><li>必须登录</li><li>所有用户</li><li>登录读写，游客只读</li><li>自定义用户角色</li></ul><p>认证通过：可以进入下一步校验（频率认证）</p><p>认证失败：抛出异常，返回 403</p><p>详细：<a href="https://blog.csdn.net/u011262253/article/details/106265992">Django REST 框架详解 09 | 权限组件</a></p><h4 id="3-频率组件：限制视图接口被访问次数"><a href="#3-频率组件：限制视图接口被访问次数" class="headerlink" title="3. 频率组件：限制视图接口被访问次数"></a>3. 频率组件：限制视图接口被访问次数</h4><ul><li>限制的条件：IP，userid，唯一键（如手机号）</li><li>频率周期时间：s,m,h,d</li><li>频率的次数：3&#x2F;h</li></ul><p>没有达到限次：正常访问</p><p>达到限次：限制时间内不能访问，返回500，限制时间达到后，可以重新访问</p><p>详细：<a href="https://blog.csdn.net/u011262253/article/details/106266001">Django REST 框架详解 10 | 频率认证组件</a></p><h4 id="4-分析源码"><a href="#4-分析源码" class="headerlink" title="4. 分析源码"></a>4. 分析源码</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Runs anything that needs to occur prior to calling the method handler.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.format_kwarg = self.get_format_suffix(**kwargs)<br><br>        <span class="hljs-comment"># Perform content negotiation and store the accepted info on the request</span><br>        neg = self.perform_content_negotiation(request)<br>        request.accepted_renderer, request.accepted_media_type = neg<br><br>        <span class="hljs-comment"># Determine the API version, if versioning is in use.</span><br>        version, scheme = self.determine_version(request, *args, **kwargs)<br>        request.version, request.versioning_scheme = version, scheme<br><br>        <span class="hljs-comment"># Ensure that the incoming request is permitted</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">APIView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initial</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Runs anything that needs to occur prior to calling the method handler.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.format_kwarg = self.get_format_suffix(**kwargs)<br><br>        <span class="hljs-comment"># Perform content negotiation and store the accepted info on the request</span><br>        neg = self.perform_content_negotiation(request)<br>        request.accepted_renderer, request.accepted_media_type = neg<br><br>        <span class="hljs-comment"># Determine the API version, if versioning is in use.</span><br>        version, scheme = self.determine_version(request, *args, **kwargs)<br>        request.version, request.versioning_scheme = version, scheme<br><br>        <span class="hljs-comment"># Ensure that the incoming request is permitted</span><br>        <span class="hljs-comment"># 认证组件：校验用户</span><br>        self.perform_authentication(request)<br>        <span class="hljs-comment"># 权限组件：校验用户权限</span><br>        self.check_permissions(request)<br>        <span class="hljs-comment"># 频率组件：限制视图接口被访问次数</span><br>        self.check_throttles(request)<br></code></pre></td></tr></table></figure><h2 id="二、权限六表"><a href="#二、权限六表" class="headerlink" title="二、权限六表"></a>二、权限六表</h2><p>基于用户角色权限访问的控制 （RBAC，Role Based Access Control）：Django 框架使用</p><p>基于 auth 认证：ThinkPHP 使用</p><h4 id="1-RBAC-认证"><a href="#1-RBAC-认证" class="headerlink" title="1. RBAC 认证"></a>1. RBAC 认证</h4><p>RBAC 认证规则通常会分为 三表规则，五表规则，Django 采用六表规则</p><h4 id="2-权限三表"><a href="#2-权限三表" class="headerlink" title="2. 权限三表"></a>2. 权限三表</h4><p>用户表，角色表，权限表</p><p>User</p><table><thead><tr><th>id</th><th>name</th><th>g_id</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>1</td></tr><tr><td>2</td><td>小白</td><td>2</td></tr><tr><td>3</td><td>小红</td><td>2,3</td></tr></tbody></table><p>Group</p><table><thead><tr><th>id</th><th>name</th><th>p_id</th></tr></thead><tbody><tr><td>1</td><td>校长</td><td>1</td></tr><tr><td>2</td><td>讲师</td><td>1,2,3</td></tr><tr><td>3</td><td>助教</td><td>1,3</td></tr></tbody></table><p>Permission</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>管理</td></tr><tr><td>2</td><td>授课</td></tr><tr><td>3</td><td>答疑</td></tr><tr><td>4</td><td>财务</td></tr></tbody></table><h4 id="3-权限五表"><a href="#3-权限五表" class="headerlink" title="3. 权限五表"></a>3. 权限五表</h4><p>会发现权限三表中，User 表与 Group 表多对多关系，  Group 表与 Permission 表是多对多关系。所以，需要新建这两张的关系表，这就是权限五表。</p><p>用户表，角色表，权限表，用户角色关系表，角色权限关系表</p><p>U-G关系表</p><table><thead><tr><th>id</th><th>u_id</th><th>g_id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td><td>2</td></tr><tr><td>4</td><td>3</td><td>3</td></tr></tbody></table><p>G-P关系表</p><table><thead><tr><th>id</th><th>g_id</th><th>p_id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td><td>2</td></tr><tr><td>4</td><td>2</td><td>3</td></tr><tr><td>5</td><td>3</td><td>1</td></tr><tr><td>6</td><td>3</td><td>3</td></tr></tbody></table><p>User</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>小明</td></tr><tr><td>2</td><td>小白</td></tr><tr><td>3</td><td>小红</td></tr></tbody></table><p>Group</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>校长</td></tr><tr><td>2</td><td>讲师</td></tr><tr><td>3</td><td>助教</td></tr></tbody></table><p>Permission</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>管理</td></tr><tr><td>2</td><td>授课</td></tr><tr><td>3</td><td>答疑</td></tr></tbody></table><h4 id="4-权限六表"><a href="#4-权限六表" class="headerlink" title="4. 权限六表"></a>4. 权限六表</h4><p>有的用户可能会执行角色分组以外的权限，所以除了五表外，多了用户表与权限表的关系表。</p><p>用户表，角色表，权限表，用户角色关系表，角色权限关系表，用户权限关系表。</p><p>U-P关系表</p><table><thead><tr><th>id</th><th>u_id</th><th>p_id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>4</td></tr><tr><td>2</td><td>2</td><td>4</td></tr><tr><td>3</td><td>3</td><td>4</td></tr></tbody></table><h2 id="三、六表间访问"><a href="#三、六表间访问" class="headerlink" title="三、六表间访问"></a>三、六表间访问</h2><h4 id="1-分析源码"><a href="#1-分析源码" class="headerlink" title="1. 分析源码"></a>1. 分析源码</h4><p><code>auth/models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PermissionsMixin</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Add the fields and methods necessary to support the Group and Permission</span><br><span class="hljs-string">    models using the ModelBackend.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    is_superuser = models.BooleanField(<br>        _(<span class="hljs-string">&#x27;superuser status&#x27;</span>),<br>        default=<span class="hljs-literal">False</span>,<br>        help_text=_(<br>            <span class="hljs-string">&#x27;Designates that this user has all permissions without &#x27;</span><br>            <span class="hljs-string">&#x27;explicitly assigning them.&#x27;</span><br>        ),<br>    )<br>    <span class="hljs-comment"># 用户-角色关系表</span><br>    groups = models.ManyToManyField(<br>        Group,<br>        verbose_name=_(<span class="hljs-string">&#x27;groups&#x27;</span>),<br>        blank=<span class="hljs-literal">True</span>,<br>        help_text=_(<br>            <span class="hljs-string">&#x27;The groups this user belongs to. A user will get all permissions &#x27;</span><br>            <span class="hljs-string">&#x27;granted to each of their groups.&#x27;</span><br>        ),<br>        related_name=<span class="hljs-string">&quot;user_set&quot;</span>,<br>        related_query_name=<span class="hljs-string">&quot;user&quot;</span>,<br>    )<br>    <span class="hljs-comment"># 用户-权限关系表</span><br>    user_permissions = models.ManyToManyField(<br>        Permission,<br>        verbose_name=_(<span class="hljs-string">&#x27;user permissions&#x27;</span>),<br>        blank=<span class="hljs-literal">True</span>,<br>        help_text=_(<span class="hljs-string">&#x27;Specific permissions for this user.&#x27;</span>),<br>        related_name=<span class="hljs-string">&quot;user_set&quot;</span>,<br>        related_query_name=<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PermissionsMixin</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Add the fields and methods necessary to support the Group and Permission</span><br><span class="hljs-string">    models using the ModelBackend.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    is_superuser = models.BooleanField(<br>        _(<span class="hljs-string">&#x27;superuser status&#x27;</span>),<br>        default=<span class="hljs-literal">False</span>,<br>        help_text=_(<br>            <span class="hljs-string">&#x27;Designates that this user has all permissions without &#x27;</span><br>            <span class="hljs-string">&#x27;explicitly assigning them.&#x27;</span><br>        ),<br>    )<br>    <span class="hljs-comment"># 用户-角色关系表</span><br>    groups = models.ManyToManyField(<br>        Group,<br>        verbose_name=_(<span class="hljs-string">&#x27;groups&#x27;</span>),<br>        blank=<span class="hljs-literal">True</span>,<br>        help_text=_(<br>            <span class="hljs-string">&#x27;The groups this user belongs to. A user will get all permissions &#x27;</span><br>            <span class="hljs-string">&#x27;granted to each of their groups.&#x27;</span><br>        ),<br>        related_name=<span class="hljs-string">&quot;user_set&quot;</span>,<br>        related_query_name=<span class="hljs-string">&quot;user&quot;</span>,<br>    )<br>    <span class="hljs-comment"># 用户-权限关系表</span><br>    user_permissions = models.ManyToManyField(<br>        Permission,<br>        verbose_name=_(<span class="hljs-string">&#x27;user permissions&#x27;</span>),<br>        blank=<span class="hljs-literal">True</span>,<br>        help_text=_(<span class="hljs-string">&#x27;Specific permissions for this user.&#x27;</span>),<br>        related_name=<span class="hljs-string">&quot;user_set&quot;</span>,<br>        related_query_name=<span class="hljs-string">"user"</span>,<br>    )<br></code></pre></td></tr></table></figure><p><code>auth/models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Group</span>(models.Model):<br>    <span class="hljs-comment"># 角色-权限关系表</span><br>    name = models.CharField(_(<span class="hljs-string">&#x27;name&#x27;</span>), max_length=<span class="hljs-number">150</span>, unique=<span class="hljs-literal">True</span>)<br>    permissions = models.ManyToManyField(<br>        Permission,<br>        verbose_name=_(<span class="hljs-string">&#x27;permissions&#x27;</span>),<br>        blank=<span class="hljs-literal"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Group</span>(models.Model):<br>    <span class="hljs-comment"># 角色-权限关系表</span><br>    name = models.CharField(_(<span class="hljs-string">&#x27;name&#x27;</span>), max_length=<span class="hljs-number">150</span>, unique=<span class="hljs-literal">True</span>)<br>    permissions = models.ManyToManyField(<br>        Permission,<br>        verbose_name=_(<span class="hljs-string">&#x27;permissions&#x27;</span>),<br>        blank=<span class="hljs-literal">True</span>,<br>    )<br></code></pre></td></tr></table></figure><h4 id="2-六表间访问方法"><a href="#2-六表间访问方法" class="headerlink" title="2. 六表间访问方法"></a>2. 六表间访问方法</h4><p>用户表：访问角色 groups， 访问权限 user_permissions<br>角色表：访问用户 user_set， 访问权限 permissions<br>权限表：访问用户 user_set， 访问角色 group_set</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><p>自定义用户表 <code>models.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">class User(AbstractUser):<br>    mobile = models.CharField(max_length=11, unique=True)<br><br>    class Meta:<br>        db_table = &#x27;api_user&#x27;,<br>        verbose_name = &#x27;用户表&#x27;,<br>        verbose_name_plural = verbose_name<br><br>    def __str__(self):<br>        return self.username<br></code></pre></td></tr></table></figure><p>数据库迁移</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">python manage.py makemigrations<br>python manage.py migrrate<br></code></pre></td></tr></table></figure><blockquote><p>迁移报错解决</p><p>如果自定义 User 表后，在另一个项目中采用原生 User 表，完成数据库迁移时，可能会失败<br>解决：</p><ol><li>卸载 Django 重新装</li><li>清空数据库迁移记录文件<br>django.contrib.admin.migraions 清空除了 <strong>init</strong>.py 以外的文件<br>django.contrib.auth.migraions 清空除了 <strong>init</strong>.py 以外的文件</li></ol></blockquote><p>创建成功后数据库表如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MjAva3cwN1N1NEdYb2pTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="4-脚本化启动查看表"><a href="#4-脚本化启动查看表" class="headerlink" title="4. 脚本化启动查看表"></a>4. 脚本化启动查看表</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;drf_proj02.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br>user = models.User.objects.first()<br><span class="hljs-comment"># 用户</span><br><span class="hljs-built_in">print</span>(user.username)<br><span class="hljs-comment"># 用户-角色</span><br><span class="hljs-built_in">print</span>(user.groups.first())<br><span class="hljs-comment"># 用户-权限</span><br><span class="hljs-built_in">print</span>(user.user_permissions.first().name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Group<br>group = Group.objects.first()<br><span class="hljs-comment"># 权限名</span><br><span class="hljs-built_in">print</span>(group.name)<br><span class="hljs-comment"># 权限-用户</span><br><span class="hljs-built_in">print</span>(group.user_set.first().username)<br><span class="hljs-comment"># 权限-分组</span><br><span class="hljs-built_in">print</span>(group.permissions.first().name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Permission<br>p_1 = Permission.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">1</span>).first()<br><span class="hljs-comment"># 权限-用户</span><br><span class="hljs-built_in">print</span>(p_1.user_set.first().username)<br>p_2 = Permission.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">2</span>).first()<br><span class="hljs-comment"># 权限-角色</span><br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;drf_proj02.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br>user = models.User.objects.first()<br><span class="hljs-comment"># 用户</span><br><span class="hljs-built_in">print</span>(user.username)<br><span class="hljs-comment"># 用户-角色</span><br><span class="hljs-built_in">print</span>(user.groups.first())<br><span class="hljs-comment"># 用户-权限</span><br><span class="hljs-built_in">print</span>(user.user_permissions.first().name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Group<br>group = Group.objects.first()<br><span class="hljs-comment"># 权限名</span><br><span class="hljs-built_in">print</span>(group.name)<br><span class="hljs-comment"># 权限-用户</span><br><span class="hljs-built_in">print</span>(group.user_set.first().username)<br><span class="hljs-comment"># 权限-分组</span><br><span class="hljs-built_in">print</span>(group.permissions.first().name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> Permission<br>p_1 = Permission.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">1</span>).first()<br><span class="hljs-comment"># 权限-用户</span><br><span class="hljs-built_in">print</span>(p_1.user_set.first().username)<br>p_2 = Permission.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">2</span>).first()<br><span class="hljs-comment"># 权限-角色</span><br><span class="hljs-built_in">print</span>(p_2.group_set.first().name)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 网站 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 06 | 视图家族 Generics 与 Viewsets</title>
      <link href="/posts/20294/"/>
      <url>/posts/20294/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Generics：工具视图"><a href="#一、Generics：工具视图" class="headerlink" title="一、Generics：工具视图"></a>一、Generics：工具视图</h2><p>generics 是工具视图，可以实现极简化接口编写操作。</p><p>工具视图都是 GenericAPIView 的子类，不同的子类继承不同工具类，重写请求方法。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvc1AzV1Z6alFxSGRvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="1-群查与单增：ListCreateAPIView"><a href="#1-群查与单增：ListCreateAPIView" class="headerlink" title="1.群查与单增：ListCreateAPIView"></a>1.群查与单增：ListCreateAPIView</h3><h5 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 继承了视图基类 GenericAPIView，工具类 ListModelMixin，CreateModelMixin实现群查和单增</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListCreateAPIView</span>(mixins.ListModelMixin,<br>                        mixins.CreateModelMixin,<br>                        GenericAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Concrete view for listing a queryset or creating a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 群查</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br><br>    <span class="hljs-comment"># 单增</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># 继承了视图基类 GenericAPIView，工具类 ListModelMixin，CreateModelMixin实现群查和单增</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListCreateAPIView</span>(mixins.ListModelMixin,<br>                        mixins.CreateModelMixin,<br>                        GenericAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Concrete view for listing a queryset or creating a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 群查</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br><br>    <span class="hljs-comment"># 单增</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.create(request, *args, **kwargs)<br></code></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>url(<span class="hljs-string">r&#x27;^v4/books/$&#x27;</span>, views.BookListCreateView.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>url(<span class="hljs-string">r&#x27;^v4/books/$&#x27;</span>, views.BookListCreateView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^v4/books/(?P<pk>.*)/$&#x27;</span>, views.BookListCreateView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p>工具视图的功能如果满足需求，只需要继承工具视图，添加 queryset，serializer_class</p><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(<span class="hljs-title class_ inherited__">ListCreateAPIView</span>):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(<span class="hljs-title class_ inherited__">ListCreateAPIView</span>):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br></code></pre></td></tr></table></figure><h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><p>群查<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvVEhkZk9KU1gwUUxSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>单增<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvdmk0SHJUM0xoYllOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>入库成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvUDZnNFNFaHRqZXRLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>其他方法</p><p>根据上述源码分析与示例和下面的图示，我们可以很容易知道这些类的功能和用法<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvc1AzV1Z6alFxSGRvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="2-添加其他接口"><a href="#2-添加其他接口" class="headerlink" title="2.添加其他接口"></a>2.添加其他接口</h3><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 需要什么接口，直接继承就行</span><br><span class="hljs-comment"># 比如我们在群查，单增的基础上，添加单改接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(ListCreateAPIView, UpdateAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal"><code class="language-hljs python"><span class="hljs-comment"># 需要什么接口，直接继承就行</span><br><span class="hljs-comment"># 比如我们在群查，单增的基础上，添加单改接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(ListCreateAPIView, UpdateAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br></code></pre></td></tr></table></figure><h5 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvZ0EwTld0eEthUGI1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>修改成功<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvdDVCd0VpdlVxSEJELnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="3-后续问题"><a href="#3-后续问题" class="headerlink" title="3.后续问题"></a>3.后续问题</h3><p>但是上述虽然可以实现简单接口，但是有时候需求会很复杂。</p><p>比如，来自前端用户的数据格式并不是和我们规定的一样，有可能传来空值，错误字符等等。这就需要对 request.data 进行过滤，尤其是在入库的时候。</p><p>另外，如果数据有误，DRF 并不知道你的字段是哪出的问题，所以抛异常是只会是数据错误。我们需要对每个字段的每种错误类型给出对应的返回值。</p><p>可以在 UpdateModelMixin 源码中看到，request.data 并没有进行过滤。</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateModelMixin</span>:<br>   <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        partial = kwargs.pop(<span class="hljs-string">&#x27;partial&#x27;</span>, <span class="hljs-literal">False</span>)<br>        instance = self.get_object()<br>        <span class="hljs-comment"># request.data 并没有进行过滤</span><br>        serializer = self.get_serializer(instance, data=request.data, partial=partial)<br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateModelMixin</span>:<br>   <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        partial = kwargs.pop(<span class="hljs-string">&#x27;partial&#x27;</span>, <span class="hljs-literal">False</span>)<br>        instance = self.get_object()<br>        <span class="hljs-comment"># request.data 并没有进行过滤</span><br>        serializer = self.get_serializer(instance, data=request.data, partial=partial)<br>        <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h2 id="二、Viewsets：视图集"><a href="#二、Viewsets：视图集" class="headerlink" title="二、Viewsets：视图集"></a>二、Viewsets：视图集</h2><h3 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1.简单使用"></a>1.简单使用</h3><p>DRF 提供了 Viewsets.py 视图集，再次封装之前的操作。最主要的是，可以通过设置 <code>请求-函数</code> 映射关系，来将请求方式与原有方法或自定义方法对应执行。</p><h5 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvdlQ0bk4xS3Z6ZU1sLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>发现没有提供实际的方法</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericViewSet</span>(ViewSetMixin, generics.GenericAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    The GenericViewSet class does not provide any actions by default,</span><br><span class="hljs-string">    but does include the base set of generic view behavior, such as</span><br><span class="hljs-string">    the `get_object` and `get_queryset` methods.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericViewSet</span>(ViewSetMixin, generics.GenericAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    The GenericViewSet class does not provide any actions by default,</span><br><span class="hljs-string">    but does include the base set of generic view behavior, such as</span><br><span class="hljs-string">    the `get_object` and `get_queryset` methods.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>但是看到它继承了 ViewSetMixin，GenericAPIView</p><p>查看 ViewSetMixin 类的 as_view 方法 </p><p>GenericViewSet 和 ViewSet 都继承了 ViewSetMixin，as_view 可以配置 <code>请求-函数</code> 映射</p><p>比如<code>view = MyViewSet.as_view(&#123;&#39;get&#39;: &#39;list&#39;, &#39;post&#39;: &#39;create&#39;&#125;)</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewSetMixin</span>:<br><br><span class="hljs-meta">    @classonlymethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">as_view</span>(<span class="hljs-params">cls, actions=<span class="hljs-literal">None</span>, **initkwargs</span>):<br>        <span class="hljs-comment">#...</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">request, *args, **kwargs</span>):<br>            <span class="hljs-comment"># 这里 cls 去解析前边例子中的 &#123;&#x27;get&#x27;: &#x27;list&#x27;, &#x27;post&#x27;: &#x27;create&#x27;&#125;</span><br>            self = cls(**initkwargs)<br>            self.action_map = actions<br><br>            <span class="hljs-comment"># methods拿到请求方法，比如get</span><br>            <span class="hljs-keyword">for</span> method, action <span class="hljs-keyword">in</span> actions.items():<br>                handler = <span class="hljs-built_in">getattr</span>(self, action)<br>                <span class="hljs-comment"># 映射method get到执行函数handler list</span><br>                <span class="hljs-built_in">setattr</span>(self, method, handler)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;get&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;head&#x27;</span>):<br>                self.head = self.get<br><br>            self.request = request<br>            self.args = args<br>            self.kwargs = kwargs<br><br>            <span class="hljs-comment"># 继承 APIView 中的 dispatch 进行分发</span><br>            <span class="hljs-keyword">return</span> self.dispatch(request, *args, **kwargs)<br><br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewSetMixin</span>:<br><br><span class="hljs-meta">    @classonlymethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">as_view</span>(<span class="hljs-params">cls, actions=<span class="hljs-literal">None</span>, **initkwargs</span>):<br>        <span class="hljs-comment">#...</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">request, *args, **kwargs</span>):<br>            <span class="hljs-comment"># 这里 cls 去解析前边例子中的 &#123;&#x27;get&#x27;: &#x27;list&#x27;, &#x27;post&#x27;: &#x27;create&#x27;&#125;</span><br>            self = cls(**initkwargs)<br>            self.action_map = actions<br><br>            <span class="hljs-comment"># methods拿到请求方法，比如get</span><br>            <span class="hljs-keyword">for</span> method, action <span class="hljs-keyword">in</span> actions.items():<br>                handler = <span class="hljs-built_in">getattr</span>(self, action)<br>                <span class="hljs-comment"># 映射method get到执行函数handler list</span><br>                <span class="hljs-built_in">setattr</span>(self, method, handler)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;get&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;head&#x27;</span>):<br>                self.head = self.get<br><br>            self.request = request<br>            self.args = args<br>            self.kwargs = kwargs<br><br>            <span class="hljs-comment"># 继承 APIView 中的 dispatch 进行分发</span><br>            <span class="hljs-keyword">return</span> self.dispatch(request, *args, **kwargs)<br><br>        <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p>这样的好处是，各种需求的接口的请求方式都可以用不同函数定义返回值。比如十大接口对应十个函数，分别码代码。</p><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookGenericViewSet</span>(RetrieveModelMixin, ListModelMixin, GenericViewSet):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_obj</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookGenericViewSet</span>(RetrieveModelMixin, ListModelMixin, GenericViewSet):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_obj</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> self.retrieve(request, *args, **kwargs)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># ...</span><br>    url(<span class="hljs-string">r&#x27;^v5/books/$&#x27;</span>, views.BookGenericViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;get_list&#x27;</span>&#125;)),<br>    url(<span class="hljs-string">r&#x27;^v5/books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.BookGenericViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># ...</span><br>    url(<span class="hljs-string">r&#x27;^v5/books/$&#x27;</span>, views.BookGenericViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;get_list&#x27;</span>&#125;)),<br>    url(<span class="hljs-string">r&#x27;^v5/books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.BookGenericViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;get_obj&#x27;</span>&#125;)),<br>]<br></code></pre></td></tr></table></figure><h3 id="2-ModelViewSet：最全的封装类"><a href="#2-ModelViewSet：最全的封装类" class="headerlink" title="2.ModelViewSet：最全的封装类"></a>2.ModelViewSet：最全的封装类</h3><h5 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a>查看源码</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,<br>                   mixins.RetrieveModelMixin,<br>                   mixins.UpdateModelMixin,<br>                   mixins.DestroyModelMixin,<br>                   mixins.ListModelMixin,<br>                   GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A viewset that provides default `create()`, `retrieve()`, `update()`,</span><br><span class="hljs-string">    `partial_update()`, `destroy()` and `list()` actions.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,<br>                   mixins.RetrieveModelMixin,<br>                   mixins.UpdateModelMixin,<br>                   mixins.DestroyModelMixin,<br>                   mixins.ListModelMixin,<br>                   GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A viewset that provides default `create()`, `retrieve()`, `update()`,</span><br><span class="hljs-string">    `partial_update()`, `destroy()` and `list()` actions.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 继承 ModelViewset 会直接拥有六大接口：单查，群查，单增，单删，单整体改，单局部改</span><br><span class="hljs-comment"># 需要注意：Destroy 需要重写</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-comment"># 删除操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        instance = self.get_object() <span class="hljs-comment"># type: models.Book</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> instance:<br>            <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Delete fail&quot;</span>)<br>        instance.is_delete = <span class="hljs-literal">True</span><br>        instance.save()<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 继承 ModelViewset 会直接拥有六大接口：单查，群查，单增，单删，单整体改，单局部改</span><br><span class="hljs-comment"># 需要注意：Destroy 需要重写</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-comment"># 删除操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        instance = self.get_object() <span class="hljs-comment"># type: models.Book</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> instance:<br>            <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Delete fail&quot;</span>)<br>        instance.is_delete = <span class="hljs-literal">True</span><br>        instance.save()<br>        <span class="hljs-keyword">return</span> APIResponse(<span class="hljs-number">1</span>, <span class="hljs-string">"Delete successful"</span>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^v6/books/$&#x27;</span>, views.BookModelViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>:<span class="hljs-string">&#x27;create&#x27;</span>&#125;)),<br>    url(<span class="hljs-string">r&#x27;^v6/books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.BookModelViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>: <span class="hljs-string">&#x27;retrieve&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>:<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;put&#x27;</span>: <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;patch&#x27;</span>: <span class="hljs-string">&#x27;partial_update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>: <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^v6/books/$&#x27;</span>, views.BookModelViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>:<span class="hljs-string">&#x27;create&#x27;</span>&#125;)),<br>    url(<span class="hljs-string">r&#x27;^v6/books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.BookModelViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>: <span class="hljs-string">&#x27;retrieve&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>:<span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;put&#x27;</span>: <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;patch&#x27;</span>: <span class="hljs-string">&#x27;partial_update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>: <span class="hljs-string">&#x27;destroy&#x27;</span>&#125;)),<br>]<br><br></code></pre></td></tr></table></figure><h5 id="接口测试-1"><a href="#接口测试-1" class="headerlink" title="接口测试"></a>接口测试</h5><h6 id="群查"><a href="#群查" class="headerlink" title="群查"></a>群查</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvNHBpeU1NWXM4ZFIyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="单查"><a href="#单查" class="headerlink" title="单查"></a>单查</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkveEV2T3AwanI5Y1FNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="单删"><a href="#单删" class="headerlink" title="单删"></a>单删</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvYWJNM25UdnFQT0JWLnBuZw?x-oss-process=image/format,png" alt="mark"><br>查看数据库<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvU21Qckh6Y3VWWXQ5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="单增"><a href="#单增" class="headerlink" title="单增"></a>单增</h6><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvRzVEcG1SOFYwYXVELnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>入库成功<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvaktrYXhIcjBmeDVZLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="GenericAPIView-与-APIView-的区别与适用场景"><a href="#GenericAPIView-与-APIView-的区别与适用场景" class="headerlink" title="GenericAPIView 与 APIView 的区别与适用场景"></a>GenericAPIView 与 APIView 的区别与适用场景</h3><h5 id="1-GenericAPIView-视图类"><a href="#1-GenericAPIView-视图类" class="headerlink" title="1. GenericAPIView 视图类"></a>1. GenericAPIView 视图类</h5><p>GenericView 继承 GenericAPIView 视图类</p><p>适用于标准的接口请求，或实现标准的 Model 类操作接口。</p><p><strong>案例：</strong> 用户查询时，发送 GET 请求，返回数据。</p><h5 id="2-APIView-视图类"><a href="#2-APIView-视图类" class="headerlink" title="2. APIView 视图类"></a>2. APIView 视图类</h5><p>ViewSet 继承 APIView 视图类</p><p>实现不需要 Model 类操作，或非标准的 Model 类操作接口。比如，POST请求在标准的 Model 类操作用于新增接口，但以下案例并不符合这个标准。</p><p><strong>案例 1：</strong> 请求手机验证码时，发送 POST 请求，不需要 Model 类的参与。</p><p><strong>案例 2：</strong> 用户登录时，发送的 POST 请求，并不是完成数据的新增。POST 只是用于提交数据，返回值也不是登录用户信息，而是登录的认证信息。</p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 网站 </tag>
            
            <tag> django rest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 05 | 视图家族 Mixins</title>
      <link href="/posts/48389/"/>
      <url>/posts/48389/</url>
      
        <content type="html"><![CDATA[<h2 id="零、视图家族"><a href="#零、视图家族" class="headerlink" title="零、视图家族"></a>零、视图家族</h2><p>Django REST framework 为了方便视图类的操作，构建了包括以下几种视图类和工具集：</p><ul><li><p>views：API视图</p></li><li><p>generics：工具视图</p></li><li><p>mixins：视图工具集</p></li><li><p>viewsets：视图集</p></li></ul><h2 id="一、GenericAPIView：视图家族的基类"><a href="#一、GenericAPIView：视图家族的基类" class="headerlink" title="一、GenericAPIView：视图家族的基类"></a>一、GenericAPIView：视图家族的基类</h2><p>generics.py 中的 GenericAPIView 作为视图家族中重要的基类，在后面的接口代码的实现中起到重要作用。</p><p>用 Pycharm 可以看到 GenericAPIView 的方法和继承关系：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTgvWHg2UGpXcVRvUklILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>GenericAPIView 继承自 APIView，使用兼容 APIView，也就是说依旧可以使用 get，post等方法。</p><p>但是，这里 GenericAPIView 封装了更多有趣的方法。</p><ul><li>get_queryset(): 从类属性 queryset 中获得 model 的 queryset 数据</li><li>get_object(): 通过有名分组 pk 确定唯一操作对象<br>自定义主键的有名分组 ：lookup_field &#x3D; ‘id’</li><li>get_serializer()：从类属性 serializer_class 中获得serializer 的序列化类</li></ul><h2 id="二、Mixins：视图工具集"><a href="#二、Mixins：视图工具集" class="headerlink" title="二、Mixins：视图工具集"></a>二、Mixins：视图工具集</h2><p><code>mixins.py</code>：视图工具集，用来辅助 GenericAPIView<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvVzJUckZ6c2J4SVkzLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>包含有五个工具类文件，六个工具类方法：</p><ul><li>CreateModeMixin：<ul><li><strong>单增：</strong>create</li></ul></li><li>ListModelMixin：<ul><li><strong>群查：</strong>list</li></ul></li><li>RetrieveModelMixin：<ul><li><strong>单查：</strong>retrieve</li></ul></li><li>UpdateModelMixin：<ul><li><strong>单整体改：</strong>update</li><li><strong>单局部改：</strong>partial_update</li></ul></li><li>DestroyModelMixin：<ul><li><strong>单删：</strong>destroy，一般不使用该方法，或重写方法利用字段is_delete 来实现删除操作。</li></ul></li></ul><h3 id="1-群查"><a href="#1-群查" class="headerlink" title="1.群查"></a>1.群查</h3><h5 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvSkpweEFyVGtXNHRiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    List a queryset.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># get_queryset 通过子类继承 GenericAPIView 得到</span><br>        queryset = self.filter_queryset(self.get_queryset())<br><br>        page = self.paginate_queryset(queryset)<br>        <span class="hljs-keyword">if</span> page <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            serializer = self.get_serializer(page, many=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> self.get_paginated_response(serializer.data)<br><br>        serializer = self.get_serializer(queryset, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    List a queryset.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># get_queryset 通过子类继承 GenericAPIView 得到</span><br>        queryset = self.filter_queryset(self.get_queryset())<br><br>        page = self.paginate_queryset(queryset)<br>        <span class="hljs-keyword">if</span> page <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            serializer = self.get_serializer(page, many=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> self.get_paginated_response(serializer.data)<br><br>        serializer = self.get_serializer(queryset, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>继承工具类可以简化请求函数的实现体，但是必须继承 GenericAPIView，因为需要 GenericAPIView 提供类属性和方法。</p><p>工具类方法返回值是 Response 对象，可以用 response.data 拿到，扔给之前封装的APIResponse 类实现格式。</p><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 调用 ListModelMixin 的 list方法</span><br>        response = self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br>        <span class="hljs-comment"># 添加自己封装的 APIResponse</span><br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 调用 ListModelMixin 的 list方法</span><br>        response = self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br>        <span class="hljs-comment"># 添加自己封装的 APIResponse</span><br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^v3/books/$&#x27;</span>, views.BookListGenericAPIView.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^v3/books/$&#x27;</span>, views.BookListGenericAPIView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^v3/books/(?P<pk>.*)/$&#x27;</span>, views.BookListGenericAPIView.as_view()),<br>]<br><br></code></pre></td></tr></table></figure><h5 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvR1hENHh2MDBYVDFxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="2-单查"><a href="#2-单查" class="headerlink" title="2.单查"></a>2.单查</h3><h5 id="查看源码-1"><a href="#查看源码-1" class="headerlink" title="查看源码"></a>查看源码</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvYnhUYjdieXpxZzRDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RetrieveModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Retrieve a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retrieve</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        instance = self.get_object()<br>        serializer = self.get_serializer(instance)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RetrieveModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Retrieve a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retrieve</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        instance = self.get_object()<br>        serializer = self.get_serializer(instance)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, RetrieveModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;pk&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>            response = self.retrieve(request, *args, **kwargs)<br>        <span class="hljs-keyword">else</span>:<br>            response = self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, RetrieveModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;pk&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>            response = self.retrieve(request, *args, **kwargs)<br>        <span class="hljs-keyword">else</span>:<br>            response = self.<span class="hljs-built_in">list</span>(request, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br></code></pre></td></tr></table></figure><h5 id="测试接口-1"><a href="#测试接口-1" class="headerlink" title="测试接口"></a>测试接口</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvT211dUFvODZwVDZZLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="3-单增"><a href="#3-单增" class="headerlink" title="3.单增"></a>3.单增</h3><h5 id="查看源码-2"><a href="#查看源码-2" class="headerlink" title="查看源码"></a>查看源码</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvS0lnYXVxOHVCUTJ4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>查看 <code>CreateModelMixin</code> 源码</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Create a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 序列化</span><br>        serializer = self.get_serializer(data=request.data)<br>        <span class="hljs-comment"># 验证</span><br>        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># 表单数据重建，函数名有语义，而直接调用逻辑是无意义的</span><br>        self.perform_create(serializer)<br>        <span class="hljs-comment"># 设置 header</span><br>        headers = self.get_success_headers(serializer.data)<br>        <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_create</span>(<span class="hljs-params">self, serializer</span>):<br>        serializer.save()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_success_headers</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;Location&#x27;</span>: <span class="hljs-built_in">str</span>(data[api_settings.URL_FIELD_NAME])&#125;<br>        <span class="hljs-keyword">except</span> (TypeError, KeyError):<br>            <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Create a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 序列化</span><br>        serializer = self.get_serializer(data=request.data)<br>        <span class="hljs-comment"># 验证</span><br>        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># 表单数据重建，函数名有语义，而直接调用逻辑是无意义的</span><br>        self.perform_create(serializer)<br>        <span class="hljs-comment"># 设置 header</span><br>        headers = self.get_success_headers(serializer.data)<br>        <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_create</span>(<span class="hljs-params">self, serializer</span>):<br>        serializer.save()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_success_headers</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;Location&#x27;</span>: <span class="hljs-built_in">str</span>(data[api_settings.URL_FIELD_NAME])&#125;<br>        <span class="hljs-keyword">except</span> (TypeError, KeyError):<br>            <span class="hljs-keyword">return</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p>可以看到这个类就是把之前单增的方法封装在一起方便调用</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, CreateModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.create(request, *args, **kwargs)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, CreateModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.create(request, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br></code></pre></td></tr></table></figure><h5 id="测试接口-2"><a href="#测试接口-2" class="headerlink" title="测试接口"></a>测试接口</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvdUFvMWxkN08yRUI4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="4-单改"><a href="#4-单改" class="headerlink" title="4.单改"></a>4.单改</h3><h5 id="查看源码-3"><a href="#查看源码-3" class="headerlink" title="查看源码"></a>查看源码</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Update a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 实现单整体改</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        partial = kwargs.pop(<span class="hljs-string">&#x27;partial&#x27;</span>, <span class="hljs-literal">False</span>)<br>        instance = self.get_object()<br>        serializer = self.get_serializer(instance, data=request.data, partial=partial)<br>        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        self.perform_update(serializer)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">getattr</span>(instance, <span class="hljs-string">&#x27;_prefetched_objects_cache&#x27;</span>, <span class="hljs-literal">None</span>):<br>            <span class="hljs-comment"># If &#x27;prefetch_related&#x27; has been applied to a queryset, we need to</span><br>            <span class="hljs-comment"># forcibly invalidate the prefetch cache on the instance.</span><br>            instance._prefetched_objects_cache = &#123;&#125;<br><br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_update</span>(<span class="hljs-params">self, serializer</span>):<br>        serializer.save()<br><br>    <span class="hljs-comment"># 单局部改，调用 update 设置 partial = True</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        kwargs[<span class="hljs-string">&#x27;partial&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateModelMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Update a model instance.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 实现单整体改</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        partial = kwargs.pop(<span class="hljs-string">&#x27;partial&#x27;</span>, <span class="hljs-literal">False</span>)<br>        instance = self.get_object()<br>        serializer = self.get_serializer(instance, data=request.data, partial=partial)<br>        serializer.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        self.perform_update(serializer)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">getattr</span>(instance, <span class="hljs-string">&#x27;_prefetched_objects_cache&#x27;</span>, <span class="hljs-literal">None</span>):<br>            <span class="hljs-comment"># If &#x27;prefetch_related&#x27; has been applied to a queryset, we need to</span><br>            <span class="hljs-comment"># forcibly invalidate the prefetch cache on the instance.</span><br>            instance._prefetched_objects_cache = &#123;&#125;<br><br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perform_update</span>(<span class="hljs-params">self, serializer</span>):<br>        serializer.save()<br><br>    <span class="hljs-comment"># 单局部改，调用 update 设置 partial = True</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_update</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        kwargs[<span class="hljs-string">&#x27;partial&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> self.update(request, *args, **kwargs)<br></code></pre></td></tr></table></figure><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, UpdateModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.update(request, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.partial_update(request, *args, **kwargs)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListGenericAPIView</span>(ListModelMixin, UpdateModelMixin, GenericAPIView):<br>    queryset = models.Book.objects.<span class="hljs-built_in">filter</span>(is_delete=<span class="hljs-literal">False</span>)<br>    serializer_class = serializers.BookModelSerializer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.update(request, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        response = self.partial_update(request, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> APIResponse(results=response.data)<br></code></pre></td></tr></table></figure><h5 id="测试接口-3"><a href="#测试接口-3" class="headerlink" title="测试接口"></a>测试接口</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkva3kyMFdxOFB4QXJkLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>修改成功<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTkvUWkxY1dCZ09kZmh0LnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> django </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> djang rest </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂进化树（图文详解）</title>
      <link href="/posts/22146/"/>
      <url>/posts/22146/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是进化树"><a href="#一、什么是进化树" class="headerlink" title="一、什么是进化树"></a>一、什么是进化树</h2><p><strong>系统发育进化树 (<em>Phylogenetic tree</em>)：</strong> 一般也叫系统进化树，进化树。它可以利用树状分支图形来表示各物种或基因间的亲缘关系。</p><p>建进化树的过程，用术语讲：</p><p><strong>分支系统发育分析 (<em>Molecular phylogenetic analysis</em>)：</strong> 是用来研究物种或序列进化和系统分类的一种方法。一般研究对象是碱基序列或氨基酸序列，通过数理统计算法来计算生物间进化关系。最后，根据计算结果，可视化为系统进化树。</p><h2 id="二、进化树的构成"><a href="#二、进化树的构成" class="headerlink" title="二、进化树的构成"></a>二、进化树的构成</h2><p>我们模拟一个项目，使用人和鼠的各两个基因做进化树，结果如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvUFZoMDZBVVE1a3M2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以看到上面有一堆标注，下面来看看它们代表什么意义：</p><h5 id="1-根-Root"><a href="#1-根-Root" class="headerlink" title="1. 根 (Root)"></a>1. <strong>根 (<em>Root</em>)</strong></h5><p>所有分支的共同祖先叫做根</p><p>根据有无根可分为：</p><p>有根树：上面的图就是有根树，可以从树中找到共同的祖先。</p><p>无根树：顾名思义，没有根，也就找不到共同的祖先。比如后边会提到的 Straight Tree</p><h5 id="2-结点-Node"><a href="#2-结点-Node" class="headerlink" title="2. 结点 (Node)"></a><strong>2. 结点 (<em>Node</em>)</strong></h5><p>每个结点代表一个分类单元，物种上可以是属，种群等，基因上可以是基因家族，同源物等。</p><blockquote><p>这里需要注意，有的人会把 node 翻译为节点，但是节点与结点有着不一样的含义：</p><p><strong>节点：</strong>通常被认为是一个实体，比如互联网上的每台计算机，蛋白互作网络的每个蛋白质。</p><p><strong>结点：</strong>只是一个交叉点，指交汇点，并不代表一个实体或事物</p><p>所以，在进化树中 node 最好翻译为结点。在计算机数据结构链表也需要注意二者区别。</p></blockquote><p>但是，也有另外一种解释：</p><p>这种解释将 node 分为 外部节点与内部节点：</p><p>外部节点又叫叶节点，也就是最外层的人基因1，人基因2等，代表参与分析的序列样本</p><p>内部节点，也就是我们使用蓝色标注的位置，代表假定祖先。</p><h5 id="3-进化支-Branch"><a href="#3-进化支-Branch" class="headerlink" title="3. 进化支 (Branch)"></a>3. 进化支 (<em>Branch</em>)</h5><p>也叫分支，指两种及以上的生物或序列组成的进化关系。</p><p>可以利用这个来看同源。比如，上图中人基因1与人基因2可能是旁系同源基因，而人基因1与鼠基因1可能是直系同源基因。</p><h5 id="4-外群"><a href="#4-外群" class="headerlink" title="4. 外群"></a>4. 外群</h5><p>与分析序列相关的生物序列，但是具有较远的亲缘关系。</p><h5 id="5-进化分支长度"><a href="#5-进化分支长度" class="headerlink" title="5. 进化分支长度"></a>5. 进化分支长度</h5><p>也叫遗传变异度，进化距离。一般会标注在分支线上，代表进化支变化的程度，越短代表差异越小，进化距离越近。比如人基因1与人基因2的遗传变异度为 0.21+0.22&#x3D;0.43。<br>遗传变异度实际代表基因组序列中每个位点碱基的替换频率，计算方法也很简单：变异度&#x3D;变异碱基数&#x2F;总碱基数(%)。我们常见的形式，通常以0-1的小数来表示，代表100个碱基位点的变异度大小。</p><p>我们可以从水平方向上的分支及长度，看到进化谱系随着时间的变化，进化分支长度越长代表着该分支对应的物种或基因的变化越大。比如，对应上图，我们可以描述为人基因1相对其他基因在进化时间上更早，而且在进化时间上鼠基因2最晚。</p><p>有意思的是，根据基因序列相似度与进化时间假说对这种进化距离进行转换，就可以得到分子钟。比如，用它分析病毒进化树，甚至可以推断出初代病毒产生的时间点。</p><h5 id="6-距离标尺"><a href="#6-距离标尺" class="headerlink" title="6. 距离标尺"></a>6. 距离标尺</h5><p>生物或序列间差异数值的单位长度，相当于进化树的比例尺。</p><h5 id="7-Bootstrap-value"><a href="#7-Bootstrap-value" class="headerlink" title="7. Bootstrap value"></a>7. Bootstrap value</h5><p>一般会标注在结点，用来评估该分支的可信度。</p><p>Bootstrap value 对于我们后续分析比较重要，尤其在进化树评估中。</p><h2 id="三、进化树评估"><a href="#三、进化树评估" class="headerlink" title="三、进化树评估"></a>三、进化树评估</h2><h5 id="1-Bootstrap检验"><a href="#1-Bootstrap检验" class="headerlink" title="1. Bootstrap检验"></a>1. Bootstrap检验</h5><p>对于进化树评估一般会使用 Bootstrap 进行检验。</p><p>Bootstrap检验，自举法检验，也叫自展，自助法。其实就是放回式抽样统计法的一种，通过对数据集多次重复取样，构建多个进化树，用来检查给定树的分枝可信度。</p><h5 id="2-重复取样值"><a href="#2-重复取样值" class="headerlink" title="2. 重复取样值"></a>2. 重复取样值</h5><p>那么重复取样的次数会在建树时设置，现在一般文章要求Bootstrap 取样值 &gt;1000。</p><h5 id="3-Bootstrap-value-阈值"><a href="#3-Bootstrap-value-阈值" class="headerlink" title="3. Bootstrap value 阈值"></a>3. Bootstrap value 阈值</h5><p>虽然根据严格的统计学概念，自展值需要要大于95%才较为可信。</p><p>然而在实际应用中，我们一般认为结点的 Bootstrap value &gt; 70，这个分支就是可靠的。特别是微生物等相似度比较大的分类中，一般大于50%就认为可信（小于50%不会显示）。</p><h5 id="4-Bootstrap-value-与分支"><a href="#4-Bootstrap-value-与分支" class="headerlink" title="4. Bootstrap value 与分支"></a>4. Bootstrap value 与分支</h5><p>如果低 Bootstrap value 更靠近分支末端，代表相似度太高而很难区分</p><p>如果低 Bootstrap value 更靠近根，代表相似度太低</p><h2 id="四、几种进化树图"><a href="#四、几种进化树图" class="headerlink" title="四、几种进化树图"></a>四、几种进化树图</h2><h4 id="1-经典树图（Traditional）"><a href="#1-经典树图（Traditional）" class="headerlink" title="1.经典树图（Traditional）"></a>1.经典树图（Traditional）</h4><h5 id="Rectangle-Tree"><a href="#Rectangle-Tree" class="headerlink" title="Rectangle Tree"></a>Rectangle Tree</h5><p>优点很明显，就是可以清晰的展示出样本间进化距离和进化分支。缺点就是展示出来效果不炫。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvV1BnSm9YVE03SlNCLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>有时候也可以这样显示，相对来说，更酷一点：</p><p><strong>Straight Tree</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvZWp6anFQSW9UbmpRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>再酷一点：</p><p><strong>Curved Tree</strong></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WLdqvhP6-1589796648372)(<a href="http://baimoc.ziptop.top/blog/20200517/XG77wrqmX6W8.png)]">http://baimoc.ziptop.top/blog/20200517/XG77wrqmX6W8.png)]</a></p><h4 id="2-圈图（Circle-Tree）"><a href="#2-圈图（Circle-Tree）" class="headerlink" title="2.圈图（Circle Tree）"></a>2.圈图（Circle Tree）</h4><p>本质上是将树图极坐标化。这种图，可以说是进化树最炫的一种展示，而且在分析样本数量大的时候，效果更佳。但是，致命缺点是可读性不好，比如很难横向对比进化距离。因此，适用于展示差异较大的物种或基因样本。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvREhreUhHUTVxZG1hLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="3-辐射树（Radiation-Tree）"><a href="#3-辐射树（Radiation-Tree）" class="headerlink" title="3.辐射树（Radiation Tree）"></a>3.辐射树（Radiation Tree）</h4><p>这种图用于根不确定的进化树构建。它可以将相似度高的样本序列聚集在一起。因此，更适合做亲缘关系近的物种或差异小的基因样本。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvSHhjZUNKRG9UZG5OLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 进化树 </tag>
            
            <tag> 系统发育进化树 </tag>
            
            <tag> 序列比对 </tag>
            
            <tag> 系统发育分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架的 FBV 与 CBV 选择</title>
      <link href="/posts/35794/"/>
      <url>/posts/35794/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是-FBV与CBV"><a href="#一、什么是-FBV与CBV" class="headerlink" title="一、什么是 FBV与CBV"></a>一、什么是 FBV与CBV</h2><h4 id="FBV-function-base-view"><a href="#FBV-function-base-view" class="headerlink" title="FBV: function base view"></a>FBV: function base view</h4><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">users</span>(<span class="hljs-params">request</span>):    <br>    user_list = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;tom&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">27</span><br>    &#125;<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">users</span>(<span class="hljs-params">request</span>):    <br>    user_list = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;tom&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">27</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> HttpResponse(json.dumps(user_list))<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> tutorial01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;users&#x27;</span>,views.users),<br>    path(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> tutorial01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;users&#x27;</span>,views.users),<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>]<br><br></code></pre></td></tr></table></figure><h4 id="CBV-class-base-view"><a href="#CBV-class-base-view" class="headerlink" title="CBV: class base view"></a>CBV: class base view</h4><p>推荐使用CBV</p><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># 如何知道数据传输方法？</span><br>    <span class="hljs-comment"># 通过反射实现</span><br>    <span class="hljs-comment"># getattr(obj, request.method)</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;GET&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersView</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># 如何知道数据传输方法？</span><br>    <span class="hljs-comment"># 通过反射实现</span><br>    <span class="hljs-comment"># getattr(obj, request.method)</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;GET&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"POST"</span>)<br><br><br><br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> tutorial01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;users&#x27;</span>,views.UsersView.as_view()),<br>    path(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> tutorial01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;users&#x27;</span>,views.UsersView.as_view()),<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>]<br><br></code></pre></td></tr></table></figure><h2 id="二、CBV-实现原理：反射"><a href="#二、CBV-实现原理：反射" class="headerlink" title="二、CBV 实现原理：反射"></a>二、CBV 实现原理：反射</h2><blockquote><p>反射机制就是在运行时，动态的确定对象的类型，并可以通过字符串调用对象属性、方法、导入模块，是一种基于字符串的事件驱动。</p><p>在python中支持反射机制的函数有<code>getattr()、setattr()、delattr()、exec()、eval()、__import__</code>。</p></blockquote><p>CBV 基于反射来根据请求方式不同，执行不同方法</p><p>ChildView 子类继承 View 父类后，</p><p>浏览器通过url传给路由，由as_view 进入ChildView，ChildView通过View的 dispatch 方法来根据不同请求方法执行不同的方法</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvWXlNdGZSUGZKdUowLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>:<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># Try to dispatch to the right method; if a method doesn&#x27;t exist,</span><br>        <span class="hljs-comment"># defer to the error handler. Also defer to the error handler if the</span><br>        <span class="hljs-comment"># request method isn&#x27;t on the approved list.</span><br>        <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> self.http_method_names:<br>            <span class="hljs-comment"># 通过 getattr 实现反射机制</span><br>            handler = <span class="hljs-built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)<br>        <span class="hljs-keyword">else</span>:<br>            handler = self.http_method_not_allowed<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>:<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># Try to dispatch to the right method; if a method doesn&#x27;t exist,</span><br>        <span class="hljs-comment"># defer to the error handler. Also defer to the error handler if the</span><br>        <span class="hljs-comment"># request method isn&#x27;t on the approved list.</span><br>        <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> self.http_method_names:<br>            <span class="hljs-comment"># 通过 getattr 实现反射机制</span><br>            handler = <span class="hljs-built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)<br>        <span class="hljs-keyword">else</span>:<br>            handler = self.http_method_not_allowed<br>        <span class="hljs-keyword">return</span> handler(request, *args, **kwargs)<br></code></pre></td></tr></table></figure><h2 id="三、CBV-面向对象"><a href="#三、CBV-面向对象" class="headerlink" title="三、CBV 面向对象"></a>三、CBV 面向对象</h2><h4 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h4><ul><li><p>同一类方法封装到类中</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    // 文件增删改查方法<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DB</span>：<br>// 数据库增删改查方法<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    // 文件增删改查方法<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DB</span>：<br>// 数据库增删改查方法<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>将数据封装到对象中</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DB</span>:<br>    // 文件增删改查方法<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password</span>):<br>        self.username = username<br>        self.password = password<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword">pass</span><br>obj1 = File(<span class="hljs-string">&#x27;baimoc&#x27;</span>,<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DB</span>:<br>    // 文件增删改查方法<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password</span>):<br>        self.username = username<br>        self.password = password<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>:<br>        <span class="hljs-keyword">pass</span><br>obj1 = File(<span class="hljs-string">&#x27;baimoc&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h4><p>避免重复编写共用的功能</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBaseView</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before&#x27;</span>)<br>        <span class="hljs-comment"># 执行父类的 dispatch 方法</span><br>        <span class="hljs-comment"># super 除了可以让子类继承父类的方法，同时还可以执行子类的其他父类的 方法</span><br>        ret = <span class="hljs-built_in">super</span>(MyBaseView, self).dispatch(request, *args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after&#x27;</span>)<br>        <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-comment"># 继承时，前面的类优先级高</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersView</span>(MyBaseView, View):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get&#x27;</span>)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;GET&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBaseView</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before&#x27;</span>)<br>        <span class="hljs-comment"># 执行父类的 dispatch 方法</span><br>        <span class="hljs-comment"># super 除了可以让子类继承父类的方法，同时还可以执行子类的其他父类的 方法</span><br>        ret = <span class="hljs-built_in">super</span>(MyBaseView, self).dispatch(request, *args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after&#x27;</span>)<br>        <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-comment"># 继承时，前面的类优先级高</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersView</span>(MyBaseView, View):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get&#x27;</span>)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;GET&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"POST"</span>)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">Quit the server with CTRL-BREAK.<br>before<br>get<br>after<br></code></pre></td></tr></table></figure><h2 id="四、Django-中间件方法与流程"><a href="#四、Django-中间件方法与流程" class="headerlink" title="四、Django 中间件方法与流程"></a>四、Django 中间件方法与流程</h2><p>中间件负责把各个模块将客户端请求经过路由匹配和视图处理返回给客户端</p><p>包括五个方法</p><ul><li>process_request</li><li>process_response</li><li>process_view</li><li>process_exception</li><li>process_render_template</li></ul><p>执行流程</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvYmxoUll6TXJ0dW03LnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> django rest 框架 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 03 | 模型建立与表设计</title>
      <link href="/posts/8315/"/>
      <url>/posts/8315/</url>
      
        <content type="html"><![CDATA[<h2 id="一、设计表"><a href="#一、设计表" class="headerlink" title="一、设计表"></a>一、设计表</h2><p>假设需求，图书管理系统：<br><strong>Book</strong>: name, price, img, authors, publish, is_delete, create_time<br><strong>Publish</strong>: name, address, is_delete, create_time<br><strong>Author</strong>: name, age, is_delete, create_time<br><strong>AuthorDetail</strong>: mobile, author, is_delete, create_time</p><blockquote><p>为什么要加 is_delete 字段？</p><ul><li>只要入库的数据，永远不会被删除</li><li>如果主键 id 自增时，随便删除数据，会导致 id 不连续，查询时，会遗漏数据</li><li>只要该数据在入库了，就代表该数据有利用价值</li></ul><p>为什么 Author， AuthorDetail 要拆分为两张表？</p><ul><li>Author 的查询频率高，如果字段太多会影响查询效率。AuthorDetail 只在需要详情时，才会用到</li><li>这两张表一般是一对一的关系</li></ul></blockquote><h2 id="二、表关系"><a href="#二、表关系" class="headerlink" title="二、表关系"></a>二、表关系</h2><h4 id="1-表关系设置"><a href="#1-表关系设置" class="headerlink" title="1.表关系设置"></a>1.表关系设置</h4><ul><li>Book - Publish：多对一<br><code>publish = models.ForeignKey(to=&#39;Publish&#39;, on_delete=models.CASCADE)</code></li><li>Book - Author：多对多<br><code>authors = models.ManyToManyField(to=&#39;Author&#39;)</code></li><li>Author - AuthorDetail：一对一<br><code>author = models.OneToOneField(to=&#39;Author&#39;, on_delete=models.CASCADE)</code></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvR05KdXI2YlZXbUZOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="2-断开表关联"><a href="#2-断开表关联" class="headerlink" title="2.断开表关联"></a>2.断开表关联</h4><p>断关联：<code>db_constraint=True</code><br>断开关联后，可以用编程逻辑来实现表的数据同步，这样会增加效率</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    price = models.DecimalField(max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br>    img = models.ImageField(upload_to=<span class="hljs-string">&#x27;img&#x27;</span>, default=<span class="hljs-string">&#x27;img/default.jpg&#x27;</span>)<br>    publish = models.ForeignKey(to=<span class="hljs-string">&#x27;Publish&#x27;</span>, db_constraint=<span class="hljs-literal">True</span>, on_delete=models.CASCADE)<br>    authors = models.ManyToManyField(to=<span class="hljs-string">&#x27;Author&#x27;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;book&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;书籍&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    price = models.DecimalField(max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br>    img = models.ImageField(upload_to=<span class="hljs-string">&#x27;img&#x27;</span>, default=<span class="hljs-string">&#x27;img/default.jpg&#x27;</span>)<br>    publish = models.ForeignKey(to=<span class="hljs-string">&#x27;Publish&#x27;</span>, db_constraint=<span class="hljs-literal">True</span>, on_delete=models.CASCADE)<br>    authors = models.ManyToManyField(to=<span class="hljs-string">&#x27;Author&#x27;</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;book&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;书籍&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.name<br><br></code></pre></td></tr></table></figure><p>book 与 author 外键关系断开</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvSW1lamJYdDF5d1VDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不断开表连接</span><br>        on_delete=models.CASCADE,  <span class="hljs-comment"># 删除 AuthorDetail 不会影响 Author 表，但是如果删除 Author，AuthorDetail就会被一起删除</span><br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>  <span class="hljs-comment"># 正向查返回 name, 反向返回设置的 related_name</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不断开表连接</span><br>        on_delete=models.CASCADE,  <span class="hljs-comment"># 删除 AuthorDetail 不会影响 Author 表，但是如果删除 Author，AuthorDetail就会被一起删除</span><br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>  <span class="hljs-comment"># 正向查返回 name, 反向返回设置的 related_name</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure><p>author 与 author_detail 表关系断开</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvYTNxSk8zVUZTb1NBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="三、级联操作"><a href="#三、级联操作" class="headerlink" title="三、级联操作"></a>三、级联操作</h2><h4 id="1-CASCADE"><a href="#1-CASCADE" class="headerlink" title="1.CASCADE"></a>1.CASCADE</h4><ul><li><p>作者删除，详情删除：<code>models.CASCADE</code><br><code>models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        on_delete = models.CASCADE,<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        on_delete = models.CASCADE,<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure><p>数据库迁移</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">python manage.py makemigrations<br>python manage.py migrrate<br></code></pre></td></tr></table></figure><p>执行<code>script.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.AuthorDetail.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.AuthorDetail.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">1</span>).delete()<br></code></pre></td></tr></table></figure><p>作者详情删除，并不会影响作者</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTUvenhuZzdlME1BOEZWLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>执行<code>script.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.Author.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.Author.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">1</span>).delete()<br></code></pre></td></tr></table></figure><p>反之，删除作者后，详情随之删除</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTUvSTFtbEVUNWlqN3AxLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="2-SET-NULL"><a href="#2-SET-NULL" class="headerlink" title="2.SET_NULL"></a>2.SET_NULL</h4><ul><li><p>作者删除，外键置空：<code> on_delete=models.SET_NULL</code><br><code>models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,        <br>        null=<span class="hljs-literal">True</span>,<br>        on_delete=models.SET_NULL<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,        <br>        null=<span class="hljs-literal">True</span>,<br>        on_delete=models.SET_NULL<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure><p>数据库迁移</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">python manage.py makemigrations<br>python manage.py migrrate<br></code></pre></td></tr></table></figure><p>执行<code>script.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.Author.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>models.Author.objects.<span class="hljs-built_in">filter</span>(pk=<span class="hljs-number">1</span>).delete()<br></code></pre></td></tr></table></figure><p>作者删除后，作者详情保留，但是外键置空</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTUvbDR4a1JobnY2cE5RLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="3-SET-DEFAULT"><a href="#3-SET-DEFAULT" class="headerlink" title="3.SET_DEFAULT"></a>3.SET_DEFAULT</h4><ul><li><p>作者删除，作者详情设置默认值：<code> on_delete=models.SET_DEFAULT</code></p><p>与 models.SET_NULL 相似，只是将空换为默认值<br><code>models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        default=<span class="hljs-string">&#x27;default&#x27;</span>,<br>        on_delete=models.SET_DEFAULT<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        default=<span class="hljs-string">&#x27;default&#x27;</span>,<br>        on_delete=models.SET_DEFAULT<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-DO-NOTHING"><a href="#4-DO-NOTHING" class="headerlink" title="4.DO_NOTHING"></a>4.DO_NOTHING</h4><ul><li><p>作者删除，作者详情不改变：<code>on_delete=models.DO_NOTHING</code><br><code>models.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        default=<span class="hljs-string">&#x27;default&#x27;</span>,<br>        on_delete=models.DO_NOTHING<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,<br>        default=<span class="hljs-string">&#x27;default&#x27;</span>,<br>        on_delete=models.DO_NOTHING<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="四、Admin"><a href="#四、Admin" class="headerlink" title="四、Admin"></a>四、Admin</h2><p>通过 Admin 我们可以直接通过后台来编辑表</p><p><code>admin.py</code>注册</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>admin.site.register(models.Author)<br>admin.site.register(models.AuthorDetail)<br>admin.site.register(models.Book)<br>admin.site.register(models.Publish)<br></code></pre></td></tr></table></figure><p>创建后台用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">manage.py@def_proj01 > createsuperuser<br></code></pre></td></tr></table></figure><p>启动项目，登录</p><p><a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvbk51TWpVeTdnY2x2LnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> django rest 框架 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 04 | 序列化与反序列化及二者整合</title>
      <link href="/posts/29922/"/>
      <url>/posts/29922/</url>
      
        <content type="html"><![CDATA[<h2 id="一、序列化"><a href="#一、序列化" class="headerlink" title="一、序列化"></a>一、序列化</h2><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h4><ul><li>model s.py，定义表与字段，及表关系</li><li>serializes.py 中序列化与反序列化</li><li>views.py 中写 get，post 等操作</li><li>urls.py 定义路由</li></ul><h4 id="2-模拟场景"><a href="#2-模拟场景" class="headerlink" title="2.模拟场景"></a>2.模拟场景</h4><p>建立图书管理系统：<br>表Book: name, price, img, authors, publish, is_delete, create_time<br>表Publish: name, address, is_delete, create_time<br>表Author: name, age, is_delete, create_time<br>表AuthorDetail: mobile, author, is_delete, create_time</p><h4 id="3-模型构建"><a href="#3-模型构建" class="headerlink" title="3.模型构建"></a>3.模型构建</h4><p><code>modes.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># 基表</span><br><span class="hljs-comment"># 提供公用的字段，而不创建表</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseModel</span>(models.Model):<br>    is_delete = models.BooleanField(default=<span class="hljs-number">0</span>)<br>    create_time = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 作为基表的 Model 不能在数据库中创建表</span><br>    <span class="hljs-comment"># 声明基表，设置 abstract = True</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        abstract = <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    price = models.DecimalField(max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br>    img = models.ImageField(upload_to=<span class="hljs-string">&#x27;img&#x27;</span>, default=<span class="hljs-string">&#x27;img/default.jpg&#x27;</span>)<br>    publish = models.ForeignKey(<br>        to=<span class="hljs-string">&#x27;Publish&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;books&#x27;</span>,<br>        on_delete=models.DO_NOTHING<br>    )<br><br>    <span class="hljs-comment"># 需要注意 Author 这里设置 on_delete 不会生效</span><br>    <span class="hljs-comment"># 这是因为多对多，会在 book_author 的关系表来定义，级联关系 on_delete 在这定义</span><br>    authors = models.ManyToManyField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;books&#x27;</span><br>    )<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">publish_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.publish.name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">author_list</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.authors.values(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;detail__mobile&#x27;</span>).<span class="hljs-built_in">all</span>()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;book&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;书籍&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.name<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publish</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">64</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;publish&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;出版社&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不断开表连接</span><br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,  <span class="hljs-comment"># 相当于别名，调用时候用 detail 替换 authordetail</span><br>        on_delete = models.CASCADE,  <span class="hljs-comment"># 删除 AuthorDetail 不会影响 Author 表，但是如果删除 Author，AuthorDetail就会被一起删除</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># 基表</span><br><span class="hljs-comment"># 提供公用的字段，而不创建表</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseModel</span>(models.Model):<br>    is_delete = models.BooleanField(default=<span class="hljs-number">0</span>)<br>    create_time = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 作为基表的 Model 不能在数据库中创建表</span><br>    <span class="hljs-comment"># 声明基表，设置 abstract = True</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        abstract = <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    price = models.DecimalField(max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br>    img = models.ImageField(upload_to=<span class="hljs-string">&#x27;img&#x27;</span>, default=<span class="hljs-string">&#x27;img/default.jpg&#x27;</span>)<br>    publish = models.ForeignKey(<br>        to=<span class="hljs-string">&#x27;Publish&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;books&#x27;</span>,<br>        on_delete=models.DO_NOTHING<br>    )<br><br>    <span class="hljs-comment"># 需要注意 Author 这里设置 on_delete 不会生效</span><br>    <span class="hljs-comment"># 这是因为多对多，会在 book_author 的关系表来定义，级联关系 on_delete 在这定义</span><br>    authors = models.ManyToManyField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,<br>        related_name=<span class="hljs-string">&#x27;books&#x27;</span><br>    )<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">publish_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.publish.name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">author_list</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.authors.values(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;detail__mobile&#x27;</span>).<span class="hljs-built_in">all</span>()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;book&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;书籍&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.name<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publish</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">64</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;publish&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;出版社&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    author = models.OneToOneField(<br>        to=<span class="hljs-string">&#x27;Author&#x27;</span>,<br>        db_constraint=<span class="hljs-literal">False</span>,  <span class="hljs-comment"># 不断开表连接</span><br>        related_name=<span class="hljs-string">&#x27;detail&#x27;</span>,  <span class="hljs-comment"># 相当于别名，调用时候用 detail 替换 authordetail</span><br>        on_delete = models.CASCADE,  <span class="hljs-comment"># 删除 AuthorDetail 不会影响 Author 表，但是如果删除 Author，AuthorDetail就会被一起删除</span><br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;author_detail&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;作者详情&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.author&#125;</span>的详情&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4.序列化"></a>4.序列化</h4><p><code>serializes.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> ValidationError<br><span class="hljs-keyword">from</span> rest_framework.fields <span class="hljs-keyword">import</span> SerializerMethodField<br><span class="hljs-keyword">from</span> rest_framework.serializers <span class="hljs-keyword">import</span> ModelSerializer<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PublishModelSerializer</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Publish<br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializers</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-comment"># 自定义连表深度，子序列化方式</span><br>    <span class="hljs-comment"># 注意：调用时有加载顺序，PublishModelSerializer &gt;&gt; PublishModelSerializer</span><br>    <span class="hljs-comment"># 这里通过 book 中 publish 的外键，提数据</span><br>    publish = PublishModelSerializer()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment"># 序列化类关联的 model 类</span><br>        model = models.Book<br>        <span class="hljs-comment"># 参与序列化的字段</span><br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;price&#x27;</span>, <span class="hljs-string">&#x27;img&#x27;</span>,<span class="hljs-string">&#x27;author_list&#x27;</span>, <span class="hljs-string">&#x27;publish&#x27;</span>)<br><br>        <span class="hljs-comment"># 了解</span><br>        <span class="hljs-comment"># fields = &#x27;__all__&#x27;  # 所有字段</span><br>        <span class="hljs-comment"># exclude = (&#x27;id&#x27;, &#x27;is_delete&#x27;, &#x27;create_time&#x27;)  # 排除字段，剩下的显示，不可与 fields 共存</span><br>        <span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> ValidationError<br><span class="hljs-keyword">from</span> rest_framework.fields <span class="hljs-keyword">import</span> SerializerMethodField<br><span class="hljs-keyword">from</span> rest_framework.serializers <span class="hljs-keyword">import</span> ModelSerializer<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PublishModelSerializer</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Publish<br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializers</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-comment"># 自定义连表深度，子序列化方式</span><br>    <span class="hljs-comment"># 注意：调用时有加载顺序，PublishModelSerializer &gt;&gt; PublishModelSerializer</span><br>    <span class="hljs-comment"># 这里通过 book 中 publish 的外键，提数据</span><br>    publish = PublishModelSerializer()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment"># 序列化类关联的 model 类</span><br>        model = models.Book<br>        <span class="hljs-comment"># 参与序列化的字段</span><br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;price&#x27;</span>, <span class="hljs-string">&#x27;img&#x27;</span>,<span class="hljs-string">&#x27;author_list&#x27;</span>, <span class="hljs-string">&#x27;publish&#x27;</span>)<br><br>        <span class="hljs-comment"># 了解</span><br>        <span class="hljs-comment"># fields = &#x27;__all__&#x27;  # 所有字段</span><br>        <span class="hljs-comment"># exclude = (&#x27;id&#x27;, &#x27;is_delete&#x27;, &#x27;create_time&#x27;)  # 排除字段，剩下的显示，不可与 fields 共存</span><br>        <span class="hljs-comment"># depth = 1  # 自动联表查询深度</span><br></code></pre></td></tr></table></figure><h4 id="5-视图"><a href="#5-视图" class="headerlink" title="5.视图"></a>5.视图</h4><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk:<br>            <span class="hljs-keyword">try</span>:<br>                book_obj = models.Book.objects.get(pk=pk)<br>                book_data = serializers.BookModelSerializers(book_obj).data<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">return</span> Response(&#123;<br>                    <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Books does not exist&#x27;</span><br>                &#125;)<br>        <span class="hljs-keyword">else</span>:<br>            book_objs = models.Book.objects.<span class="hljs-built_in">all</span>()<br>            book_data = serializers.BookModelSerializers(book_objs, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk:<br>            <span class="hljs-keyword">try</span>:<br>                book_obj = models.Book.objects.get(pk=pk)<br>                book_data = serializers.BookModelSerializers(book_obj).data<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">return</span> Response(&#123;<br>                    <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Books does not exist&#x27;</span><br>                &#125;)<br>        <span class="hljs-keyword">else</span>:<br>            book_objs = models.Book.objects.<span class="hljs-built_in">all</span>()<br>            book_data = serializers.BookModelSerializers(book_objs, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string">&#x27;results&#x27;</span>: book_data<br>        &#125;)<br></code></pre></td></tr></table></figure><h4 id="6-路由"><a href="#6-路由" class="headerlink" title="6.路由"></a>6.路由</h4><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string">r&#x27;^books/(?P<pk>.*)/$&#x27;</span>, views.Book.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="7-测试接口"><a href="#7-测试接口" class="headerlink" title="7.测试接口"></a>7.测试接口</h4><p>使用 GET 查询结果</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvS25MdWRKMWsyREVTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="二、反序列化与验证"><a href="#二、反序列化与验证" class="headerlink" title="二、反序列化与验证"></a>二、反序列化与验证</h2><h4 id="1-反序列化"><a href="#1-反序列化" class="headerlink" title="1.反序列化"></a>1.反序列化</h4><p><code>serializers.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 反序列化</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelDeserializers</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Book<br>        <span class="hljs-comment"># 字段里只有设置了默认值，那么就不会报 This field is required.</span><br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;price&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>, <span class="hljs-string">&#x27;authors&#x27;</span>)<br>        <span class="hljs-comment"># extra_kwargs 用来完成反序列化字段的 系统校验规则</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;max_length&#x27;</span>: <span class="hljs-number">5</span>,<br>                <span class="hljs-string">&#x27;error_messages&#x27;</span>: &#123;<br>                    <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-string">&#x27;name field is required.&#x27;</span>,<br>                    <span class="hljs-string">&#x27;max_length&#x27;</span>: <span class="hljs-string">&#x27;too long&#x27;</span><br>                &#125;<br>            &#125;,<br>        &#125;<br><br>    <span class="hljs-comment"># 局部钩子</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, attrs</span>):<br>        <span class="hljs-comment"># 书名不重复</span><br>        <span class="hljs-comment"># if models.Book.objects.filter(name=attrs): # 已存在</span><br>        <span class="hljs-comment">#     raise ValidationError(&#x27;Book existed&#x27;)</span><br>        <span class="hljs-comment"># return attrs</span><br><br>        <span class="hljs-comment"># 书名不能包含 tmd 敏感字符</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;tmd&#x27;</span> <span class="hljs-keyword">in</span> attrs.lower():<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&#x27;tmd error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> attrs<br>    <br>    <span class="hljs-comment"># 全局钩子</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):<br>        <span class="hljs-comment"># 同一出版社不能出版同一本书</span><br>        publish = attrs.get(<span class="hljs-string">&#x27;publish&#x27;</span>)  <span class="hljs-comment"># 这里的外键已经变成对象</span><br>        name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> models.Book.objects.<span class="hljs-built_in">filter</span>(name=name, publish=publish):<br>            <span class="hljs-keyword">raise</span> ValidationError(&#123;<span class="hljs-string">&#x27;book&#x27;</span>: <span class="hljs-string">&#x27;Book exist.&#x27;</span>&#125;)<br>        <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># 反序列化</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelDeserializers</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Book<br>        <span class="hljs-comment"># 字段里只有设置了默认值，那么就不会报 This field is required.</span><br>        fields = (<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;price&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>, <span class="hljs-string">&#x27;authors&#x27;</span>)<br>        <span class="hljs-comment"># extra_kwargs 用来完成反序列化字段的 系统校验规则</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;max_length&#x27;</span>: <span class="hljs-number">5</span>,<br>                <span class="hljs-string">&#x27;error_messages&#x27;</span>: &#123;<br>                    <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-string">&#x27;name field is required.&#x27;</span>,<br>                    <span class="hljs-string">&#x27;max_length&#x27;</span>: <span class="hljs-string">&#x27;too long&#x27;</span><br>                &#125;<br>            &#125;,<br>        &#125;<br><br>    <span class="hljs-comment"># 局部钩子</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, attrs</span>):<br>        <span class="hljs-comment"># 书名不重复</span><br>        <span class="hljs-comment"># if models.Book.objects.filter(name=attrs): # 已存在</span><br>        <span class="hljs-comment">#     raise ValidationError(&#x27;Book existed&#x27;)</span><br>        <span class="hljs-comment"># return attrs</span><br><br>        <span class="hljs-comment"># 书名不能包含 tmd 敏感字符</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;tmd&#x27;</span> <span class="hljs-keyword">in</span> attrs.lower():<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&#x27;tmd error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> attrs<br>    <br>    <span class="hljs-comment"># 全局钩子</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):<br>        <span class="hljs-comment"># 同一出版社不能出版同一本书</span><br>        publish = attrs.get(<span class="hljs-string">&#x27;publish&#x27;</span>)  <span class="hljs-comment"># 这里的外键已经变成对象</span><br>        name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> models.Book.objects.<span class="hljs-built_in">filter</span>(name=name, publish=publish):<br>            <span class="hljs-keyword">raise</span> ValidationError(&#123;<span class="hljs-string">&#x27;book&#x27;</span>: <span class="hljs-string">&#x27;Book exist.&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span> attrs<br></code></pre></td></tr></table></figure><h4 id="2-视图"><a href="#2-视图" class="headerlink" title="2.视图"></a>2.视图</h4><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):...<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        book_ser = serializers.BookModelDeserializers(data=request_data)<br>        <span class="hljs-comment"># 当校验失败，马上终止当前视图方法，抛出异常返回给前端</span><br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_obj = book_ser.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models, serializers<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):...<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        book_ser = serializers.BookModelDeserializers(data=request_data)<br>        <span class="hljs-comment"># 当校验失败，马上终止当前视图方法，抛出异常返回给前端</span><br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_obj = book_ser.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string">&#x27;results&#x27;</span>: serializers.BookModelSerializers(book_obj).data<br>        &#125;)<br></code></pre></td></tr></table></figure><h4 id="3-测试接口"><a href="#3-测试接口" class="headerlink" title="3.测试接口"></a>3.测试接口</h4><p>使用 POST 第一次正常入库</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvZHZtVWZ0VkVDQnNLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>敏感字验证</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvYjV3MHZhR1htVGluLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>书名重复验证</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvaGY0T3hKTzJHN21LLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="三、序列化与反序列的整合"><a href="#三、序列化与反序列的整合" class="headerlink" title="三、序列化与反序列的整合"></a>三、序列化与反序列的整合</h2><p>从数据的安全性和健壮性来考虑，所有的自定义字段不能与 model 的原字段相同</p><p>因为序列化是将外键字段作为 Dict，而反序列化会将外键字段作为 Object</p><h4 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h4><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookV2</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk:<br>            <span class="hljs-keyword">try</span>:<br>                book_obj = models.Book.objects.get(pk=pk)<br>                book_data = serializers.BookV2ModelSerializer(book_obj).data<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">return</span> Response(&#123;<br>                    <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Books do not existed&#x27;</span><br>                &#125;)<br>        <span class="hljs-keyword">else</span>:<br>            book_obj = models.Book.objects.<span class="hljs-built_in">all</span>()<br>            book_data = serializers.BookV2ModelSerializer(book_obj, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string">&#x27;results&#x27;</span>: book_data<br>        &#125;)<br><br>    <span class="hljs-comment"># 单增，传的数据是与 model 对应的字典</span><br>    <span class="hljs-comment"># 群增，传的数据是装多个 model 对应字典的列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        book_ser = serializers.BookV2ModelSerializer(data=request_data)<br><br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_obj = book_ser.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">100</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string"><code class="language-hljs python">...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookV2</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        pk = kwargs.get(<span class="hljs-string">&#x27;pk&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pk:<br>            <span class="hljs-keyword">try</span>:<br>                book_obj = models.Book.objects.get(pk=pk)<br>                book_data = serializers.BookV2ModelSerializer(book_obj).data<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">return</span> Response(&#123;<br>                    <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Books do not existed&#x27;</span><br>                &#125;)<br>        <span class="hljs-keyword">else</span>:<br>            book_obj = models.Book.objects.<span class="hljs-built_in">all</span>()<br>            book_data = serializers.BookV2ModelSerializer(book_obj, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string">&#x27;results&#x27;</span>: book_data<br>        &#125;)<br><br>    <span class="hljs-comment"># 单增，传的数据是与 model 对应的字典</span><br>    <span class="hljs-comment"># 群增，传的数据是装多个 model 对应字典的列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        request_data = request.data<br>        book_ser = serializers.BookV2ModelSerializer(data=request_data)<br><br>        book_ser.is_valid(raise_exception=<span class="hljs-literal">True</span>)<br>        book_obj = book_ser.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">100</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>,<br>            <span class="hljs-string">&#x27;results&#x27;</span>: serializers.BookV2ModelSerializer(book_obj).data<br><br>        &#125;)<br></code></pre></td></tr></table></figure><h4 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a>2.路由</h4><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string">r&#x27;^books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string">r&#x27;^v2/books/$&#x27;</span>, views.BookV2.as_view()),<br>    url(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string">r&#x27;^books/(?P&lt;pk&gt;.*)/$&#x27;</span>, views.Book.as_view()),<br>    url(<span class="hljs-string">r&#x27;^v2/books/$&#x27;</span>, views.BookV2.as_view()),<br>    url(<span class="hljs-string">r&#x27;^v2/books/(?P<pk>.*)/$&#x27;</span>, views.BookV2.as_view()),<br>]<br><br></code></pre></td></tr></table></figure><h4 id="3-接口测试"><a href="#3-接口测试" class="headerlink" title="3.接口测试"></a>3.接口测试</h4><p>序列化演示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvdERYMkZMM25jN0hiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>反序列化演示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTYvVzhJMzlEdHpwWVBzLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> django rest 框架 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 02 | 设置与模块</title>
      <link href="/posts/885/"/>
      <url>/posts/885/</url>
      
        <content type="html"><![CDATA[<h2 id="一、设置"><a href="#一、设置" class="headerlink" title="一、设置"></a>一、设置</h2><p><code>setting.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br><br><br><span class="hljs-comment"># Quick-start development settings - unsuitable for production</span><br><span class="hljs-comment"># See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/</span><br><br><span class="hljs-comment"># SECURITY WARNING: keep the secret key used in production secret!</span><br>SECRET_KEY = <span class="hljs-string">&#x27;c$6r%hz+w4b7zsnjffb-uk1lt9-53__*r60(v5t-uznv-dq210&#x27;</span><br><br><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span><br>DEBUG = <span class="hljs-literal">True</span><br><br>ALLOWED_HOSTS = []<br><br><br><span class="hljs-comment"># Application definition</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-comment"># 系统的</span><br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br><br>    <span class="hljs-comment"># 第三方</span><br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,<br><br>    <span class="hljs-comment"># 自定义</span><br>    <span class="hljs-string">&#x27;api.apps.ApiConfig&#x27;</span>,<br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br>ROOT_URLCONF = <span class="hljs-string">&#x27;drf_proj.urls&#x27;</span><br><br>TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br><br>WSGI_APPLICATION = <span class="hljs-string">&#x27;drf_proj.wsgi.application&#x27;</span><br><br><br><span class="hljs-comment"># Database</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span><br><br>DATABASES = &#123;<br>    <span class="hljs-comment"># &#x27;default&#x27;: &#123;</span><br>    <span class="hljs-comment">#     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br>    <span class="hljs-comment">#     &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;drf_api01&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;857009236&#x27;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment"># Password validation</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators</span><br><br>AUTH_PASSWORD_VALIDATORS = [<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,<br>    &#125;,<br>]<br><br><br><span class="hljs-comment"># Internationalization</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/topics/i18n/</span><br><br>LANGUAGE_CODE = <span class="hljs-string">&#x27;en-us&#x27;</span><br><br>TIME_ZONE = <span class="hljs-string">&#x27;UTC&#x27;</span><br><br>USE_I18N = <span class="hljs-literal">True</span><br><br>USE_L10N = <span class="hljs-literal">True</span><br><br>USE_TZ = <span class="hljs-literal">True</span><br><br><br><span class="hljs-comment"># Static files (CSS, JavaScript, Images)</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span><br><br>STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br>MEDIA_URL = <span class="hljs-string">&#x27;/media/&#x27;</span><br><br>MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;media&#x27;</span>)<br><br><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span><br>    ],<br>    <span class="hljs-comment"># 全局解析类配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span><br>    ],<br>    <span class="hljs-comment"># 全局异常模块配置</span><br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br><br><br><span class="hljs-comment"># Quick-start development settings - unsuitable for production</span><br><span class="hljs-comment"># See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/</span><br><br><span class="hljs-comment"># SECURITY WARNING: keep the secret key used in production secret!</span><br>SECRET_KEY = <span class="hljs-string">&#x27;c$6r%hz+w4b7zsnjffb-uk1lt9-53__*r60(v5t-uznv-dq210&#x27;</span><br><br><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span><br>DEBUG = <span class="hljs-literal">True</span><br><br>ALLOWED_HOSTS = []<br><br><br><span class="hljs-comment"># Application definition</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-comment"># 系统的</span><br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br><br>    <span class="hljs-comment"># 第三方</span><br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,<br><br>    <span class="hljs-comment"># 自定义</span><br>    <span class="hljs-string">&#x27;api.apps.ApiConfig&#x27;</span>,<br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br>ROOT_URLCONF = <span class="hljs-string">&#x27;drf_proj.urls&#x27;</span><br><br>TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br><br>WSGI_APPLICATION = <span class="hljs-string">&#x27;drf_proj.wsgi.application&#x27;</span><br><br><br><span class="hljs-comment"># Database</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span><br><br>DATABASES = &#123;<br>    <span class="hljs-comment"># &#x27;default&#x27;: &#123;</span><br>    <span class="hljs-comment">#     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br>    <span class="hljs-comment">#     &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;drf_api01&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;857009236&#x27;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment"># Password validation</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators</span><br><br>AUTH_PASSWORD_VALIDATORS = [<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,<br>    &#125;,<br>]<br><br><br><span class="hljs-comment"># Internationalization</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/topics/i18n/</span><br><br>LANGUAGE_CODE = <span class="hljs-string">&#x27;en-us&#x27;</span><br><br>TIME_ZONE = <span class="hljs-string">&#x27;UTC&#x27;</span><br><br>USE_I18N = <span class="hljs-literal">True</span><br><br>USE_L10N = <span class="hljs-literal">True</span><br><br>USE_TZ = <span class="hljs-literal">True</span><br><br><br><span class="hljs-comment"># Static files (CSS, JavaScript, Images)</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span><br><br>STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br>MEDIA_URL = <span class="hljs-string">&#x27;/media/&#x27;</span><br><br>MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;media&#x27;</span>)<br><br><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span><br>    ],<br>    <span class="hljs-comment"># 全局解析类配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span><br>    ],<br>    <span class="hljs-comment"># 全局异常模块配置</span><br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;api.exception.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、路由模块"><a href="#二、路由模块" class="headerlink" title="二、路由模块"></a>二、路由模块</h2><p>1.项目路由：<code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;),<br><br>    <span class="hljs-comment"># 路由分发</span><br>    path(<span class="hljs-string">&#x27;api/&#x27;</span>, include(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;),<br><br>    <span class="hljs-comment"># 路由分发</span><br>    path(<span class="hljs-string">&#x27;api/&#x27;</span>, include(<span class="hljs-string">&#x27;api.urls&#x27;</span>)),<br>]<br></code></pre></td></tr></table></figure><p>2.应用路由：<code>urls.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>]<br></code></pre></td></tr></table></figure><h2 id="三、数据库模块"><a href="#三、数据库模块" class="headerlink" title="三、数据库模块"></a>三、数据库模块</h2><p>使用 mysql 作为数据库时，使用 pymysql 来调用</p><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">DATABASES = &#123;    <br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;drf_api01&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string"><code class="language-hljs python">DATABASES = &#123;    <br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;drf_api01&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;857009236&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目：<code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pymysql<br>pymysql.version_info = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;final&quot;</span>, <span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> pymysql<br>pymysql.version_info = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;final&quot;</span>, <span class="hljs-number">0</span>)<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><h2 id="四、异常模块"><a href="#四、异常模块" class="headerlink" title="四、异常模块"></a>四、异常模块</h2><p><code>exception.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler <span class="hljs-keyword">as</span> drf_exception_handler<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># drf 的 exception_handler 做基础处理</span><br>    response = drf_exception_handler((exc, context))<br>    <span class="hljs-comment"># 为空，自定义二次处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s - %s - %s&#x27;</span> % (context[<span class="hljs-string">&#x27;view&#x27;</span>], context[<span class="hljs-string">&#x27;request&#x27;</span>].method, exc))<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器错误&#x27;</span>,<br>        &#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR, exception=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler <span class="hljs-keyword">as</span> drf_exception_handler<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># drf 的 exception_handler 做基础处理</span><br>    response = drf_exception_handler((exc, context))<br>    <span class="hljs-comment"># 为空，自定义二次处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s - %s - %s&#x27;</span> % (context[<span class="hljs-string">&#x27;view&#x27;</span>], context[<span class="hljs-string">&#x27;request&#x27;</span>].method, exc))<br>        <span class="hljs-keyword">return</span> Response(&#123;<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器错误&#x27;</span>,<br>        &#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR, exception=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;    <br>    <span class="hljs-comment"># 全局异常模块配置</span><br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># 全局局部配置</span><br>REST_FRAMEWORK = &#123;    <br>    <span class="hljs-comment"># 全局异常模块配置</span><br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;api.exception.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> python </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> Django REST 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 的脚本化启动</title>
      <link href="/posts/56516/"/>
      <url>/posts/56516/</url>
      
        <content type="html"><![CDATA[<h2 id="一、脚本"><a href="#一、脚本" class="headerlink" title="一、脚本"></a>一、脚本</h2><p>在项目中，新建<code>script.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br></code></pre></td></tr></table></figure><h2 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h2><p>一般用来做外部调用或者测试使用</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>author = models.Author.objects.first()<br><span class="hljs-built_in">print</span>(author.name)<br><span class="hljs-built_in">print</span>(author.detail.mobile)<br><br>detail = models.AuthorDetail.objects.first()<br><span class="hljs-built_in">print</span>(detail.mobile)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-comment"># django 脚本化启动</span><br><span class="hljs-keyword">import</span> os, django<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br>django.setup()<br><br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br>author = models.Author.objects.first()<br><span class="hljs-built_in">print</span>(author.name)<br><span class="hljs-built_in">print</span>(author.detail.mobile)<br><br>detail = models.AuthorDetail.objects.first()<br><span class="hljs-built_in">print</span>(detail.mobile)<br><span class="hljs-built_in">print</span>(detail.author.name)<br></code></pre></td></tr></table></figure><h2 id="三、其他使用场景"><a href="#三、其他使用场景" class="headerlink" title="三、其他使用场景"></a>三、其他使用场景</h2><p>其实 Pycharm 也是使用这个操作来启动 Django 的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvWE1TTmZjeFF2VjJrLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们编辑启动配置时，会发现和上面的配置一致</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvbVBPRktNSVEzS3BwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>另外，<code>wsgi.py</code>同样也是</p><p><code>wsgi.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> django.core.wsgi <span class="hljs-keyword">import</span> get_wsgi_application<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> django.core.wsgi <span class="hljs-keyword">import</span> get_wsgi_application<br><br>os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;def_proj01.settings&#x27;</span>)<br><br>application = get_wsgi_application()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> Django REST </tag>
            
            <tag> 网站 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST 框架详解 01 | 安装与数据库配置</title>
      <link href="/posts/43307/"/>
      <url>/posts/43307/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvaXlQSWllemlKWDlNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>Django Rest Framework （DRF）是基于 Django 框架，用于构建 Web API 的工具集。</p><ul><li>提供 REST 接口开发规范</li><li>验证策略，包括 OAuth1a 和 OAuth2</li><li>支持ORM 和 非 ORM 数据源的序列化与反序列化操作</li><li>基于函数的视图操作</li><li>目前 Red Hat，Mozilla，Heroku等知名公司在使用。生物信息数据库开发中，EBI也使用 Django REST framework 作为开发工具</li></ul><p>DRF 官网：<a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p><p>GitHub：<a href="https://github.com/encode/django-rest-framework/tree/master">https://github.com/encode/django-rest-framework/tree/master</a></p><h2 id="二、材料"><a href="#二、材料" class="headerlink" title="二、材料"></a>二、材料</h2><p>Python3</p><p>MySQL &#x2F; Sqlite3</p><p>Pycharm：<a href="https://blog.csdn.net/u011262253/article/details/105902060">搭建 Python 高效开发环境： Pycharm + Anaconda</a></p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p>1.进入 Pycharm 创建新项目</p><p>File -&gt; New Project</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvbmdRZXFQUlZPSHFFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.命令行安装 djangorestframework，pymysql</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">install djangorestframework<br>install pymysql<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTcvcFB4MzU5dVJrYURnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="四、连接数据库"><a href="#四、连接数据库" class="headerlink" title="四、连接数据库"></a>四、连接数据库</h2><p>这里有提供两种选择</p><h3 id="Sqlite3"><a href="#Sqlite3" class="headerlink" title="Sqlite3"></a>Sqlite3</h3><p>Django 安装好默认会调用 Sqlite3，如果没有安装会报缺少 sqlite dll 文件的错误</p><p>解决参考：<a href="https://blog.csdn.net/u011262253/article/details/106175238">Windows 与 Linux 安装 sqlite3 数据库（图文详解）</a></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>1.进入mysql</p><p><code>mysql -uroot -p</code></p><p>2.创建database</p><p><code>create database drf_api01</code></p><p>3.<code>setting.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string"><code class="language-hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;your_password&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>your_project/__init__.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pymysql<br>pymysql.version_info = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;final&quot;</span>, <span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> pymysql<br>pymysql.version_info = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;final&quot;</span>, <span class="hljs-number">0</span>)<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><h2 id="五、其他命令"><a href="#五、其他命令" class="headerlink" title="五、其他命令"></a>五、其他命令</h2><p>1.数据库迁移操作</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">python manage.py makemigrations<br>python manage.py migrrate<br></code></pre></td></tr></table></figure><p>2.创建admin用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">python manage.py createsuperuser<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> Django REST </tag>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 与 Linux 安装 sqlite3 数据库（图文详解）</title>
      <link href="/posts/45589/"/>
      <url>/posts/45589/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h5><p><a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvRU45TmdEbDBlRFBuLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvZ0k3NnVpcHJQMWVILnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量"></a>3.设置环境变量</h5><ul><li><p>右键此电脑 -&gt; 属性<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvVktRNlZrVURMVjNuLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>新建环境变量<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvNlE4QXBZdWxlT1N1LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="4-验证安装是否成功"><a href="#4-验证安装是否成功" class="headerlink" title="4.验证安装是否成功"></a>4.验证安装是否成功</h5><ul><li><p>打开命令行，<code>win+R</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvYVRjanA0RFAzcW5xLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sqlite3<br></code></pre></td></tr></table></figure></li><li><p>安装完成</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTAvR3FhVGs5c3BEQmJyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wget http://www.sqlite.org/sqlite-3.7.1.tar.gz<br>tar -xzvf sqlite-3.7.1.tar.gz<br>cd sqlite-3.7.1<br>./configure --disable-tcl --prefix="/data/software"<br>make <br>make install<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> sqlite3 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 初始化密码，修改密码，重置忘记的密码</title>
      <link href="/posts/20055/"/>
      <url>/posts/20055/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化密码"><a href="#初始化密码" class="headerlink" title="初始化密码"></a>初始化密码</h2><p>1.进入mysql命令行</p><p><code>mysql -uroot</code></p><p>2.执行</p><p><code> ALTER USER&#39;root&#39;@&#39;localhost&#39;IDENTIFIED BY &#39;your_password&#39;;</code></p><p>3.提交</p><p><code>flush privileges;</code></p><p>4.退出</p><p><code>quit;</code></p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>1.进入mysql命令行</p><p><code>mysql -uroot -p</code></p><p>2.执行</p><p><code>set password for root@localhost = password(&#39;your_password&#39;);</code></p><p>3.退出</p><p><code>quit;</code></p><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><h3 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h3><p>1.停止mysql</p><p><code>net stop mysql</code></p><p>2.进入mysqld</p><p><code>mysqld --skip-grant-tables</code></p><p>3.新开CMD，进入mysql命令行</p><p><code>mysql -uroot</code></p><p>4.执行</p><p><code>use mysql;</code></p><p>5.修改密码</p><p><code>set password for root@localhost = password(&#39;your_password&#39;);</code></p><p>6.刷新权限表</p><p><code>flush privileges;</code></p><p>7.退出</p><p><code>quit;</code></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>1.停止mysql</p><p><code>service mysqld stop</code></p><p>2.修改</p><p><code>vim /etc/my.cnf</code></p><p>在mysqld下添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">[mysqld]<br>skip-grant-tables<br></code></pre></td></tr></table></figure><p>3.重启</p><p><code>service mysqld start</code></p><p>4.进入mysql</p><p><code>mysql -uroot</code></p><p>5.执行</p><p><code>use mysql;</code></p><p>6.修改密码</p><p><code>set password for root@localhost = password(&#39;your_password&#39;);</code></p><p>7.刷新权限表</p><p><code>flush privileges;</code></p><p>8.退出</p><p><code>quit;</code></p><p>9.删除 <code>skip-grant-tables</code></p><p><code>service mysqld stop</code></p><p><code>vim /etc/my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">skip-grant-tables<br></code></pre></td></tr></table></figure><p>10.重启mysql</p><p><code>service mysqld start</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> 修改密码 </tag>
            
            <tag> 忘记密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始 Vue 01 | 构建第一个 Vue_项目</title>
      <link href="/posts/38577/"/>
      <url>/posts/38577/</url>
      
        <content type="html"><![CDATA[<h2 id="一、材料"><a href="#一、材料" class="headerlink" title="一、材料"></a>一、材料</h2><p>nodejs （参考：<a href="https://blog.csdn.net/u011262253/article/details/105794652">一步一步安装及配置 Node.js 与 NPM</a>）</p><p>phpstorm （<a href="https://www.jetbrains.com/phpstorm/%EF%BC%89">https://www.jetbrains.com/phpstorm/）</a></p><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p><strong>1.配置node与npm</strong></p><p>phpstorm -&gt; File -&gt; Settings</p><p>输入npm，设置node与npm的安装路径</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkvOXIzd2F1SjBEZlE4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>2.配置eslint</strong></p><p>eslint是编程书写规范，可以让代码更简洁，具有更好的可读性</p><p>phpstorm -&gt; File -&gt; Settings<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkvZUhrMkR0d0xteUIwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>让 js 代码符合 eslint 风格<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkvbkZ6QUFLSXkyQnJhLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h2><p><strong>1.安装</strong></p><p>安装 Vue 脚手架</p><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">npm install -g @vue/cli<br></code></pre></td></tr></table></figure><p><strong>2.创建</strong></p><p>开始会问需要连接的仓库，这里是淘宝的仓库，直接回车选择默认<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvRnBVQjI1VEtLSmRULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>3.构建</strong></p><p>进入脚手架构建选项，这里选择<code>default</code></p><blockquote><p>这里上下选择，回车确定<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvZlJKUDJEOUI4dURHLnBuZw?x-oss-process=image/format,png" alt="mark"></p></blockquote><p><strong>4.选择安装模块</strong></p><p>安装常用的模块<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvSWdPRmRNTDdzVm15LnBuZw?x-oss-process=image/format,png" alt="mark"></p><blockquote><p>操作：</p><p>上下选择，空格选择，回车选择完成并确定</p><p>选项的介绍：</p><p>Babel： 可以将ES6语言，转化为低版本浏览器支持的ES5语言</p><p>TypeScript： 使项目兼容各种操作系统的各种浏览器的一种语言</p><p>Progressive Web App (PWA) support：离线应用开发方式</p><p>Router：路由相关模块</p><p>Vuex：复杂状态管理模块</p><p>CSS Pre-processors：Sass和Less支持</p><p>Linter&#x2F;Formatter：用来保持风格一致性</p><p>Unit Testing：测试用</p><p>E2E Testing：测试用</p></blockquote><p>过程如下：</p><p>选择路由模式，回车选择默认<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvdE1VdVRuUnJ2OTQ0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>选择CSS预处理器，回车选择默认</p><p>选择代码风格，这选择标准配置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvbDVBTDk1SFFKdkk0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>代码风格自动修复，这里需要Git支持<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvcndWSDFOYU84R1hGLnBuZw?x-oss-process=image/format,png" alt="mark"></p><blockquote><p>git 安装：<a href="https://blog.csdn.net/u011262253/article/details/97507271">https://blog.csdn.net/u011262253/article/details/97507271</a></p></blockquote><p>不同模块的配置文件是否分开保存，这里选择分开保存<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvcHZ1bXhhbjhIOVFLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>要不要将以上的配置保存，如果保存下次就不需要一个一个来选择。输入<code>y</code>回车，输入保存文件名回车<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvZEhMRE5IRWgxRjJuLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>5.下载模块构建项目</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvUDNjc2RkejZzOVNFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>6.安装成功会显示</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvbDRMNGVWWTlLQ0o0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h2 id="四、运行项目"><a href="#四、运行项目" class="headerlink" title="四、运行项目"></a>四、运行项目</h2><p><strong>1.启动开发环境</strong></p><p>三种方法：</p><ul><li>.命令行</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm run serve<br></code></pre></td></tr></table></figure><ul><li><p>main.js<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkvcVBieEhNR3lOanZmLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>工具<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkvTzdETlBSQURvd0RNLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p><strong>2.在浏览器输入对应的网址</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDkveDdIVlVIYkxBM0FqLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>3.浏览器会显示</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvOVVWUGs2UnJjZm4yLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 网站 </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> Vue </tag>
            
            <tag> node </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新冠病毒的自我修养</title>
      <link href="/posts/37172/"/>
      <url>/posts/37172/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200505173327735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70#pic_center"><br>在2月11日，世卫组织在日内瓦召开发布会，宣布将新型冠状病毒正式命名为 COVID-19。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0zODZkMGY4YmIxOGIxM2I3LnBuZw?x-oss-process=image/format,png"></p><p>这种 COVID-19 新冠病毒攻击的靶器官主要为肺部，因此我们大多听到的都是它引发的新冠肺炎。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS02ODQ3ZTUzNmQxZTI3OWRmLnBuZw?x-oss-process=image/format,png"></p><p>那么作为一颗合格的新冠病毒是如何进入人体的？</p><p>在进入人体后，会在身体里做些什么？</p><p>当在感染人体后，究竟是什么导致人体患上肺炎？</p><h2 id="入侵人体细胞"><a href="#入侵人体细胞" class="headerlink" title="入侵人体细胞"></a>入侵人体细胞</h2><p>当一位感染者通过打喷嚏，甚至说话聊天时，携带病毒的飞沫就有可能会落在你的嘴，鼻子里，进而进入肺部。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS04ZTc2MzBiNzE1OGU2OWM3LnBuZw?x-oss-process=image/format,png"></p><p>所以说，戴口罩正是阻断病毒进入人体途径的最有效也是最廉价的预防措施。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0xZThiOTJiM2Q4MWY2MjdmLnBuZw?x-oss-process=image/format,png"></p><p>这些飞沫携带着小到人肉眼是不可见的冠状病毒，以至于科学家只能用电子显微镜给它拍照：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0yMzQ2YTQ0MTgwZWRhZDZhLnBuZw?x-oss-process=image/format,png"></p><p>病毒身材呈圆形或椭圆形，直径约60-140nm，是一根头发丝的六百分之一。</p><p>为了更加直观的看它的结构，我们把它放大并给它的各个部分上个颜色。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1hMWUyMzRjYzBiN2YyYzU3LnBuZw?x-oss-process=image/format,png"></p><p>可以看到在灰色的蛋白质外壳上均匀镶嵌着大量的冠状突起，这种独特的长相就是它叫冠状病毒的原因。</p><p>进一步我们剖开它的内部，一团紫色的线状物质映入眼帘，这是它所有的遗传物质 RNA，也是病毒赖以生存和繁殖的根本。</p><p>总的来说，病毒由一堆蛋白质组件和其内部的 RNA 构成。</p><p>和其他病毒一样，新冠病毒并没有能力独立生存，因此必须要感染活细胞，借助它们的细胞器才能完成繁殖和生存。</p><p>其中，在冠状突起中最重要的一种蛋白叫做刺突糖蛋白（蓝色），这种蛋白可以识别人体细胞的表面ACE2蛋白（黄色）。举个例子，ACE2蛋白像一把锁，一般只有配对的钥匙才能打开它进入细胞内部。一颗合格的病毒会利用自己的技能合成出一把刺突糖蛋白仿制钥匙，堂而皇之的侵入细胞。这个过程就像这样：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jMWQ2MjE4NzE4YzEzNTUzLnBuZw?x-oss-process=image/format,png"></p><p>如果识别成功，那么接下来在蛋白质外壳的协助下，病毒会使用细胞融合技能进入人体细胞。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1kNjY0ZmZiMjQxMjk4YmJjLnBuZw?x-oss-process=image/format,png"></p><p>整个过程就像病毒利用自己仿制的钥匙开启了人体细胞的大门。</p><h2 id="层层伪装控制细胞"><a href="#层层伪装控制细胞" class="headerlink" title="层层伪装控制细胞"></a>层层伪装控制细胞</h2><p>我们的人体细胞像一座工厂，里面各种细胞器是不同工种的工人，齐心协力来维持着细胞工厂的正常运转。虽然病毒通过开锁技能进入体内，完成了入侵的第一步，但是细胞工厂的工人并不认识病毒，并不会心甘情愿的为他做事。甚至，有可能被认出入侵者的身份，被挫骨扬灰。</p><p>这里，病毒为了安全会开启自己的易容术技能，也就是在外面包裹一层细胞膜，进而潜入细胞深处。利用这层伪装，病毒可以轻松的在细胞工厂内部游荡。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1iMjkzOWYyN2UxOGJkNjRlLnBuZw?x-oss-process=image/format,png"></p><p>直到遇到合适的时机，它会脱去包膜，释放体内的 RNA。这里的 RNA 身兼两项任务，一是合成病毒蛋白质组件，二是复制 RNA 自身。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jMWJlNmYxYWYwYTA1NzM4LnBuZw?x-oss-process=image/format,png"></p><p>在第一项任务中，病毒会策反细胞里的核糖体来为自己服务。核糖体在细胞工厂的职责是制造蛋白质，但是现在，他会为病毒制造各种蛋白质组件，比如前面提到的刺突糖蛋白。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1hYzUwNTk5NmMyYzI0M2VkLnBuZw?x-oss-process=image/format,png"></p><p>生产出的蛋白质组件会吸附在高尔基体生成的小泡表面，进而转运到细胞膜。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0zODc3YjNjNGEwOWZjNDdiLnBuZw?x-oss-process=image/format,png"></p><p>另一项任务中，病毒通过控制细胞体内的酶，重新复制自己的遗传物质 RNA 用于孕育新病毒。而且，这个过程会抑制细胞自身基因的表达，集合被感染细胞的资源全力为病毒生产材料。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1iM2Y0ZDk4MGQ3NDA5ZjY4LnBuZw?x-oss-process=image/format,png"></p><p>最终，在细胞膜上会聚集大量的病毒蛋白质组件和 RNA。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0xYzllMGFmNTUwMTk5ODAxLnBuZw?x-oss-process=image/format,png"></p><p>一个全新装配的新冠状病毒会从细胞工厂被生成出来，他的使命是去感染另一个细胞。至此，这个不幸被病毒控制的细胞会完全沦陷，成为一个制造大量病毒的工厂。直到细胞工厂耗尽所有资源，病毒会果断抛弃它，寻找下一个健康细胞作为感染目标。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1kN2FhNjAwMWFlMjYzNjdhLnBuZw?x-oss-process=image/format,png"></p><h2 id="人体免疫系统的反击"><a href="#人体免疫系统的反击" class="headerlink" title="人体免疫系统的反击"></a>人体免疫系统的反击</h2><p>如果，不幸被病毒感染，而免疫系统又不够强大或者没有外部治疗，免疫细胞将会被大量的病毒淹没。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1lN2RhNzc3NTAwNGE5MjhmLnBuZw?x-oss-process=image/format,png"></p><p>与此同时，病毒会大面积屠杀肺部的纤毛细胞，让它们无法拦截病毒等外部侵略者。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS05MjhiMzQyZDViOTQ4YjJkLnBuZw?x-oss-process=image/format,png"></p><p>但是免疫系统并不会坐以待毙，大量的免疫细胞会与病毒殊死搏斗，这个过程中会释放细胞因子引发炎症反应，也是就我们常听到的肺炎。</p><p>这时战斗进入白热化阶段，炎症反应会引导免疫细胞攻击病毒所在的阵地，于是大量的免疫细胞集结向病毒发起进攻，同时源源不断的援军陆续抵达。</p><p>但是，这对于身体来说并不是一个好消息，该过程会正常的细胞也会在战争中被误伤，肺部开始出现蜂窝状穿孔。</p><p>这里为了方便理解，需要看看我们正常的肺部：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS05ZjE4MmJhMmRhOTM1MGY0LnBuZw?x-oss-process=image/format,png"></p><p>肺内部有大量的树枝状气管，逐级变细，直到每个树枝的末端会有一个名叫肺泡的囊状结构。这种富有弹性并且表面布满毛细血管的结构是我们呼吸氧气并排除二氧化碳的基础。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1lZTA5YzEwOGEzODk3OTEyLnBuZw?x-oss-process=image/format,png"></p><p>但是，由于战斗的持续，血管通透性增强，血液渗入肺泡，同时在肺泡内会分泌大量黏液。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1kYjE4YjYxMzc4NjgzMDAxLnBuZw?x-oss-process=image/format,png"></p><p>如果在这个时候，对患者肺部进行CT扫描，我们会看到像下面这样大面积白色区域，医学上称之为“白肺”。这样肺部失去了原有的交换气体功能，最终使正常呼吸变得异常困难。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jNzA2MGQ4NTBhMjI5NTE0LnBuZw?x-oss-process=image/format,png"></p><p>肺部遍地焦土，这个过程会引起发热、四肢乏力、干咳等症状，其他表现包含鼻塞、打喷嚏、流鼻涕、头痛、咽痛、咳血，咳痰、肌痛，或腹泻等。甚至会引发严重并发症，甚至发生呼吸衰竭，死亡。</p><p>千疮百孔的肺部会成为病毒进一步攻击的有利条件，它们会通过血管进入血液循环系统，而细胞因子会紧随其后。</p><p>它们来到的第一站是肝脏，这里是人体最重要的排毒器官，接下来这里会有一场恶战。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1iZDVmOWI5YzljY2ViZWZjLnBuZw?x-oss-process=image/format,png"></p><p>肝脏作为人体的排毒器官拥有丰富的血管网络，相当于拥有极其发达的高速公路网。在细胞因子的指示下，大量的免疫细胞得以快速集结与病毒在肝脏发起战斗，但是这里的战争的严重程度会直接导致细胞因子风暴，导致肝功能衰竭。这时，如果进行血液检测，会发现转氨酶含量飙升。</p><p>第二站：肾脏，这里是人体的清除代谢产物，重吸收水分并生成尿液的重要器官。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jMDA2Njc3NTQ1OTM3OTE4LnBuZw?x-oss-process=image/format,png"></p><p>与肝脏类似，这里也拥有高度发达的血管网。在成为免疫细胞和病毒的战场后，肾脏失去原有功能，大量代谢产物和毒素难以排出体外，肾脏这时也宣告衰竭。</p><p>接下来，病毒和免疫细胞间的战斗会转移到食管，胃，肠，甚至脑部。</p><h2 id="医疗措施支援免疫系统"><a href="#医疗措施支援免疫系统" class="headerlink" title="医疗措施支援免疫系统"></a>医疗措施支援免疫系统</h2><p>不排除有人可以直接使用自己的免疫系统杀死新冠病毒完成自愈，但是大多数感染者并没有这样强健的免疫系统。这些感染者的免疫系统需要医护工作者和外部医疗器械提供强力支援。</p><h3 id="呼吸机"><a href="#呼吸机" class="headerlink" title="呼吸机"></a>呼吸机</h3><p>为了给免疫系统充足的时间与病毒斗争，避免因呼吸功能受损而引发其他症状。</p><p>根据阿里巴巴提供的《新冠肺炎防治手册》中提到的机械通气解决方案，一般会采用呼吸机来作为辅助器械。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jNTRiMjJiZjNlNzQzMjU1LnBuZw?x-oss-process=image/format,png"></p><p>这里的呼吸机数量就间接决定了患者的存活率，为了让更多人活下来，全球各地开始大量生产和购买呼吸机。比如，美国动用《国防生产法》要求通用汽车等公司生产呼吸机，类似的，德国大众，英国戴森，法国空客，日本丰田等企业纷纷响应政府号召生产呼吸机挽救患者生命。</p><h3 id="ECMO"><a href="#ECMO" class="headerlink" title="ECMO"></a>ECMO</h3><p>随着1月22日湖北黄冈的第一例重症患者在ECMO的治疗下康复出院，这件医疗神器逐渐进入人们视野。在《新型冠状病毒感染的肺炎诊疗方案（试行第七版）》也提到 “俯卧位机械通气效果不佳者，如条件允许，应当尽快考虑体外膜肺氧合（ECMO）”。</p><p>我们知道上面的呼吸机是辅助患者呼吸，而ECMO的强大之处在于，可以直接代替患者呼吸。这台机器也有个别名，叫“人工心”，“人工肺”。甚至在人体的心肺功能全部丧失的情况下，它依然能为患者续命，为后续的治疗提供大量时间。以至于有的医生讲到，如果ECMO用多了，会感觉自己是上帝，可以直接从死神手里将患者抢回来。这无疑是一款重新界定生与死的医疗仪器。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0wNjk3MWRlMGNhNWM1MDFiLnBuZw?x-oss-process=image/format,png"></p><h2 id="药物治疗"><a href="#药物治疗" class="headerlink" title="药物治疗"></a>药物治疗</h2><p>新冠肺炎属于中医“疫”病范畴，病因为感受“疫戾”之气，各地根据病情、当地气候特点以及不同体质等情况，使用不同方案。其中，《新型冠状病毒感染的肺炎诊疗方案（试行第七版）》也提到有常见的中药试剂，比如，蕾香正气胶囊，连花清瘟胶囊，金花清感颗粒等等药物。</p><p>在西药方面，α-干扰素，洛匹那韦&#x2F;利托那韦等药物用于抗病毒治疗。同时，为了避免细菌感染，会使用抗生素等抗菌药物治疗。</p><h3 id="疫苗治疗"><a href="#疫苗治疗" class="headerlink" title="疫苗治疗"></a>疫苗治疗</h3><p>如果感染者的免疫系统足够强大或者通过外部治疗并没有死于上述的并发症。</p><p>身体的免疫系统将有机会产生大量抗体来与病毒进一步战斗。而疫苗最基本的原理就是激发免疫系统生成消灭对应外来异物的抗体，或者直接给体内注射抗体。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0wODljMDQ3NjA1MmZiN2VmLnBuZw?x-oss-process=image/format,png"></p><p>这些抗体会识别并结合之前提到的刺突糖蛋白，防止病毒仿制出可以打开细胞大门的钥匙。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1jMjZlODI5OGI5YTVlYTlkLnBuZw?x-oss-process=image/format,png"></p><p>另外，这些抗体会将病毒黏连在一起，同时通知免疫细胞中的吞噬细胞来摧毁病毒，避免它在体内蔓延。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS1lMWYzMWMxZGY4NTBmZGRlLnBuZw?x-oss-process=image/format,png"></p><p>最终，病毒的攻势会在免疫系统的积极应对下，土崩瓦解。</p><p>战胜新冠病毒的康复者血液中，在短时间内会储备大量的抗体避免病毒反扑，这些抗体是目前为止针对病毒的最有效的武器。因此在《新型冠状病毒感染的肺炎诊疗方案（试行第七版）》中提到 “康复者血浆治疗” 可以用于病情进展较快、重型和危重型患者。</p><p>利用康复者的血浆虽然可以治疗新冠肺炎患者，但毕竟不是长久之计。自从病毒与人类宣战后，消灭病毒最根本的办法就是批量制备疫苗，但是疫苗从研发到应用依然需要很长时间。</p><p>不过，好消息是，由军事科学院军事医学研究院生物工程研究所陈薇院士团队研发的腺病毒载体重组新冠病毒疫苗，已于4月12日开展二期临床试验。</p><p>世界卫生组织官网公布，这是全球目前唯一进入二期临床试验的新冠病毒疫苗。与此同时，还有全国和全球的科研人员也在用不同的方法来研发新冠病毒疫苗。</p><p>相信在不久的将来，新型冠状病毒 COVID-19 便会全军覆没，将像其他病毒一样永远作为人类的手下败将！</p><hr><p>参考：</p><p>COVID-19 Animation: What Happens If You Get Coronavirus?</p><p><a href="http://www.health.harvard.edu/">www.health.harvard.edu</a></p><p>covid-19.alibabacloud.com&#x2F;zh</p><p>宠物呼吸机都拿来救人了，中国呼吸机能帮全球喘口气吗？</p><p>央视新闻：陈薇院士团队研发的新冠病毒疫苗进入二期临床试验</p><p>《新冠肺炎防治手册》</p><p>《新冠疫情爆发下的医院应对策略（标准版）v2》</p><p>《新型冠状病毒感染的肺炎诊疗方案（试行第七版）》</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Python 高效开发环境： Pycharm + Anaconda</title>
      <link href="/posts/62162/"/>
      <url>/posts/62162/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvQXRpbVAyQVhzbFVULnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先来介绍下两位主角：</p><p><strong>Pycharm</strong>：目前一款主流的 Python 集成开发环境，它带有一整套帮助我们在Python开发时提高效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。</p><p>总的来说，Pycharm 会极大地提高我们 Python 开发的效率和体验，用过都说好。</p><p><strong>Anaconda</strong>：主要针对 Python 的数据科学整合包，包括有 Numpy，Pandas，Sklearn等。重要的是，自带管理软件 conda，它拥有安装，更新，删除，解决包依赖关系的包管理功能。同时，conda拥有环境管理功能，能创建独立运行环境， 使各项目间包环境和版本互不冲突和影响。另外，Conda 还可以管理包括 Bowtie2，FastQC 等软件环境，甚至 R 包环境。</p><p>总之，Anaconda 就是我们在编程时的管家，一切麻烦事扔给他，我们只要关注项目本身就行。</p><h3 id="安装-Pycharm"><a href="#安装-Pycharm" class="headerlink" title="安装 Pycharm"></a>安装 Pycharm</h3><p>1.网址：<a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><ul><li>Professional：收费，专业版会提供扩展，比如远程调试，插件支持，版本控制等</li><li>Community：免费，会包含常用的基础功能</li></ul><p>这里选择专业版为例，可以先试用30天。有的学校会购买，可以咨询下学校图书馆或计算机学院。也可以去官网购买，当然网上有许多方法可以获得，自行搜索。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvaXBvYjBZR3M4Q2p5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.开始安装</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvanc4cXVHVkhMd3pnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.选择安装位置，Next</p><blockquote><p>如果有固态硬盘，可以把 Pycharm 放进去，这样会极大的减少项目构建索引，载入导入时间。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvdHQ4YkRkRWNHRUk0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.可以根据需要来选择配置，建议全选</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvMnJRQjRDb0o3RTRlLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.安装</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvR2E1dGRKSnJ5TjBnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.安装完成后，点击刚刚在桌面上的快捷方式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvVmdxOE42YnpQajEwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.同意协议</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvQVFGVm4xeGMxUXRGLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>8.数据是否分享，根据情况来看</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvWTk1Y25XRXdPU1c3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>9.选择主题，我这里选择浅色</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvcUZyMUlZQWI1RE9xLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>10.根据需要安装插件</p><ul><li>IdeaVim：vim是Linux系统常用的编辑器，如果之前已经习惯用vim，可以安装</li><li>R：统计学编程语言，因为学习生物信息的原因，这里选择安装</li><li>AWS Tookit：是亚马逊云服务的扩增</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvVkl6RGRnOHpDNzlGLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>11.激活</p><p>因为这里安装的是专业版，可以先选择试用。点击<code>Evaluate</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvVVlibFJmN3JBQWdiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h3><p>1.根据系统选择合适的安装包，这里建议选择 Python 3.7 版本下载</p><p><a href="https://www.anaconda.com/products/individual#Downloads">https://www.anaconda.com/products/individual#Downloads</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvOEcyR3RSSEdJem9tLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.安装</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvVXdMT0dsYnFKcTRSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.同意协议</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvMEROTkNVbVBJUU91LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.Next</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvRkVrZWFMdmcwenR3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.选择安装路径</p><p>这里路径最后放在非系统盘，后续anaconda的操作会占用硬盘空间</p><p>我平时会为每种语言建立独立的安装目录，工作目录。这样的好处是在版本更新，和项目依赖关系清晰，后续更新也方便。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvcU44VEpZTGhtbG1nLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.开始安装</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvNzlodXVnS1ZHa0NDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.Next</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvRWg3UUttdWNWMUROLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>6.Next</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvMHVnWTU4TkYwN09HLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>7.安装完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvbzh0cnVwa3d0WVRmLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="新建包含-Anaconda-的项目"><a href="#新建包含-Anaconda-的项目" class="headerlink" title="新建包含 Anaconda 的项目"></a>新建包含 Anaconda 的项目</h3><p>1.第一次进入Pycharm，先新建项目，进入配置界面</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvTUpvSjdKQzdqaTlCLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.配置 Python 解释器</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvTzc1Uk41UWs1aVJiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>为了方便管理，这里 <code>Location</code> 配置项目存放目录，该目录与 Anaconda 在同一目录下。当然，不按照这样的目录结构也可以。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvSkhzd3k4YW1oWHYyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.切换到 <code>Conda Environment</code> ，找到我们刚刚安装 Anaconda 的目录并设置，同时勾选为所有项目应用该配置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvY2JWbnFBbTExdWptLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.配置完成后，解释器被 Pycharm 识别，点击创建</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvaW9qUDBqcTlrQUpoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.第一次创建项目，Pycharm 有初始化工作要做，耐心等待即可</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvTUJGTkpqamFuY0lMLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="Anaconda-环境的使用示例"><a href="#Anaconda-环境的使用示例" class="headerlink" title="Anaconda 环境的使用示例"></a>Anaconda 环境的使用示例</h3><p>0.工作区介绍</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvc0w3Y2lUelRTSUcxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>1.右键项目名，新建 Python 脚本</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvYlFOaWJXQzhNS3JBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.输入名字，注意这里不需要添加 <code>.py</code>后缀，回车后创建</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MDMvaml6S1MwMHlHR3QzLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.编写脚本</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dates = pd.date_range(<span class="hljs-string">&#x27;20200501&#x27;</span>, periods=<span class="hljs-number">6</span>)<br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>), index=dates, columns=<span class="hljs-built_in">list</span>(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dates = pd.date_range(<span class="hljs-string">&#x27;20200501&#x27;</span>, periods=<span class="hljs-number">6</span>)<br>df = pd.DataFrame(np.random.randn(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>), index=dates, columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;ABCD&#x27;</span>))<br></code></pre></td></tr></table></figure><p>4.右键脚本名，运行，测试配置是否成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvMDdubUlDaFZqYllwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5.运行这个脚本，会自动激活<code>Scientific Mode</code>，界面就像这样：</p><p>在左下输入<code>df.head()</code>，可以直接在控制台查看数据框内容，也可以在右边点击查看。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvdHJYMHpVRHZBVGxsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="Conda-环境的使用示例"><a href="#Conda-环境的使用示例" class="headerlink" title="Conda 环境的使用示例"></a>Conda 环境的使用示例</h3><p>有了 Anaconda 的支持，为什么还要 Conda 环境？</p><p>前面新建的 Anaconda 环境包含各种数据分析，机器学习等包，可以直接拿来用，并不需要再安装一遍，方便实用。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvRkN5cW56N1ZyZzMwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，有时候，我们并不需要这么多的包，而是需要特定版本的 Python 或者 Python 包，或是依赖冲突等问题，这就要求有一个独立运行的环境。而 Conda 建立的环境正好满足了这个需求。</p><p>1.新建包含有 Conda 环境的项目</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvbFFPUVdYZHZScVJRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.查看启用的环境</p><p>点击 Pycharm 下面的 <code>Termianl</code> 可以直接控制 Windows 的 CMD 命令行（这里不得不吐槽微软的 CMD 和 PowerShell 界面丑还超难用）。如果你的 Pycharm 运行在 Linux 下，这个工具会接管 Shell。</p><p>可以看到在最前面多了一个 <code>(example)</code> ，这个代表激活的 conda 环境</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvT0wzWTB6WGFLVkpNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.查看 conda 环境里有哪些包</p><p>输入命令 <code>conda list</code>，可以查看我们建立的环境里包含哪些包。</p><blockquote><p>学习更多 conda 的包管理，环境管理和渠道管理等技巧可以参考：<a href="https://blog.csdn.net/u011262253/article/details/88828229">https://blog.csdn.net/u011262253/article/details/88828229</a></p></blockquote><p>可以看到，相对 Anaconda 整合了数以百记的包不同，这里只有几个最基础的 Python 包，之后按需添加即可。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvamFJaklmRWkwRndoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>4.切换环境</p><p>点击右下角的 conda 环境名，可以切换环境。</p><p>这里切换后，代表我们项目目录中所有的脚本都要依赖于这个环境。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvTjdQazNPTTAzS2NHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，需要注意，一些老鸟已经会熟练操作 Conda 了，比如像下面这样来切换环境：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvU2FtVVdTYU1mN2JiLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>不幸的是，虽然命令行<code>conda activate base</code> 可以将当前环境 <code>example</code> 切换为 <code>base</code>，但是这里只是将命令行的环境切换了，我们 Pycharm 项目的 conda 环境纹丝不动。</p><p>所以想切换当前项目的环境，最好点击右下角图标</p><p>5.使用 Conda 环境</p><p>这里以绘制一张热图为例来简单使用下配置好的环境</p><p>安装<code>matplotlib</code>包</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvdUoxS3VwejdvNldKLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>写代码</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 准备数据</span><br><span class="hljs-comment"># 定义横纵坐标</span><br>xLabel = [<span class="hljs-string">&#x27;geneA&#x27;</span>, <span class="hljs-string">&#x27;geneB&#x27;</span>, <span class="hljs-string">&#x27;geneC&#x27;</span>, <span class="hljs-string">&#x27;geneD&#x27;</span>, <span class="hljs-string">&#x27;geneE&#x27;</span>]<br>yLabel = [<span class="hljs-string">&#x27;sample1&#x27;</span>, <span class="hljs-string">&#x27;sample2&#x27;</span>, <span class="hljs-string">&#x27;sample3&#x27;</span>, <span class="hljs-string">&#x27;sample4&#x27;</span>, <span class="hljs-string">&#x27;sample5&#x27;</span>]<br><span class="hljs-comment"># 定义填充数据</span><br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    temp = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        k = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>        temp.append(k)<br>    data.append(temp)<br><br><span class="hljs-comment"># 开始作图</span><br>fig = plt.figure()<br><span class="hljs-comment"># 画布</span><br>ax = fig.add_subplot(<span class="hljs-number">111</span>)<br><span class="hljs-comment"># 坐标刻度</span><br>ax.set_yticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yLabel)))<br>ax.set_xticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xLabel)))<br>ax.set_xticklabels(xLabel)<br>ax.set_yticklabels(yLabel)<br><span class="hljs-comment"># 作图</span><br>im = ax.imshow(data)<br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 准备数据</span><br><span class="hljs-comment"># 定义横纵坐标</span><br>xLabel = [<span class="hljs-string">&#x27;geneA&#x27;</span>, <span class="hljs-string">&#x27;geneB&#x27;</span>, <span class="hljs-string">&#x27;geneC&#x27;</span>, <span class="hljs-string">&#x27;geneD&#x27;</span>, <span class="hljs-string">&#x27;geneE&#x27;</span>]<br>yLabel = [<span class="hljs-string">&#x27;sample1&#x27;</span>, <span class="hljs-string">&#x27;sample2&#x27;</span>, <span class="hljs-string">&#x27;sample3&#x27;</span>, <span class="hljs-string">&#x27;sample4&#x27;</span>, <span class="hljs-string">&#x27;sample5&#x27;</span>]<br><span class="hljs-comment"># 定义填充数据</span><br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    temp = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        k = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>        temp.append(k)<br>    data.append(temp)<br><br><span class="hljs-comment"># 开始作图</span><br>fig = plt.figure()<br><span class="hljs-comment"># 画布</span><br>ax = fig.add_subplot(<span class="hljs-number">111</span>)<br><span class="hljs-comment"># 坐标刻度</span><br>ax.set_yticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yLabel)))<br>ax.set_xticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xLabel)))<br>ax.set_xticklabels(xLabel)<br>ax.set_yticklabels(yLabel)<br><span class="hljs-comment"># 作图</span><br>im = ax.imshow(data)<br><span class="hljs-comment"># 图例</span><br>plt.colorbar(im)<br>plt.show()<br></code></pre></td></tr></table></figure><p>出图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvU3ZyYXR3bHRDV2wwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这里同样也可以激活<code>Scientific Mode</code>，可以这么来设置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvaWs3ZTM1a3JGME1tLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>效果是这样的：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvZElheUdEaGdnM2JhLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>如果想在 Pycharm 中使用 R 语言，可以参考这篇：</p><p>在Pycharm 中使用 R 时，效果是这样的：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA1MTMvMVRVc3VEOFhxbjMyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>接下来，享受搭建好的环境吧</p><h2 id="其他使用技巧"><a href="#其他使用技巧" class="headerlink" title="其他使用技巧"></a>其他使用技巧</h2><p><a href="https://blog.csdn.net/u011262253/article/details/105155581">Pycharm 中安装及使用 Jupyter （图文详解）</a></p><p><a href="https://blog.csdn.net/u011262253/article/details/105068542">如何在 Pycharm 中高效使用 R 语言 （图文详解） </a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> anaconda </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 爬虫技术 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步安装及配置 Node.js 与 NPM</title>
      <link href="/posts/35258/"/>
      <url>/posts/35258/</url>
      
        <content type="html"><![CDATA[<h1 id="一步一步在-Windows-安装配置-Node-js-和-npm"><a href="#一步一步在-Windows-安装配置-Node-js-和-npm" class="headerlink" title="一步一步在 Windows 安装配置 Node.js 和 npm"></a>一步一步在 Windows 安装配置 Node.js 和 npm</h1><h2 id="零、Node-js-与-npm-的关系"><a href="#零、Node-js-与-npm-的关系" class="headerlink" title="零、Node.js 与 npm 的关系"></a>零、Node.js 与 npm 的关系</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 我们如果想愉快的使用 JavaScript 做一些东西，node.js 是必须安装的工具。 </p><p>在实际工作中，我们会用到很多大佬写的 JavaScript 包或模块。如果每次都根据包命搜索官网或GitHub，下载代码，解压，再使用，而且要解决包之间的依赖关系，随着项目需要的包越来越多，那么这将会是一项非常繁琐工作。为了方便地搜索并安装这些包，我们急需一个包管理器，NPM随后被开发出来。它帮我们安装，删除，更新，最主要是解决这些包的依赖关系。总之，npm 相当于开发者的管家，让我们避免解决这些琐事，专注于 JavaScript 的应用开发。</p><h2 id="一、下载及安装"><a href="#一、下载及安装" class="headerlink" title="一、下载及安装"></a>一、下载及安装</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><ul><li><a href="https://nodejs.org/en/download/current/">https://nodejs.org/en/download/current/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvZk1oSnFMNW4xeFBXLnBuZw?x-oss-process=image/format,png" alt="mark"></li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ul><li><p>next<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvN2xlMGNUNFJjNjJiLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>next<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvYm11MHFYNEJHaTF6LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>这里选择安装目录</p><blockquote><p>选安装目录时候，需要注意没必要安装在C盘，后续安装包会占用资源。建议在其他盘创建目录，然后以node版本号命名的方式安装。比如我的为<code>E:\node\node-12.16.2</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvR2E2aGpTS1RpZjJPLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>next<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcveHZTaWY3OHNtMmZSLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>next<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvOTBqcmhqVFZUenpnLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>install</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvaGhCb2VBa1RuUjJwLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装完成<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvVnpYNnRhUkhMZEhlLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装后，点击回车关闭窗口<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvMnJDNVZzV3pQVmpCLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h3 id="3-检测是否安装成功"><a href="#3-检测是否安装成功" class="headerlink" title="3.检测是否安装成功"></a>3.检测是否安装成功</h3><ul><li><p>使用<code>win+R</code>打开cmd：</p></li><li><p>输入<code>node --version</code></p></li><li><p>如果显示如下内容，node 安装成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcveEx1OTBmQWhlM2tVLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>输入<code>npm --version</code></p></li><li><p>如果显示如下内容，npm 安装成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvRFlPeFZ6a205eEtkLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><h5 id="配置-npm-的模块全局存放路径和缓存路径"><a href="#配置-npm-的模块全局存放路径和缓存路径" class="headerlink" title="配置 npm 的模块全局存放路径和缓存路径"></a>配置 npm 的模块全局存放路径和缓存路径</h5><ul><li><p>打开cmd，输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm config set prefix "E:\nodejs\node-12.16.2"<br>npm config set cache"E:\nodejs\node-12.16.2"<br></code></pre></td></tr></table></figure></li><li><p>现在尝试安装一个包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm install express -g<br></code></pre></td></tr></table></figure><blockquote><p>这里的<code>-g</code>指的是全局安装。会安装到我们设置的目录下比如 <code>E:\nodejs\node-12.16.2\node_modules</code></p><p>如果没有这个参数的命令 <code>npm install express</code> 叫做本地安装。将安装包放在 .&#x2F;node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</p></blockquote></li><li><p>我们检查包的安装位置<code>E:\nodejs\node-12.16.2\node_modules\express</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvSmxCaE8zTlRLaDNlLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="cnpm-的安装"><a href="#cnpm-的安装" class="headerlink" title="cnpm 的安装"></a>cnpm 的安装</h5><ul><li><p>在实际使用时，安装部分包会发现npm 奇慢无比，这是因为npm的包仓库在国外。为了解决这个问题，需要使用淘宝提供的cnpm作为管理工具，下面我们来安装</p></li><li><p>打开cmd，输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvenkwVDhSdndndm5ZLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装完成，我们测试是否安装成功<code>cnpm -v</code></p></li><li><p>如果出现如下，则安装成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MjcvdDdlYU1lY1J6TW1pLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h2 id="三、NPM-使用"><a href="#三、NPM-使用" class="headerlink" title="三、NPM 使用"></a>三、NPM 使用</h2><h5 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1.安装模块"></a>1.安装模块</h5><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">npm install express      # 本地安装     <br>npm install express -g   # 全局安装<br></code></pre></td></tr></table></figure><h5 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2.卸载"></a>2.卸载</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm uninstall express<br></code></pre></td></tr></table></figure><h5 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm update express<br></code></pre></td></tr></table></figure><h5 id="4-搜索"><a href="#4-搜索" class="headerlink" title="4.搜索"></a>4.搜索</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm search express<br></code></pre></td></tr></table></figure><h5 id="5-查看安装信息"><a href="#5-查看安装信息" class="headerlink" title="5.查看安装信息"></a>5.查看安装信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm list -g<br></code></pre></td></tr></table></figure><h5 id="6-查看模块版本号"><a href="#6-查看模块版本号" class="headerlink" title="6.查看模块版本号"></a>6.查看模块版本号</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm list grunt<br></code></pre></td></tr></table></figure><h5 id="7-Package-json"><a href="#7-Package-json" class="headerlink" title="7.Package.json"></a>7.Package.json</h5><p>package.json 位于项目的<code>node_modules</code>目录下，用于管理项目用到的包。<br>同时，package.json 位于包的目录下，用于定义包的属性。看下刚刚安装的 express 包的 package.json 文件，位于 <code>E:\nodejs\node-12.16.2\node_modules\express/package.json</code> 内容及每个字段的介绍：</p><ul><li><strong>name</strong>: 包名</li><li><strong>version</strong>: 包的版本号</li><li><strong>description</strong>: 包的描述</li><li><strong>homepage</strong>: 包的官网 url </li><li><strong>author</strong>: 包的作者姓名</li><li><strong>contributors</strong>: 包的其他贡献者姓名</li><li><strong>dependencies</strong>: 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下</li><li><strong>repository</strong>: 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上</li><li><strong>main</strong>: main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js</li><li><strong>keywords</strong>: 关键字</li></ul><figure class="highlight json"><table><tr><td class="code"><pre class=" language-hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express@4.17.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_inBundle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g==&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_phantomChildren&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_requested&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tag&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;registry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;raw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;escapedName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rawSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;saveSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fetchSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_requiredBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;#USER&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/express/-/express-4.17.1.tgz&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shasum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4491fc38605cf51f8629d39c2b5d026f98a4c134&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_spec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_where&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\Administrator&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TJ Holowaychuk&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tj@vision-media.ca&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bugs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/expressjs/express/issues&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bundleDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;contributors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Aaron Heckmann&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aaron.heckmann+github@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ciaran Jessup&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ciaranj@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Douglas Christopher Wilson&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;doug@somethingdoug.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Guillermo Rauch&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rauchg@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jonathan Ong&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;me@jongleberry.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Roman Shtylman&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shtylman+expressjs@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Young Jae Sim&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hanul@hanul.me&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;accepts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.3.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;array-flatten&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.19.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content-disposition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content-type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.4.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-signature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.6.9&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;depd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;encodeurl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;escape-html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;etag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.8.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;finalhandler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;merge-descriptors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;methods&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;on-finished&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~2.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parseurl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.3.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path-to-regexp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;proxy-addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~2.0.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;range-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;safe-buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;send&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.17.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;serve-static&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.14.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;setprototypeof&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;statuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type-is&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.6.18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;utils-merge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;deprecated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fast, unopinionated, minimalist web framework&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;after&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.8.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;connect-redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.4.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.4.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.3.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ejs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.6.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.13.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;express-session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.16.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hbs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.0.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;istanbul&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.4.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.6.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method-override&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mocha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;morgan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.9.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;multiparty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pbkdf2-password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13.2.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;supertest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vhost&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~3.0.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;= 0.10.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;LICENSE&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;History.md&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;Readme.md&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;lib/&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://expressjs.com/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;framework&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;sinatra&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;web&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;rest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;restful&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;router&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;api&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MIT&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repository&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git+https://github.com/expressjs/express.git&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint .&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-ci&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-cov&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-tap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.17.1&quot;</span><br><span class="hljs-punctuation"><code class="language-hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express@4.17.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_inBundle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g==&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_phantomChildren&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_requested&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tag&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;registry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;raw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;escapedName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rawSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;saveSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fetchSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latest&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_requiredBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;#USER&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/express/-/express-4.17.1.tgz&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shasum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4491fc38605cf51f8629d39c2b5d026f98a4c134&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_spec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_where&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\Administrator&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TJ Holowaychuk&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tj@vision-media.ca&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bugs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/expressjs/express/issues&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bundleDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;contributors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Aaron Heckmann&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aaron.heckmann+github@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ciaran Jessup&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ciaranj@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Douglas Christopher Wilson&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;doug@somethingdoug.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Guillermo Rauch&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rauchg@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jonathan Ong&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;me@jongleberry.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Roman Shtylman&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shtylman+expressjs@gmail.com&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Young Jae Sim&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hanul@hanul.me&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;accepts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.3.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;array-flatten&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.19.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content-disposition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content-type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.4.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-signature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.6.9&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;depd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;encodeurl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;escape-html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;etag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.8.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;finalhandler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;merge-descriptors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;methods&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;on-finished&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~2.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parseurl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.3.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path-to-regexp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;proxy-addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~2.0.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;range-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;safe-buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.1.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;send&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.17.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;serve-static&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.14.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;setprototypeof&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;statuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type-is&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.6.18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;utils-merge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vary&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.1.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;deprecated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fast, unopinionated, minimalist web framework&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;after&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.8.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;connect-redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.4.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.4.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cookie-session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.3.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ejs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.6.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.13.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;express-session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.16.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hbs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.0.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;istanbul&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.4.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.6.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method-override&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mocha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;morgan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.9.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;multiparty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pbkdf2-password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13.2.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;supertest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vhost&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~3.0.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;= 0.10.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;LICENSE&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;History.md&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;Readme.md&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;lib/&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://expressjs.com/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;framework&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;sinatra&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;web&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;rest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;restful&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;router&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;api&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MIT&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;express&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repository&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git+https://github.com/expressjs/express.git&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint .&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-ci&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-cov&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test-tap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.17.1&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 前端 </tag>
            
            <tag> npm </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> nodejs </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看文件，文件夹，磁盘空间大小</title>
      <link href="/posts/52136/"/>
      <url>/posts/52136/</url>
      
        <content type="html"><![CDATA[<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>列出当前目录所有文件的大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">ls -alh<br></code></pre></td></tr></table></figure><p>过滤当前目录下大于10M的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">find ./  -type f -size +10M  -print0 | xargs -0 ls -lh  | sort -nr<br></code></pre></td></tr></table></figure><h2 id="查看文件夹"><a href="#查看文件夹" class="headerlink" title="查看文件夹"></a>查看文件夹</h2><p>当前目录的大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -sh<br></code></pre></td></tr></table></figure><p>当前目录的子目录大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -sh *<br></code></pre></td></tr></table></figure><p>递归查询当前目录所有文件夹大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">du -ah<br></code></pre></td></tr></table></figure><h2 id="磁盘占用"><a href="#磁盘占用" class="headerlink" title="磁盘占用"></a>磁盘占用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">df -lh<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 文件 </tag>
            
            <tag> 文件夹 </tag>
            
            <tag> 磁盘 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂数据库的文本数据类型：CHAR，VARCHAR，TEXT，BLOG，NCHAR、NVARCHAR、NTEXT</title>
      <link href="/posts/31956/"/>
      <url>/posts/31956/</url>
      
        <content type="html"><![CDATA[<h2 id="一、CHAR与-VARCHAR"><a href="#一、CHAR与-VARCHAR" class="headerlink" title="一、CHAR与 VARCHAR"></a>一、CHAR与 VARCHAR</h2><p><strong>CHAR</strong> 用于存储固定长度的数据，CHAR字段上的索引效率级高，但是不适用于字符长度不确定的数据。比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间。</p><p><strong>VARCHAR</strong> 为了解决上面提到问题，SQL设计了专门存储可变长度的数据类型，但相应的损失存储效率。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。</p><p>VARCHAR类型的实际长度是它的值的实际长度+1。为什么“+1”呢？这一个字节用于保存实际使用了多大的长度。  </p><p><strong>用法：从空间上考虑，用varchar合适；从效率上考虑，用char合适，关键是根据实际情况找到权衡点。</strong> </p><hr><h2 id="二、TEXT-与-BLOG"><a href="#二、TEXT-与-BLOG" class="headerlink" title="二、TEXT 与 BLOG"></a>二、TEXT 与 BLOG</h2><p><strong>TEXT</strong>：存储可变长度的非Unicode数据，最大长度为 65535 (2^16-1) 个字符 。  </p><p><strong>MEDIUMTEXT</strong> ：存储可变长度的非Unicode数据，最大长度为 16777215 (2^24-1) 个字符。</p><p><strong>LONGTEXT</strong> ：存储可变长度的非Unicode数据，最大长度为 2147483647 (2^32-1) 个字符。</p><p><strong>TINYTEXT</strong> ：存储可变长度的非Unicode数据，最大长度为 255 (2^8-1)  个字符。 </p><p>与TEXT类似的数据类型是BLOG，区别是</p><ul><li><p>BLOB保存二进制数据，TEXT保存字符数据。</p><blockquote><p>使用BLOB的优势在于文本和图片都可以以二进制的形式存储在数据库中。但是，不幸的是，现在大部分得图片都是以<img>标签引入到前端的，而且图床和CDN的出现直接导致我们自己的数据库中只会存储文本数据，也就是说比较常用的是 TEXT。</p></blockquote></li><li><p>BLOB列没有字符集，排序和比较基于列值字节的数值。TEXT列有一个字符集，会根据字符集的校对规则对值进行排序和比较 。那么，在存储包含中文字符时，建议使用 TEXT。</p></li></ul><p>TEXT 与 BLOG 的共同点：</p><ul><li>有四种不同字符长度限制的数据类型</li><li>当保存或检索BLOB和TEXT列的值时不删除尾部空格。</li><li>对于BLOB和TEXT列的索引，必须指定索引前缀的长度。</li><li>BLOB和TEXT列不能有默认值。</li><li>当排序时只使用该列的前max_sort_length个字节。max_sort_length的 默认值是1024。</li><li>当你想要使超过max_sort_length的字节有意义，对含长值的BLOB或TEXT列使用GROUP BY或ORDER BY的另一种方式是将列值转换为固定长度的对象。标准方法是使用SUBSTRING函数。</li><li>BLOB或TEXT对象的最大大小由其类型确定，但在客户端和服务器之间实际可以传递的最大值由可用内存数量和通信缓存区大小确定。你可以通过更改max_allowed_packet变量的值更改消息缓存区的大小，但必须同时修改服务器和客户端程序。</li></ul><p><strong>用法：如果不涉及存储图片与文本混合的二进制数据，或者存储中文文本是，建议使用TEXT</strong></p><hr><h2 id="三、NCHAR、NVARCHAR、NTEXT"><a href="#三、NCHAR、NVARCHAR、NTEXT" class="headerlink" title="三、NCHAR、NVARCHAR、NTEXT"></a>三、NCHAR、NVARCHAR、NTEXT</h2><p>在前面几种类型前加<code>N</code>。它表示存储的是Unicode数据类型的字符。</p><p>英文一般只需要字母表和一些符号字符组成的编码表，因只需要一个字节就可以存储字符。但是中文里的每个汉字并不是字母的排列组合，需要更多的存储空间，一般会占用两个字节。</p><blockquote><p>为了兼容不同语言的字符，需要使用 Unicode 字符集，它所有的字符都用两个字节表示，即英文字符也是用两个字节表示。</p></blockquote><p>可以看出使用nchar、nvarchar数据类型时不用担心输入的字符是英文还是汉字，较为方便，但在存储英文时数量上有些损失。</p><p> <strong>用法：如果含有中文字符，用nchar&#x2F;nvarchar，如果纯英文和数字，用char&#x2F;varchar。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> sql </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 文本数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas 修改单列，多列，Dataframe 数据类型方法汇总</title>
      <link href="/posts/21265/"/>
      <url>/posts/21265/</url>
      
        <content type="html"><![CDATA[<h4 id="1-修改单列的数据类型"><a href="#1-修改单列的数据类型" class="headerlink" title="1.修改单列的数据类型"></a>1.修改单列的数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;test.csv&#x27;</span>)<br>df[<span class="hljs-string">&#x27;column_name&#x27;</span>] = df[<span class="hljs-string">&#x27;column_name&#x27;</span>].astype(np.<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;test.csv&#x27;</span>)<br>df[<span class="hljs-string">&#x27;column_name&#x27;</span>] = df[<span class="hljs-string">&#x27;column_name&#x27;</span>].astype(np.<span class="hljs-built_in">str</span>)<br><span class="hljs-built_in">print</span>(df.dtypes)<br></code></pre></td></tr></table></figure><h4 id="2-修改指定多列的数据类型"><a href="#2-修改指定多列的数据类型" class="headerlink" title="2.修改指定多列的数据类型"></a>2.修改指定多列的数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df[[<span class="hljs-string">&#x27;c3&#x27;</span>,<span class="hljs-string">&#x27;c5&#x27;</span>]] = df[[<span class="hljs-string">&#x27;c3&#x27;</span>,<span class="hljs-string">&#x27;c5&#x27;</span>]].apply(pd.to_numeric)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df[[<span class="hljs-string">&#x27;c3&#x27;</span>,<span class="hljs-string">&#x27;c5&#x27;</span>]] = df[[<span class="hljs-string">&#x27;c3&#x27;</span>,<span class="hljs-string">&#x27;c5&#x27;</span>]].apply(pd.to_numeric)<br><span class="hljs-built_in">print</span>(df.dtypes)<br></code></pre></td></tr></table></figure><h4 id="3-创建dataframe时，修改数据类型"><a href="#3-创建dataframe时，修改数据类型" class="headerlink" title="3.创建dataframe时，修改数据类型"></a>3.创建dataframe时，修改数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># method1</span><br>df = pd.DataFrame(data, dtype=<span class="hljs-string">&#x27;float&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.dtypes)<br><br><span class="hljs-comment"># method2</span><br>df = pd.DataFrame(data, dtype=np.float64)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># method1</span><br>df = pd.DataFrame(data, dtype=<span class="hljs-string">&#x27;float&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.dtypes)<br><br><span class="hljs-comment"># method2</span><br>df = pd.DataFrame(data, dtype=np.float64)<br><span class="hljs-built_in">print</span>(df.dtypes)<br><br></code></pre></td></tr></table></figure><h4 id="4-读取时，修改数据类型"><a href="#4-读取时，修改数据类型" class="headerlink" title="4.读取时，修改数据类型"></a>4.读取时，修改数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&quot;somefile.csv&quot;</span>, dtype = &#123;<span class="hljs-string">&#x27;column_name&#x27;</span> : <span class="hljs-built_in">str</span>&#125;)<br><br>df = pd.DataFrame(data, dtype=<span class="hljs-string">&#x27;float&#x27;</span>)<br><br>df = pd.DataFrame(data, dtype=np.float64)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&quot;somefile.csv&quot;</span>, dtype = &#123;<span class="hljs-string">&#x27;column_name&#x27;</span> : <span class="hljs-built_in">str</span>&#125;)<br><br>df = pd.DataFrame(data, dtype=<span class="hljs-string">&#x27;float&#x27;</span>)<br><br>df = pd.DataFrame(data, dtype=np.float64)<br><span class="hljs-built_in">print</span>(df.dtypes)<br></code></pre></td></tr></table></figure><h4 id="5-自动"><a href="#5-自动" class="headerlink" title="5.自动"></a>5.自动</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = df.infer_objects()<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = df.infer_objects()<br><span class="hljs-built_in">print</span>(df.dtypes)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> pandas </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何绘制全球新冠病毒疫情动态分布图</title>
      <link href="/posts/37322/"/>
      <url>/posts/37322/</url>
      
        <content type="html"><![CDATA[<p>目前新型冠状病毒疫情已经蔓延到全球，截止北京时间8日上午9时，全球确诊140万人，其中美国确诊人数超40万人，正如局座所说这次疫情不亚于第三次世界大战。大家除了注意全球疫情动态，更要注重个人防护，避免给国家添乱。</p><p>利用数据的时序性分析对于疫情分布和控制具有指导意义，也可以使大家直观的看到疫情的发展趋势。下面是从2020年1月22日起到2020年4月8日的世界各国疫情数据绘制的确诊，治愈，死亡人数动态分布图。链接：<a href="http://map.ziptop.top/">http://map.ziptop.top/</a> </p><p><strong>全球确诊人数动态分布图</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MDgvNmpFb1ZyZnp3bWx5LmdpZg" alt="mark"></p><p><strong>全球治愈人数动态分布图</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MDgvalZHeUtOdHBVaWI1LmdpZg" alt="mark"></p><p><strong>全球死亡人数动态分布图</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MDgvUUFPcXJET1lZbm1NLmdpZg" alt="mark"></p><h3 id="一、数据获取"><a href="#一、数据获取" class="headerlink" title="一、数据获取"></a>一、数据获取</h3><p>数据来自约翰斯·霍普金斯大学统计数据<a href="https://systems.jhu.edu/">Johns Hopkins University Center for Systems Science and Engineering (CSSE)</a> 。</p><p>也可以使用<a href="https://github.com/datasets/covid-19">https://github.com/datasets/covid-19</a> 上提供的更全面的数据</p><blockquote><p>约翰斯·霍普金斯大学（Johns Hopkins University），简称Hopkins或JHU，成立于1876年，是一所世界顶级的著名私立大学，美国第一所研究型大学。世界大学排名世界第12，美国第9 。该校医学院的教学研究单位约翰斯·霍普金斯医院（JHH）连续21年被评为全美最佳医院。学校共有37人获得过诺贝尔奖。其尼采高级国际研究学院（SAIS）培养出美国国务卿奥尔布赖特、财政部长盖特纳、世界银行行长埃因霍、中国驻美大使崔天凯等</p></blockquote><h3 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h3><p>在绘图前需要将数据整理为下面这种 json 格式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA0MDgvbzMxMmNwU25UbnB0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="三、数据可视化"><a href="#三、数据可视化" class="headerlink" title="三、数据可视化"></a>三、数据可视化</h3><p>可视化用到的是 Echarts，框架为bootstrap</p><figure class="highlight javascript"><table><tr><td class="code"><pre class=" language-hljs javascript"><span class="hljs-keyword">var</span> map_chart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>));<br>map_chart.<span class="hljs-title function_">showLoading</span>();<br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;./data/case/&quot;</span>+type_name+<span class="hljs-string">&quot;.json&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data,status</span>)&#123;<br>    <span class="hljs-keyword">let</span> input_data = data;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;./data/map/world.json&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">mapJson</span>) &#123;<br>        map_chart.<span class="hljs-title function_">hideLoading</span>();<br><br>        echarts.<span class="hljs-title function_">registerMap</span>(<span class="hljs-string">&#x27;world&#x27;</span>, mapJson, &#123;<br><br>        &#125;);<br>        option = &#123;<br>            <span class="hljs-attr">baseOption</span>: &#123;<br>                <span class="hljs-attr">timeline</span>: &#123;<br>                    <span class="hljs-attr">axisType</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>                    <span class="hljs-attr">loop</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">autoPlay</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">playInterval</span>: <span class="hljs-number">100</span>,<br>                    <span class="hljs-attr">controlStyle</span>: &#123;<br>                        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;left&#x27;</span><br>                    &#125;,<br>                    <span class="hljs-attr">data</span>: input_data.<span class="hljs-property">time_line</span>,<br>                    <span class="hljs-attr">currentIndex</span>:<span class="hljs-number">0</span><br><br>                &#125;,<br>                <span class="hljs-attr">visualMap</span>: &#123;<br>                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;right&#x27;</span>,<br>                    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">pieces</span>: [<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">50000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">7</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">10000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">50000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">6</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">5000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">5</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">5000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">4</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">3</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">2</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">1</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">0</span>]&#125;,<br>                        &#123;<span class="hljs-attr">max</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">0</span>]&#125;,<br>                    ],<br>                &#125;,<br>                <span class="hljs-attr">series</span>:[<br>                    &#123;<br>                        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;map&#x27;</span>,<br>                        <span class="hljs-attr">roam</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">map</span>: <span class="hljs-string">&#x27;world&#x27;</span>,<br>                    &#125;,<br>                ],<br><br>                <span class="hljs-attr">tooltip</span>: &#123;<br>                    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>                    <span class="hljs-attr">showDelay</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">transitionDuration</span>: <span class="hljs-number">0.2</span>,<br>                    <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>                        <span class="hljs-keyword">var</span> value = (params.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                        value = value[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\d&#123;1,3&#125;)(?=(?:\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;$1,&#x27;</span>);<br>                        <span class="hljs-keyword">return</span> type_name + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span> + params.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;: &#x27;</span> + value;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">title</span>:&#123;<br>                    <span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;center&#x27;</span>,<br>                    <span class="hljs-attr">y</span>:<span class="hljs-string">&#x27;top&#x27;</span>,<br>                    <span class="hljs-attr">textAlign</span>:<span class="hljs-string">&#x27;left&#x27;</span>,<br>                    <span class="hljs-attr">textStyle</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#333&quot;</span>,<br>                        <span class="hljs-attr">fontSize</span>: <span class="hljs-number">14</span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">options</span>:input_data.<span class="hljs-property">data</span><br>            ,<br><br>        &#125;;<br><br>        map_chart.<span class="hljs-title function_"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> map_chart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>));<br>map_chart.<span class="hljs-title function_">showLoading</span>();<br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;./data/case/&quot;</span>+type_name+<span class="hljs-string">&quot;.json&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data,status</span>)&#123;<br>    <span class="hljs-keyword">let</span> input_data = data;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;./data/map/world.json&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">mapJson</span>) &#123;<br>        map_chart.<span class="hljs-title function_">hideLoading</span>();<br><br>        echarts.<span class="hljs-title function_">registerMap</span>(<span class="hljs-string">&#x27;world&#x27;</span>, mapJson, &#123;<br><br>        &#125;);<br>        option = &#123;<br>            <span class="hljs-attr">baseOption</span>: &#123;<br>                <span class="hljs-attr">timeline</span>: &#123;<br>                    <span class="hljs-attr">axisType</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>                    <span class="hljs-attr">loop</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">autoPlay</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">playInterval</span>: <span class="hljs-number">100</span>,<br>                    <span class="hljs-attr">controlStyle</span>: &#123;<br>                        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;left&#x27;</span><br>                    &#125;,<br>                    <span class="hljs-attr">data</span>: input_data.<span class="hljs-property">time_line</span>,<br>                    <span class="hljs-attr">currentIndex</span>:<span class="hljs-number">0</span><br><br>                &#125;,<br>                <span class="hljs-attr">visualMap</span>: &#123;<br>                    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;right&#x27;</span>,<br>                    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">pieces</span>: [<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">50000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">7</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">10000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">50000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">6</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">5000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">5</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">5000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">4</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">3</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">2</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">1</span>]&#125;,<br>                        &#123;<span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">0</span>]&#125;,<br>                        &#123;<span class="hljs-attr">max</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: colors[<span class="hljs-number">0</span>]&#125;,<br>                    ],<br>                &#125;,<br>                <span class="hljs-attr">series</span>:[<br>                    &#123;<br>                        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;map&#x27;</span>,<br>                        <span class="hljs-attr">roam</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">map</span>: <span class="hljs-string">&#x27;world&#x27;</span>,<br>                    &#125;,<br>                ],<br><br>                <span class="hljs-attr">tooltip</span>: &#123;<br>                    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>                    <span class="hljs-attr">showDelay</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">transitionDuration</span>: <span class="hljs-number">0.2</span>,<br>                    <span class="hljs-attr">formatter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>                        <span class="hljs-keyword">var</span> value = (params.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                        value = value[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\d&#123;1,3&#125;)(?=(?:\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;$1,&#x27;</span>);<br>                        <span class="hljs-keyword">return</span> type_name + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span> + params.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;: &#x27;</span> + value;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">title</span>:&#123;<br>                    <span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;center&#x27;</span>,<br>                    <span class="hljs-attr">y</span>:<span class="hljs-string">&#x27;top&#x27;</span>,<br>                    <span class="hljs-attr">textAlign</span>:<span class="hljs-string">&#x27;left&#x27;</span>,<br>                    <span class="hljs-attr">textStyle</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#333&quot;</span>,<br>                        <span class="hljs-attr">fontSize</span>: <span class="hljs-number">14</span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">options</span>:input_data.<span class="hljs-property">data</span><br>            ,<br><br>        &#125;;<br><br>        map_chart.<span class="hljs-title function_">setOption</span>(option);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 中安装及使用 Jupyter （图文详解）</title>
      <link href="/posts/9783/"/>
      <url>/posts/9783/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Pycharm-中安装及使用-Jupyter-（图文详解）"><a href="#在-Pycharm-中安装及使用-Jupyter-（图文详解）" class="headerlink" title="在 Pycharm 中安装及使用 Jupyter （图文详解）"></a>在 Pycharm 中安装及使用 Jupyter （图文详解）</h1><p>Pycharm 更新了对 Jupyter  的功能支持，结合 IntelliJ 的自动补全代码，自动格式化代码，执行调试，版本控制，以及大量的插件支持。</p><p>让你在高颜值环境下，高效编写代码，效果如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvS0x5TDJQNmhzTHhTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="一、材料"><a href="#一、材料" class="headerlink" title="一、材料"></a>一、材料</h3><p>Pycharm 19.03 专业版</p><p>Jupyter</p><p>conda</p><h3 id="二、安装-Jupyter"><a href="#二、安装-Jupyter" class="headerlink" title="二、安装 Jupyter"></a>二、安装 Jupyter</h3><ul><li><p>安装 conda</p><p><a href="https://blog.csdn.net/u011262253/article/details/88828229">https://blog.csdn.net/u011262253/article/details/88828229</a> </p></li><li><p>使用 conda 安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">conda create -n myjupyter anaconda jupyter<br>conda activate myjupyter<br></code></pre></td></tr></table></figure></li><li><p>获取密码密文<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvNlJ0b2xENW81bWl4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">jupyter notebook --generate-config --allow-root <br></code></pre></td></tr></table></figure><p>将密码复制<code>sha1:XXXXXXXXXXXXXXX</code>，备用</p></li><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">jupyter notebook --generate-config --allow-root<br></code></pre></td></tr></table></figure><p>在配置文件中输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">c.NotebookApp.ip = &#x27;XX.XX.XX.XX&#x27;<br>c.NotebookApp.allow_root = True<br>c.NotebookApp.open_browser = False<br>c.NotebookApp.port = 8888<br>c.NotebookApp.password = u&#x27;sha1:XXXXXXXXXXXXXXXX&#x27;<br>c.ContentsManager.root_dir = &#x27;/baimoc/jupyter&#x27;<br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">jupyter notebook<br></code></pre></td></tr></table></figure></li><li><p>浏览器输入<code>http://your_id:port </code>，输入密码，进入jupyter<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvVFVxNVdVUTQxNG5ZLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h3 id="三、配置-Jupyter"><a href="#三、配置-Jupyter" class="headerlink" title="三、配置 Jupyter"></a>三、配置 Jupyter</h3><ul><li><p>新建 Jupyter 文件<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvanlmV1R1RllzUEVJLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>进入设置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvY2MzdGxZbEJoeE1KLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>将浏览器 URL 链接复制到输入框<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvNEMzZkR6TFBTTG9VLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>shift+enter</code> 弹出对话框中输入密码，完成设置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvWXdkT1RFODJjVFFjLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h3 id="四、使用-Jupyter"><a href="#四、使用-Jupyter" class="headerlink" title="四、使用 Jupyter"></a>四、使用 Jupyter</h3><h4 id="1-使用-Cell"><a href="#1-使用-Cell" class="headerlink" title="1. 使用 Cell"></a>1. 使用 Cell</h4><ul><li><p>写几行代码，测试一下</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment">#%%</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x=np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">0.01</span>)<br>y=np.sin(x)<br><br>plt.plot(x,y)<br>plt.show()<br><br><span class="hljs-comment"><code class="language-hljs python"><span class="hljs-comment">#%%</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x=np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*np.pi,<span class="hljs-number">0.01</span>)<br>y=np.sin(x)<br><br>plt.plot(x,y)<br>plt.show()<br><br><span class="hljs-comment">#%%</span><br>y1=np.cos(x)<br>plt.plot(x,y1)<br>plt.show()<br></code></pre></td></tr></table></figure></li><li><p>如果执行这个Cell可以点击<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvUUtnWExwbmFxbGZ5LnBuZw?x-oss-process=image/format,png" alt="mark">，或者使用快捷键<code>Ctrl + Enter</code><br>点击<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvNXU0NlBNS1VPOGhFLnBuZw?x-oss-process=image/format,png" alt="mark">来执行全部代码<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvaVRGYlFUcHJhcDZzLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>试着写几个cell，在编写代码时，每个cell的代码会与其执行结果对齐<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvaFVVUFBQb3A5eGtzLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>如果在输出界面，不想看见代码，点击<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvRlcweUF2ZTlRRGpULnBuZw?x-oss-process=image/format,png" alt="mark">，就行这样<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvWWRTRnR2N2VHVm9hLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="2-使用-jupyter-Markdown"><a href="#2-使用-jupyter-Markdown" class="headerlink" title="2. 使用 jupyter Markdown"></a>2. 使用 jupyter Markdown</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjgvbE5WOVVYU2JvYzVvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>配置好环境，开始享受吧</p><p>如果你是对数据分析感兴趣，这些技巧也能帮到你</p><p><a href="https://blog.csdn.net/u011262253/article/details/105068542">如何在 Pycharm 中高效使用 R 语言 （图文详解）</a>  </p><p><a href="https://blog.csdn.net/u011262253/article/details/105902060">搭建 Python 高效开发环境： Pycharm + Anaconda </a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> pycharm </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Pycharm 中高效使用 R 语言 （图文详解）</title>
      <link href="/posts/64515/"/>
      <url>/posts/64515/</url>
      
        <content type="html"><![CDATA[<p>最新的 Pycharm 大量更新了对 R 的功能支持，在 IntelliJ 的大名加持下，拥有自动补全代码（最新加入了机器学习的新特性），自动格式化代码，版本控制，以及大量的插件支持。</p><p>让你在高颜值环境下，高效编写代码，同时支持 Python，R  在同一界面下完成项目编写。</p><p>效果如下，是不有那味了：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvazF0alI3VjNvMnFNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>下面进行配置：</p><h3 id="一、材料"><a href="#一、材料" class="headerlink" title="一、材料"></a>一、材料</h3><p>Pycharm 19.03 专业版</p><p>R-3.6.3</p><p>R Language for IntelliJ</p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><blockquote><p>如果已经部分软件安装完成跳过即可，但需要注意路径配置和版本问题。</p></blockquote><h4 id="1-Pycharm-安装"><a href="#1-Pycharm-安装" class="headerlink" title="1.Pycharm 安装"></a>1.Pycharm 安装</h4><ul><li><p>进入：<a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvU2hodW0xUXdlSXFFLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>一路 Next<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvZWc2VUJ2bXlqMWdoLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>配置路径</p><blockquote><p>如果有固态硬盘，最好把 Pycharm 放到对应盘符，可以显著提升打开和响应速度</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvam5sSERuMm5nbENCLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择创建 64 位快捷方式和加入环境变量<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQva1N3TXREMkFoUXRDLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>一路<code>next</code></p></li><li><p>打开<code>Pycharm</code></p><blockquote><p>如果之前安装过选 <code>1</code>，如果是第一次安装选择<code>2</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvUXFmUHpTbjRRQ1VTLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择<code>Evaluate for free</code></p><blockquote><p>试用期限是30天，支持正版的话可以去买激活码，网上商城就有，自行搜索</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvbFVSamZlMWJ5R0gwLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>完成安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvaDFsQnZSOWxCNkpBLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>如果是第一次安装，字体会很不舒服，<code>Ctrl+Alt+S</code> 打开设置，修改如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvZ05rcXpKVEd3Qzc0LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>修改界面主题<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjQvQlBTS2NlbnNTc1dvLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>Pycharm 安装完成</p></li></ul><h4 id="2-R-安装"><a href="#2-R-安装" class="headerlink" title="2.R 安装"></a>2.R 安装</h4><ul><li><p>进入<a href="https://cran.r-project.org/mirrors.html">https://cran.r-project.org/mirrors.html</a></p></li><li><p>选择清华的TUNA镜像</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvUFdyWVFqd2xwMXNrLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>根据需要选择下载，以windows下载为例</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc1NCRmJUZGQyQlFqLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择<code>base</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSXQxNjJPU3RmQTViLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>点击下载</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbVR1bW1CcGI2MGYyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>开始安装：<code>确定</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc3BWSjU4YXY3UVBpLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvZm9wOTkydmlPOUczLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选安装目录时候，需要注意没必要安装在C盘，后续安装包会占用资源。建议在其他盘创建目录，然后以R版本号命名的方式安装R。</p><blockquote><p>比如我在E盘下的<code>R</code>目录:<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSHpSOUFCbEVtSjFtLnBuZw?x-oss-process=image/format,png" alt="mark"></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbnNpdzQzYlN1OHozLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvOENYOGNTVExFRENyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvWFlHQkJKOHB6b3lELnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Finish</code>，安装完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbzNzZGJNeEN6UTFDLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="3-插件安装"><a href="#3-插件安装" class="headerlink" title="3.插件安装"></a>3.插件安装</h4><p>这里提供两种方式：</p><p><strong>第一种：</strong></p><ul><li>进入插件网址：<a href="https://plugins.jetbrains.com/plugin/6632-r-language-for-intellij">https://plugins.jetbrains.com/plugin/6632-r-language-for-intellij</a></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvY0tPczJQbXhMQWlpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>解压，根据不同的系统执行安装文件：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvM3RzQnJKdkpLZUhsLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p><strong>第二种：</strong></p><ul><li>进入设置<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvdTM4TjFIZUdPa0NHLnBuZw?x-oss-process=image/format,png" alt="mark"></li><li>点击<code>Plugins</code>，搜索 <code>R Language for IntelliJ</code>，安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEveENzUEgwTGQ2Z3hQLnBuZw?x-oss-process=image/format,png" alt="mark"></li></ul><h3 id="三、新建-R-项目"><a href="#三、新建-R-项目" class="headerlink" title="三、新建 R 项目"></a>三、新建 R 项目</h3><ul><li><p>新建项目<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvR2MxNWdyYVVlcE1VLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>第一次创建项目，Pycharm 先构建索引，这个过程比较耗时<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvOGFzNjFjMXAzbkhlLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>画张图看看，是不是有那味了</p><blockquote><p><code>Ctrl + Enter</code> 分步执行</p><p>点击左上角三角全部执行，虫子来debug</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvazF0alI3VjNvMnFNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>dat <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  time <span class="hljs-operator">=</span> factor<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Lunch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Dinner&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> levels<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Lunch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Dinner&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  total_bill <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">14.89</span><span class="hljs-punctuation">,</span> <span class="hljs-number">17.23</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>dat<br>ggplot<span class="hljs-punctuation">(</span>data<span class="hljs-operator">=</span>dat<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>time<span class="hljs-punctuation">,</span> y<span class="hljs-operator">=</span>total_bill<span class="hljs-punctuation">,</span> fill<span class="hljs-operator">=</span>time<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>    geom_bar<span class="hljs-punctuation">(</span>stat<span class="hljs-operator">=</span><span class="hljs-string">&quot;identity&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>dat <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  time <span class="hljs-operator">=</span> factor<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Lunch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Dinner&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> levels<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Lunch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Dinner&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  total_bill <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">14.89</span><span class="hljs-punctuation">,</span> <span class="hljs-number">17.23</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br>dat<br>ggplot<span class="hljs-punctuation">(</span>data<span class="hljs-operator">=</span>dat<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span>time<span class="hljs-punctuation">,</span> y<span class="hljs-operator">=</span>total_bill<span class="hljs-punctuation">,</span> fill<span class="hljs-operator">=</span>time<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>    geom_bar<span class="hljs-punctuation">(</span>stat<span class="hljs-operator">=</span><span class="hljs-string">&quot;identity&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="四、新建R文件及其头信息设置"><a href="#四、新建R文件及其头信息设置" class="headerlink" title="四、新建R文件及其头信息设置"></a>四、新建R文件及其头信息设置</h3><ul><li><p>进入File -&gt; Settings设置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvaWJZU0FJdUxEQXhOLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>新建 R 文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvSnBoc3l1SGJtV2puLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>如果设置过头信息，新建文件就像这样</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvdHNPNzRHcks0V0oyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h3 id="五、R包管理工具"><a href="#五、R包管理工具" class="headerlink" title="五、R包管理工具"></a>五、R包管理工具</h3><ul><li>搜索已安装 R 包，查看版本等信息<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvZ2lXNENsRkU4SzlCLnBuZw?x-oss-process=image/format,png" alt="mark"><ul><li>1.这个包的帮助及介绍信息</li><li>1.链接到 R 包官网</li><li>2.卸载包</li></ul></li><li>安装包<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvZEE1M2pxSUxuMDFpLnBuZw?x-oss-process=image/format,png" alt="mark"></li></ul><h3 id="六、使用-R-Markdown"><a href="#六、使用-R-Markdown" class="headerlink" title="六、使用 R Markdown"></a>六、使用 R Markdown</h3><blockquote><p>什么是 R Markdown：<a href="https://rmarkdown.rstudio.com/">https://rmarkdown.rstudio.com/</a> </p></blockquote><ul><li><p>新建 RMarkdown 文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvMTNIZEQ1S1JDa1JFLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>如果没有到检测到插件，可以点击弹出窗口的<code>Install</code><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjIvem5TTFR1UGpWMFJCLnBuZw?x-oss-process=image/format,png" alt="mark"><br>接下来，请用 R 在 Pycharm 中开拓你的疆土。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> pycharm </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 构建舒适的高颜值写作环境</title>
      <link href="/posts/17438/"/>
      <url>/posts/17438/</url>
      
        <content type="html"><![CDATA[<p>Typora 设置完成后，你的 Typora 编辑环境是</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvRWwyUjhjZktYUmt5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>写作环境包括文件目录，文章大纲，图床支持，高颜值主题，趁手的快捷方式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvRzkxZkdUclNwNWRSLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="设置外观"><a href="#设置外观" class="headerlink" title="设置外观"></a>设置外观</h4><ol><li><p>进入<code>偏好设置</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvSTdQNW5ZTXdQTFN3LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>设置程序外观为<code>一体化</code>，开启<code>侧边栏</code><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvNGFwbzZHSjEzUno2LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>设置 Typora 启动时，打开的目录<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvWThqalZlUEZPMmtSLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ol><h4 id="自动保存与恢复"><a href="#自动保存与恢复" class="headerlink" title="自动保存与恢复"></a>自动保存与恢复</h4><p>设置自动保存后，如果电脑出现闪退可以进入<code>恢复未保存文件</code>来恢复文件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvSHZlUlRZcjhUNDFXLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><ol><li><p>进入 <a href="http://theme.typora.io/">http://theme.typora.io</a></p></li><li><p>下载<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvb250SkgyZmJ0Y3BZLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>复制这三个文件<br> <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvV3NjRXZRQ0FhVVJ1LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>打开主题文件夹<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEveTlqSlRWSXdWa2JELnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>复制三个文件到主题文件夹，就像这样<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvOENOdjduRFViUmY5LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>重启Typora，会看到左侧会加载设置的目录，点击箭头指的菜单栏，来设置主题</p><blockquote><p>目录设置建议分类记录，方便管理</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvYnZSQ1k3OG1ITzFiLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>设置刚刚下载的主题<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvbXkwTFh6Y3B2SlE4LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>重启</p></li></ol><h4 id="设置图床"><a href="#设置图床" class="headerlink" title="设置图床"></a>设置图床</h4><p>图床就是用来存储图片的云端仓库，避免出现链接失效的问题，对于在线博客也可以提高加载速度。如果设置完成，插入图片的操作会极大的简化为：</p><p><code>截图 -&gt; 粘贴到Typora -&gt;自动生成Markdown格式</code></p><p>下面是设置方法：<a href="https://blog.csdn.net/u011262253/article/details/78834824">如何既快速又优雅的写博客：Typora + MPic</a> </p><h4 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h4><ol><li><p>打开设置文件<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvckVwblJqbmt3OWYzLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>编辑<code>conf.user.json</code>文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">"keyBinding": &#123;<br>  "加粗": "Ctrl+Q"<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果不需要，直接前面加 <code>//</code> 注释就不会生效</p></blockquote></li><li><p>保存文件，重启 Typora 就会生效。</p></li></ol><h4 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvYWpMc2xENmtQd0h4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMjEvbUJDblhCcXB3VlRKLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 闲聊杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 其他 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基因组浏览器 JBrowser 安装</title>
      <link href="/posts/60180/"/>
      <url>/posts/60180/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装必要的开发包"><a href="#1-安装必要的开发包" class="headerlink" title="1.安装必要的开发包"></a>1.安装必要的开发包</h4><ul><li><strong>Ubuntu 执行</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo apt install build-essential zlib1g-dev<br></code></pre></td></tr></table></figure><ul><li><strong>CentOS&#x2F;RedHat 执行</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo yum groupinstall "Development Tools"<br>sudo yum install zlib-devel perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure><h4 id="2-设置镜像"><a href="#2-设置镜像" class="headerlink" title="2.设置镜像"></a>2.设置镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">npm config set registry http://r.cnpmjs.org<br>npm config set puppeteer_download_host=http://cnpmjs.org/mirrors<br>export ELECTRON_MIRROR="http://cnpmjs.org/mirrors/electron/"<br></code></pre></td></tr></table></figure><h4 id="3-Git-提速"><a href="#3-Git-提速" class="headerlink" title="3.Git 提速"></a>3.Git 提速</h4><p><a href="https://blog.csdn.net/u011262253/article/details/104931257">https://blog.csdn.net/u011262253/article/details/104931257</a> </p><h4 id="4-安装-node，npm"><a href="#4-安装-node，npm" class="headerlink" title="4.安装 node，npm"></a>4.安装 node，npm</h4><p><a href="https://blog.csdn.net/u011262253/article/details/104903255">https://blog.csdn.net/u011262253/article/details/104903255</a> </p><h4 id="5-搭建服务器"><a href="#5-搭建服务器" class="headerlink" title="5.搭建服务器"></a>5.搭建服务器</h4><p>以安装 lampp 为例</p><p><a href="https://blog.csdn.net/u011262253/article/details/70876900">https://blog.csdn.net/u011262253/article/details/70876900</a> </p><h4 id="6-安装-jbrowse"><a href="#6-安装-jbrowse" class="headerlink" title="6.安装 jbrowse"></a>6.安装 jbrowse</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">cd /opt/lampp/htdocs<br>curl -L -O https://github.com/GMOD/jbrowse/releases/download/1.16.8-release/JBrowse-1.16.8.zip<br>unzip JBrowse-1.16.8.zip<br>sudo mv JBrowse-1.16.8 /var/www/html/jbrowse<br>cd /var/www/html<br>sudo chown `whoami` jbrowse<br>cd jbrowse<br>./setup.sh<br></code></pre></td></tr></table></figure><h4 id="7-测试是否安装成功"><a href="#7-测试是否安装成功" class="headerlink" title="7.测试是否安装成功"></a>7.测试是否安装成功</h4><p>浏览器输入：<a href="http://your_id/jbrowser/?data=sample_data/json/volvox&amp;loc=ctgA:20586..20654&amp;tracks=DNA,volvox-sorted_bam,volvox_gff3,volvox_microarray_bw_density,volvox_sine_density&amp;highlight=">http://your_id/jbrowser/?data=sample_data%2Fjson%2Fvolvox&amp;loc=ctgA%3A20586..20654&amp;tracks=DNA%2Cvolvox-sorted_bam%2Cvolvox_gff3%2Cvolvox_microarray_bw_density%2Cvolvox_sine_density&amp;highlight=</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMTgvT0tyWG9Ld0NGQ0hULnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 网站 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 基因组浏览器 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> Jbrowser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 node，npm （详细图解）</title>
      <link href="/posts/17355/"/>
      <url>/posts/17355/</url>
      
        <content type="html"><![CDATA[<h4 id="1-下载Node"><a href="#1-下载Node" class="headerlink" title="1. 下载Node"></a>1. 下载Node</h4><p>进入Node最新版下载 &lt;<a href="https://nodejs.org/en/download/current/">https://nodejs.org/en/download/current/</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMTYvRm5rQlhYeTA2ZkZFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>如图获取到安装包地址：<code>https://nodejs.org/dist/v13.11.0/node-v13.11.0-linux-x64.tar.xz</code></p><h4 id="2-安装Node"><a href="#2-安装Node" class="headerlink" title="2. 安装Node"></a>2. 安装Node</h4><ul><li><p>下载</p><p><code>wget https://nodejs.org/dist/v13.11.0/node-v13.11.0-linux-x64.tar.xz</code></p></li><li><p>解压</p><p><code>tar -xvf node-v13.11.0-linux-x64.tar.xz</code></p></li><li><p>进目录</p><p><code>cd node-v13.11.0-linux-x64/bin</code></p></li><li><p>测试是否安装成功</p><p><code>./node -v</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMTYvR3gyY2pGWEFoNlN2LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="3-加软链"><a href="#3-加软链" class="headerlink" title="3. 加软链"></a>3. 加软链</h4><ul><li><p>添加 node，npm软链</p><p><code>ln -s /www/node-v13.11.0-linux-x64/bin/node /usr/local/bin/node</code></p><p><code>ln -s /www/node-v13.11.0-linux-x64/bin/npm /usr/local/bin/npm</code></p></li><li><p>测试</p><p><code>cd ~</code></p><p><code>node -v</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMTYvMXdDUW1YQVdGOGIyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><code>npm -v</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAzMTYvQm1HeGtzdlJKRlA3LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="4-加速npm"><a href="#4-加速npm" class="headerlink" title="4. 加速npm"></a>4. 加速npm</h4><ul><li><p>使用淘宝的cnpm </p><p><code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p></li><li><p>加软链</p><p><code>ln -s /www/node-v13.11.0-linux-x64/bin/cnpm /usr/local/bin/cnpm</code></p></li><li><p>需要注意，以后使用cnpm去代替npm来执行，比如</p><p><code>cnpm install XXX</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 网站 </tag>
            
            <tag> node.js </tag>
            
            <tag> 前端 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一代测序原理 (Sanger法测序)</title>
      <link href="/posts/20654/"/>
      <url>/posts/20654/</url>
      
        <content type="html"><![CDATA[<p>Frederick Sanger 是一位1918年出生于美国的生物化学家，曾经两度获得诺贝尔化学奖 。上世纪70年代末，他提出快速测定脱氧核糖核酸（DNA）序列的技术“双脱氧终止法”，也被称作“Sanger法”。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS92Mi05NDU4ZDE4NmU2ODViYTdhOTgwNDEwYTFkMDEwZWUzNl9iLmpwZw?x-oss-process=image/format,png" alt="img"></p><p>早在2001年完成的人类基因组框图，采用的就是该方法。而且因准确率高，直到今天还在广泛使用，也被称为基因检测的金标准。下面我们来看看Sanger法是怎样测得基因序列的。</p><h2 id="Sanger-测序法原理"><a href="#Sanger-测序法原理" class="headerlink" title="Sanger 测序法原理"></a>Sanger 测序法原理</h2><p>构建反应系统</p><p>Sanger法测序由一套四个单独的反应构成，每个反应系统包含</p><ul><li>四种脱氧核苷酸三磷酸 (dNTP)，可以正常合成DNA</li><li>每个反应系统加入四种不同的双脱氧核苷三磷酸 (ddNTP)，由于ddNTP缺乏延伸所需要的3-OH基团，使延长的寡聚核苷酸选择性地在G、A、T或C处终止，另外为了方便定位，需要用荧光或者同位素标记。</li><li>目标片段、DNA聚合酶、引物，反应体系</li></ul><p>这样我们的四个反应体系构建完成 (四种颜色分别代表不同的 ddNTP 反应体系)：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWM0LnpoaW1nLmNvbS92Mi05MTNhZmY1NTcwODYzYTY1ODhkNGYyZjcxZThhN2U1M19iLmpwZw?x-oss-process=image/format,png" alt="img"></p><p>扩增目的片段</p><p>下一步进行扩增，以目的片段为模板，在DNA聚合酶的催化下，从引物处起始开始复制DNA，当遇到ddNTP，反应停止。 </p><p>由于反应体系中 dNTP 与 ddNTP 相对浓度的调节，使反应扩增得到一组长几百至几千碱基的链终止产物。这里是ddNTP与dNTP在复制过程中结合到延长链上的几率，如果ddNTP浓度高，结合几率高，阻碍链延长的几率就高，那么目的片段复制的长度就短。</p><p>也就是说，这些扩增产物具有共同的起始点，但终止在不同的的核苷酸上。</p><p>比如，下图的复制过程中遇到带尾巴的黄色核苷酸，一共复制9个碱基。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS92Mi03NjdhMDljOThlZmRjOTFmMWUxMzlmYjhjNTY2MTVkMl9iLmpwZw?x-oss-process=image/format,png" alt="img"></p><p>凝胶电泳</p><p>接下来，用凝胶电泳把他们分开，这里使用的是高分辨率变性丙烯酰胺凝胶，并由四个泳道组成，每个泳道对应一种碱基。然后，对凝胶处理后可用X-光胶片放射自显影或非同位素标记进行检测。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS92Mi1mODYwMGQyOGJkYjE0ZTkyZTZhODc0ZjNjZDA3MGJhNl9iLmpwZw?x-oss-process=image/format,png" alt="img"></p><p>序列读取</p><p>最后通电开始跑条带，在电流与凝胶阻力的作用下，纵向会出现具有相同间隔有规律的条带，它代表着不同的序列长度，在横向分别对应ATGC。现在，我们很容易就可以读出下图的DNA片段序列为 5’-GATTCGAGCTGA-3’。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS92Mi01NGFmODMxYTgxZjllYzNkNWIwZjFlOTY3YzdiODZjY19iLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>现在推断模板链（也就是待测片段）为 3’-CTAAGCTCGACT-5’</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMxLnpoaW1nLmNvbS92Mi0xNjFkN2NkZDEyODc2NDQzNmM5YmQ2YTY5ZTVmNDIyNF9iLnBuZw?x-oss-process=image/format,png" alt="img"></p><p>随着物理及化学技术的发展，人们想到可以用相同的激发波长且具有不同发射波长的荧光基团标记 ddNTP（用一种激发光照射后，这些基团会有不同的光学颜色）。现在，我们就可以把四种 ddNTP 放在同一体系下，通过光激发将四种光波长信号转化为电脑可识别的电信号，在计算机眼里就会表现为不同的物质来处理。</p><p>这些新技术的加入使我们进入测序2.0时代，商用的二代测序是目前主流的测序技术，它以高度自动化测序仪为载体，实现了测序速度的提高，通量的升高，测序成本的减低，但是同时也会降低准确率。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 测序 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始统计学 01 | 假设检验</title>
      <link href="/posts/42356/"/>
      <url>/posts/42356/</url>
      
        <content type="html"><![CDATA[<h3 id="一、提出假设"><a href="#一、提出假设" class="headerlink" title="一、提出假设"></a>一、提出假设</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTIvbEdYSkwzUFQ4S3ZnLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>当面对两个选择时，抛硬币，总能奏效。就像曾小贤想用抛硬币来选择见不见胡一菲。</p><p>在统计学中，要确定最终的结果，需要先提出假设。</p><p>假设指的是当我们没有足够的证据支持一个结果时，先可以假定一个结果。这个事先给出的假定结果，就叫做<strong>原假设（或零假设, H<sub>0</sub>）</strong>，同时提出与之相对应的假设，叫做**备择假设（H<sub>1</sub>)**。</p><p>对于曾小贤抛起的硬币，我们可以先假设它最终是正面（不见），作为原假设；反面（见）为备择假设。</p><blockquote><p><strong>怎么设定零假设和备择假设？</strong></p><p>一般，原假设是需要收集证据来反对的假设（通过已有的知识，小概率发生的事件）；备择假设是收集证据来支持的假设。</p></blockquote><blockquote><p><strong>有零假设，为什么还要设置备择假设？</strong></p><p>90多年前，英国著名的统计学家哥色特（Student）曾举例解释过这个问题，他的主要思想就是人们往往都倾向于选择相信概率比较大的事件。</p><p>比如一些来自于正态总体的数据，现想检验它们的均值是不是等于a0？</p><p>假设得到检验的概率值为0.0001，虽然这个值很小，但是你不能认为这批数据的均值不等于a0，为什么呢？因为这时候你只有一个a0供你检验，概率值再小，也不能否认它发生的可能性。而此时，如果你再有一个“备胎”（值为a1）让你去检验，最后检验的概率值为0.05，比前面的值大很多，这时候你就会倾向于选择后面a1这个值，而认为原来的a0不真。所以，我们需要有“比较”，多一个“备胎”，多一份选择！（《数理统计学简史》）。</p></blockquote><p>在实际的统计工作中会遇到不同的样本量和需求，对于不同的样本，我们需要提出不同的假设形式：</p><blockquote><p><strong>样本（<em>Sample</em>）</strong>：研究中实际观测或调查的一部分个体叫样本，这些个体的数目叫<strong>样本容量（<em>sample size</em> ）</strong>，研究对象的全部称为<strong>总体</strong>。</p><p>对总体的规定：总体内所有观察单位必须是<strong>同质的</strong>。</p><p>对样本的规定：抽取样本的过程中，必须遵守<strong>随机化原则</strong>；样本的观察单位还要有<strong>足够的数量</strong>。</p></blockquote><p><strong>1.单个样本</strong>：</p><p>现在要确定一个样本值（θ）与设定的已知值（θ<sub>0</sub>）的关系</p><p>零假设（H<sub>0</sub>），备择假设（H<sub>1</sub>)</p><ul><li><p><strong>单边检验I：</strong>检验样本值与已知值相比，判断数轴一侧的大小关系<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvMXpFS29qdzJtTEZLLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>单边检验II：</strong>检验样本值与已知值相比，判断数轴一侧的大小关系</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvQjJUc2lGU0UyMmZNLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>双边检验：</strong>检验样本值与已知值是否相等</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvTzViWEdYWXZEd3gzLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p><strong>2.两个样本</strong></p><ul><li><p>单边检验I：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvdzNuMzNtVUJ2OVlmLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>单边检验II：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvM0dta0U3bFBqb3YxLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>双边检验:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvclBYNlR6VlMwWDg3LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p><strong>3.多个样本</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvN21qVGszM2ZjTkJZLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvckU4c2dpV3ZMT2VOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>下面以单细胞表达数据为例：</p><ul><li><p>列分别代表基因，正常样本的5个细胞的重复样本，癌症样本5个细胞的重复样本</p></li><li><p>行代表每个基因在所有样本的FPKM值</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTIvSTZhd2xuS3Q5Nm5JLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们如果要分析在正常和癌症样本的平均表达量是否一致，也就是双边检验。</p><p>首先提出假设：</p><ul><li>原假设：该基因在两个细胞中的表达量相等，无差异（H0：μ1&#x3D;μ2）</li><li>备择假设：该基因在两个细胞中的表达量不相等，有差异（H0：μ1≠μ2）</li></ul><p>然后设定显著性阈值：</p><p>这里的阈值是用来判断统计分析得到p值，如果p小于阈值，证明有统计显著性，推翻原假设。这里阈值一般会选择0.05，即p&lt;0.05。这个值越小越严格。</p><blockquote><p>在设定显著性水平a作为阈值时，会遇到两类错误，导致结果错误：</p><ul><li>第一类错误（I型错误，标记为α）：也叫“弃真”，上面提到的两组表达量平均值本来是相等的。但是在判断时，认为是结果有差异的，推翻了本来正确的原假设。</li><li>第二类错误（II型错误，标记为β）：也叫“取伪”，类似于上面，但是这里结果接收了错误的原假设。</li></ul><p>这里的两类错误，如果想减少其中一种错误类型的发生，就会使另一种错误发生的概率增加。</p><p>如果想同时减少两种错误的发生，就需要增加样本容量，这就是做实验要增加重复样本的原因。</p></blockquote><p>接下来，验证我们提出的假设：</p><p>我们一般在检验时需要根据某种分布，求出数据对应的统计量，然后据此判断该值是否落入拒绝域（拒绝原假设的取值范围）中。</p><p>那么我们看看目前有哪些分布和检验方法，</p><h3 id="二、选择检验方法"><a href="#二、选择检验方法" class="headerlink" title="二、选择检验方法"></a>二、选择检验方法</h3><h4 id="2-1-正态分布"><a href="#2-1-正态分布" class="headerlink" title="2.1 正态分布"></a>2.1 正态分布</h4><p>这是在统计学中大名鼎鼎的一种分布，最早由德国的天文学家Moivre提出。后来，德国数学家Gauss首先将其应用于天文学研究，故正态分布也叫“高斯分布”。高斯的这项工作对后世的科学研究影响极大，以至于德国10马克的钞票上印的是高斯头像和正态分布。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTIvcFVOcHN1dzM0N2NxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>正态分布的函数表达式：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvNmJPY1RUdUlTa0xTLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以描述为，随机变量X服从一个位置参数μ，尺度参数σ的概率分布，记做<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvNkxiZE1tMXI2M3JMLnBuZw?x-oss-process=image/format,png" alt="mark">，或X服从正态分布。一般，μ和σ都是常数，μ代表数据的均值，σ代表数据的标准差。</p><p><strong>R语言绘制正态分布：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTIvYXVyZWdTNzRUV3FQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>我们可以从图中看到，均值μ决定正态分布的峰值位置，标准差σ决定分布的矮胖，σ越大越胖。</p><p>R代码：</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(-2,1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,1)</span><br>y2 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,4)</span><br>y3 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~N(-2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,4)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation"><code class="language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(-2,1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,1)</span><br>y2 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算N~(2,4)</span><br>y3 <span class="hljs-operator">&lt;-</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~N(-2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~N(2,4)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#95afc0&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br><br></code></pre></td></tr></table></figure><h4 id="2-2-t分布（t-distribution）与T检验"><a href="#2-2-t分布（t-distribution）与T检验" class="headerlink" title="2.2 t分布（t-distribution）与T检验"></a>2.2 t分布（<em>t-distribution</em>）与T检验</h4><p>t分布由Gosset于1908年首先发表，因为当时他在都柏林的健力士酿酒厂工作的原因，不能以他本人的名义发表，所以论文用学生（Student）这一笔名，因此该分布也成为称为student分布。<strong>t分布是正态分布的一种特殊情况</strong>。</p><p><strong>t分布的函数表达式：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvSEh3cFh4Nm9wV3NILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以描述为，当X服从正态分布N(0,1)时，Y服从<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvRnEzd3pDc3pHalBsLnBuZw?x-oss-process=image/format,png" alt="mark">，X于Y相互独立，自由度为n的t分布，记为<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvNGc2Sk5uVW9FTlV0LnBuZw?x-oss-process=image/format,png" alt="mark">。</p><p><strong>R语言绘制t分布：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTIveFl6R3cxYXoyTk1WLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>不难看出，t分布和正态分布几乎一样。当自由度n趋于无穷大时，t分布会趋于正态分布。因此，针对小样本数据，可以应用t分布。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(10)</span><br>y2 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(100)</span><br>y3 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~t(1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~t(10)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~t(100)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation"><code class="language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(10)</span><br>y2 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算X~t(100)</span><br>y3 <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;X~t(1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~t(10)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;X~t(100)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果现在已正态分布或t分布为依据进行假设检验，该检验方法就叫t检验。</p><h4 id="2-3-F分布（F-distribution）与方差分析"><a href="#2-3-F分布（F-distribution）与方差分析" class="headerlink" title="2.3 F分布（F-distribution）与方差分析"></a>2.3 F分布（<em>F-distribution</em>）与方差分析</h4><p>F分布，由英国统计学家R.A.Fisher提出，用Fisher的第一个字母F来命名。F分布有着广泛的应用，如在方差分析、回归方程的显著性检验中都有着重要的地位。</p><p>假设有两个独立的随机变量，这两个变量都分别符合卡方分布，它们相除以后的比率，我们就用F分布来描述。</p><p><strong>F分布的函数表达式：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvYnlCS2ZMZGJjUmpILnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以描述为，当样本 <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvME5lQjMwVDF2ZVNSLnBuZw?x-oss-process=image/format,png" alt="mark">，<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvclBQRUlFbERUdFk3LnBuZw?x-oss-process=image/format,png" alt="mark">，X和Y相互独立，随机变量F服从自由度为(n, m)的F分布，记为F~F(n, m)</p><p><strong>R语言绘制F分布</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvYW12RHdmZHRuY3hyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>R代码如下</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(1, 1)</span><br>y1 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(4, 1)</span><br>y2 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(3, 10)</span><br>y3 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;F~F(1, 1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F~F(4, 1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F~F(3, 10)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation"><code class="language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(1, 1)</span><br>y1 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(4, 1)</span><br>y2 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算F~F(3, 10)</span><br>y3 <span class="hljs-operator">&lt;-</span> df<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;F~F(1, 1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F~F(4, 1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;F~F(3, 10)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>与F分布相对应的是方差分析，该方法可以评估数据间的波动程度。目的在于检验两个或多个样本均值是否有统计学意义。</p><h4 id="2-4-卡方分布-（chi-square-distribution）与卡方检验"><a href="#2-4-卡方分布-（chi-square-distribution）与卡方检验" class="headerlink" title="2.4 卡方分布 （chi-square distribution）与卡方检验"></a>2.4 卡方分布 （<em>chi-square distribution</em>）与卡方检验</h4><p>卡方分布是由Abbe于1863年首先提出的，后来由海尔墨特(Hermert)和现代统计学的奠基人之一的卡·皮尔逊(C K．Pearson)分别于1875年和1900年推导出来。</p><p>如果有n个独立的随机变量，这些变量都服从标准正态分布，那么这些随机变量的平方和会构成一个新的随机变量，这个随机变量分布规律就是卡方分布</p><p>卡方分布的函数表达式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMjUvV0h4d2JTaHlMdXp3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以描述为，当样本 <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvTkdFTXpXcldiNTVLLnBuZw?x-oss-process=image/format,png" alt="mark">，其中i&#x3D;1,2,…,n，Y服从自由度为n的卡方分布，记为 <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvT3h1S3F5QlFINkV2LnBuZw?x-oss-process=image/format,png" alt="mark">。</p><p><strong>R语言绘制卡方分布</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTMvWDVvNEFoaGNGT044LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(5)</span><br>y2 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(10)</span><br>y3 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Y~x(1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Y~x(5)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Y~x(10)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation"><code class="language-hljs R">set.seed<span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> seq<span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>length.out <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(1)</span><br>y1 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(5)</span><br>y2 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 计算Y~x(10)</span><br>y3 <span class="hljs-operator">&lt;-</span> dchisq<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>plot<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y1<span class="hljs-punctuation">,</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l&quot;</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> ylab <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Density&quot;</span><span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> xlim <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ylim<span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y2<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> y3<span class="hljs-punctuation">,</span> lwd<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> col<span class="hljs-operator">=</span><span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><br>legend<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;topright&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Y~x(1)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Y~x(5)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Y~x(10)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#f0932b&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#4834d4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#6ab04c&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> lty <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>text.font <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>如果现在已卡方分布为依据进行假设检验，该检验方法就叫卡方检验。</p><p><strong>卡方检验</strong></p><p>应用：</p><ul><li>检验数据符合哪种分布，包括正态分布，泊松分布，卡方分布等</li><li>检验列联表数据</li></ul><blockquote><p>列联表，又叫交互分类表。是指同时依据两个变量的值，将所研究的个案分类。我们会得到两个变量的分组，然后比较各组的分布情况，寻找变量间的关系。</p><p>比如，依据是否吸烟与是否患肺癌进行分类，然后可以通过比较这些数值，寻找吸烟与患肺癌之间是否相关。</p></blockquote><h5 id="2-4-1-检验数据是否服从某种分布"><a href="#2-4-1-检验数据是否服从某种分布" class="headerlink" title="2.4.1 检验数据是否服从某种分布"></a>2.4.1 检验数据是否服从某种分布</h5><p>现在，统计到一个班级里所有人的体重，我们看看是否符合正态分布：</p><h6 id="2-4-1-1-使用绘图"><a href="#2-4-1-1-使用绘图" class="headerlink" title="2.4.1.1 使用绘图"></a>2.4.1.1 使用绘图</h6><p>查看数据密度分布与正态分布曲线的一致性</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTQvZThORE44MDE1cXp1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>蓝色为数据密度分布曲线，红色为正态分布曲线，通过观察，我们会发现这组数据虽然与标准分布有区别，但是总体是符合正态分布的。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">w <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">62.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">57.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>hist<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">,</span> freq <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>density<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sd<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">w <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">62.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">57.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>hist<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">,</span> freq <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>density<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">)</span><br>x <span class="hljs-operator">&lt;-</span> <span class="hljs-punctuation">(</span><span class="hljs-built_in">min</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">max</span><span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>lines<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> dnorm<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sd<span class="hljs-punctuation">(</span>w<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> col <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>也可以使用qq图判断：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTQvRW5saXdQQTJ6eG90LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>可以发现样本数据偏离直线不远，判断数据基本来自于正态分布。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>qqnorm<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><br>qqline<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation"><code class="language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>qqnorm<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><br>qqline<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h6 id="2-4-1-2-使用卡方检验"><a href="#2-4-1-2-使用卡方检验" class="headerlink" title="2.4.1.2 使用卡方检验"></a>2.4.1.2 使用卡方检验</h6><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 卡方检验</span><br>chisq.test<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation"><code class="language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 卡方检验</span><br>chisq.test<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>结果得出p-value &#x3D; 0.3107，p&gt;0.05，认为该班体重分布符合正态分布</p><h6 id="2-4-1-3-使用Kolmogorov-Smirnov检验"><a href="#2-4-1-3-使用Kolmogorov-Smirnov检验" class="headerlink" title="2.4.1.3 使用Kolmogorov-Smirnov检验"></a>2.4.1.3 使用Kolmogorov-Smirnov检验</h6><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>ks.test<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;pnorm&quot;</span><span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sd<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 如果数据中有重复值，会报错：Kolymogorov - Smirnov检验里不应该有连结</span><br><span class="hljs-comment"># 需要在数据加点噪音,不会影响数据分布和检测结果</span><br>ks.test<span class="hljs-punctuation">(</span>jitter<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;pnorm&quot;</span><span class="hljs-punctuation">,</span>mean<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>sd<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">d <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">63.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">56.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">71.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">72.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">63.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">74.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">67.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">80.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">66.8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">51.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">48.4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54.2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">58.9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">68.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65.1</span><span class="hljs-punctuation">)</span><br>ks.test<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;pnorm&quot;</span><span class="hljs-punctuation">,</span> mean<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> sd<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 如果数据中有重复值，会报错：Kolymogorov - Smirnov检验里不应该有连结</span><br><span class="hljs-comment"># 需要在数据加点噪音,不会影响数据分布和检测结果</span><br>ks.test<span class="hljs-punctuation">(</span>jitter<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;pnorm&quot;</span><span class="hljs-punctuation">,</span>mean<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>sd<span class="hljs-punctuation">(</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>结果得到p-value &#x3D; 0.7857，p&gt;0.05，认为该班体重分布符合正态分布</p><h5 id="2-4-2-检验列联表数据"><a href="#2-4-2-检验列联表数据" class="headerlink" title="2.4.2 检验列联表数据"></a>2.4.2 检验列联表数据</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTQvSFFrQkEyY1A2SXVPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">60</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">32</span><span class="hljs-punctuation">,</span> <span class="hljs-number">11</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>chisq.test<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation"><code class="language-hljs R">x <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">60</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">32</span><span class="hljs-punctuation">,</span> <span class="hljs-number">11</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">dim</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>chisq.test<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>得到p-value &#x3D; 0.004855，p&lt;0.05，可认为患肺癌与吸烟有关</p><h3 id="三、根据P值，得到结论"><a href="#三、根据P值，得到结论" class="headerlink" title="三、根据P值，得到结论"></a>三、根据P值，得到结论</h3><p>依据不同的数据分布，选择合适的检验方法，我们会得到相应的P值，最终我们会根据P值来确定最后的结论。需要注意的是：</p><ul><li>结论不能是绝对的，结论中最好不包含“一定，肯定”等，这样的结论不严谨</li><li>显著性水平a的大小用来确定拒绝区间，进而确定是否拒绝原假设，也就是说数据间是否有差异，是定性用的。通过它的值是不能确定差异大小的，要定量的话，需要用到差异倍数（Fold Change，FC）值。可以使用火山图绘制P值与FC值来筛选并可视化最终的差异数据。</li><li>显著性水平a，也就是P值确定的阈值，0.05, 0.01，这个值是约定俗成的规则，不是绝对的值。只要有足够的理由或文献支持，可以根据自己的需求来调节</li></ul><p>使用统计学来分析自然或社会规律的数据，只是为客观事物提供统计学意义的科学参考，并不代表事物一定会向结论发展或发生。但是，如果你想让你的结论为大众所接受，那你在采集和分析数据时，就应遵守数理统计学方法的规范，这才能使自己的结论建立在健全的科学基础上，得到公众的认可。陈希孺教授在《数理统计学简史》 中讲数理统计方法是一个中立性的工具，这“中立”的含义是指，它既不在任何问题上有何主张，也不维护任何利益或在任何学科中坚持任何学理。作为一个工具，谁都可以使用，若是谁不同意这种方法，可以不用它，而去做单纯定性式的讨论。 </p><p>有时候，我们做的决定并不是为大众所接受的，而是取决于主体的，就像前面到曾小贤抛硬币做决定的同时内心还有段独白：</p><p><em>当面对两个选择时,抛硬币总能奏效,</em></p><p><em>并不是因为它总能给出对的答案,</em></p><p><em>而是在你把它抛在空中的那一秒里,</em></p><p><em>你突然知道你希望它是什么……</em></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文极速读懂UniProt数据库</title>
      <link href="/posts/15191/"/>
      <url>/posts/15191/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDMvTVFpYWlrV21nT2ZpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>Uniprot （<em>Universal Protein</em> ）是包含蛋白质序列，功能信息，研究论文索引的蛋白质数据库，整合了包括EBI（ European Bioinformatics Institute），SIB（the Swiss Institute of Bioinformatics），PIR（Protein Information Resource）三大数据库的资源。</p><ul><li>EBI（ European Bioinformatics Institute）：欧洲生物信息学研究所（EMBL-EBI）是欧洲生命科学旗舰实验室EMBL的一部分。位于英国剑桥欣克斯顿的惠康基因组校园内，是世界上基因组学领域最强的地带之一。</li><li>SIB（the Swiss Institute of Bioinformatics）：瑞士日内瓦的SIB维护着ExPASy（专家蛋白质分析系统）服务器，这里包含有蛋白质组学工具和数据库的主要资源。</li><li>PIR（Protein Information Resource）：PIR由美国国家生物医学研究基金会（NBRF）于1984年成立，旨在协助研究人员识别和解释蛋白质序列信息。</li></ul><p>目前，UniProt由主要由以下子库构成：</p><table><thead><tr><th>数据库名</th><th>全名</th><th>用途</th></tr></thead><tbody><tr><td><a href="https://www.uniprot.org/#">UniProtKB&#x2F;Swiss-Prot</a></td><td>Protein knowledgebas (review)</td><td>高质量的、手工注释的、非冗余的数据库</td></tr><tr><td><a href="https://www.uniprot.org/#">UniProtKB&#x2F;TrEMBL</a></td><td>Protein knowledgebase (unreview)</td><td>自动翻译蛋白质序列，预测序列，未验证的数据库</td></tr><tr><td><a href="https://www.uniprot.org/#">UniParc</a></td><td>Sequence</td><td>非冗余蛋白质序列数据库</td></tr><tr><td><a href="https://www.uniprot.org/#">UniRef</a></td><td>Sequence clusters</td><td>聚类序列减小数据库，加快搜索的速度</td></tr><tr><td><a href="https://www.uniprot.org/#">Proteomes</a></td><td>Protein sets from fully sequenced genomes</td><td>为全测序基因组物种提供蛋白质组信息</td></tr></tbody></table><p>他们的关系如下：</p><p>通过EMBL，GenBank，DDBJ等公共数据库得到原始数据，处理后存入UniParc的非冗余蛋白质序列数据库。UniProt作为数据仓库，再分别给UniProtKB，Proteomes，UNIRef提供可靠的数据集。其中在UniProtKB数据库中Swiss-Prot是由TrEMBL经过手动注释后得到的高质量非冗余数据库，也是我们今后常用的蛋白质数据库之一。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDMvM0MwdjZ4N2tMVjFQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="UniProtKB-x2F-Swiss-Prot"><a href="#UniProtKB-x2F-Swiss-Prot" class="headerlink" title="UniProtKB&#x2F;Swiss-Prot"></a>UniProtKB&#x2F;Swiss-Prot</h5><p>高质量的、手工注释的、非冗余的数据集</p><p>Swiss-Prot旨在提供与高水平注释（例如，蛋白质功能，其域结构，翻译后修饰，变体等的描述）相关的可靠蛋白质序列，最小程度的冗余和高水平与其他数据库的集成级别。注释主要来自文献中的研究成果和E-value校验过计算分析结果，有质量保证的数据才被加入该数据库 。</p><p>Swiss-Prot由Amos Bairoch博士在1986年创建，由瑞士生物信息学研究所开发，随后由欧洲生物信息学研究所的Rolf Apweiler开发。也是说EBI和SIB共同制作了Swiss-Prot和TrEMBL数据库。</p><p>Swiss-Prot条目的注释中使用了一系列序列分析工具。包括手动评估，计算机预测，并选择结果包含在相应的条目中。这些预测包括翻译后修饰，跨膜结构域和拓扑，信号肽，结构域识别和蛋白质家族分类。</p><p>来自相同基因和相同物种的序列合并到相同的数据库条目中。确定序列之间的差异包含：可变剪接，自然变异，错误的起始位点，错误的外显子边界，移码，未识别的冲突。</p><p>注释会用相关出版物通过搜索数据库（例如PubMed）进行识别。阅读每篇论文的全文，然后提取信息并将其添加到条目中。科学文献中的注释包括但不限于：</p><ul><li>蛋白质和基因名称</li><li>功能</li><li>特定于酶的信息，例如催化活性，辅因子和催化残基</li><li>亚细胞定位</li><li>蛋白质相互作用</li><li>表达方式</li><li>重要域和站点的位置和角色</li><li>离子，底物和辅因子结合位点</li><li>通过自然遗传变异，RNA编辑，替代剪接，蛋白水解加工和翻译后修饰产生的蛋白质变异形式</li></ul><p>使用：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDMveU9zWE5MSnBsNlVZLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="UniProtKB-x2F-Swiss-Prot-1"><a href="#UniProtKB-x2F-Swiss-Prot-1" class="headerlink" title="UniProtKB&#x2F;Swiss-Prot"></a>UniProtKB&#x2F;Swiss-Prot</h4><p>高质量的、手工注释的、非冗余的数据集</p><p>Swiss-Prot旨在提供与高水平注释（例如，蛋白质功能，其域结构，翻译后修饰，变体等的描述）相关的可靠蛋白质序列，最小程度的冗余和高水平与其他数据库的集成级别。注释主要来自文献中的研究成果和E-value校验过计算分析结果，有质量保证的数据才被加入该数据库 。</p><p>Swiss-Prot由Amos Bairoch博士在1986年创建，由瑞士生物信息学研究所开发，随后由欧洲生物信息学研究所的Rolf Apweiler开发。也是说EBI和SIB共同制作了Swiss-Prot和TrEMBL数据库。</p><p>Swiss-Prot条目的注释中使用了一系列序列分析工具。包括手动评估，计算机预测，并选择结果包含在相应的条目中。这些预测包括翻译后修饰，跨膜结构域和拓扑，信号肽，结构域识别和蛋白质家族分类。</p><p>来自相同基因和相同物种的序列合并到相同的数据库条目中。确定序列之间的差异包含：可变剪接，自然变异，错误的起始位点，错误的外显子边界，移码，未识别的冲突。</p><p>注释会用相关出版物通过搜索数据库（例如PubMed）进行识别。阅读每篇论文的全文，然后提取信息并将其添加到条目中。科学文献中的注释包括但不限于：</p><ul><li><p>蛋白质和基因名称</p></li><li><p>功能</p></li><li><p>特定于酶的信息，例如催化活性，辅因子和催化残基</p></li><li><p>亚细胞定位</p></li><li><p>蛋白质相互作用</p></li><li><p>表达方式</p></li><li><p>重要域和站点的位置和角色</p></li><li><p>离子，底物和辅因子结合位点</p></li><li><p>通过自然遗传变异，RNA编辑，替代剪接，蛋白水解加工和翻译后修饰产生的蛋白质变异形式</p></li></ul><h5 id="常用的操作"><a href="#常用的操作" class="headerlink" title="常用的操作"></a>常用的操作</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0wN2Q4YTgxZDhmOTcxMzM5LnBuZw?x-oss-process=image/format,png" alt="image"> </p><p>&lt;1&gt;：这里输入基因名，UniProt ID，或者感兴趣的关键字</p><p>&lt;2&gt;：筛选：<strong>Reviewed</strong>：存储在Swiss-Prot数据库中经过验证的蛋白数据，<strong>Unreviewed</strong>：存储在TrEMBL数据库中没有经过验证的蛋白数据</p><p>&lt;3&gt;：筛选某个物种，点击就好切换到该物种</p><p>&lt;4&gt;：通过基因名或蛋白名来筛选</p><p>&lt;5&gt;：依次是Unprot ID，该蛋白数据库命名，蛋白质名，基因名，物种，序列长</p><p>&lt;6&gt;：如果需要Blast来查看某个蛋白有哪些序列相似的蛋白序列，先选中感兴趣蛋白前的方框，点击<code>Blast</code></p><p>&lt;7&gt;：如果需要多序列比对，先选中感兴趣蛋白前的方框，点击<code>Align</code></p><p>&lt;8&gt;：如果要下载信息，先选中感兴趣蛋白前的方框，点击<code>Download</code>下载。这里不选择序列，默认会下载全部序列</p><p>下面以 <code>PO5F1_HUMAN</code> 为例，下载对应的fasta序列来看看：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDk1MDA1OS0zOGFhMTIxZGQ5NTM4YWZiLnBuZw?x-oss-process=image/format,png" alt="image"> </p><p>下载到的序列：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">>sp|Q01860|PO5F1_HUMAN POU domain, class 5, transcription factor 1 OS=Homo sapiens OX=9606 GN=POU5F1 PE=1 SV=1<br>  MAGHLASDFAFSPPPGGGGDGPGGPEPGWVDPRTWLSFQGPPGGPGIGPGVGPGSEVWGI<br>  PPCPPPYEFCGGMAYCGPQVGVGLVPQGGLETSQPEGEAGVGVESNSDGASPEPCTVTPG<br>  AVKLEKEKLEQNPEESQDIKALQKELEQFAKLLKQKRITLGYTQADVGLTLGVLFGKVFS<br>  QTTICRFEALQLSFKNMCKLRPLLQKWVEEADNNENLQEICKAETLVQARKRKRTSIENR<br>  VRGNLENLFLQCPKPTLQQISHIAQQLGLEKDVVRVWFCNRRQKGKRSSSDYAQREDFEA<br>  AGSPFSGGPVSFPLAPGPHFGTPGYGSPHFTALYSSVPFPEGEAFPPVSVTTLGSPMHSN<br></code></pre></td></tr></table></figure><p>首先看 <code>&gt;</code> 后的注释信息</p><ul><li><p><strong>sp</strong>：Swiss-Prot数据库的简称，也就是上面说的验证后的蛋白数据库</p></li><li><p><strong>Q01860</strong>：UniProt ID号</p></li><li><p><strong>PO5F1_HUMAN</strong>：是UniProt 的登录名</p></li><li><p><strong>POU domain, class 5, transcription factor 1</strong>：蛋白质名称</p></li><li><p><strong>OS&#x3D;Homo sapiens</strong>：OS是Organism简称，Homo sapiens为人的拉丁文分类命名，也就是这是人的蛋白质</p></li><li><p><strong>OX&#x3D;9606</strong>：Organism Taxonomy，也就是物种分类数据库Taxonomy ID</p></li><li><p><strong>GN&#x3D;POU5F1</strong>：Gene name，基因名为POU5F1</p></li><li><p><strong>PE&#x3D;1</strong>：Protein Existence，蛋白质可靠性，对应5个数字，数字越小越可靠：</p><ul><li><p>1：Experimental evidence at protein level</p></li><li><p>2：Experimental evidence at tranlevel</p></li><li><p>3：Protein inferred from homology</p></li><li><p>4：Protein predicted</p></li><li><p>5：Protein uncertain</p></li></ul></li><li><p><strong>SV&#x3D;1</strong>：Sequence Version，序列版本号</p></li></ul><h4 id="UniProtKB-x2F-TrEMBL"><a href="#UniProtKB-x2F-TrEMBL" class="headerlink" title="UniProtKB&#x2F;TrEMBL"></a>UniProtKB&#x2F;TrEMBL</h4><p>在认识到序列数据的生成速度超过了Swiss-Prot的注释能力时，为了给不在Swiss-Prot中的那些蛋白质提供自动注释，UniProt创建了TrEMBL（翻译的EMBL核苷酸序列数据库）。在三大核酸数据库（EMBL-Bank&#x2F;GenBank&#x2F;DDBJ）中注释的编码序列都会被自动翻译并加入该数据库中。它也有来自PDB数据库的序列，以及Ensembl、Refeq和CCDS基因预测的序列。之前提到的PIR组织制作了蛋白质序列数据库（PIR-PSD）。</p><h4 id="UniParc"><a href="#UniParc" class="headerlink" title="UniParc"></a>UniParc</h4><p>UniProt Archive（UniParc）包含来自主要公共可用蛋白质序列数据库的所有蛋白质序列的非冗余数据集。蛋白质可能存在于几个不同的来源数据库中，并且在同一数据库中存在多个副本。 为了避免冗余，UniParc仅将每个唯一序列存储一次。 相同序列被合并，无论它们来自相同还是不同物种。 每个序列都有一个稳定且唯一的标识符（UPI），从而可以从不同的来源数据库中识别相同的蛋白质。</p><p>UniParc仅包含蛋白质序列，没有注释。 UniParc条目中的数据库交叉引用允许从源数据库检索有关该蛋白质的更多信息。 当源数据库中的序列发生更改时，UniParc将跟踪这些更改，并记录所有更改的历史记录。</p><h4 id="UniRef"><a href="#UniRef" class="headerlink" title="UniRef"></a>UniRef</h4><p>UniProt Reference Clusters（UniRef）：聚类序列可显著减小数据库大小，从而加快序列搜索的速度。用于计算的蛋白质序列来自UniProtKB和部分UniParc记录的序列。UniRef100序列将相同的序列和序列片段（来自任何生物）合并到一个UniRef条目中，用于显示代表性蛋白质的序列。 使用CD-HIT算法对UniRef100序列进行聚类，并构建UniRef90和UniRef50。UniRef90和UniRef50分别代表每个簇由与最长序列分别具有至少90％或50％序列同一性的序列组成。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 蛋白质组 </tag>
            
            <tag> 蛋白质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何科学检测新型冠状病毒？</title>
      <link href="/posts/54850/"/>
      <url>/posts/54850/</url>
      
        <content type="html"><![CDATA[<p>在全国的这场战疫中，我们每个人都密切关注着每时每刻的疫情动态，尤其是物质供应和新型冠状病毒的确诊情况。其中，作为检测新冠病毒的主力，<strong>核酸检测试剂盒</strong>常常出现在大家的视野中，那么它是怎么检测疑似患者携带有新型冠状病毒？</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvYTdjY0Q2MWdIeGlQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="知己知彼"><a href="#知己知彼" class="headerlink" title="知己知彼"></a>知己知彼</h4><p>在识别新型冠状病毒之前我们先了解一下它：</p><p>这种病毒是一类具有包膜、基因组为线性单股正链的RNA病毒，颗粒呈圆形或椭圆形，直径约60-140nm。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvNFRoR0h5S2ZGTHdyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>需要注意的是，上面的病毒照片是使用电镜放大到纳米级拍摄的，也就是说通过一般的检测手段，几乎察觉不到它的存在。这种病毒感染人体后，其症状会从普通感冒到重症肺部感染，而且潜伏期长，会使病毒携带者在不经意间感染更多的人。因此，尽早检测出它的存在，来减少病毒携带者感染他人风险，使新冠状病毒患者得到及时的专业治疗就成为重中之重。</p><p>根据国家卫健委发布的《新型冠状病毒感染的肺炎诊 疗方案（试行第四版）》确诊病例需要有以下的病原学证据：</p><p>1.呼吸道标本或血液标本等 实时荧光RT-PCR检测新型冠状病毒核酸阳性； </p><p>2.呼吸道标本或血液标本等病毒基因测序，与已知的新型冠状病毒高度同源。</p><p>目前，大部分的核酸试剂盒使用第一种方法，<strong>实时荧光 RT-PCR</strong> 来鉴定新型冠状病毒，这种技术的大概<strong>流程</strong>：</p><ul><li>获取疑似患者的样本，提取样本的核酸序列。</li><li>将这些核酸序列（其中有可能包含有病毒核酸序列）与反应原料混合</li><li>在反应容器中进行扩增反应（这种反应可以只扩大病毒核酸序列的数量），便于后续检测</li><li>扩增后的核酸序列是带有荧光的，如果检测到荧光信号曲线符合病毒特征，那么就认为该疑似患者为阳性。</li><li>在实际过程中，对一位患者会进行多次检测</li></ul><p>需要的<strong>材料</strong>：核酸试剂盒，QPCR仪，电脑，样本等</p><p>下面，我们详细了解这种技术是怎么揪出新型冠状病毒的。</p><h4 id="如何放大病毒信号"><a href="#如何放大病毒信号" class="headerlink" title="如何放大病毒信号"></a>如何放大病毒信号</h4><p>我们都知道作为核酸序列的DNA可以复制自身，这个过程如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvVlFQNThGdEpUdTdKLmdpZg" alt="mark"></p><ul><li>DNA先打开双链，暴露出模板</li><li>引物（左右两个DNA片段）会特异性的结合到模板上</li><li>DNA聚合酶（黄色的几何体）就可以利用碱基（彩色的小圆点）从引物开始复制，这个过程也叫扩增</li><li>只要这个反应有足够原料，新合成的DNA链又会作为模板链开始新的合成</li><li>最终，开始的序列会被以呈指数级的增加。利用这个特性，可以放大样品中微弱的病毒序列信号</li></ul><p>实际上，早在上个世纪，一位叫穆利斯（<em>Kary Banks Mullis</em>）的牛人在体外实现了DNA复制过程。该技术被命名为<strong>聚合酶链式反应（PCR）</strong>，因这个伟大的发明他在1993年获得了诺贝尔化学奖。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvc0FtekFydk1qRjlPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>但是，需要注意的是2019新型冠状病毒是一种RNA病毒，PCR是针对DNA复制来设计的。</p><p>因此，我们需要将RNA逆转录为cDNA，然后进行DNA复制的过程，这个技术也叫<strong>RT-PCR（逆转录-PCR）</strong>。</p><h4 id="如何只放大新型冠状病毒的信号"><a href="#如何只放大新型冠状病毒的信号" class="headerlink" title="如何只放大新型冠状病毒的信号"></a>如何只放大新型冠状病毒的信号</h4><p>接下来的问题是怎么去识别2019新型冠状病毒，避免检测到其他的序列信号？</p><p>大家会注意到在PCR过程中，只有引物会<strong>特异性</strong>的结合到模板上，也就是说，设计好的引物可以识别新冠病毒的核酸序列。引物的设计工作就成为病毒检测成功与否的关键。</p><p>科学家根据已发布的2019-nCoV全基因组序列，通过序列比对寻找具有 2019新冠状病毒高度特异性的核酸序列，该序列可以特异鉴别2019新冠状病毒。</p><p>根据这个特点，在此区域设计特异引物用于2019新型冠状病毒鉴定。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvSzZYM3RoRTJMUFdPLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="如何进行信号检测"><a href="#如何进行信号检测" class="headerlink" title="如何进行信号检测"></a>如何进行信号检测</h4><p>为了能够实时检测到核酸序列的变化情况，在PCR的反应体系中往往需要加入探针或染料用于荧光信号捕获。同时需要QPCR仪，这种仪器可以将荧光信号采集为计算机可以识别的数字信号，用于后续诊断依据。这里涉及的两种产生荧光的物质有着不同的发光原理：</p><ul><li><strong>荧光染料</strong>：一般这种游离的染料几乎没有荧光信号，一旦结合双链DNA后，其荧光信号可呈数百倍的增加。</li><li><strong>荧光探针</strong>：依据目的基因设计合成一个能够与之特异性杂交的探针，该探针的核酸片段两端分别带有荧光基团和淬灭基团。<ul><li>一般情况下，两个基团的空间距离很近，荧光基因因淬灭而不能发出荧光。</li><li>PCR扩增时，探针的结合位置位于上下游引物之间。当扩增延伸到探针结合的位置时，一种切割酶会将荧光基团切下来，从而使其发出荧光。</li><li>检测到的荧光分子数与PCR产物的数量成正比，因此，根据PCR反应体系中的荧光强度即可计算出初始DNA模板的数量。</li></ul></li></ul><p>为了提高每次检测的人次，检测人员会将样本放置在孔板上，每个孔即为一个样本。同时，会加入空白对照，阳性对照，阴性对照来提高准确率。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvb1IxYzcxdmxDVWMxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>接下来，使用计算机软件分析，会有几种结果：</p><ul><li>空白对照，不会扩增</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvMU0yZXlWZ0ZLWUlELnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>内参样本：会加入人源性内参基因的检测，满足临床对样本质量控制的需要，降低假阴性率。如果，该样本没有扩增曲线，需要检查质控情况</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvUjRwQVZqVGgzSTRyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>阴性对照：这里阴性对照，不会扩增</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvU09iaFNwdGxvOXByLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>阳性对照：同样，阳性对照样本是存在已知新冠病毒的核酸（也就是说，已知该样本肯定要扩增），为了降低假阳性率。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvakMwT3o2c2RxT2tILnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p>病原检测人员会根据以上的数据来判断该患者是否为新冠病毒阳性。</p><p>最后，看看检测人员平时的工作状态：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAyMTEvS2x4WGowSUQ1T0ZULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>新冠病毒对我们来说只是个新闻字眼，但是对于他们来说只隔着一层防护服。而且几乎所有奋战在一线的科学家，医护工作者，志愿者们都是身披这身战甲，在前线日夜奋战。他们无数人洒下泪水与汗水，更有人奉献出自己的生命，但是更多的人不是悲伤和恐惧，而是继续奔赴前线。也许艾青在《我爱这土地》中，早已给出他们奋不顾身的原因：</p><p>假如我是一只鸟，<br>我也应该用嘶哑的喉咙歌唱：<br>这被暴风雨所打击着的土地，<br>这永远汹涌着我们的悲愤的河流，<br>这无止息地吹刮着的激怒的风，<br>和那来自林间的无比温柔的黎明……<br>——然后我死了，<br>连羽毛也腐烂在土地里面。<br>为什么我的眼里常含泪水？<br>因为我对这土地爱得深沉……</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新型冠状病毒的信息汇总与分析_(形态，分类，基因组，进化，变异，流行病学)</title>
      <link href="/posts/56529/"/>
      <url>/posts/56529/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvdjdzZFI0czczckkxLnBuZw?x-oss-process=image/format,png" alt="新型冠状病毒武汉株01的电镜照片 "></p><p>新型冠状病毒，是一类具有包膜、基因组为线性单股正链的RNA病毒，颗粒呈圆形或椭圆形，直径约60-140nm。</p><blockquote><p>正链意味着病毒进入细胞后就可以直接指导蛋白质合成，而且通过RNA聚合酶生成负链来进行自我复制</p></blockquote><p>此次武汉发现的冠状病毒是新发现的在人类中传播的病毒株系，被WHO命名为2019新型冠状病毒（2019-nCoV）。 </p><p>其他与之同属于冠状病毒会感染人类并引起疾病，比如中东呼吸综合征（MERS）和严重急性呼吸综合征（SARS），其症状可从普通感冒到重症肺部感染。</p><h3 id="冠状病毒形态"><a href="#冠状病毒形态" class="headerlink" title="冠状病毒形态"></a>冠状病毒形态</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvcVBocDdxMU5hTXg0LnBuZw?x-oss-process=image/format,png" alt="数据来源：Centers for Disease Control and Prevention (CDC) "></p><ul><li>刺突糖蛋白（Spike，S）：组成病毒粒表面有球棒状的突出部分，属于I型跨膜蛋白。可以被S酶分解为S1和S2两个功能单位 。S1用来促进病毒结合到宿主细胞受体，与宿主受体互作区（RBD区）与受体结合。这个区域可以与ACE2蛋白结合，如果结合完成，那么新型冠状病毒就会感染人呼吸道上皮细胞，进而导致肺炎。</li><li>血凝素-酯酶蛋白（hemagglutinin-esterase，HE）：β冠状病毒属（新型冠状病毒）的结构，I型跨膜蛋白 </li><li>膜糖蛋白（membrane glycoprotein，M）：通过三个跨膜结构域嵌入病毒包膜里 </li><li>包膜蛋白（envelope，E）：跨膜蛋白</li><li>核衣壳（nucleocapsid，N） ：以串珠的形式结合到RNA基因组上，形成螺旋对称的核衣壳</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvaFdQeUVwTDRscmZlLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="基因组"><a href="#基因组" class="headerlink" title="基因组"></a>基因组</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvUjZKVjQ5UGQ2RmxjLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="参考基因组序列"><a href="#参考基因组序列" class="headerlink" title="参考基因组序列"></a>参考基因组序列</h3><ul><li><p><strong>NCBI</strong></p><p><em><strong>第一个上传的基因组数据</strong></em></p><p><strong>Wuhan seafood market pneumonia virus isolate Wuhan-Hu-1, complete genome</strong></p><p>这一版本的基因组相对后面发布的基因组，有更加全面的信息，详细内容进<a href="https://www.ncbi.nlm.nih.gov/nuccore/MN908947">https://www.ncbi.nlm.nih.gov/nuccore/MN908947</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvY3RRTVRrMWpGMnJPLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><blockquote><p>作者在上传基因组数据的声明，这个基因组的发布引起的学术纠纷不再赘述</p><p><a href="http://virological.org/t/novel-2019-coronavirus-genome/319">http://virological.org/t/novel-2019-coronavirus-genome/319</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvRk84eW95SG9sVDQ5LnBuZw?x-oss-process=image/format,png" alt="mark"></p></blockquote><ul><li><p>国家基因库</p><p>链接：<a href="https://db.cngb.org/search/assembly/CNA0007332/">https://db.cngb.org/search/assembly/CNA0007332/</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvOXljckxzZUhqNnlQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>比如基因组下载：<a href="ftp://ftp.cngb.org/pub/CNSA/CNP0000881/CNS0191792/CNA0007332/2019-nCoV_WH01.completeGenome.fa.gz">ftp://ftp.cngb.org/pub/CNSA/CNP0000881/CNS0191792/CNA0007332/2019-nCoV_WH01.completeGenome.fa.gz</a></p><p>其他更新ID：<a href="https://db.cngb.org/search/assembly/CNA0007332">CNA0007332</a> ，<a href="https://db.cngb.org/search/assembly/CNA0007333">CNA0007333</a> ，<a href="https://db.cngb.org/search/assembly/CNA0007334">CNA0007334</a> ，<a href="https://db.cngb.org/search/assembly/CNA0007335">CNA0007335</a> </p></li><li><p>国家基因组科学数据中心</p><p><a href="https://bigd.big.ac.cn/gwh/Assembly/947/show">https://bigd.big.ac.cn/gwh/Assembly/947/show</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvMFk0REN3UWpmelNpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>其他更新ID：<a href="https://bigd.big.ac.cn/gwh/Assembly/947/show">GWHABKF00000000</a> ，<a href="https://bigd.big.ac.cn/gwh/Assembly/948/show">GWHABKG00000000</a> ，<a href="https://bigd.big.ac.cn/gwh/Assembly/949/show">GWHABKH00000000</a> ，<a href="https://bigd.big.ac.cn/gwh/Assembly/950/show">GWHABKI00000000</a> ，<a href="https://bigd.big.ac.cn/gwh/Assembly/951/show">GWHABKJ00000000</a></p></li></ul><h3 id="蛋白质三维结构"><a href="#蛋白质三维结构" class="headerlink" title="蛋白质三维结构"></a>蛋白质三维结构</h3><p>1月26日，上海科技大学饶子和&#x2F;杨海涛课题组测定的2019-nCoV冠状病毒的部分高分率晶体结构<br>COVID-19主蛋白酶与抑制剂N3配合物的晶体结构<br>目前PDB ID: <a href="https://www.rcsb.org/structure/6LU7">6LU7</a></p><p>联系 <a href="mailto:&#108;&#105;&#x75;&#120;&#x40;&#x6e;&#97;&#x6e;&#107;&#97;&#x69;&#46;&#101;&#100;&#117;&#46;&#99;&#110;">&#108;&#105;&#x75;&#120;&#x40;&#x6e;&#97;&#x6e;&#107;&#97;&#x69;&#46;&#101;&#100;&#117;&#46;&#99;&#110;</a> </p><p><img src="https://img-blog.csdnimg.cn/20200228171120115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="基因组流行病学分析"><a href="#基因组流行病学分析" class="headerlink" title="基因组流行病学分析"></a>基因组流行病学分析</h3><p><a href="https://nextstrain.org/ncov">https://nextstrain.org/ncov</a> </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvWDlxNzc2bTdVNHJsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="基因组变异及进化树"><a href="#基因组变异及进化树" class="headerlink" title="基因组变异及进化树"></a>基因组变异及进化树</h3><p>最近，国家基因组中心更新了 <code>2019nCoVR</code> 专题，链接：<a href="https://bigd.big.ac.cn/ncov/">https://bigd.big.ac.cn/ncov/</a> </p><ul><li><p>基因组序列信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvVzc0cGRIT2lVaW9QLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>基因组变异分析</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAveUxYd1A1NzRyWDVDLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>进化树分析（来自NGDC）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDAxMzAvRUtWTG5jazgyRVJuLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><p>其他信息：</p><p><a href="https://www.who.int/westernpacific/emergencies/novel-coronavirus">https://www.who.int/westernpacific/emergencies/novel-coronavirus</a> </p><hr><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/RcOtYOnk5xRpyf5KH01dnQ">https://mp.weixin.qq.com/s/RcOtYOnk5xRpyf5KH01dnQ</a> </p><p><a href="https://phil.cdc.gov/Details.aspx?pid=23312">https://phil.cdc.gov/Details.aspx?pid=23312</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询Mysql中表大小，数据大小，索引大小</title>
      <link href="/posts/10885/"/>
      <url>/posts/10885/</url>
      
        <content type="html"><![CDATA[<ul><li>使用进入mysql命令行或者Navicat的查询界面</li><li>输入如下  <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">select * from information_schema.TABLES <br>where information_schema.TABLES.TABLE_SCHEMA=&#x27;your_database_name&#x27;<br>and information_schema.TABLES.TABLE_NAME=&#x27;your_table_name&#x27;<br></code></pre></td></tr></table></figure></li><li>结果解释<ul><li>DATA_LENGTH：单表数据总大小，单位字节</li><li>INDEX_LENGTH：单表索引大小，单位字节</li><li>单表总大小 &#x3D; 单表数据总大小 + 单表索引大小<br><img src="https://img-blog.csdnimg.cn/20191231103700292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信格式 | GAF GO注释文件详解</title>
      <link href="/posts/58187/"/>
      <url>/posts/58187/</url>
      
        <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="http://current.geneontology.org/products/pages/downloads.html">http://current.geneontology.org/products/pages/downloads.html</a> </p><p>GOC（Gene Ontology Consortium）提供了41种不同模型生物的GAF格式的注释信息。</p><h4 id="GAF格式介绍"><a href="#GAF格式介绍" class="headerlink" title="GAF格式介绍"></a>GAF格式介绍</h4><p>官网：<a href="http://geneontology.org/docs/go-annotation-file-gaf-format-2.1/">http://geneontology.org/docs/go-annotation-file-gaf-format-2.1/</a> </p><p>GO 注释文件有GOC（Gene Ontology Consortium）负责管理，使用GO术语（GO terms）来代表基因产物的属性。</p><p>打开GAF文件首先可以看到 <code>Header</code> 信息：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjcvMUZTT3RmVjczWFRLLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>接下来就是GO注释的详细信息：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjcvcFB5ZjZIU2xuSWQ1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>GAF（GO Annotation File）的使用<code>tab</code>符号分割，每一行代表一个基因产物与其对应的GO术语，物种等17列信息，每一列的含义如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjcvazdpTUVUbU40N3NrLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>1.DB</strong></p><p>基因标识的来源数据库，必须是 <a href="http://amigo.geneontology.org/xrefs">参考数据库</a> 里包含的</p><p><strong>2.DB Object ID</strong></p><p>上述数据库所对应的唯一标识符，比如，上面DB是 <code>UniProtKB</code> 数据库的话，那么DB Object ID是<code>P12345</code></p><p><strong>3.DB Object Symbol</strong></p><p>对应的基因名：<code>PHO3</code></p><p><strong>4.Qualifier</strong></p><p>可选字段，该注释信息是否被修改。值为基数0，1，&gt; 1;对于基数&gt; 1，使用<code>|</code>分隔条目（例如，NOT | contributes_to）</p><p><strong>5.GO ID</strong></p><p>使用GO：和7为数字，<code>GO:XXXXXXX</code>格式标识</p><p><strong>6.DB:Reference</strong></p><p>注释的证据来源，一般为文献参考，格式为<code>DB:accession_number</code></p><p><strong>7.Evidence Code</strong></p><p>GO注释的证据码，<a href="http://geneontology.org/docs/guide-go-evidence-codes/">证据码列表</a></p><p><strong>8.With [or] From</strong></p><p>可选字段，此字段用于保存注释的其他标识符，例如，它可以标识被注释的基因产物与之相似的另一基因产物（ISS）或与之相互作用（IPI）。</p><p><strong>9.Aspect</strong> </p><p>属于P (biological process), F (molecular function) or C (cellular component) 的哪种GO注释</p><p><strong>10.DB Object Name</strong></p><p>可选字段，基因或基因产物的全名</p><p><strong>11.DB Object Synonym</strong> </p><p>可选字段，基因 Symbol ID。考虑到基因别名的存在，该值在构建参考数据库的时候最好使用<code>|</code>分隔，比如<code>YFL039C|ABY1|END7</code></p><p><strong>12.DB Object Type</strong></p><p>蛋白产物：protein_complex; protein; transcript; ncRNA; rRNA; tRNA; snRNA; snoRNA; any subtype of ncRNA in the <a href="http://www.sequenceontology.org/browser/obob.cgi">Sequence Ontology</a> 。</p><p><strong>13.Taxon</strong> </p><p>物种的Taxonomic 标识符，使用数字编号来代表某个物种。</p><p>之前的一篇文章中详细介绍了NCBI的物种分类库：<a href="https://zhuanlan.zhihu.com/p/90747645">https://zhuanlan.zhihu.com/p/90747645</a> </p><p><strong>14.Date</strong> </p><p>注释日期，格式<code>YYYYMMDD</code></p><p><strong>15.Assigned By</strong> </p><p>注释信息来源数据库</p><p><strong>16.Annotation Extension</strong></p><p>可选字段，可以包含<code>DB:gene_id    DB:sequence_id    CHEBI:CHEBI_id    Cell Type Ontology:CL_id    GO:GO_id</code></p><p><strong>17.Gene Product Form ID</strong></p><p>由于<strong>DB对象ID</strong>（第2列）条目必须是规范实体（即基因或与基因具有1：1对应关系的抽象蛋白质），因此该字段允许注释该基因或基因产物的特定变体。包括通过差异剪接，替代翻译起始，翻译后切割或翻译后修饰产生的不同蛋白质的标识符，以及功能性RNA的标识符。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 基因 </tag>
            
            <tag> GO </tag>
            
            <tag> GeneOntology </tag>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文极速读懂 Gene Ontology （GO）数据库</title>
      <link href="/posts/46749/"/>
      <url>/posts/46749/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>官方：基因本体（GO）知识库是有关基因功能的全球最大信息来源。 这些知识既是人类可读的，也是机器可读的，并且是生物医学研究中大规模分子生物学和遗传学实验的计算分析的基础。</p><p>在读懂基因本体论（Gene Ontology）前，我们先看看什么是本体论：</p><p>本体论（Ontology ）是探究世界的本原或基质的哲学理论 。</p><p>本体论通常处理的问题：存在哪些本质，如何将这些本质分组，在层次结构内关联以及如何根据相似性和差异进行细分 。</p><blockquote><p>个人理解：本体&#x3D;本质&#x3D;本原&#x3D;基质</p></blockquote><p>基因本体论（Gene Ontology）包含生物学领域知识体系本质的表示形式，本体通常由一组类（或术语或概念）组成，它们之间具有关系。 基因本体论（GO）从三个方面（GO domains）描述了我们对生物学领域的了解：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjcvY3VrMk51Z0NZbmRvLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p><strong>分子功能（Molecular Function，MF ）</strong></p><p><strong>单个的基因产物（包括蛋白质和RNA）或多个基因产物的复合物在分子水平上的活动</strong>，比如“催化”，“转运”</p><p>需要注意，这里的描述只表示活动，而不指定执行功能的实体（分子或复合物），动作发生的地点，时间或背景</p><p>广义上的例子是催化活性和转运蛋白活性。具体的例子是腺苷酸环化酶活性或Toll样受体结合</p><p>为避免基因产物名称与其分子功能之间的混淆，GO分子功能通常附加“活性（activity）”一词。比如，蛋白激酶（protein kinase）具有GO分子功能：蛋白激酶活性（ protein kinase activity）</p></li><li><p><strong>细胞组分（Cellular Component ，CC）</strong></p><p><strong>基因产物在执行功能时所处的细胞结构位置</strong>，比如在线粒体，核糖体</p><p>需要注意：细胞组分是细胞解刨结构，不指代过程</p></li><li><p><strong>生物过程（Biological Process ，BP）</strong></p><p><strong>通过多种分子活动完成的生物学过程</strong></p><p>广义上的例子是DNA修复或信号转导。更加具体的例子是嘧啶核苷生物合成过程或葡萄糖跨膜转运</p><p>需要注意：生物学过程不等同于通路。目前，GO没有表示完整的通路信息所需的动力学或依赖性的描述信息</p></li></ul><p>理解了上述的概念，现在举个例子，如果站在基因本体论GO的角度来解释一个基因的话：</p><p>基因产物：细胞色素C（cytochrome c）</p><p>分子功能：氧化还原酶活性</p><p>细胞组分：线粒体基质</p><p>生物过程：氧化磷酸化</p><h4 id="GO术语的构成"><a href="#GO术语的构成" class="headerlink" title="GO术语的构成"></a>GO术语的构成</h4><h5 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h5><ul><li><strong>唯一标识符（GO ID）和名称</strong>：比如GO：0005739，GO：1904659，GO：0016597和线粒体，葡萄糖跨膜转运，氨基酸结合</li><li><strong>方面</strong>：该术语属于细胞成分，生物过程或分子功能的哪一个。</li><li><strong>定义</strong>：术语的文字描述，以及信息来源的引用。</li><li><strong>关系</strong>：该术语与本体中其他术语的关系。  例如，葡萄糖跨膜转运（GO：1904659）是单糖转运（GO：0015749）。</li></ul><h5 id="可选要素"><a href="#可选要素" class="headerlink" title="可选要素"></a>可选要素</h5><ul><li><strong>次级ID（备用ID）</strong>：当两个或多个术语的含义相同并且合并为一个术语时，就会出现辅助ID。 所有术语ID都会保留下来，因此不会丢失任何信息（例如，合并ID的注释）。</li><li><strong>同义字</strong>：含义与术语名称紧密相关的替代字词或短语，表示名称与同义词范围所赋予的同义词之间的关系。 GO同义词的范围是：<ul><li><strong>相同 <em>Exact</em></strong> ： 术语名称可以互换； 例如 鸟氨酸循环是尿素循环的确切同义词</li><li><strong>广义<em>Broad</em></strong> ：同义词比术语名称更广泛； 例如 细胞分裂是胞质分裂的广义同义词</li><li><strong>狭义 <em>Narrow</em></strong> ：同义词比术语名称更具体或更精确； 例如 用光裂酶修复嘧啶二聚体是光反应性修复的狭义同义词</li><li><strong>相关 <em>Related</em></strong> ：术语以不精确的方式相关； 例如 细胞色素bc1复合体是泛醇-细胞色素c还原酶活性的相关同义词毒力是发病机理的相关同义词</li></ul></li></ul><p>自定义同义词类型也用于本体中。 例如，许多同义词被指定为系统同义词。 此类型的同义词是术语名称的确切同义词。</p><h4 id="基因本体论中的关系"><a href="#基因本体论中的关系" class="headerlink" title="基因本体论中的关系"></a>基因本体论中的关系</h4><p>GO以图的形式构建，术语作为同种的节点，术语间的关系（对象属性）作为连接。</p><h5 id="关系的描述"><a href="#关系的描述" class="headerlink" title="关系的描述"></a>关系的描述</h5><ul><li><strong>节点</strong> <em>node</em>：是指GO术语</li><li><strong>父级</strong> <em>parent</em>：是指更靠近图的根的节点</li><li><strong>子级</strong> <em>child</em>：是指更靠近叶节点的节点； 对于is_a和part_of关系，父级是一个更宽泛的GO术语，而子级是一个更具体的术语</li><li><strong>箭头</strong> <em>arrowhead</em>：指示关系的方向</li><li><strong>虚线</strong> <em>Dotted lines</em>：表示推断的关系，即本体中未明确说明的关系</li></ul><h5 id="节点的连接"><a href="#节点的连接" class="headerlink" title="节点的连接"></a>节点的连接</h5><p>GO图中的节点与其他节点可以具有任意数量和类型的关系， 就像层次结构，例如，家谱或一个物种的分类法</p><p>一个节点可能与多个子节点（更特定的节点）具有连接，也可以具有多个父节点（较宽的节点）</p><p>利用关系与关系间的连接可以推断相应的分组注释，节点间关系的推断，这个会在后面详细研究：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvZ1EyV3BRWVREZ3phLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上图表示：A is a B，B is part of C，所以可以推断 A is part of C</p><p>节点间总体与部分关系：</p><p>一个节点可能与一个节点有一部分关系。 下图说明了这一点：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvckVwNkxKMzE0U2M4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上图：<em>mitochondrion</em>  是两个节点的父节点：it <em>is an</em> organelle and it is <em>part of</em> the cytoplasm ；<em>organelle</em> 有两个子节点: mitochondrion <em>is an</em> organelle, and organelle membrane <em>is part</em> of organelle </p><h5 id="GO的主要关系"><a href="#GO的主要关系" class="headerlink" title="GO的主要关系"></a>GO的主要关系</h5><p>我们将上面的关系图简化表示为<code>箭头导向性图</code>，这是图中常见的关系表示：</p><table><thead><tr><th>缩写</th><th>关系</th><th>符号</th><th>示例</th></tr></thead><tbody><tr><td>i</td><td>is a</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvT1JOekR0bG9RTEJMLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>有丝分裂细胞周期 <code>is a</code> 细胞周期</td></tr><tr><td>P</td><td>part of</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvZUJZa3N6OUFOeEcwLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>线粒体内膜 <code>part of</code> 线粒体</td></tr><tr><td>hP</td><td>has part</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvc1RhR2pGRnVBdG9DLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>受体酪氨酸激酶活性 <code>has part</code> 激酶活性</td></tr><tr><td>R</td><td>regulates</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvN3VPU1Q4d2V2NUVrLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>抗凋亡 <code>regulates</code> 细胞程序性死亡</td></tr><tr><td>R+</td><td>positively regulates</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvSlh5OUVIUEJNTWpZLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>减数分裂激活 <code>positively regulates</code> 减数分裂</td></tr><tr><td>R-</td><td>negatively regulates</td><td>A<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvZnlZUzRneERKaHRYLnBuZw?x-oss-process=image/format,png" alt="mark">B</td><td>脊髓平滑信号通路 <code>negatively regulates</code> 脊髓腹侧</td></tr></tbody></table><p>接下我们详细看看GO是怎样来描述这几种关系的：</p><h6 id="1-is-a"><a href="#1-is-a" class="headerlink" title="1.is a"></a>1.<code>is a</code></h6><p>如果我们说 <code>A is a B</code>，则意味着节点A是节点B的子类型。例如，有丝分裂细胞周期是细胞周期，或者裂解酶活性是催化活性。 </p><p>应该注意的是，a并不代表是实例。 从本体论上来说，一个实例是某个事物的具体示例。 例如 猫是哺乳动物，但加菲猫是猫的实例，而不是猫的亚型。 GO中的术语表示实体或现象的类别，而不是特定的表现形式（或实例）。 但是，如果我们知道猫是哺乳动物，则可以说猫的每个实例都是哺乳动物。</p><p>使用 <code>is a</code> 对批注进行分组是<strong>安全的</strong>。例如，如果将基因产物X注释为具有酪氨酸激酶活性，并且本体论证明酪氨酸激酶活性是激酶活性的一种（类型），那么我们可以安全地得出结论，基因产物X具有激酶活性。</p><p>利用上面得到结论，我们可以将<code>is a</code>关系和其他关系类型结合来推断，下图表示了可以推断的关系：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvRklEeDZBQU5NazFELnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="2-part-of"><a href="#2-part-of" class="headerlink" title="2.part of"></a>2.<code>part of</code></h6><p>关系的一部分用于表示整个部分的关系。 <code>part of</code> 只有当B一定是A的一部分时，才会在A和B之间部分关系：无论B存在于何处，它都是A的一部分，B的存在意味着A的存在。但是，考虑到A的出现，我们不能肯定地说B的存在。</p><p>使用的 <code>part of</code> 进行分组注释是<strong>安全的</strong>。 例如，如果将基因产物X标注为位于线粒体内膜上，而本体论记录了线粒体内膜与线粒体之间的关系的一部分，则可以安全地得出结论X位于线粒体内。</p><p>利用上面得到结论，我们可以将<code>part of</code>关系和其他关系类型结合来推断，下图表示了可以推断的关系：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvanRjM21LdHZLSzdmLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="3-has-part"><a href="#3-has-part" class="headerlink" title="3.has part"></a>3.<code>has part</code></h6><p><code>has part</code>是对关系部分的逻辑补充，它从父级的角度代表了“部分-整体”关系。 </p><p>与 <code>part of</code> 一样，GO关系 <code>has part</code> 仅在A始终将B作为一部分的情况下使用，即A必定具有B的部分。 但是，如果B存在，我们不能肯定地说A存在。 即所有A都有B部分，但是A只是B的一部分。</p><p>使用<code>has part</code>注释进行分组是<strong>不正确的</strong>。 例如，我们可以在本体论中断言受体酪氨酸激酶活性具有部分激酶活性。 然而，将所有注释归类到受体酪氨酸激酶活性下的激酶活性将是不正确的。</p><p>利用上面得到结论，我们可以将<code>has part</code>关系和其他关系类型结合来推断，下图表示了可以推断的关系：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYveE12VVBXa3R2b1AxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h6 id="4-regulates"><a href="#4-regulates" class="headerlink" title="4.regulates"></a>4.<code>regulates</code></h6><p>一种过程直接影响另一种过程或质量的表现，即前者调节后者。 调节的目标可以是另一种过程，例如调节途径或酶促反应，或者可以是质量，例如细胞大小或pH。 与 <code>part of</code> 关系类似，该关系专门用于表示必定的调节：如果同时存在A和B，则B总是调节A，但是A可能不总是受B调节，即所有B都调节A; 一些A受B调节。</p><p>如果将基因产物X注释为参与调节糖酵解的过程，则不能得出结论X参与糖酵解是<strong>不正确的</strong>。 但是，某些工具使用调节关系来对批注进行分组, 这可用于基因集富集, 所得的基因集包括与分组术语有因果关系的过程中涉及的基因。</p><p>利用上面得到结论，我们可以将<code>regulates</code>关系和其他关系类型结合来推断，下图表示了可以推断的关系：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMjYvQktYTXYxUGk5Ymt6LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="GO-图（有向无环图）"><a href="#GO-图（有向无环图）" class="headerlink" title="GO 图（有向无环图）"></a>GO 图（有向无环图）</h4><p>GO的结构可以用下图来表示，这个图也叫有向无环图（Directed Acyclic Graph ，DAG）。</p><blockquote><p>在图论中，如果一个有向图无法从某个顶点出发经过若干条边回到该点,那么这个图就是有向无环图。</p><p>因为有向图中一个点经过两种路线到达另一个点未必形成环，因此有向无环图未必能转化成树，但任何有向树均为有向无环图。 </p><p>下图中从左到右依次是有向树，有向无环图，有向图</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kxfUUpud-1577669934280)(C:\Users\baimo\AppData\Local\Temp\1577331013387.png)]</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-akvgbVw5-1577669934280)(<a href="http://geneontology.org/assets/hexose-biosynthetic-process.png)]">http://geneontology.org/assets/hexose-biosynthetic-process.png)]</a> </p><p>如上图所示，三个GO域（细胞成分，生物学过程和分子功能）分别由一个单独的根本体术语表示。</p><p>一个域中的所有术语都可以将其父源追溯到一个根术语，通过到本体根的中间术语可能存在许多不同的路径。</p><p>这三个根节点是不相关的，并且没有公共的父节点，这意味着来自不同本体的术语之间没有任何关系。但是，GO本体之间也存在其他关系，例如，分子功能术语“细胞周期蛋白依赖性蛋白激酶活性”是生物过程“细胞周期”的一部分。GO本体间相关<a href="http://geneontology.org/docs/ontology-relations/%E3%80%82">http://geneontology.org/docs/ontology-relations/。</a></p><p>某些基于图的软件可能需要一个根节点。在这种情况下，可以将“假”术语添加为三个现有根节点的代。</p><h4 id="GO的动态更新"><a href="#GO的动态更新" class="headerlink" title="GO的动态更新"></a>GO的动态更新</h4><p>GO只代表生物学的当前认知，因此随着生物学知识的积累，它会不断地被修订和扩展。也就是说目前的GO术语不一定代表某个基因产物所有的功能，组分或参加的过程，只是现阶段对它的认知。</p><p>每周更新一次，由GOC本体团队与请求更新的科学家共同完成的。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 基因 </tag>
            
            <tag> GO </tag>
            
            <tag> GeneOntology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KEGG 下载 Pathway 通路数据</title>
      <link href="/posts/57987/"/>
      <url>/posts/57987/</url>
      
        <content type="html"><![CDATA[<ul><li>进入KEGG物种列表，网址：<a href="https://www.kegg.jp/kegg/catalog/org_list.html">https://www.kegg.jp/kegg/catalog/org_list.html</a></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDEvYTR0Vmx0ajE1dERoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>这里以小鼠为例，点击<code>Ctrl</code>+<code>F</code>查找物种小鼠的拉丁名<code>Mus musculus</code></p><blockquote><p>这里也可以用<code>mouse</code>来搜索，不过可以看到在kegg中含有三种鼠的信息。为了信息准确，最好使用拉丁名作为搜索条件。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvMGVTdEhiM0VBZGY2LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>点击<code>Brite hierarchy</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvSUl1enRLWWZWS2pkLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>进入<code>KEGG Orthology (KO)</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvT0NmSEYxTldsU3BlLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>KEGG Orthology 提供了两种可供下载的格式，比如下载<code>htext</code>格式</p><blockquote><p>如果提示连接不到网络，可以多次点击，国外网的原因。。。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvTzVKcE5oY2xPMTNkLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>htext</code>格式如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvclduUjdpMzRIdzRyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>下载<code>json</code>格式</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvbUVQeWUwS2tORnU2LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>json</code>格式如下，这种格式更适合提取数据</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvclg3NzJWaE9BVVRsLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> kegg </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文极速读懂 KEGG 数据库</title>
      <link href="/posts/18687/"/>
      <url>/posts/18687/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>在进行生物学实验或者生物信息的学习中，都会听说<code>KEGG富集分析</code>，而且该方法在高通量测序分析中已然成为数据分析中必不可少的一环。</p><p>这种分析方法依托的是由 <a href="http://www.kanehisa.jp/">Kanehisa实验室 </a>在1995年开发的KEGG数据库，全称为 Kyoto Encyclopedia of Genes and Genomes（京都基因与基因组百科全书）。它拥有多个子数据库，包含基因组，生化反应，生化物质，疾病与药物，以及最常用PATHWAY通路信息。</p><p>接下来进入KEGG官网：<a href="https://www.kegg.jp/">https://www.kegg.jp</a> ，它的主页主要由以下几部分构成:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDcvU2pxUzJ5Q2FVendWLmpwZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="二、KEGG的数据库构成"><a href="#二、KEGG的数据库构成" class="headerlink" title="二、KEGG的数据库构成"></a>二、KEGG的数据库构成</h3><p>KEGG子库中存储的信息是生物系统的计算机表示形式，由基因和蛋白质（基因组信息）和化学物质（化学信息）的分子部件组成，这些部件的相互作用，反应和关系构成调控网络图（系统信息），除此之外，还包含疾病和药物信息（健康信息）。具体的分类及数据库如下：</p><table><tbody><tr align="center"><td>分类</td>    <td>数据库</td>    <td>描述</td>    <td>标志</td></tr><tr><td rowspan="3">系统<br>信息</td>    <td><a href="/kegg/pathway.html">KEGG PATHWAY</a></td>    <td>KEGG 通路图</td>    <td rowspan="3"><img src="https://www.genome.jp/Fig/bget/kegg3.gif" width="40" height="28" alt="kegg3"></td></tr><tr><td><a href="/kegg/brite.html">KEGG BRITE</a></td>    <td>BRITE 层次结构和表</td></tr><tr><td><a href="https://www.genome.jp/Fig/kegg/module.html">KEGG MODULE</a></td>    <td>KEGG 模块</td></tr><tr><td rowspan="4">基因组<br>信息</td>    <td nowrap="nowrap"><a href="/kegg/ko.html">KEGG ORTHOLOGY (KO)</a></td>    <td>功能直系同源物</td>    <td><img src="https://www.genome.jp/Fig/bget/kegg4.gif" width="40" height="28" alt="kegg4"></td></tr><tr><td><a href="/kegg/genome.html">KEGG GENOME</a></td>    <td>KEGG 完整基因组</td>    <td rowspan="3"><img src="https://www.genome.jp/Fig/bget/kegg1.gif" width="40" height="28" alt="kegg1"></td></tr><tr><td><a href="/kegg/genes.html">KEGG GENES</a></td>    <td>基因和蛋白质</td></tr><tr><td><a href="https://www.kegg.jp/kegg/ssdb/">KEGG SSDB</a></td>    <td>基因序列相似性</td></tr><tr><td rowspan="5">化学<br>信息</td>    <td><a href="/kegg/compound/">KEGG COMPOUND</a></td>    <td>小分子</td>    <td rowspan="5"><img src="https://www.genome.jp/Fig/bget/kegg2.gif" width="40" height="28" alt="kegg2"></td></tr><tr><td><a href="/kegg/glycan/">KEGG GLYCAN</a></td>    <td>聚糖</td></tr><tr><td><a href="/kegg/reaction/">KEGG REACTION</a></td>    <td>生化反应</td></tr><tr><td><a href="/kegg/reaction/">KEGG RCLASS</a></td>    <td>反应类型</td></tr><tr><td><a href="/kegg/annotation/enzyme.html">KEGG ENZYME</a></td>    <td>酶命名</td></tr><tr><td rowspan="6">健康<br>信息</td>    <td><a href="/kegg/network.html">KEGG NETWORK</a></td>    <td>疾病相关网络</td>    <td rowspan="6"><img src="https://www.genome.jp/Fig/bget/kegg5.gif" width="40" height="28" alt="kegg5"></td></tr><tr><td><a href="/kegg/network.html">KEGG VARIANT</a></td>    <td>人基因变异</td></tr><tr><td><a href="/kegg/disease/">KEGG DISEASE</a></td>    <td>人类疾病</td></tr><tr><td><a href="/kegg/drug/">KEGG DRUG</a></td>    <td>药物</td></tr><tr><td><a href="/kegg/drug/">KEGG DGROUP</a></td>    <td>药物分组</td></tr><tr><td><a href="/kegg/drug/environ.html">KEGG ENVIRON</a></td>    <td>健康相关物质</td></tr></tbody></table><h3 id="三、KEGG-PATHWAY-数据库"><a href="#三、KEGG-PATHWAY-数据库" class="headerlink" title="三、KEGG PATHWAY 数据库"></a>三、KEGG PATHWAY 数据库</h3><p>在所有子数据库中最重要也是最常用的就是<strong>KEGG PATHWAY</strong>，它包括大量由科研人员根据已有研究文献，通过手动绘制的KEGG通路图，代表着代谢过程，环境信息过程，细胞过程，生物系统，人类疾病和药物开发。</p><p>每个通路都由一个五位数字标识，后跟以下任意一个：map，ko，ec，rn和三字母或四字母生物代码，它们分别代表五种通路类型：</p><ul><li><strong>map编号</strong>：代表reference pathway，根据已有的知识绘制的、概括的、详尽的具有一般参考意义的代谢图。 一个点同时表示一个基因，这个基因编码的酶或这个酶参加的反应 </li><li><strong>org编号</strong>：物种特异性通路，这里就是将K编号基因（直系同源基因，后面会介绍）换为每个物种中对应的基因</li><li><strong>ko编号</strong>：KO通路中的点表示直系同源基因 </li><li><strong>ec编号</strong>：EC通路中的点表示相关的酶 </li><li><strong>rn编号</strong>：化学反应通路中的点只表示该点参与的某个反应、反应物及反应类型</li></ul><p>在了解每种通路之前我们先学会在KEGG中切换每种通路类型</p><p>地址：<a href="https://www.kegg.jp/kegg-bin/show_pathway?org_name=map&mapno=00020&mapscale=&show_description=hide">https://www.kegg.jp/kegg-bin/show_pathway?org_name=map&amp;mapno=00020&amp;mapscale=&amp;show_description=hide</a></p><p>使用过程中切换各种通路类型，比如进入<a href="https://www.kegg.jp/kegg-bin/show_pathway?org_name=map&mapno=00020&mapscale=&show_description=hide">TCA循环</a> ，可以通过左上角下路菜单来切换：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDcvaTRweDAxNGRXTzM0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>接下来，我们详细介绍每种通路：</p><h5 id="1-参考通路图-map"><a href="#1-参考通路图-map" class="headerlink" title="1. 参考通路图 (map)"></a>1. 参考通路图 (map)</h5><p>这里以 <a href="https://www.kegg.jp/kegg-bin/show_pathway?org_name=map&mapno=00020&mapscale=&show_description=hide">TCA循环</a>  的通路图为例，进入参考通路图(Reference pathway)。这是原始版本的通路，也是后续几种通路图的”模板”。每个白框可以代表直系同源基因，酶，反应，也可以点击链接至KO，ENZYME和REACTION详细信息。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvMFE0VzFBMnVybHR1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>上述的形状，箭头，线段代表如下意义：</p><p>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDcvcUpsTE8zU29GZmZmLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="2-物种特异性通路-org"><a href="#2-物种特异性通路-org" class="headerlink" title="2. 物种特异性通路 (org)"></a>2. 物种特异性通路 (org)</h5><p>我们选择人的物种名<code>Homo sapiens (human)</code>，点击<code>Go</code>。可以看到与Reference pathway 图（map00020）不同的是有物种特异性基因被标注为绿色，而且通路编号为<code>hsa00020</code></p><blockquote><p>访问链接：<a href="https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&amp;mapno=00020&amp;mapscale=&amp;show_description=hide">https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&amp;mapno=00020&amp;mapscale=&amp;show_description=hide</a> </p><p>当然，如果直接访问<code>hsa00020</code>的链接也可以进入该通路：<a href="https://www.kegg.jp/kegg-bin/show_pathway?hsa00020">https://www.kegg.jp/kegg-bin/show_pathway?hsa00020</a> </p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDcvaVNKdllQeTE1V0xDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>点击绿色基因，会进入<code>Gene</code>详细信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvbGlJdFVGZGx3WHhsLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="3-直系同源物通路-ko"><a href="#3-直系同源物通路-ko" class="headerlink" title="3. 直系同源物通路 (ko)"></a>3. 直系同源物通路 (ko)</h5><p>蓝色框超链接到从原始版本中选择的KO条目</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgva0lmbm9MeEltdUw5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>进入<code>PCK</code>的直系同源基因信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvYWhsRUh6Z3RmQTl2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="4-酶通路-ec"><a href="#4-酶通路-ec" class="headerlink" title="4. 酶通路 (ec)"></a>4. 酶通路 (ec)</h5><p>蓝色框超链接到从原始版本中选择的ENZYME条目</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvZDBpWXJpQlRsRlFoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>进入<code>ENZYME</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvZVBXZHNDRGlUVktpLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="5-反应通路-reaction"><a href="#5-反应通路-reaction" class="headerlink" title="5. 反应通路 (reaction)"></a>5. 反应通路 (reaction)</h5><p>蓝色框超链接到从原始版本中选择的反应条目，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvMTBUMlBHQW8wb2FMLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>点击后进入对应的反应信息界面，如下图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvdFE2NmR4MEFlODltLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="四、KEGG-ORTHOLOGY（KO）数据库"><a href="#四、KEGG-ORTHOLOGY（KO）数据库" class="headerlink" title="四、KEGG ORTHOLOGY（KO）数据库"></a>四、KEGG ORTHOLOGY（KO）数据库</h3><p>KEGG ORTHOLOGY （KO）数据库是构建Pathway和Module的基础，相当于KEGG数据库构建的基石，因此理解KO数据库的构成对于使用及了解KEGG至关重要。</p><blockquote><p>然而，这种通用方法不足以理解由物种内基因和基因组的变异所引起的更详细的特征，特别是对于理解与人类基因和基因组的疾病相关的变异而言。后来他们开发了 <a href="https://www.genome.jp/kegg/network.html">KEGG NETKERK</a>，该数据库不仅涉及基因变异，而且包括病毒和其他因素的网络变异方面的疾病和药物知识。 </p></blockquote><p>KEGG的开发者根据不同生物之间基因和基因组的保守和变异，引入直系同源物（KO）的概念，使得KEGG通路图，BRITE层次结构和KEGG模块的参考数据集可以广泛应用于任何细胞生物。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDUvZmhGUEJQamQxbjhWLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>概念</strong></p><p>1.<strong>KO号</strong>：表示<strong>不分物种的通路</strong>，相当于所有物种的这一通路的并集，比如<code>ko00020</code>代表的 <a href="https://www.kegg.jp/kegg-bin/show_pathway?ko00020">TCA 循环</a> (下图所示)，下图的每个圆角矩形也代表着一个KO通路。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDcvclFsVnVZRFU1cUE1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>2.<strong>K号</strong>：表示<strong>基因</strong>，每个号代表的是所有物种的一个同源基因，比如上图中的<code>K01596</code>代表的是 <a href="https://www.kegg.jp/dbget-bin/www_bget?K01596">PCK</a>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvWVlmR1NQQzlmUjNDLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>进入K01596的<a href="https://www.kegg.jp/dbget-bin/www_bget?K01596">详细页面</a>，我们会看到它代表的是一个基因列表，这些基因具有一个功能却来自于不同的物种。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvSk5sNXp1R2V6cHpRLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>3.<strong>C号</strong>：表示<strong>化合物</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEyMDgvUERYUzBZWXM4Q0NjLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>对于分析工具使用和kegg资源下载，会在后续文章中更新。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 通路图 </tag>
            
            <tag> KEGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参考基因组下载</title>
      <link href="/posts/56525/"/>
      <url>/posts/56525/</url>
      
        <content type="html"><![CDATA[<h3 id="NCBI"><a href="#NCBI" class="headerlink" title="NCBI"></a>NCBI</h3><p>网址：<a href="https://www.ncbi.nlm.nih.gov/genome">https://www.ncbi.nlm.nih.gov/genome</a> </p><p>选择<code>Genome</code>数据库，输入<code>hg19</code>，点击<code>Search</code>，进入<code>Genome Resources</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMjEvOW5heXBYaVU4b0xYLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>这里有常用的资源下载，如果是参考基因组下载第一行</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMjEva2kwUm9FVDhkS29ELnBuZw?x-oss-process=image/format,png" alt="mark"></p><h3 id="Ensemble"><a href="#Ensemble" class="headerlink" title="Ensemble"></a>Ensemble</h3><p>网址：<a href="http://asia.ensembl.org/">http://asia.ensembl.org</a> </p><p>有两种进入人参考基因组的方法</p><ul><li>下拉菜单中，选择<code>Human</code></li><li>点击右边的<code>Human</code></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMjEvN3lnWXhOUEdIMHVULnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>点<code>Download DNA sequence (FASTA)</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMjEvN2hJRUx5U3AySnh4LnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 参考基因组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速自学生物信息学</title>
      <link href="/posts/47693/"/>
      <url>/posts/47693/</url>
      
        <content type="html"><![CDATA[<p>为了不让大家再走我之前自学生信时候踩过的坑，走过的弯路，将一些比较重要的入门书籍，网站和后续的学习渠道总结如下，供大家参考。 </p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>统计学</li><li>系统操作</li><li>编程语言</li><li>生物学</li><li>学习渠道</li></ul><h4 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h4><ul><li><p><strong>StatQuest</strong></p><p>生物统计学视频，包含统计学基础和生信所涉及的统计学概念，作者力图用可视化并结合有意思的例子来让统计学菜鸟尽快熟悉内部原理。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvSFRrQkE3aE1RSTdNLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>作者是国外的大神，所以他的教程是全英文，在YouTube上首发。后来国内的B站UP取得作者授权，将视频传到国内并配上了中文字幕，后边代码也是这个UP主上传的。</p><p>YouTube：<a href="https://www.youtube.com/playlist?list=PLblh5JKOoLUJo2Q6xK4tZElbIvAACEykp">https://www.youtube.com/playlist?list=PLblh5JKOoLUJo2Q6xK4tZElbIvAACEykp</a></p><p>B站网址：<a href="https://space.bilibili.com/257347536?from=search&amp;seid=13661736885600696159">https://space.bilibili.com/257347536?from=search&amp;seid=13661736885600696159</a> </p><p>一部分R代码：<a href="https://pan.baidu.com/s/1GQXa0P0_vX_bHgrWVEmAYA">https://pan.baidu.com/s/1GQXa0P0_vX_bHgrWVEmAYA</a> 提取码：c2wk</p></li><li><p><strong>深入浅出统计学</strong> </p><p>用大量例子来讲解统计学的一些概念，如果不习惯英语视频，可以先用这本书来熟悉。</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvaVR3TjVnSmZ0SEQ1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h4><ul><li><p><strong>鸟哥的Linux私房菜 基础学习篇</strong>  </p><p>生信的大部分软件和分析流程都需要依靠服务器来做，因此避免不了Linux的使用。开始学习不用背全部命令，常用命令和参数输入多遍就会记住，如果对某个命令想深入学习，可以将这本书翻开看看。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvNGozaUZLMEp6MEpxLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>鸟哥的Linux私房菜：服务器架设篇</strong> </p><p>如果今后不涉及数据库设计或其他运维工作，这本书可以不看，只做了解。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvcm1kV1hrVnJGTjFWLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><ul><li><p><strong>R语言实战</strong> </p><p>R语言是目前生信数据处理的主要编程语言，涵盖大量的包来处理不同的生信需求，因此对于R语言的学习必不可少。<br><img src="https://img-blog.csdnimg.cn/img_convert/04d7f84ddd6b439731635c313b238e5f.png" alt="mark"></p></li><li><p><strong>ggplot2：数据分析与图形艺术</strong> </p><p>某种意义上讲，R吸引人们使用它的重要原因就是这个包的存在。它提供了大量的可设置的可视化操作方式，几乎可以绘制出任何用户想绘制的图形。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvd2xBMUUyMTJmZDJHLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>下面是利用ggplot2绘制的图形</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvNWZqMm5PSG9lQTFXLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>廖雪峰 Python 教程</strong></p><p>网站简洁大方，教程附带大量例子，可以使新手快速进入python的学习中。</p><p>网址：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">https://www.liaoxuefeng.com/wiki/1016959663602400</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvRlJLQnNMOGM0ZHV0LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>Python基础教程</strong> </p><p>Python 同样逐步进入生信领域，包括Pandas，Matlibplot，Biopython等库都可以方便的执行生信分析任务。同样，也包含一些机器学习包，可以用于生物信息学的工作中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvRDdWYnZZelNTQ3J3LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>Biopython 包</strong></p><p>一般生信分析脚本的工具集。包括核酸序列处理，NCBI，UniProt数据库操作等其他常用的生信工具。</p><p>中文教程：<a href="https://biopython-cn.readthedocs.io/zh_CN/latest">https://biopython-cn.readthedocs.io/zh_CN/latest</a></p><p>英文教程：<a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html">http://biopython.org/DIST/docs/tutorial/Tutorial.html</a> </p><p>GitHub：<a href="https://github.com/biopython/biopython">https://github.com/biopython/biopython</a> </p></li><li><p><strong>pandas 包</strong></p><p>用于分析结构化数据的python包，包括对数据去空值，统计值计算，添加，删除，插入，修改，提取等等操作。由于底层基于C，所以可以处理大型文件而且具有很快的分析速度。</p><p>英文教程：<a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html">https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html</a> </p></li><li><p><strong>Matlibplot 包</strong></p><p>其实就是在python环境中的<em>MATLAB</em> （科学制图里大神级的软件），而且和它语法结构和用法大致相同。</p><p>相当于上边提到的ggplot2，只是一个运行与R环境一个是Python环境里的可视化工具包，这两款看个人喜好来学习一个，另一个了解就好。</p><p>英文教程：<a href="https://matplotlib.org/">https://matplotlib.org/</a></p></li></ul><h4 id="生物学"><a href="#生物学" class="headerlink" title="生物学"></a>生物学</h4><ul><li><p><strong>细胞生物学，翟中和</strong></p><p>当年考试时候用的书，对涉及的细胞的知识做了全方位的解释。</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvaThVWEdIQ09kbjJwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><ul><li><p><strong>分子生物学，朱玉贤</strong></p><p>当年考试时候用的书，对这本书的理解，关系都后面对生信分析的理解。比如在数据分析中的基因组比对，转录本定量，单位点突变分析，测序里的接头，UMI，Barcode等等一些概念的理解。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYvc0FmbEpPeGhIaDVWLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>**基因X，Lewin ** </p><p>包含大量的文字和精美的配图来极致详尽的解释生物学过程，唯一的缺点就是太厚。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTYveGRFc2dwc1RBVmp3LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="学习渠道（单纯好用，不是广告）"><a href="#学习渠道（单纯好用，不是广告）" class="headerlink" title="学习渠道（单纯好用，不是广告）"></a>学习渠道（单纯好用，不是广告）</h4><ul><li><p><strong>Rosalind</strong></p><p>网址：<a href="http://rosalind.info/problems/locations/">http://rosalind.info/problems/locations/</a></p><p>通过编程来生物信息学实战的英文网站，提供了大量的试题，用户能在线提交来完成。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTcvcjVQRG9KSW1Ja3dQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>在正确提交后，可以通过评论来看世界各地的人们对同一道题的不同解法。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTcvSzI0VjF0dE5QaXdpLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>生信菜鸟团</strong></p><p>公众号，适合生信初学者，包括常用软件，格式，流程的教程，主要由文献推荐，帮助新手快速进入生信状态。</p></li><li><p><strong>生信技能树</strong></p><p>包含论坛和公众号，有高质量的推文，包括生信分析的方法，软件教程，生信会议信息，还有彩蛋和吐槽推文。</p></li><li><p><strong>生信人</strong></p><p>公众号，生信文献的推文，研究方法的教程</p></li><li><p><strong>宏基因组</strong></p><p>公众号，主要发微生物方面的推文，也包含生信分析的教程</p></li></ul><h4 id="一些有趣的实操项目"><a href="#一些有趣的实操项目" class="headerlink" title="一些有趣的实操项目"></a>一些有趣的实操项目</h4><ul><li><p><a href="https://zhuanlan.zhihu.com/p/54599121">Python + 生物信息 01 ：从零认识基因序列</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/49606799">Python + 生物信息 02 ：Biopython 分析序列</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54609662">Python + 生物信息 03 ：用Python操作NCBI</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54611852">Python + 生物信息 04 ：批量下载基因与文献</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/36598434">生物信息之多序列比对，进化树分析，保守位点分析</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTcvOW9oV2RJdWFENjd0LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/82749596">R 生信数据可视化 01 | 聚类热图</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTcvbUt0N3dpS2p0aU1pLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/82785739">R 数据可视化 02 | 火山图</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTcvTzUyRHljVlhzMXVWLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><hr><p><strong>自己的CSDN</strong>：<a href="https://blog.csdn.net/u011262253">https://blog.csdn.net/u011262253</a> </p><p><strong>自己的简书</strong>：<a href="https://www.jianshu.com/u/edebc0f5f8ba">https://www.jianshu.com/u/edebc0f5f8ba</a> </p><p><strong>自己的知乎</strong>：<a href="https://zhuanlan.zhihu.com/c_187707704">https://zhuanlan.zhihu.com/c_187707704</a> </p><p><strong>自己的博客站</strong>：<a href="https://www.ziptop.top/">https://www.ziptop.top/</a> </p><hr><p>更新中…</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 生物学 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seurat | 不同单细胞转录组的整合方法</title>
      <link href="/posts/50931/"/>
      <url>/posts/50931/</url>
      
        <content type="html"><![CDATA[<h4 id="一、涉及的新概念"><a href="#一、涉及的新概念" class="headerlink" title="一、涉及的新概念"></a>一、涉及的新概念</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvVjY2VkduakJQSUx4LnBuZw?x-oss-process=image/format,png" alt="mark"></p><p><strong>参考（reference）</strong>：将跨个体，跨技术，跨模式产生的不同的单细胞数据整合后的数据集 。也就是将不同来源的数据集组合到同一空间（reference）中。 从广义上讲，在概念上类似于基因组DNA序列的参考装配。 </p><p><strong>查询（query）</strong>：单个实验产生的数据集</p><p><strong>转化学习（transfer learning）</strong>：产生一个于参考数据集（reference）上进行训练的模型，可以将信息再重新投影到query datase上 </p><p><strong>锚定</strong>：由一组共同的分子特征定义的两个细胞（每个数据集一个），将对应关系表示锚定。将得到的一对细胞为<strong>锚点</strong>，它们编码的跨数据集的细胞关系，将构成所有后续整合分析的基础。</p><h4 id="二、标准流程"><a href="#二、标准流程" class="headerlink" title="二、标准流程"></a>二、标准流程</h4><h5 id="安装数据集"><a href="#安装数据集" class="headerlink" title="安装数据集"></a>安装数据集</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>SeuratData<span class="hljs-punctuation">)</span><br>InstallData<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>SeuratData<span class="hljs-punctuation">)</span><br>InstallData<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>这里如果长时间下载不了，尝试以下的方法：</p><ul><li><p>可以在Rstudio的控制台看到下载链接，将它复制到本地下载：<a href="https://seurat.nygenome.org/src/contrib/panc8.SeuratData_3.0.2.tar.gz">https://seurat.nygenome.org/src/contrib/panc8.SeuratData_3.0.2.tar.gz</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvd1FpOXNQakhJeE00LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>待下载完成，解压，将标注文件复制出来</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvcGRRbWE4OUlIQmpWLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>复制到R环境的库目录，比如我的是：E:\R\R-3.6.1\library\SeuratData\data</p></li></ul><h5 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>stringsAsFactors <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>SeuratData<span class="hljs-punctuation">)</span><br>data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>panc8<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;fluidigmc1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 先对数据集进行归一化，并为每个识别位点确定可变特征。</span><br><span class="hljs-comment"># 特征选择方法使用variance stabilizing transformation (&quot;vst&quot;)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">,</span> <br>                                             nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation"><code class="language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>stringsAsFactors <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>SeuratData<span class="hljs-punctuation">)</span><br>data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>panc8<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;fluidigmc1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 先对数据集进行归一化，并为每个识别位点确定可变特征。</span><br><span class="hljs-comment"># 特征选择方法使用variance stabilizing transformation (&quot;vst&quot;)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">,</span> <br>                                             nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="整合数据集"><a href="#整合数据集" class="headerlink" title="整合数据集"></a>整合数据集</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 整合3种测序方法的胰岛细胞数据集</span><br>reference.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 识别锚点</span><br><span class="hljs-comment"># 这里选的维度是30，作者建议可以在10-50间调试</span><br>pancreas.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> reference.list<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 进行数据集整合</span><br><span class="hljs-comment"># 已经整合后的表达矩阵存储在Assay中，未处理的表达举证在RNA对象中</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pancreas.anchors<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 整合3种测序方法的胰岛细胞数据集</span><br>reference.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 识别锚点</span><br><span class="hljs-comment"># 这里选的维度是30，作者建议可以在10-50间调试</span><br>pancreas.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> reference.list<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 进行数据集整合</span><br><span class="hljs-comment"># 已经整合后的表达矩阵存储在Assay中，未处理的表达举证在RNA对象中</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pancreas.anchors<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>cowplot<span class="hljs-punctuation">)</span><br>DefaultAssay<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;integrated&quot;</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> npcs <span class="hljs-operator">=</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>p1 <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>p2 <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;celltype&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <br>              repel <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>plot_grid<span class="hljs-punctuation">(</span>p1<span class="hljs-punctuation">,</span> p2<span class="hljs-punctuation"><code class="language-hljs R">library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>cowplot<span class="hljs-punctuation">)</span><br>DefaultAssay<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> <span class="hljs-string">&quot;integrated&quot;</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> npcs <span class="hljs-operator">=</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>p1 <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>p2 <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;celltype&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <br>              repel <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>plot_grid<span class="hljs-punctuation">(</span>p1<span class="hljs-punctuation">,</span> p2<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvYlRyUDhRajNXcmt0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="使用装配参考数据集进行细胞类型分类"><a href="#使用装配参考数据集进行细胞类型分类" class="headerlink" title="使用装配参考数据集进行细胞类型分类"></a>使用装配参考数据集进行细胞类型分类</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvNmN1eGhpZ1JjQnlwLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="三、SCTransform-流程"><a href="#三、SCTransform-流程" class="headerlink" title="三、SCTransform 流程"></a>三、SCTransform 流程</h4><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>stringsAsFactors <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>future.globals.maxSize <span class="hljs-operator">=</span> <span class="hljs-number">4000</span> <span class="hljs-operator">*</span> <span class="hljs-number">1024</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span> <span class="hljs-operator">=</span> ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>stringsAsFactors <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>options<span class="hljs-punctuation">(</span>future.globals.maxSize <span class="hljs-operator">=</span> <span class="hljs-number">4000</span> <span class="hljs-operator">*</span> <span class="hljs-number">1024</span><span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;panc8&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="数据预处理-1"><a href="#数据预处理-1" class="headerlink" title="数据预处理"></a>数据预处理</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pancreas.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>panc8<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;fluidigmc1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 对每个项目运行SCTransform</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> SCTransform<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment"># 接下来，为下游分析选择特征，运行 PrepSCTIntegration, 确保已计算出所有必要的Pearson</span><br>pancreas.features <span class="hljs-operator">&lt;-</span> SelectIntegrationFeatures<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> PrepSCTIntegration<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> anchor.features <span class="hljs-operator">=</span> pancreas.features<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation"><code class="language-hljs R">pancreas.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>panc8<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> pancreas.list<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;celseq&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celseq2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;fluidigmc1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;smartseq2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 对每个项目运行SCTransform</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-built_in">length</span><span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>  pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> SCTransform<span class="hljs-punctuation">(</span>pancreas.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment"># 接下来，为下游分析选择特征，运行 PrepSCTIntegration, 确保已计算出所有必要的Pearson</span><br>pancreas.features <span class="hljs-operator">&lt;-</span> SelectIntegrationFeatures<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">)</span><br>pancreas.list <span class="hljs-operator">&lt;-</span> PrepSCTIntegration<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> anchor.features <span class="hljs-operator">=</span> pancreas.features<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="整合数据集-1"><a href="#整合数据集-1" class="headerlink" title="整合数据集"></a>整合数据集</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 这里选择归一化方法为“SCT”，其他命令与标准化流程一样</span><br>pancreas.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>                                           anchor.features <span class="hljs-operator">=</span> pancreas.features<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pancreas.anchors<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>                                     verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 这里选择归一化方法为“SCT”，其他命令与标准化流程一样</span><br>pancreas.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pancreas.list<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>                                           anchor.features <span class="hljs-operator">=</span> pancreas.features<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pancreas.anchors<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>                                     verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="细胞分群"><a href="#细胞分群" class="headerlink" title="细胞分群"></a>细胞分群</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pancreas.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celltype&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> combine <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span>X <span class="hljs-operator">=</span> plots<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> x <span class="hljs-operator">+</span> theme<span class="hljs-punctuation">(</span>legend.position <span class="hljs-operator">=</span> <span class="hljs-string">&quot;top&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> guides<span class="hljs-punctuation">(</span>color <span class="hljs-operator">=</span> guide_legend<span class="hljs-punctuation">(</span>nrow <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> byrow <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> override.aes <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>size <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots<span class="hljs-punctuation"><code class="language-hljs R">pancreas.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pancreas.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pancreas.integrated<span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;tech&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;celltype&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> combine <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span>X <span class="hljs-operator">=</span> plots<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> x <span class="hljs-operator">+</span> theme<span class="hljs-punctuation">(</span>legend.position <span class="hljs-operator">=</span> <span class="hljs-string">&quot;top&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> guides<span class="hljs-punctuation">(</span>color <span class="hljs-operator">=</span> guide_legend<span class="hljs-punctuation">(</span>nrow <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> byrow <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> override.aes <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>size <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvTVJoeEQ4WE9Wclk0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h4 id="四、使用另一个数据集来验证该流程"><a href="#四、使用另一个数据集来验证该流程" class="headerlink" title="四、使用另一个数据集来验证该流程"></a>四、使用另一个数据集来验证该流程</h4><h5 id="安装数据集-1"><a href="#安装数据集-1" class="headerlink" title="安装数据集"></a>安装数据集</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">InstallData<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pbmcsca&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">InstallData<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pbmcsca&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="数据预处理-2"><a href="#数据预处理-2" class="headerlink" title="数据预处理"></a>数据预处理</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pbmcsca&quot;</span><span class="hljs-punctuation">)</span><br>pbmc.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>pbmcsca<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Method&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>pbmc.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    pbmc.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> SCTransform<span class="hljs-punctuation">(</span>pbmc.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>pbmc.features <span class="hljs-operator">&lt;-</span> SelectIntegrationFeatures<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">)</span><br>pbmc.list <span class="hljs-operator">&lt;-</span> PrepSCTIntegration<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> anchor.features <span class="hljs-operator">=</span> pbmc.features<span class="hljs-punctuation">)</span><br>pbmc.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>    anchor.features <span class="hljs-operator">=</span> pbmc.features<span class="hljs-punctuation">)</span><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pbmc.anchors<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">)</span><br><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc.integrated<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pbmc.integrated<span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Method&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CellType&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> combine <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span>X <span class="hljs-operator">=</span> plots<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> x <span class="hljs-operator">+</span> theme<span class="hljs-punctuation">(</span>legend.position <span class="hljs-operator">=</span> <span class="hljs-string">&quot;top&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> guides<span class="hljs-punctuation">(</span>color <span class="hljs-operator">=</span> guide_legend<span class="hljs-punctuation">(</span>nrow <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>    byrow <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> override.aes <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>size <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots<span class="hljs-punctuation"><code class="language-hljs R">data<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;pbmcsca&quot;</span><span class="hljs-punctuation">)</span><br>pbmc.list <span class="hljs-operator">&lt;-</span> SplitObject<span class="hljs-punctuation">(</span>pbmcsca<span class="hljs-punctuation">,</span> split.by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Method&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>i <span class="hljs-keyword">in</span> <span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>pbmc.list<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    pbmc.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> SCTransform<span class="hljs-punctuation">(</span>pbmc.list<span class="hljs-punctuation">[[</span>i<span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">&#125;</span><br>pbmc.features <span class="hljs-operator">&lt;-</span> SelectIntegrationFeatures<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">)</span><br>pbmc.list <span class="hljs-operator">&lt;-</span> PrepSCTIntegration<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> anchor.features <span class="hljs-operator">=</span> pbmc.features<span class="hljs-punctuation">)</span><br>pbmc.anchors <span class="hljs-operator">&lt;-</span> FindIntegrationAnchors<span class="hljs-punctuation">(</span>object.list <span class="hljs-operator">=</span> pbmc.list<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">,</span> <br>    anchor.features <span class="hljs-operator">=</span> pbmc.features<span class="hljs-punctuation">)</span><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> IntegrateData<span class="hljs-punctuation">(</span>anchorset <span class="hljs-operator">=</span> pbmc.anchors<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SCT&quot;</span><span class="hljs-punctuation">)</span><br><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc.integrated<span class="hljs-punctuation">,</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>pbmc.integrated <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc.integrated<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> DimPlot<span class="hljs-punctuation">(</span>pbmc.integrated<span class="hljs-punctuation">,</span> group.by <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Method&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CellType&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> combine <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br>plots <span class="hljs-operator">&lt;-</span> lapply<span class="hljs-punctuation">(</span>X <span class="hljs-operator">=</span> plots<span class="hljs-punctuation">,</span> FUN <span class="hljs-operator">=</span> <span class="hljs-keyword">function</span><span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">)</span> x <span class="hljs-operator">+</span> theme<span class="hljs-punctuation">(</span>legend.position <span class="hljs-operator">=</span> <span class="hljs-string">&quot;top&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> guides<span class="hljs-punctuation">(</span>color <span class="hljs-operator">=</span> guide_legend<span class="hljs-punctuation">(</span>nrow <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <br>    byrow <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> override.aes <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>size <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMTQvbXFka1h6QTVsQVhrLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 单细胞转录组 </tag>
            
            <tag> Seurat </tag>
            
            <tag> 测序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 自动为脚本文件添加作者信息</title>
      <link href="/posts/10935/"/>
      <url>/posts/10935/</url>
      
        <content type="html"><![CDATA[<h5 id="如图所示进入设置页面"><a href="#如图所示进入设置页面" class="headerlink" title="如图所示进入设置页面"></a>如图所示进入设置页面<img src="https://img-blog.csdnimg.cn/20191113103805513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h5><h5 id="文件头信息设置"><a href="#文件头信息设置" class="headerlink" title="文件头信息设置"></a>文件头信息设置</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><code class="language-hljs python">$&#123;PROJECT_NAME&#125; 项目名称<br>$&#123;PRODUCT_NAME&#125; IDE的名称<br>$&#123;NAME&#125; 文件名称<br>$&#123;USER&#125; 用户的登录名<br>$&#123;DATE&#125; 日期<br>$&#123;TIME&#125; 时间<br>$&#123;YEAR&#125; 年<br>$&#123;MONTH&#125; 月<br>$&#123;DAY&#125; 日<br>$&#123;HOUR&#125; 时<br>$&#123;MINUTE&#125; 分<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seurat 包图文详解 | 单细胞转录组(scRNA-seq)分析02</title>
      <link href="/posts/33989/"/>
      <url>/posts/33989/</url>
      
        <content type="html"><![CDATA[<h4 id="一、创建-Seurat-对象"><a href="#一、创建-Seurat-对象" class="headerlink" title="一、创建 Seurat 对象"></a>一、创建 Seurat 对象</h4><p>使用的示例数据集来自10X Genome 测序的 Peripheral Blood Mononuclear Cells (PBMC)。</p><p>下载链接：<a href="https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz">https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz</a></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># Load the PBMC dataset</span><br>pbmc.data <span class="hljs-operator">&lt;-</span> Read10X<span class="hljs-punctuation">(</span>data.dir <span class="hljs-operator">=</span> <span class="hljs-string">&quot;../data/pbmc3k/filtered_gene_bc_matrices/hg19/&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># Initialize the Seurat object with the raw (non-normalized data).</span><br>pbmc <span class="hljs-operator">&lt;-</span> CreateSeuratObject<span class="hljs-punctuation">(</span>counts <span class="hljs-operator">=</span> pbmc.data<span class="hljs-punctuation">,</span> project <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pbmc3k&quot;</span><span class="hljs-punctuation">,</span> min.cells <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> min.features <span class="hljs-operator">=</span> <span class="hljs-number">200</span><span class="hljs-punctuation"><code class="language-hljs R">library<span class="hljs-punctuation">(</span>dplyr<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>Seurat<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># Load the PBMC dataset</span><br>pbmc.data <span class="hljs-operator">&lt;-</span> Read10X<span class="hljs-punctuation">(</span>data.dir <span class="hljs-operator">=</span> <span class="hljs-string">&quot;../data/pbmc3k/filtered_gene_bc_matrices/hg19/&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># Initialize the Seurat object with the raw (non-normalized data).</span><br>pbmc <span class="hljs-operator">&lt;-</span> CreateSeuratObject<span class="hljs-punctuation">(</span>counts <span class="hljs-operator">=</span> pbmc.data<span class="hljs-punctuation">,</span> project <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pbmc3k&quot;</span><span class="hljs-punctuation">,</span> min.cells <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> min.features <span class="hljs-operator">=</span> <span class="hljs-number">200</span><span class="hljs-punctuation">)</span><br>pbmc<br></code></pre></td></tr></table></figure><h4 id="二、标准预处理流程"><a href="#二、标准预处理流程" class="headerlink" title="二、标准预处理流程"></a>二、标准预处理流程</h4><p>流程包括：</p><ul><li>基于质控指标（QC metric）来筛选细胞</li><li>数据归一化和缩放</li><li>高异质性基因检测</li></ul><h5 id="1-基因质控指标来筛选细胞"><a href="#1-基因质控指标来筛选细胞" class="headerlink" title="1.基因质控指标来筛选细胞"></a>1.基因质控指标来筛选细胞</h5><p>质控指标：</p><ul><li><p>每个细胞中检测到的基因数</p><ul><li>低质量的细胞和空油滴（droplet）只有少量基因</li><li>两个及以上的细胞会有异常的高基因数</li></ul></li><li><p>每个细胞中的UMI总数（与上类似）</p></li><li><p>线粒体基因组的reads比例</p><ul><li><p>低质量或死细胞会有大百分比的线粒体基因组</p></li><li><p>使用<code>PercentageFeatureSet</code>函数来计数线粒体质控指标</p></li><li><p><code>MT-</code>是线粒体基因</p></li></ul></li></ul><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 计算线粒体read的百分比</span><br>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> PercentageFeatureSet<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^MT-&quot;</span><span class="hljs-punctuation">)</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ncol <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示前5个细胞的质控指标</span><br>head<span class="hljs-punctuation">(</span>pbmc<span class="hljs-operator">@</span>meta.data<span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 计算线粒体read的百分比</span><br>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&lt;-</span> PercentageFeatureSet<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> pattern <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^MT-&quot;</span><span class="hljs-punctuation">)</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> ncol <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示前5个细胞的质控指标</span><br>head<span class="hljs-punctuation">(</span>pbmc<span class="hljs-operator">@</span>meta.data<span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvVjBPREhRZUxoeFBGLnBuZw?x-oss-process=image/format,png"></p><p>通过上图，过滤标准设定为：</p><ul><li>过滤UMI数大于2500，小于200的细胞</li><li>过滤线粒体百分比大于5%的细胞</li></ul><p>查看特征与特征间的相关性</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">plot1 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">plot1 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvOG92U1Z1MFN1UjVOLnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">plot2 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">plot2 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYva3l6bWVvOTZQWGVpLnBuZw?x-oss-process=image/format,png"></p><p>过滤</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> subset<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> subset <span class="hljs-operator">=</span> nFeature_RNA <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span> <span class="hljs-operator">&amp;</span> nFeature_RNA <span class="hljs-operator">&lt;</span> <span class="hljs-number">2500</span> <span class="hljs-operator">&amp;</span> percent.mt <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span><span class="hljs-punctuation"><code class="language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> subset<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> subset <span class="hljs-operator">=</span> nFeature_RNA <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span> <span class="hljs-operator">&amp;</span> nFeature_RNA <span class="hljs-operator">&lt;</span> <span class="hljs-number">2500</span> <span class="hljs-operator">&amp;</span> percent.mt <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>看看相关性</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">p1 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">)</span><br>p2 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>p1<span class="hljs-punctuation">,</span> p2<span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">p1 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;percent.mt&quot;</span><span class="hljs-punctuation">)</span><br>p2 <span class="hljs-operator">&lt;-</span> FeatureScatter<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> feature1 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nCount_RNA&quot;</span><span class="hljs-punctuation">,</span> feature2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nFeature_RNA&quot;</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>p1<span class="hljs-punctuation">,</span> p2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvSUthUlVIa043WXhSLnBuZw?x-oss-process=image/format,png"></p><h5 id="2-归一化数据"><a href="#2-归一化数据" class="headerlink" title="2.归一化数据"></a>2.归一化数据</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LogNormalize&quot;</span><span class="hljs-punctuation">,</span> scale.factor <span class="hljs-operator">=</span> <span class="hljs-number">10000</span><span class="hljs-punctuation"><code class="language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> NormalizeData<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> normalization.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LogNormalize&quot;</span><span class="hljs-punctuation">,</span> scale.factor <span class="hljs-operator">=</span> <span class="hljs-number">10000</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><blockquote><p>LogNormalize that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in <code>pbmc[[&quot;RNA&quot;]]@data</code>. </p><p>上述代码可以替换为：pbmc &lt;- NormalizeData(pbmc)</p></blockquote><h5 id="3-识别高异质性特征"><a href="#3-识别高异质性特征" class="headerlink" title="3.识别高异质性特征"></a>3.识别高异质性特征</h5><p>高异质性：这些特征在有的细胞中高表达，有的细胞中低表达。在下游分析中关注这些基因有助于找到单细胞数据集中的生物信号[<a href="https://www.nature.com/articles/nmeth.2645">https://www.nature.com/articles/nmeth.2645</a> ]</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 识别前2000个特征</span><br>pbmc <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 识别前10的高异质性基因</span><br>top10 <span class="hljs-operator">&lt;-</span> head<span class="hljs-punctuation">(</span>VariableFeatures<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘图看看</span><br>plot1 <span class="hljs-operator">&lt;-</span> VariableFeaturePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>plot2 <span class="hljs-operator">&lt;-</span> LabelPoints<span class="hljs-punctuation">(</span>plot <span class="hljs-operator">=</span> plot1<span class="hljs-punctuation">,</span> points <span class="hljs-operator">=</span> top10<span class="hljs-punctuation">,</span> repel <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>plot1<span class="hljs-punctuation">,</span> plot2<span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 识别前2000个特征</span><br>pbmc <span class="hljs-operator">&lt;-</span> FindVariableFeatures<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> selection.method <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vst&quot;</span><span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 识别前10的高异质性基因</span><br>top10 <span class="hljs-operator">&lt;-</span> head<span class="hljs-punctuation">(</span>VariableFeatures<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘图看看</span><br>plot1 <span class="hljs-operator">&lt;-</span> VariableFeaturePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>plot2 <span class="hljs-operator">&lt;-</span> LabelPoints<span class="hljs-punctuation">(</span>plot <span class="hljs-operator">=</span> plot1<span class="hljs-punctuation">,</span> points <span class="hljs-operator">=</span> top10<span class="hljs-punctuation">,</span> repel <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br>CombinePlots<span class="hljs-punctuation">(</span>plots <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>plot1<span class="hljs-punctuation">,</span> plot2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvMGhLcFd6bTI0SXhyLnBuZw?x-oss-process=image/format,png"></p><h5 id="4-缩放数据"><a href="#4-缩放数据" class="headerlink" title="4.缩放数据"></a>4.缩放数据</h5><p>这是在PCA等降维操作前的一个步骤，<code>ScaleData</code>函数：</p><ul><li>转换每个基因的表达值，使每个细胞的平均表达值为0</li><li>转换每个基因的表达值，使细胞间方差为1<ul><li>此步骤在下游分析中具有相同的权重，因此高表达的基因不会占主导地位</li></ul></li></ul><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">all.genes <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> all.genes<span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;RNA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-operator">@</span>scale.data<span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation"><code class="language-hljs R">all.genes <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> ScaleData<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> all.genes<span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;RNA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-operator">@</span>scale.data<span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="5-线性维度约化-PCA"><a href="#5-线性维度约化-PCA" class="headerlink" title="5.线性维度约化 PCA"></a>5.线性维度约化 PCA</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> RunPCA<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> VariableFeatures<span class="hljs-punctuation">(</span>object <span class="hljs-operator">=</span> pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>可视化细胞与特征间的PCA有三种方式：</p><h6 id="VizDimLoadings"><a href="#VizDimLoadings" class="headerlink" title="VizDimLoadings"></a>VizDimLoadings</h6><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">print<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>VizDimLoadings<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">print<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">[[</span><span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span> nfeatures <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图</span><br>VizDimLoadings<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvbURhZ3ppMXZURHNxLnBuZw?x-oss-process=image/format,png"></p><h6 id="DimPlot"><a href="#DimPlot" class="headerlink" title="DimPlot"></a>DimPlot</h6><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pca&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvM3dFMVYzRGloTjJtLnBuZw?x-oss-process=image/format,png"></p><h6 id="DimHeatmap"><a href="#DimHeatmap" class="headerlink" title="DimHeatmap"></a>DimHeatmap</h6><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">DimHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> cells <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> balanced <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R">DimHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> cells <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> balanced <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>主要用来查看数据集中的异质性的主要来源，并且可以确定哪些PC维度可以用于下一步的下游分析。</p><p>细胞和特征根据PCA分数来排序</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvbWdjRHliM29IMzE5LnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">DimHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span> cells <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> balanced <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R">DimHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span> cells <span class="hljs-operator">=</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span> balanced <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvUlI5WXRhc2o3WVE0LnBuZw?x-oss-process=image/format,png"></p><h5 id="5-确定数据集的维度"><a href="#5-确定数据集的维度" class="headerlink" title="5.确定数据集的维度"></a>5.确定数据集的维度</h5><p>为了克服在单细胞数据中在单个特征中的技术噪音，Seurat 聚类细胞是基于PCA分数的。每个PC代表着一个‘元特征’（带有跨相关特征集的信息）。因此，最主要的主成分代表了压缩的数据集。问题是要选多少PC呢？</p><h6 id="方法一：JackStrawPlot"><a href="#方法一：JackStrawPlot" class="headerlink" title="方法一：JackStrawPlot"></a>方法一：JackStrawPlot</h6><p>作者受JackStraw procedure 启发。随机置换数据的一部分子集（默认1%）再运行PCA，构建了一个’null distribution’的特征分数，重复这一步。最终会识别出低P-value特征的显著PCs</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> JackStraw<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> num.replicate <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> ScoreJackStraw<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图看看</span><br>JackStrawPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation"><code class="language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> JackStraw<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> num.replicate <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> ScoreJackStraw<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘图看看</span><br>JackStrawPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvdVFvNGJWQnlLRHJ4LnBuZw?x-oss-process=image/format,png"></p><p> In this case it appears that there is a sharp drop-off in significance after the first 10-12 PCs </p><p>在上图中展示出在前10到12台PC之后，重要性显著下降</p><h6 id="方法二：ElbowPlot"><a href="#方法二：ElbowPlot" class="headerlink" title="方法二：ElbowPlot"></a>方法二：ElbowPlot</h6><p>“ElbowPlot”：基于每个分量所解释的方差百分比对主要成分进行排名。 在此示例中，我们可以在PC9-10周围观察到“elbow ”，这表明大多数真实信号是在前10台PC中捕获的。</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">ElbowPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation"><code class="language-hljs R">ElbowPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvRGpZbU1RODA2bFJmLnBuZw?x-oss-process=image/format,png"></p><p>为了识别出数据的真实维度，有三种方法：</p><ul><li>用更加受监督的方法来确定PCs的异质性，比如可以结合GSEA来分析（ The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example ）</li><li>The second implements a statistical test based on a random null model, but is time-consuming for large datasets, and may not return a clear PC cutoff.</li><li>The third is a heuristic that is commonly used, and can be calculated instantly.</li></ul><p>在这个例子中三种方法均产生了相似的结果，以PC 7-12作为阈值。</p><p>这个例子中，作者选择10，但是实际过程中还要考虑：</p><ul><li>树突状细胞和NK细胞可能在PCs12和13中识别，这可能定义了罕见的免疫亚群（比如，MZB1是浆细胞样的er）。但是除非有一定的知识量，否则很难从背景噪音中发现。</li><li>用户可以选择不同的PCs再进行下游分析，比如选10，15，50等。结果常常有很多的不同。</li><li>建议在选择该参数时候，尽量偏高一点。如果仅仅使用5PCs会对下游分析产生不利影响</li></ul><h5 id="6-聚类细胞"><a href="#6-聚类细胞" class="headerlink" title="6.聚类细胞"></a>6.聚类细胞</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> FindNeighbors<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> FindClusters<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> resolution <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 查看前5聚类</span><br>head<span class="hljs-punctuation">(</span>Idents<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation"><code class="language-hljs R">pbmc <span class="hljs-operator">&lt;-</span> FindNeighbors<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> FindClusters<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> resolution <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 查看前5聚类</span><br>head<span class="hljs-punctuation">(</span>Idents<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="7-非线性维度约化（UMAP-x2F-TSNE）"><a href="#7-非线性维度约化（UMAP-x2F-TSNE）" class="headerlink" title="7.非线性维度约化（UMAP&#x2F;TSNE）"></a>7.非线性维度约化（UMAP&#x2F;TSNE）</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 使用UMAP聚类</span><br>pbmc <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示在聚类标签</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 使用UMAP聚类</span><br>pbmc <span class="hljs-operator">&lt;-</span> RunUMAP<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示在聚类标签</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvNzdqUGlqUk53UDlBLnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 使用TSNE聚类</span><br>pbmc <span class="hljs-operator">&lt;-</span> RunTSNE<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tsne&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示在聚类标签</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tsne&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 使用TSNE聚类</span><br>pbmc <span class="hljs-operator">&lt;-</span> RunTSNE<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> dims <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tsne&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 显示在聚类标签</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tsne&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvNjFDQXNmc3FXYVR2LnBuZw?x-oss-process=image/format,png"></p><h5 id="8-发现差异表达特征（cluster-bioers）"><a href="#8-发现差异表达特征（cluster-bioers）" class="headerlink" title="8.发现差异表达特征（cluster bioers）"></a>8.发现差异表达特征（cluster bioers）</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 发现聚类一的所有biomarkers</span><br>cluster1.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>cluster1.markers<span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 查找将聚类5与聚类0和3区分的所有标记</span><br>cluster5.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> ident.2 <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>cluster5.markers<span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 与所有其他细胞相比，找到每个簇的标记，仅报告阳性细胞</span><br>pbmc.markers <span class="hljs-operator">&lt;-</span> FindAllMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> only.pos <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">,</span> logfc.threshold <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>pbmc.markers <span class="hljs-operator">%&gt;%</span> group_by<span class="hljs-punctuation">(</span>cluster<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> top_n<span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> wt <span class="hljs-operator">=</span> avg_logFC<span class="hljs-punctuation">)</span><br>cluster1.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> logfc.threshold <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">,</span> test.use <span class="hljs-operator">=</span> <span class="hljs-string">&quot;roc&quot;</span><span class="hljs-punctuation">,</span> only.pos <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 发现聚类一的所有biomarkers</span><br>cluster1.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>cluster1.markers<span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 查找将聚类5与聚类0和3区分的所有标记</span><br>cluster5.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> ident.2 <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>head<span class="hljs-punctuation">(</span>cluster5.markers<span class="hljs-punctuation">,</span> n <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 与所有其他细胞相比，找到每个簇的标记，仅报告阳性细胞</span><br>pbmc.markers <span class="hljs-operator">&lt;-</span> FindAllMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> only.pos <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> min.pct <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">,</span> logfc.threshold <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">)</span><br>pbmc.markers <span class="hljs-operator">%&gt;%</span> group_by<span class="hljs-punctuation">(</span>cluster<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> top_n<span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> wt <span class="hljs-operator">=</span> avg_logFC<span class="hljs-punctuation">)</span><br>cluster1.markers <span class="hljs-operator">&lt;-</span> FindMarkers<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> ident.1 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> logfc.threshold <span class="hljs-operator">=</span> <span class="hljs-number">0.25</span><span class="hljs-punctuation">,</span> test.use <span class="hljs-operator">=</span> <span class="hljs-string">&quot;roc&quot;</span><span class="hljs-punctuation">,</span> only.pos <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>可视化</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 绘图看看</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 绘图看看</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvN0t2a1NnSVRPRms0LnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 使用原始count绘制</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;NKG7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PF4&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> slot <span class="hljs-operator">=</span> <span class="hljs-string">&quot;counts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">log</span> <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 使用原始count绘制</span><br>VlnPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;NKG7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PF4&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> slot <span class="hljs-operator">=</span> <span class="hljs-string">&quot;counts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">log</span> <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvSVhWd0RpMjVmNDdULnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">FeaturePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;GNLY&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD3E&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD14&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCER1A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCGR3A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;LYZ&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PPBP&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD8A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">FeaturePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;GNLY&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD3E&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD14&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCER1A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCGR3A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;LYZ&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PPBP&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD8A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvdUQ3Mzk5NnJSdDZFLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">RidgePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">RidgePlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvcnR6ZEpVbzNiVm5OLnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">DotPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">DotPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;MS4A1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD79A&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYveDd5RDlkQkVsVTY3LnBuZw?x-oss-process=image/format,png"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">top10 <span class="hljs-operator">&lt;-</span> pbmc.ers <span class="hljs-operator">%&gt;%</span> group_by<span class="hljs-punctuation">(</span>cluster<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> top_n<span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> wt <span class="hljs-operator">=</span> avg_logFC<span class="hljs-punctuation">)</span><br>DoHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> top10<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation"><code class="language-hljs R">top10 <span class="hljs-operator">&lt;-</span> pbmc.ers <span class="hljs-operator">%&gt;%</span> group_by<span class="hljs-punctuation">(</span>cluster<span class="hljs-punctuation">)</span> <span class="hljs-operator">%&gt;%</span> top_n<span class="hljs-punctuation">(</span>n <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> wt <span class="hljs-operator">=</span> avg_logFC<span class="hljs-punctuation">)</span><br>DoHeatmap<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> features <span class="hljs-operator">=</span> top10<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTExMDYvQ3pEc3VtT1V0Sm1VLnBuZw?x-oss-process=image/format,png"></p><h5 id="9-识别细胞类型"><a href="#9-识别细胞类型" class="headerlink" title="9.识别细胞类型"></a>9.识别细胞类型</h5><p>在这个数据集的情况下，我们可以使用 canonical markers  轻松地将无偏聚类与已知的细胞类型相匹配。</p><table><thead><tr><th>Cluster ID</th><th>Markers</th><th>Cell Type</th></tr></thead><tbody><tr><td>0</td><td>IL7R, CCR7</td><td>Naive CD4+ T</td></tr><tr><td>1</td><td>IL7R, S100A4</td><td>Memory CD4+</td></tr><tr><td>2</td><td>CD14, LYZ</td><td>CD14+ Mono</td></tr><tr><td>3</td><td>MS4A1</td><td>B</td></tr><tr><td>4</td><td>CD8A</td><td>CD8+ T</td></tr><tr><td>5</td><td>FCGR3A, MS4A7</td><td>FCGR3A+ Mono</td></tr><tr><td>6</td><td>GNLY, NKG7</td><td>NK</td></tr><tr><td>7</td><td>FCER1A, CST3</td><td>DC</td></tr><tr><td>8</td><td>PPBP</td><td>Platelet</td></tr></tbody></table><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">new.cluster.ids <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Naive CD4 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Memory CD4 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD14+ Mono&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD8 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCGR3A+ Mono&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;NK&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;DC&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Platelet&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>new.cluster.ids<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> levels<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> RenameIdents<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> new.cluster.ids<span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> pt.size <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation"><code class="language-hljs R">new.cluster.ids <span class="hljs-operator">&lt;-</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Naive CD4 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Memory CD4 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD14+ Mono&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;CD8 T&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;FCGR3A+ Mono&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-string">&quot;NK&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;DC&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Platelet&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">names</span><span class="hljs-punctuation">(</span>new.cluster.ids<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> levels<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">)</span><br>pbmc <span class="hljs-operator">&lt;-</span> RenameIdents<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> new.cluster.ids<span class="hljs-punctuation">)</span><br>DimPlot<span class="hljs-punctuation">(</span>pbmc<span class="hljs-punctuation">,</span> reduction <span class="hljs-operator">=</span> <span class="hljs-string">&quot;umap&quot;</span><span class="hljs-punctuation">,</span> label <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> pt.size <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> NoLegend<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA2MjkvTlR0a1NkVFdPMXJLLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> R </tag>
            
            <tag> 单细胞转录组 </tag>
            
            <tag> scRNA-seq </tag>
            
            <tag> Seurat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二代测序原理（Illumina）</title>
      <link href="/posts/15458/"/>
      <url>/posts/15458/</url>
      
        <content type="html"><![CDATA[<h2 id="虽然三代测序现在已经商用，但是目前的主流还是二代测序，尤其是Illumina公司的测序方式更是大行其道。那么，下面我们从四个方面来说说illumina家的二代测序是怎么得到的生物数据。-0、-基本原理基于可逆终止的，荧光标记dNTP，做边合成边测序分为三步：-样本准备-Sample-Prep-成簇-Cluster-Generation-测序-Sequencing"><a href="#虽然三代测序现在已经商用，但是目前的主流还是二代测序，尤其是Illumina公司的测序方式更是大行其道。那么，下面我们从四个方面来说说illumina家的二代测序是怎么得到的生物数据。-0、-基本原理基于可逆终止的，荧光标记dNTP，做边合成边测序分为三步：-样本准备-Sample-Prep-成簇-Cluster-Generation-测序-Sequencing" class="headerlink" title="虽然三代测序现在已经商用，但是目前的主流还是二代测序，尤其是Illumina公司的测序方式更是大行其道。那么，下面我们从四个方面来说说illumina家的二代测序是怎么得到的生物数据。### 0、 基本原理基于可逆终止的，荧光标记dNTP，做边合成边测序分为三步：- 样本准备 Sample Prep- 成簇 Cluster Generation- 测序 Sequencing"></a>虽然三代测序现在已经商用，但是目前的主流还是二代测序，尤其是Illumina公司的测序方式更是大行其道。那么，下面我们从四个方面来说说illumina家的二代测序是怎么得到的生物数据。<br>### 0、 基本原理<br>基于可逆终止的，荧光标记dNTP，做边合成边测序<br>分为三步：<br>- <strong>样本准备 Sample Prep</strong><br>- <strong>成簇 Cluster Generation</strong><br>- <strong>测序 Sequencing</strong></h2><h3 id="1、样本准备-Sample-Prep"><a href="#1、样本准备-Sample-Prep" class="headerlink" title="1、样本准备 Sample Prep"></a>1、样本准备 <em>Sample Prep</em></h3><p>通过不同实验方法得到的样品，需要先提取样本基因组中的DNA，用超声波将其随机打断。然后使用酶将两端补平，使用 Klenow 酶在3‘ 端加一个 A 碱基（用于连接接头序列）。为了后续扩增，测序分析，需要为这些DNA片段添加特定的接头序列。接头序列是已知的，大概有三种：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvSmJLV2JDYmw0bkNwLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><ul><li>sequencing binding site（绿）</li><li>index（红，黄）</li><li>流动池引物互补的序列（蓝，紫）</li></ul><p>添加完接头序列后的DNA片段集合叫DNA文库 （DNA library），这样就完成了样品准备工作。</p><h3 id="2、成簇-Cluster-Generation"><a href="#2、成簇-Cluster-Generation" class="headerlink" title="2、成簇 Cluster Generation"></a>2、成簇 <em>Cluster Generation</em></h3><p>成簇是DNA片段被扩增的过程，该过程在流动池 (Flowcell) 中完成。它是一片带有8条通道（lanes）的玻璃载玻，每个通道内表面附有两种DNA引物。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvUkFseU5wMnBEeTZqLmdpZg#pic_center" alt="mark"></p><p>首先，引物会与样品中的DNA片段的接头序列互补配对，固定在通道表面</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvS3FDWVV5MEZYb3FwLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>通过聚合酶生成杂交片段的互补片段，然后加入NaOH碱溶液后，双链分子变性，原始模板链（左边的链）被流动池中的液体洗去</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvWW1mM3kyeHRPRU1nLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>加入中性液体用于中和碱溶液，剩下的单链拷贝链另一端的接头就会与通道表面的引物结合，形成单链桥。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvaTJPOEUzSjhZMUxCLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>同样的，在聚合酶参与下，生成互补链，最终形成双链桥</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvdE1ibDdlNHFKWUlXLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>通过变性，DNA分子线性化，变为两个单链拷贝</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvNlFHMDFjNlBoblRxLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>它们又分别与自己配对的引物结合</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvaFJkTkNoQnlHNDdKLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>重复这个循环，同时形成数百万的簇。在这个过程中，所有的DNA片段都会被克隆扩增。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvNmNvdGhYQkNlY1BqLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"><br>桥式扩增后，反向链会被切断洗去，仅留下正向链。为防止特异性结合重新形成单链桥，3‘端被封锁</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvWHh3VGwyRnVOUHRuLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><h3 id="3、测序-Sequencing"><a href="#3、测序-Sequencing" class="headerlink" title="3、测序 Sequencing"></a>3、测序 <em>Sequencing</em></h3><p>首先，在Flowcell中加入荧光标记的dNTP和酶，由引物起始开始合成子链。但是dNTP存在 3’端叠氮基会阻碍子链延伸，这使得每个循环只能测得一个碱基。合成完一个碱基后， Flowcell 通入液体洗掉多余的dNTP和酶，使用显微镜的激光扫描特征荧光信号。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvUDNFU2tkTWtvT3QwLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>荧光发射波长与信号强度一起决定了碱基的读出，所有的DNA片段的一个碱基会被同时读取。在大规模并行的过程中，机器读取的图像类似下面这样</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvcDZoU3JVY2NNbE9hLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>加入化学试剂将叠氮基团与荧光基团切除，然后 Flowcell 再通入荧光标记的dNTP和酶，由引物起始开始合成一个碱基。不断重复这个过程，完成第一次读取。</p><p>由于测序仪每次测序时的通量比较大，所以每次测得的序列可能不止一个样本。为了去区分每个样本及正负链，科学家构建DNA文库时，在接头序列加入了的不同 index（或 barcode）来区分来源。</p><p>首先，在完成第一次读取后，复制出的链会被洗去</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvNVZQbXRvQkRtOHhWLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>index 片段引物被引入并与模板杂交，完成序列读取后被洗去。这样读取到的序列与开始时已知的index比对后就可以给测得的序列贴上标签，方便后续分析。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvRFZpUTRlbE5KTk80LnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>Paired-end测序已经是现在的主流，它提高了测序长度的同时，又可以为结构变异分析提供新方法。要完成双末端测序，首先要将模板链3’去保护，模板折叠，index片段引入</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvRVF2SGh1NnFrZ0VSLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>在聚合酶参与下形成双链桥</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvWDZQbEN6QmdLanN2LnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>然后变性，恢复为单链。注意，这次是将正向链切除并洗去，只留下反向链</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvNDY0TVdTMWY3RkhPLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><p>反向链以测序引物为起始，与正向链类似，经过多个循环后完成读取。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxODEyMjcvYlRNbXlCc2lMNzVSLnBuZw?x-oss-process=image/format,png#pic_center" alt="mark"></p><h3 id="数据分析-Data-Analysis"><a href="#数据分析-Data-Analysis" class="headerlink" title="数据分析 Data Analysis"></a>数据分析 <em>Data Analysis</em></h3><p>测序完成后会产生数百万个 reads，基于在样品准备时构建的 index 分类来自不同样本的序列。对于每个样品来说，具有相似延伸的碱基被聚在一起。正向和反向read配对生成连续序列。这些序列通过与参考基因组匹配后，实现完整序列的构建。</p><hr><h3 id="其他测序技术"><a href="#其他测序技术" class="headerlink" title="其他测序技术"></a>其他测序技术</h3><p><a href="https://zhenglei.blog.csdn.net/article/details/104737024">一代测序原理 (Sanger 法)</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/102525491">二代测序原理（Illumina）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/114328978">三代测序原理（SMRT Sequencing）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/113617773">三代测序原理（Nanopore）</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/109957104"> ChIPseq 测序原理</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/108509052">BS-seq    测序原理</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/113725316">Hi-C 测序原理</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/109957163">组蛋白修饰</a></p><p><a href="https://zhenglei.blog.csdn.net/article/details/111691514">三维基因组</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 测序技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 二代测序 </tag>
            
            <tag> Illumina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步安装及配置R及Rstudio（详细图文）</title>
      <link href="/posts/43978/"/>
      <url>/posts/43978/</url>
      
        <content type="html"><![CDATA[<h4 id="零、R与Rstudio的关系"><a href="#零、R与Rstudio的关系" class="headerlink" title="零、R与Rstudio的关系"></a>零、R与Rstudio的关系</h4><p>R提供了语言环境，它提供了R的语法规则，编译，扩展包等信息。如果只用它自带的软件包来编写和调试R脚本的话，既耗时又费力，甚至不具有开发完整项目的条件。<br>所以，Rstudio提供了一个人性化的可视界面来操作R语言。在软件里可以创建完整的项目，编写脚本，查看变量值，获取绘图的结果等等。<br>打个比方，如果R是马，那么Rstudio就是马鞍。直接骑马的话也可以，但是人们不怎么舒服，如果加上马鞍，不仅美观漂亮而且还能提高效率。</p><h4 id="一、R下载及安装"><a href="#一、R下载及安装" class="headerlink" title="一、R下载及安装"></a>一、R下载及安装</h4><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h5><ul><li><p><a href="https://cran.r-project.org/mirrors.html">https://cran.r-project.org/mirrors.html</a></p></li><li><p>选择清华的TUNA镜像</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvUFdyWVFqd2xwMXNrLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>根据需要选择下载，以windows下载为例</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc1NCRmJUZGQyQlFqLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择<code>base</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSXQxNjJPU3RmQTViLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>点击下载</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbVR1bW1CcGI2MGYyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><ul><li><p><code>确定</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc3BWSjU4YXY3UVBpLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvZm9wOTkydmlPOUczLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选安装目录时候，需要注意没必要安装在C盘，后续安装包会占用资源。建议在其他盘创建目录，然后以R版本号命名的方式安装R。</p><blockquote><p>比如我在E盘下的<code>R</code>目录:<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvSHpSOUFCbEVtSjFtLnBuZw?x-oss-process=image/format,png" alt="mark"></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbnNpdzQzYlN1OHozLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvOENYOGNTVExFRENyLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvWFlHQkJKOHB6b3lELnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><code>Finish</code>，安装完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvbzNzZGJNeEN6UTFDLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="二、Rstudio下载及安装"><a href="#二、Rstudio下载及安装" class="headerlink" title="二、Rstudio下载及安装"></a>二、Rstudio下载及安装</h4><h5 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h5><ul><li><p><a href="https://rstudio.com/products/rstudio/download">https://rstudio.com/products/rstudio/download</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvd0lVWDJEcWNKdURILnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>这里以安装window版为例</p></li><li><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvN0QzOUprR3ZHdGp6LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2.安装"></a>2.安装</h5><ul><li><p>下一步</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvWXFFeU90TkZSQkFWLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>与安装R一样，设置一个以版本命名的文件夹，比如我的是<code>E:\R\Rstudio1.2.5\RStudio</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvRG9IbnR6dWptWHJrLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvcXNLSTlyc0Y3MGlNLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvVmxUQTZham11RGFHLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装好，会在任务栏中显示<code>Rstudio</code>的图标</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvTHBWWWhwemh0TldNLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h5><ul><li><p>进入配置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvVXQ3eTlhcE1sSkptLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>设置目录</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvNHJPeVQ4Qk1KcE9hLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>点<code>Browser</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvc0NPWTN3TFE4Um5xLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>这里需要注意，选择你刚刚设置的安装目录即可，比如我的是<code>E:\R\R-3.6.1</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvTWIyaTgxTGtORlZJLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择后，会出现在列表中，选中该版本的R，点击<code>Ok</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvVmhndmZEalR2MzJsLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>出现重启Rstudio，设置完成</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvQTJPa2F3dkNrZk92LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>测试下，如果显示出<code>Hello World</code>，说明我们的设置没问题</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTEwMDMvUDhpS1Nyb1NPTUxULnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
            <tag> Rstudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 数据可视化 02 | 火山图</title>
      <link href="/posts/51326/"/>
      <url>/posts/51326/</url>
      
        <content type="html"><![CDATA[<h1 id="R-数据可视化-02-火山图"><a href="#R-数据可视化-02-火山图" class="headerlink" title="R 数据可视化 02 | 火山图"></a>R 数据可视化 02 | 火山图</h1><h4 id="一-示例数据准备"><a href="#一-示例数据准备" class="headerlink" title="一. 示例数据准备"></a>一. 示例数据准备</h4><p>链接：<a href="https://pan.baidu.com/s/1niWjcaJOuimO4NQHzHmvIA">https://pan.baidu.com/s/1niWjcaJOuimO4NQHzHmvIA</a><br>提取码：q6am<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvTkQxeFNBeU1LbGU2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><blockquote><p>文件说明</p><p>示例数据，其中数据均为虚拟数据，与实际生物学过程无关</p><p>文件名：dataset_volcano.txt</p><p>列分别为基因 （gene），差异倍数（logFC），t-test的P值（P.Value）</p></blockquote><h4 id="二-环境需求"><a href="#二-环境需求" class="headerlink" title="二. 环境需求"></a>二. 环境需求</h4><p><strong>Rstudio：</strong><br>如果系统中没有 Rstudio，先下载安装：<a href="https://www.rstudio.com/products/rstudio/download/#download">https://www.rstudio.com/products/rstudio/download/#download</a></p><p><strong>ggplot2包：</strong></p><p>如果没有安装该R包，执行以下代码：</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;ggplot2&#x27;</span><span class="hljs-punctuation"><code class="language-hljs R">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;ggplot2&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h4 id="三-绘制火山图"><a href="#三-绘制火山图" class="headerlink" title="三. 绘制火山图"></a>三. 绘制火山图</h4><h5 id="1-火山图"><a href="#1-火山图" class="headerlink" title="1. 火山图"></a>1. 火山图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvY3JwMzNKSlBSVlQxLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 设置pvalue和logFC的阈值</span><br>cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-comment"># 根据阈值分别为上调基因设置‘up’，下调基因设置‘Down’，无差异设置‘Stable’，保存到change列</span><br><span class="hljs-comment"># 这里的change列用来设置火山图点的颜色</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制火山图====================================</span><br>ggplot<span class="hljs-punctuation">(</span><br>  <span class="hljs-comment">#设置数据</span><br>  dataset<span class="hljs-punctuation">,</span> <br>  aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> logFC<span class="hljs-punctuation">,</span> <br>      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>      colour<span class="hljs-operator">=</span>change<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_point<span class="hljs-punctuation">(</span>alpha<span class="hljs-operator">=</span><span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> size<span class="hljs-operator">=</span><span class="hljs-number">3.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      scale_color_manual<span class="hljs-punctuation">(</span>values<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#546de5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#d2dae2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#ff4757&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 辅助线</span><br>  geom_vline<span class="hljs-punctuation">(</span>xintercept<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_hline<span class="hljs-punctuation">(</span>yintercept <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>cut_off_pvalue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 坐标轴</span><br>  labs<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-string">&quot;log2(fold change)&quot;</span><span class="hljs-punctuation">,</span><br>       y<span class="hljs-operator">=</span><span class="hljs-string">&quot;-log10 (p-value)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 图例</span><br>  theme<span class="hljs-punctuation">(</span>plot.title <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>hjust <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>        legend.position<span class="hljs-operator">=</span><span class="hljs-string">&quot;right&quot;</span><span class="hljs-punctuation">,</span> <br>        legend.title <span class="hljs-operator">=</span> element_blank<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 设置pvalue和logFC的阈值</span><br>cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-comment"># 根据阈值分别为上调基因设置‘up’，下调基因设置‘Down’，无差异设置‘Stable’，保存到change列</span><br><span class="hljs-comment"># 这里的change列用来设置火山图点的颜色</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制火山图====================================</span><br>ggplot<span class="hljs-punctuation">(</span><br>  <span class="hljs-comment">#设置数据</span><br>  dataset<span class="hljs-punctuation">,</span> <br>  aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> logFC<span class="hljs-punctuation">,</span> <br>      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>      colour<span class="hljs-operator">=</span>change<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_point<span class="hljs-punctuation">(</span>alpha<span class="hljs-operator">=</span><span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> size<span class="hljs-operator">=</span><span class="hljs-number">3.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      scale_color_manual<span class="hljs-punctuation">(</span>values<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#546de5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#d2dae2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#ff4757&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 辅助线</span><br>  geom_vline<span class="hljs-punctuation">(</span>xintercept<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_hline<span class="hljs-punctuation">(</span>yintercept <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>cut_off_pvalue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 坐标轴</span><br>  labs<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-string">&quot;log2(fold change)&quot;</span><span class="hljs-punctuation">,</span><br>       y<span class="hljs-operator">=</span><span class="hljs-string">&quot;-log10 (p-value)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 图例</span><br>  theme<span class="hljs-punctuation">(</span>plot.title <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>hjust <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>        legend.position<span class="hljs-operator">=</span><span class="hljs-string">&quot;right&quot;</span><span class="hljs-punctuation">,</span> <br>        legend.title <span class="hljs-operator">=</span> element_blank<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="2-标记基因的火山图"><a href="#2-标记基因的火山图" class="headerlink" title="2. 标记基因的火山图"></a>2. 标记基因的火山图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvWXZLN01PeU5nVko0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>ggrepel<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br>cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation">)</span><br>p<span class="hljs-operator">&lt;-</span>ggplot<span class="hljs-punctuation">(</span><br>  <span class="hljs-comment">#设置数据</span><br>  dataset<span class="hljs-punctuation">,</span> <br>  aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> logFC<span class="hljs-punctuation">,</span> <br>      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>      colour<span class="hljs-operator">=</span>change<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_point<span class="hljs-punctuation">(</span>alpha<span class="hljs-operator">=</span><span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> size<span class="hljs-operator">=</span><span class="hljs-number">3.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      scale_color_manual<span class="hljs-punctuation">(</span>values<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#546de5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#d2dae2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#ff4757&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 辅助线</span><br>  geom_vline<span class="hljs-punctuation">(</span>xintercept<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_hline<span class="hljs-punctuation">(</span>yintercept <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>cut_off_pvalue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 坐标轴</span><br>  labs<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-string">&quot;log2(fold change)&quot;</span><span class="hljs-punctuation">,</span><br>       y<span class="hljs-operator">=</span><span class="hljs-string">&quot;-log10 (p-value)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 图例</span><br>  theme<span class="hljs-punctuation">(</span>plot.title <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>hjust <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>        legend.position<span class="hljs-operator">=</span><span class="hljs-string">&quot;right&quot;</span><span class="hljs-punctuation">,</span> <br>        legend.title <span class="hljs-operator">=</span> element_blank<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 将需要标记的基因放置在label列</span><br><span class="hljs-comment"># 这里设置logFC值大于5的差异基因来标记</span><br><span class="hljs-comment"># ！！！需要注意的是标记的基因不能太多，Rstudio容易卡死</span><br>dataset<span class="hljs-operator">$</span>label <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">as.character</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br>p<span class="hljs-operator">+</span>geom_text_repel<span class="hljs-punctuation">(</span>data <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">,</span> <br>                                      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>                                      label <span class="hljs-operator">=</span> label<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  size <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>box.padding <span class="hljs-operator">=</span> unit<span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;lines&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  point.padding <span class="hljs-operator">=</span> unit<span class="hljs-punctuation">(</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;lines&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>                  segment.color <span class="hljs-operator">=</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span> <br>                  show.legend <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br>library<span class="hljs-punctuation">(</span>ggrepel<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br><br>cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation">)</span><br>p<span class="hljs-operator">&lt;-</span>ggplot<span class="hljs-punctuation">(</span><br>  <span class="hljs-comment">#设置数据</span><br>  dataset<span class="hljs-punctuation">,</span> <br>  aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> logFC<span class="hljs-punctuation">,</span> <br>      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>      colour<span class="hljs-operator">=</span>change<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      geom_point<span class="hljs-punctuation">(</span>alpha<span class="hljs-operator">=</span><span class="hljs-number">0.4</span><span class="hljs-punctuation">,</span> size<span class="hljs-operator">=</span><span class="hljs-number">3.5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>      scale_color_manual<span class="hljs-punctuation">(</span>values<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#546de5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#d2dae2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#ff4757&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 辅助线</span><br>  geom_vline<span class="hljs-punctuation">(</span>xintercept<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_hline<span class="hljs-punctuation">(</span>yintercept <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>cut_off_pvalue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>lty<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span>col<span class="hljs-operator">=</span><span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span>lwd<span class="hljs-operator">=</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 坐标轴</span><br>  labs<span class="hljs-punctuation">(</span>x<span class="hljs-operator">=</span><span class="hljs-string">&quot;log2(fold change)&quot;</span><span class="hljs-punctuation">,</span><br>       y<span class="hljs-operator">=</span><span class="hljs-string">&quot;-log10 (p-value)&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  theme_bw<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">+</span><br>  <br>  <span class="hljs-comment"># 图例</span><br>  theme<span class="hljs-punctuation">(</span>plot.title <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>hjust <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>        legend.position<span class="hljs-operator">=</span><span class="hljs-string">&quot;right&quot;</span><span class="hljs-punctuation">,</span> <br>        legend.title <span class="hljs-operator">=</span> element_blank<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 将需要标记的基因放置在label列</span><br><span class="hljs-comment"># 这里设置logFC值大于5的差异基因来标记</span><br><span class="hljs-comment"># ！！！需要注意的是标记的基因不能太多，Rstudio容易卡死</span><br>dataset<span class="hljs-operator">$</span>label <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">as.character</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br>p<span class="hljs-operator">+</span>geom_text_repel<span class="hljs-punctuation">(</span>data <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">,</span> <br>                                      y <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>log10<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>                                      label <span class="hljs-operator">=</span> label<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  size <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span>box.padding <span class="hljs-operator">=</span> unit<span class="hljs-punctuation">(</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;lines&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                  point.padding <span class="hljs-operator">=</span> unit<span class="hljs-punctuation">(</span><span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;lines&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <br>                  segment.color <span class="hljs-operator">=</span> <span class="hljs-string">&quot;black&quot;</span><span class="hljs-punctuation">,</span> <br>                  show.legend <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h4 id="四-保存为图片"><a href="#四-保存为图片" class="headerlink" title="四. 保存为图片"></a>四. 保存为图片</h4><ul><li><p>这里可导出像素图和PDF，也可拷贝到PS调整</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvVG5hNzNkUG9iVU5KLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择合适的文件格式，调整合适长宽，印刷或投稿选PDF，TIFF，EPS就好</p></li><li><p>文件默认存储在刚刚设置的工作目录里</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvazRpbEFtNW5TV0t5LnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="五-详细参数设置说明"><a href="#五-详细参数设置说明" class="headerlink" title="五. 详细参数设置说明"></a>五. 详细参数设置说明</h4><h5 id="1-设置工作目录"><a href="#1-设置工作目录" class="headerlink" title="1. 设置工作目录"></a>1. 设置工作目录</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation"><code class="language-hljs r">setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>在R的执行过程中，为了方便，需要指定一个获取文件和输出文件所在的目录，这样就不需要每次设置全路径，只需要指定相对目录</p><p><code>setwd(&quot;E:/R/WorkSpace/baimoc/visualization&quot;) </code>的意思就是设置工作目录为<code>E:/R/WorkSpace/baimoc/visualization</code></p><h5 id="2-载入数据"><a href="#2-载入数据" class="headerlink" title="2. 载入数据"></a>2. 载入数据</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation"><code class="language-hljs r">dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_volcano.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>因为工作目录已经设置，如果要获取<code>E:/R/WorkSpace/baimoc/visualization/resource/dataset_volcano.txt文件，那么就只需要设置相对路径</code>resource&#x2F;dataset_volcano.txt&#96;</p><p>读取到的原始数据如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvT3A0cktSNnFicEJ2LnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="3-设置阈值"><a href="#3-设置阈值" class="headerlink" title="3. 设置阈值"></a>3. 设置阈值</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation"><code class="language-hljs R">cut_off_pvalue <span class="hljs-operator">=</span> <span class="hljs-number">0.0000001</span><br>cut_off_logFC <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>dataset<span class="hljs-operator">$</span>change <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> cut_off_logFC<span class="hljs-punctuation">,</span> <br>                     ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-operator">&gt;</span> cut_off_logFC <span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Up&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&#x27;Down&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-string">&#x27;Stable&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>根据阈值分别为上调基因设置‘up’，下调基因设置‘Down’，无差异设置‘Stable’，保存到change列<br>这里的change列用来设置火山图点的颜色：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvWFl3QzRRSTFxbE9ELnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="4-设置标记基因"><a href="#4-设置标记基因" class="headerlink" title="4.设置标记基因"></a>4.设置标记基因</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">dataset<span class="hljs-operator">$</span>label <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">as.character</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation"><code class="language-hljs R">dataset<span class="hljs-operator">$</span>label <span class="hljs-operator">=</span> ifelse<span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>P.Value <span class="hljs-operator">&lt;</span> cut_off_pvalue <span class="hljs-operator">&amp;</span> <span class="hljs-built_in">abs</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>logFC<span class="hljs-punctuation">)</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">as.character</span><span class="hljs-punctuation">(</span>dataset<span class="hljs-operator">$</span>gene<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>将需要标记的基因放置在label列, 这里设置logFC值大于5的差异基因来标记<br><strong>需要注意的是标记的基因不能太多，Rstudio容易卡死</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MTcvODV6cUF3cklQTThrLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> R </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> 火山图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R 数据可视化 01 | 聚类热图</title>
      <link href="/posts/46174/"/>
      <url>/posts/46174/</url>
      
        <content type="html"><![CDATA[<h4 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h4><p>链接：<a href="https://pan.baidu.com/s/13l8UtKvvDxFWL8ikzq7vJw">https://pan.baidu.com/s/13l8UtKvvDxFWL8ikzq7vJw</a><br>提取码：ttb4 </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvYllJRjFoMHhhRzJoLnBuZw?x-oss-process=image/format,png" alt="mark"></p><blockquote><p>文件说明</p><p>示例数据，其中数据均为虚拟数据，与实际生物学过程无关</p><p>文件名：dataset_heatmap.txt</p><p>列分别为基因，cell1的5个重复样本，cell2的5个重复样本</p><p>行代表每个基因在所有样本的FPKM值</p></blockquote><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p><strong>Rstudio：</strong><br>如果系统中没有 Rstudio，先下载安装：<a href="https://www.rstudio.com/products/rstudio/download/#download">https://www.rstudio.com/products/rstudio/download/#download</a></p><p><strong>heatmaps 包：</strong></p><p>如果没有安装该R包，执行以下代码：</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>requireNamespace<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">,</span> quietly <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><br><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;heatmaps&quot;</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span><span class="hljs-operator">!</span>requireNamespace<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">,</span> quietly <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>    install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;BiocManager&quot;</span><span class="hljs-punctuation">)</span><br><br>BiocManager<span class="hljs-operator">::</span>install<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;heatmaps&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h4 id="绘制聚类热图"><a href="#绘制聚类热图" class="headerlink" title="绘制聚类热图"></a>绘制聚类热图</h4><h5 id="常规聚类热图绘制"><a href="#常规聚类热图绘制" class="headerlink" title="常规聚类热图绘制"></a>常规聚类热图绘制</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvM3RUZzNDT2NrYU5jLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 载入数据</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>cell_list<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_list<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 执行前设置====================================</span><br><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 载入数据</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>cell_list<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_list<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation">)</span><br><br></code></pre></td></tr></table></figure><h5 id="无分类信息热图"><a href="#无分类信息热图" class="headerlink" title="无分类信息热图"></a>无分类信息热图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvbHo1SkFGZmlUSFJBLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 将绘制热图部分替换为下列代码</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 将绘制热图部分替换为下列代码</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="无聚类热图"><a href="#无聚类热图" class="headerlink" title="无聚类热图"></a>无聚类热图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvQ3NtbEo0dlZBbjlzLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 将绘制热图部分替换为下列代码</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 将绘制热图部分替换为下列代码</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">F</span><span class="hljs-punctuation">,</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="分割聚类树热图"><a href="#分割聚类树热图" class="headerlink" title="分割聚类树热图"></a>分割聚类树热图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvVk01TEtpSlNJSTQ5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         cutree_cols <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>         cutree_rows <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         cutree_cols <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>         cutree_rows <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="多分组聚类热图"><a href="#多分组聚类热图" class="headerlink" title="多分组聚类热图"></a>多分组聚类热图</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvdHFETGxCVXhUZzZQLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>cell_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;normal&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cancer&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>sample_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;control&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;case&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>level <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_type<span class="hljs-punctuation">,</span> sample_calss<span class="hljs-punctuation">,</span> sample_type<span class="hljs-punctuation">,</span> level<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>gene_class<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;good&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;bad&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;fat&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;blood&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Immunology&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_r <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>gene_class<span class="hljs-punctuation">,</span> gene_type<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_r<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_row <span class="hljs-operator">=</span> annotation_r<span class="hljs-punctuation">,</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>cell_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;normal&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cancer&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>sample_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;control&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;case&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>level <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><br><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_type<span class="hljs-punctuation">,</span> sample_calss<span class="hljs-punctuation">,</span> sample_type<span class="hljs-punctuation">,</span> level<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>gene_class<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;good&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;bad&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">30</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;fat&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;blood&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Immunology&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_r <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>gene_class<span class="hljs-punctuation">,</span> gene_type<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_r<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_row <span class="hljs-operator">=</span> annotation_r<span class="hljs-punctuation">,</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="分组调色"><a href="#分组调色" class="headerlink" title="分组调色"></a>分组调色</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvcEV5ckw4Q1d3ejR0LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Normal&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Cancer&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>sample_calss<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Fat&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Blood&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Immunology&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_r <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>gene_type<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_r<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>annotation_colors <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>Normal<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#F8EFBA&#x27;</span><span class="hljs-punctuation">,</span> Cancer<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#FD7272&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                         gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>Fat<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#f1f2f6&#x27;</span><span class="hljs-punctuation">,</span> Blood<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#ced6e0&#x27;</span><span class="hljs-punctuation">,</span> Immunology<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#57606f&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_row <span class="hljs-operator">=</span> annotation_r<span class="hljs-punctuation">,</span><br>         annotation_colors <span class="hljs-operator">=</span> annotation_colors<span class="hljs-punctuation">,</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 清空暂存数据</span><br>rm<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-operator">=</span>ls<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 载入R包</span><br>library<span class="hljs-punctuation">(</span>pheatmap<span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 设置工作目录</span><br>setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 整理数据集====================================</span><br><span class="hljs-comment"># 参数&#x27;./resource/dataset.txt&#x27;，表示载入E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</span><br>dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><span class="hljs-comment"># 构建样本分类数据</span><br>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Normal&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Cancer&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>sample_calss<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Fat&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Blood&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;Immunology&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">20</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_r <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>gene_type<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_r<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> rownames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br><br>annotation_colors <span class="hljs-operator">=</span> <span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>sample_calss<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>Normal<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#F8EFBA&#x27;</span><span class="hljs-punctuation">,</span> Cancer<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#FD7272&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>                         gene_type<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span>Fat<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#f1f2f6&#x27;</span><span class="hljs-punctuation">,</span> Blood<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#ced6e0&#x27;</span><span class="hljs-punctuation">,</span> Immunology<span class="hljs-operator">=</span><span class="hljs-string">&#x27;#57606f&#x27;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         cluster_rows <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#行聚类</span><br>         cluster_cols <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment">#列聚类</span><br>         annotation_col <span class="hljs-operator">=</span>annotation_c<span class="hljs-punctuation">,</span> <span class="hljs-comment">#样本分类数据</span><br>         annotation_row <span class="hljs-operator">=</span> annotation_r<span class="hljs-punctuation">,</span><br>         annotation_colors <span class="hljs-operator">=</span> annotation_colors<span class="hljs-punctuation">,</span><br>         annotation_legend<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示样本分类</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="显示文本"><a href="#显示文本" class="headerlink" title="显示文本"></a>显示文本</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvdURCM0E2WEk1dTF1LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r"><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         display_numbers <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示数值</span><br>         fontsize_number <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 设置字体大小</span><br>         number_color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;#4a4a4a&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#设置颜色</span><br>         number_format <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%.2f&#x27;</span> <span class="hljs-comment"># 设置显示格式</span><br><span class="hljs-punctuation"><code class="language-hljs r"><span class="hljs-comment"># 绘制热图=====================================</span><br>pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         display_numbers <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 显示数值</span><br>         fontsize_number <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 设置字体大小</span><br>         number_color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;#4a4a4a&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#设置颜色</span><br>         number_format <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%.2f&#x27;</span> <span class="hljs-comment"># 设置显示格式</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="去除描边"><a href="#去除描边" class="headerlink" title="去除描边"></a>去除描边</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvUmtzNTdLSzVMSER3LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br>         border_color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NA&#x27;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation"><code class="language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br>         border_color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NA&#x27;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="字体相关"><a href="#字体相关" class="headerlink" title="字体相关"></a>字体相关</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvaE1BZWxXQ0Uzdjc5LnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br>         fontsize <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 全局字体大小，会被后边设置所覆盖</span><br>         fontsize_row <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 行字体大小</span><br>         fontsize_col <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 列字体大小</span><br>         angle_col <span class="hljs-operator">=</span> <span class="hljs-number">45</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 设置列偏转角度，可选 270, 0, 45, 90, 315，</span><br>         gaps_row <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><br><span class="hljs-punctuation"><code class="language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <span class="hljs-comment">#表达数据</span><br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示行名</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><span class="hljs-comment"># 显示列名</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">#对行标准化</span><br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 热图基准颜色</span><br>         fontsize <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 全局字体大小，会被后边设置所覆盖</span><br>         fontsize_row <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 行字体大小</span><br>         fontsize_col <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 列字体大小</span><br>         angle_col <span class="hljs-operator">=</span> <span class="hljs-number">45</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 设置列偏转角度，可选 270, 0, 45, 90, 315，</span><br>         gaps_row <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="调整聚类树高"><a href="#调整聚类树高" class="headerlink" title="调整聚类树高"></a>调整聚类树高</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgveDRIVk1LR044M3dyLnBuZw?x-oss-process=image/format,png" alt="mark"></p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         treeheight_row <span class="hljs-operator">=</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span><br>         treeheight_col <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br><span class="hljs-punctuation"><code class="language-hljs r">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         treeheight_row <span class="hljs-operator">=</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span><br>         treeheight_col <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h5 id="聚类方法选择"><a href="#聚类方法选择" class="headerlink" title="聚类方法选择"></a>聚类方法选择</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         clustering_distance_rows <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;euclidean&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 计算聚类间距的算法，可选&#x27;correlation&#x27;, &#x27;euclidean&#x27;, &#x27;maximum&#x27;, &#x27;manhattan&#x27;, &#x27;canberra&#x27;, &#x27;binary&#x27;, &#x27;minkowski&#x27;</span><br>         clustering_method <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;complete&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 聚类方法, 可选&#x27;ward&#x27;, &#x27;ward.D&#x27;, &#x27;ward.D2&#x27;, &#x27;single&#x27;, &#x27;complete&#x27;, &#x27;average&#x27;, &#x27;mcquitty&#x27;, &#x27;median&#x27; or &#x27;centroid&#x27;</span><br><span class="hljs-punctuation"><code class="language-hljs R">pheatmap<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">,</span> <br>         show_rownames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         show_colnames <span class="hljs-operator">=</span> <span class="hljs-built_in">T</span><span class="hljs-punctuation">,</span><br>         scale <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row&quot;</span><span class="hljs-punctuation">,</span> <br>         color <span class="hljs-operator">=</span>colorRampPalette<span class="hljs-punctuation">(</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;#8854d0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;#ffffff&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;#fa8231&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-number">100</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>         clustering_distance_rows <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;euclidean&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 计算聚类间距的算法，可选&#x27;correlation&#x27;, &#x27;euclidean&#x27;, &#x27;maximum&#x27;, &#x27;manhattan&#x27;, &#x27;canberra&#x27;, &#x27;binary&#x27;, &#x27;minkowski&#x27;</span><br>         clustering_method <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;complete&#x27;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment"># 聚类方法, 可选&#x27;ward&#x27;, &#x27;ward.D&#x27;, &#x27;ward.D2&#x27;, &#x27;single&#x27;, &#x27;complete&#x27;, &#x27;average&#x27;, &#x27;mcquitty&#x27;, &#x27;median&#x27; or &#x27;centroid&#x27;</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h4 id="保存为图片"><a href="#保存为图片" class="headerlink" title="保存为图片"></a>保存为图片</h4><ul><li><p>这里可导出像素图和PDF，也可拷贝到PS调整</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvVG5hNzNkUG9iVU5KLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>选择合适的文件格式，调整合适长宽，印刷或投稿选PDF，TIFF，EPS就好</p></li><li><p>文件默认存储在刚刚设置的工作目录里</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvYU9mcGhkV29FU3pGLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li></ul><h4 id="详细参数设置说明"><a href="#详细参数设置说明" class="headerlink" title="详细参数设置说明"></a>详细参数设置说明</h4><h5 id="设置工作目录"><a href="#设置工作目录" class="headerlink" title="设置工作目录"></a>设置工作目录</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation"><code class="language-hljs r">setwd<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;E:/R/WorkSpace/baimoc/visualization&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>在R的执行过程中，为了方便，需要指定一个获取文件和输出文件所在的目录，这样就不需要每次设置全路径，只需要指定相对目录</p><p><code>setwd(&quot;E:/R/WorkSpace/baimoc/visualization&quot;) </code>的意思就是设置工作目录为<code>E:/R/WorkSpace/baimoc/visualization</code></p><h5 id="载入数据"><a href="#载入数据" class="headerlink" title="载入数据"></a>载入数据</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs r">dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation"><code class="language-hljs r">dataset <span class="hljs-operator">&lt;-</span> read.table<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;resource/dataset_heatmap.txt&#x27;</span><span class="hljs-punctuation">,</span>header <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">,</span> row.names <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>因为工作目录已经设置，如果要获取<code>E:/R/WorkSpace/baimoc/visualization/resource/dataset_heatmap.txt</code>文件，那么就只需要设置相对路径<code>resource/dataset_heatmap.txt</code></p><p>对于<code>header = TRUE, row.names = 1</code>代表读取文件表头，设置第一列为行名</p><h5 id="获取数据子集"><a href="#获取数据子集" class="headerlink" title="获取数据子集"></a>获取数据子集</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 截取表达矩阵的一部分数据来绘制热图</span><br>exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>原始数据：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvcVV5aFlMYXFOa25iLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>如果获取前5个基因和cell1与cell2的前3个样本，只需要执行</p><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R">exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-operator">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation"><code class="language-hljs R">exp_ds <span class="hljs-operator">=</span> dataset<span class="hljs-punctuation">[</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-operator">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvaGhXODJKMXllVDBVLnBuZw?x-oss-process=image/format,png" alt="mark"></p><h5 id="样本分类数据"><a href="#样本分类数据" class="headerlink" title="样本分类数据"></a>样本分类数据</h5><figure class="highlight r"><table><tr><td class="code"><pre class=" language-hljs R"><span class="hljs-comment"># 构建样本分类数据</span><br>cell_list<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_list<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation"><code class="language-hljs R"><span class="hljs-comment"># 构建样本分类数据</span><br>cell_list<span class="hljs-operator">=</span><span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_1&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-built_in">rep</span><span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;cell_2&#x27;</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>annotation_c <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span>cell_list<span class="hljs-punctuation">)</span><br>rownames<span class="hljs-punctuation">(</span>annotation_c<span class="hljs-punctuation">)</span> <span class="hljs-operator">&lt;-</span> colnames<span class="hljs-punctuation">(</span>exp_ds<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>这段代码目的是构建分类名与原始数据的列名的对应关系</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA5MDgvUzc5SGVnZTRFT2hyLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 可视化技术 </tag>
            
            <tag> R </tag>
            
            <tag> 聚类热图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息学数据库及在线工具汇总 （更新）</title>
      <link href="/posts/19418/"/>
      <url>/posts/19418/</url>
      
        <content type="html"><![CDATA[<h4 id="核酸数据库"><a href="#核酸数据库" class="headerlink" title="核酸数据库"></a>核酸数据库</h4><ul><li><p>NCBI [<a href="https://www.ncbi.nlm.nih.gov/genbank/]">https://www.ncbi.nlm.nih.gov/genbank/]</a></p><p><em>NCBI</em> (National Center for Biotechnology Information）是指美国国立生物技术信息中心 </p></li><li><p>EMBL [<a href="https://www.ebi.ac.uk/ena]">https://www.ebi.ac.uk/ena]</a></p><p>欧洲分子生物学实验室<em>EMBL</em>（The European Molecular Biology Laboratory） </p></li><li><p>DDBJ [<a href="https://www.ddbj.nig.ac.jp/index-e.html]">https://www.ddbj.nig.ac.jp/index-e.html]</a></p><p><em>DDBJ</em>(DNA Data Bank of Japan)，于1984年建立，是世界三大DNA 数据库之一，与NCBI的GenBank，EMBL的EBI数据库共同组成国际DNA数据库 </p></li><li><p>CNGB [<a href="https://db.cngb.org/]">https://db.cngb.org/]</a></p><p>中国国家数据库（China National GeneBank）位于深圳大鹏新区，是继世界三大数据库之后的全球第四大国家级数据库。它是中国首个，也是唯一一个国家基因库，相对于全球另外三个基因库而言，国家基因库样品保存的规模、存储量和可访问的数据量皆是全球最大。 </p></li><li><p>BIGD [<a href="https://bigd.big.ac.cn/]">https://bigd.big.ac.cn/]</a> </p><p>中国国家基因组科学数据中心 生命与健康大数据中心 (National Genomics Data Center BIG Data Center)</p></li></ul><h4 id="非编码RNA数据库"><a href="#非编码RNA数据库" class="headerlink" title="非编码RNA数据库"></a>非编码RNA数据库</h4><h5 id="1-非编码小RNA数据库"><a href="#1-非编码小RNA数据库" class="headerlink" title="1.非编码小RNA数据库"></a>1.非编码小RNA数据库</h5><ul><li><p>miRBase [<a href="http://www.mirbase.org/]">http://www.mirbase.org/]</a></p></li><li><p>piRNAbank [<a href="http://pirnabank.ibab.ac.in/]">http://pirnabank.ibab.ac.in/]</a></p></li><li><p>piRNAbank  [<a href="http://gtrnadb.ucsc.edu/]">http://gtrnadb.ucsc.edu/]</a></p></li><li><p>SILVA [<a href="https://www.arb-silva.de/]">https://www.arb-silva.de/]</a></p></li></ul><h5 id="2-长非编码RNA数据库："><a href="#2-长非编码RNA数据库：" class="headerlink" title="2.长非编码RNA数据库："></a>2.长非编码RNA数据库：</h5><ul><li><p>LncRNAdb [<a href="http://www.lncrnadb.org/]">http://www.lncrnadb.org/]</a></p><p>真核生物</p></li><li><p>LncRNAwiki [<a href="http://lncrna.big.ac.cn/index.php/Main_Page]">http://lncrna.big.ac.cn/index.php/Main_Page]</a></p><p>人类长非编码RNA数据库</p></li></ul><h5 id="3-非编码RNA家族数据库"><a href="#3-非编码RNA家族数据库" class="headerlink" title="3.非编码RNA家族数据库"></a>3.非编码RNA家族数据库</h5><ul><li><p>Rfam[<a href="http://rfam.xfam.org/]">http://rfam.xfam.org/]</a></p><p>类似于Pfam的RNA家族注释数据库</p></li></ul><h5 id="4-非编码RNA序列数据库"><a href="#4-非编码RNA序列数据库" class="headerlink" title="4.非编码RNA序列数据库"></a>4.非编码RNA序列数据库</h5><ul><li>RNAcentral [<a href="https://rnacentral.org/">https://rnacentral.org/</a> ]</li></ul><h4 id="蛋白质数据库"><a href="#蛋白质数据库" class="headerlink" title="蛋白质数据库"></a>蛋白质数据库</h4><h5 id="0-蛋白质信息"><a href="#0-蛋白质信息" class="headerlink" title="0.蛋白质信息"></a>0.蛋白质信息</h5><ul><li><p>Human protein atlas [<a href="http://www.proteinatlas.org/">http://www.proteinatlas.org/</a> ]</p><p>人体蛋白在细胞、组织、病理条件下的表达</p></li></ul><h5 id="1-蛋白序列数据库"><a href="#1-蛋白序列数据库" class="headerlink" title="1.蛋白序列数据库"></a>1.蛋白序列数据库</h5><ul><li><p>Pfam [<a href="http://pfam.xfam.org/]">http://pfam.xfam.org/]</a></p><p>Pfam是蛋白质家族的数据库，包括使用隐马尔可夫模型生成的注释和多序列比对。 </p></li><li><p>SwissProt [<a href="http://us.expasy.org/sprot/]">http://us.expasy.org/sprot/]</a> </p><p>手动注释的非冗余蛋白序列数据库</p></li><li><p>UniProt [ <a href="https://www.uniprot.org/]">https://www.uniprot.org/]</a> </p></li><li><p>PIR [<a href="http://www.proteininformationresource.org/]">http://www.proteininformationresource.org/]</a>  </p></li><li><p>Antibodies [<a href="http://www.bioinf.org.uk/abs/]">http://www.bioinf.org.uk/abs/]</a> </p></li><li><p>BRENDA [ <a href="http://www.brenda-enzymes.org/]">http://www.brenda-enzymes.org/]</a> </p></li><li><p>HPRD [<a href="http://www.hprd.org/]">http://www.hprd.org/]</a> </p></li><li><p>InterPro [<a href="http://www.ebi.ac.uk/interpro/]">http://www.ebi.ac.uk/interpro/]</a></p><p>通过整合多个蛋白相关数据库，提供了一个方便的对蛋白序列进行功能注释的平台，包括对蛋白质家族、结构域、功能位点的预测 </p></li><li><p>iProClass [<a href="http://pir.georgetown.edu/iproclass/]">http://pir.georgetown.edu/iproclass/]</a> </p></li><li><p>PRF [<a href="http://www.prf.or.jp/]">http://www.prf.or.jp/]</a> </p></li><li><p>REBASE [<a href="http://rebase.neb.com/rebase/rebase.html]">http://rebase.neb.com/rebase/rebase.html]</a></p></li></ul><h5 id="2-蛋白质结构数据库"><a href="#2-蛋白质结构数据库" class="headerlink" title="2.蛋白质结构数据库"></a>2.蛋白质结构数据库</h5><ul><li><p>PDB [<a href="http://www.rcsb.org/]">http://www.rcsb.org/]</a></p><p>通过实验测定的结构</p></li><li><p>SCOP [<a href="http://scop.mrc-lmb.cam.ac.uk/scop/]">http://scop.mrc-lmb.cam.ac.uk/scop/]</a> </p></li><li><p>CATH [<a href="http://www.cathdb.info/]">http://www.cathdb.info/]</a> </p></li><li><p>PSI [<a href="http://www.uwstructuralgenomics.org/]">http://www.uwstructuralgenomics.org/]</a></p></li></ul><h5 id="3-蛋白组数据库"><a href="#3-蛋白组数据库" class="headerlink" title="3.蛋白组数据库"></a>3.蛋白组数据库</h5><ul><li>PRIDE [<a href="https://www.ebi.ac.uk/pride/archive/]">https://www.ebi.ac.uk/pride/archive/]</a></li></ul><h5 id="4-蛋白质功能域数据库"><a href="#4-蛋白质功能域数据库" class="headerlink" title="4.蛋白质功能域数据库"></a>4.蛋白质功能域数据库</h5><ul><li><p>PROSITE [<a href="https://prosite.expasy.org/]">https://prosite.expasy.org/]</a> </p><p>最全面</p></li><li><p>Pfam [<a href="http://pfam.xfam.org/]">http://pfam.xfam.org/]</a> </p><p>最专业</p></li><li><p>ProDom [<a href="http://prodom.prabi.fr/]">http://prodom.prabi.fr/]</a> </p></li><li><p>CCD [<a href="http://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtm]">http://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtm]</a> </p></li><li><p>Prints [<a href="http://www.bioinf.man.ac.uk/dbbrowser/PRINTS/index.php]">http://www.bioinf.man.ac.uk/dbbrowser/PRINTS/index.php]</a> </p></li><li><p>SMART [ <a href="http://smart.embl-heidelberg.de/]">http://smart.embl-heidelberg.de/]</a> </p></li><li><p>TIGRFAM [<a href="http://www.tigr.org/TIGRFAMs/]">http://www.tigr.org/TIGRFAMs/]</a></p></li></ul><h5 id="5-蛋白互作数据库"><a href="#5-蛋白互作数据库" class="headerlink" title="5.蛋白互作数据库"></a>5.蛋白互作数据库</h5><ul><li><p>STRING [<a href="https://string-db.org/]">https://string-db.org/]</a> </p></li><li><p>DIP [<a href="https://dip.doe-mbi.ucla.edu/dip/Main.cgi]">https://dip.doe-mbi.ucla.edu/dip/Main.cgi]</a></p><p>实验验证的蛋白相互作用数据库</p></li><li><p>BioGRID [<a href="https://thebiogrid.org/]">https://thebiogrid.org/]</a> ：</p></li><li><p>IntAct [ <a href="https://www.ebi.ac.uk/intact/]">https://www.ebi.ac.uk/intact/]</a></p></li></ul><h4 id="代谢数据库"><a href="#代谢数据库" class="headerlink" title="代谢数据库"></a>代谢数据库</h4><p><strong>MapMan：一个功能强大的代谢途径查看和编辑软件</strong> </p><h5 id="1-代谢途径数据库"><a href="#1-代谢途径数据库" class="headerlink" title="1.代谢途径数据库"></a>1.代谢途径数据库</h5><ul><li><p>KEGG [<a href="https://www.kegg.jp/]">https://www.kegg.jp/]</a> </p></li><li><p>GO [<a href="http://www.geneontology.org/]">http://www.geneontology.org/]</a> </p></li><li><p>NCBI BioSystems [<a href="https://www.ncbi.nlm.nih.gov/biosystems]">https://www.ncbi.nlm.nih.gov/biosystems]</a> </p></li><li><p>IMP [<a href="http://imp.princeton.edu/]">http://imp.princeton.edu/]</a> </p></li><li><p>plantCyc [<a href="https://www.plantcyc.org/]">https://www.plantcyc.org/]</a> </p></li><li><p>MANET [ <a href="https://manet.illinois.edu/]">https://manet.illinois.edu/]</a> </p></li><li><p>MetaNetX [ <a href="https://www.metanetx.org/]">https://www.metanetx.org/]</a></p></li></ul><h5 id="2-代谢组学常用数据库"><a href="#2-代谢组学常用数据库" class="headerlink" title="2.代谢组学常用数据库"></a>2.代谢组学常用数据库</h5><ul><li><p>MataboLights [<a href="https://www.ebi.ac.uk/metabolights/]">https://www.ebi.ac.uk/metabolights/]</a> </p></li><li><p>HMDB [<a href="http://www.hmdb.ca/]">http://www.hmdb.ca/]</a> </p></li><li><p>YMDB [<a href="http://www.ymdb.ca/]">http://www.ymdb.ca/]</a> </p></li><li><p>ECMDB [<a href="http://ecmdb.ca/]">http://ecmdb.ca/]</a></p></li></ul><h5 id="3-表型数据库"><a href="#3-表型数据库" class="headerlink" title="3.表型数据库"></a>3.表型数据库</h5><ul><li><p>Planteome [<a href="http://www.planteome.org/]">http://www.planteome.org/]</a>  </p></li><li><p>dbGaP [<a href="https://www.ncbi.nlm.nih.gov/gap/]">https://www.ncbi.nlm.nih.gov/gap/]</a> </p></li><li><p>IPPN [<a href="https://www.plant-phenotyping.org/]">https://www.plant-phenotyping.org/]</a></p></li></ul><h4 id="序列比对"><a href="#序列比对" class="headerlink" title="序列比对"></a>序列比对</h4><h5 id="1-序列与数据库比对"><a href="#1-序列与数据库比对" class="headerlink" title="1.序列与数据库比对"></a>1.序列与数据库比对</h5><ul><li>Blast [<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi]">https://blast.ncbi.nlm.nih.gov/Blast.cgi]</a></li></ul><h5 id="2-多序列间比对"><a href="#2-多序列间比对" class="headerlink" title="2.多序列间比对"></a>2.多序列间比对</h5><ul><li>Clustal</li></ul><h5 id="3-序列进化树分析"><a href="#3-序列进化树分析" class="headerlink" title="3.序列进化树分析"></a>3.序列进化树分析</h5><ul><li>MEGA</li></ul><h4 id="基因分析"><a href="#基因分析" class="headerlink" title="基因分析"></a>基因分析</h4><h5 id="0-基因信息"><a href="#0-基因信息" class="headerlink" title="0.基因信息"></a>0.基因信息</h5><ul><li><p>GeneCard [<a href="https://www.genecards.org/]">https://www.genecards.org/]</a></p></li><li><p>Gene Wiki[<a href="https://en.wikipedia.org/wiki/Wikipedia:Gene_Wiki">https://en.wikipedia.org/wiki/Wikipedia:Gene_Wiki</a> ]</p></li></ul><h5 id="1-基因注释"><a href="#1-基因注释" class="headerlink" title="1.基因注释"></a>1.基因注释</h5><ul><li><p>Blast [<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi]">https://blast.ncbi.nlm.nih.gov/Blast.cgi]</a></p></li><li><p>Interproscan [<a href="http://www.ebi.ac.uk/interpro/]%EF%BC%8C">http://www.ebi.ac.uk/interpro/]，</a></p></li><li><p>WEGO [<a href="http://wego.genomics.org.cn/]">http://wego.genomics.org.cn/]</a></p></li><li><p>KAAS [<a href="https://www.genome.jp/tools/kaas/]">https://www.genome.jp/tools/kaas/]</a></p></li></ul><h5 id="2-基因功能预测："><a href="#2-基因功能预测：" class="headerlink" title="2.基因功能预测："></a>2.基因功能预测：</h5><ul><li><p>FGENESH [<a href="http://linux1.softberry.com/berry.phtml?topic=fgenesh&group=programs&subgroup=gfind%5D">http://linux1.softberry.com/berry.phtml?topic=fgenesh&amp;group=programs&amp;subgroup=gfind]</a></p></li><li><p>AUGUSTUS [<a href="http://bioinf.uni-greifswald.de/augustus/submission.php">http://bioinf.uni-greifswald.de/augustus/submission.php</a> ]</p></li><li><p>GENESCAN [<a href="http://argonaute.mit.edu/GENSCAN.html]">http://argonaute.mit.edu/GENSCAN.html]</a></p></li><li><p>GeneMark [<a href="http://topaz.gatech.edu/GeneMark/]">http://topaz.gatech.edu/GeneMark/]</a></p></li><li><p>Glimmer [<a href="http://ccb.jhu.edu/software/glimmer/index.shtml]">http://ccb.jhu.edu/software/glimmer/index.shtml]</a></p></li></ul><h5 id="3-基因结构预测"><a href="#3-基因结构预测" class="headerlink" title="3.基因结构预测"></a>3.基因结构预测</h5><ul><li><p>Exon-Intron Graphic Maker [<a href="http://wormweb.org/exonintron]">http://wormweb.org/exonintron]</a></p><p>根据候选基因的外显子和内含子等信息绘制基因结构</p></li><li><p>Blastp [<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastp&PAGE_TYPE=BlastSearch&LINK_LOC=blasthome%5D">https://blast.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastp&amp;PAGE_TYPE=BlastSearch&amp;LINK_LOC=blasthome]</a></p><p>可在线获取蛋白结构域的注释和位置信息</p></li></ul><h5 id="4-同源基因分析"><a href="#4-同源基因分析" class="headerlink" title="4.同源基因分析"></a>4.同源基因分析</h5><ul><li>OrthoDB是直系同源物的综合目录[<a href="https://www.orthodb.org/]">https://www.orthodb.org/]</a></li></ul><h5 id="5-亚细胞定位预测"><a href="#5-亚细胞定位预测" class="headerlink" title="5.亚细胞定位预测"></a>5.亚细胞定位预测</h5><ul><li>PSORT Prediction [<a href="http://psort1.hgc.jp/form.html]">http://psort1.hgc.jp/form.html]</a></li></ul><h5 id="6-启动子分析"><a href="#6-启动子分析" class="headerlink" title="6.启动子分析"></a>6.启动子分析</h5><ul><li>Plantcare [<a href="http://bioinformatics.psb.ugent.be/webtools/plantcare/html/]">http://bioinformatics.psb.ugent.be/webtools/plantcare/html/]</a></li></ul><h5 id="7-调控目的基因的miRNA预测"><a href="#7-调控目的基因的miRNA预测" class="headerlink" title="7.调控目的基因的miRNA预测"></a>7.调控目的基因的miRNA预测</h5><ul><li>psRNAtarget [<a href="http://plantgrn.noble.org/psRNATarget/analysis?function=2%5D">http://plantgrn.noble.org/psRNATarget/analysis?function=2]</a></li></ul><h5 id="8-表达分析"><a href="#8-表达分析" class="headerlink" title="8.表达分析"></a>8.表达分析</h5><ul><li><p>ArrayExpress [<a href="https://www.ebi.ac.uk/arrayexpress/">https://www.ebi.ac.uk/arrayexpress/</a> ]</p><p>数据来自EMBL的高通量功能基因组学实验的数据；</p></li><li><p>BAR [<a href="http://bar.utoronto.ca]">http://bar.utoronto.ca]</a></p><p>在分析基因功能时，通常会参考基因的表达模式，即基因在植物不同组织不同发育时期的表达丰度变化。通过在线分析网站BAR对候基因进行表达分析。 是一个植物生信分析资源网站，用该网站分析基因表达时，不仅可以获得基因表达模式的热图，还可以获得可视化的电子荧光图片，直观呈现基因在植物组织中的表达位置。</p></li></ul><h5 id="9-基因结构绘制"><a href="#9-基因结构绘制" class="headerlink" title="9.基因结构绘制"></a>9.基因结构绘制</h5><ul><li><p>GSDS [<a href="http://gsds.cbi.pku.edu.cn/]">http://gsds.cbi.pku.edu.cn/]</a></p><p>Gene Structure Display Server，基于基因组注释文件绘制序列基因结构等功能</p></li></ul><h4 id="蛋白质分析"><a href="#蛋白质分析" class="headerlink" title="蛋白质分析"></a>蛋白质分析</h4><h5 id="1-蛋白二级三级结构预测及绘图"><a href="#1-蛋白二级三级结构预测及绘图" class="headerlink" title="1.蛋白二级三级结构预测及绘图"></a>1.蛋白二级三级结构预测及绘图</h5><ul><li>CFSSP [<a href="http://www.biogem.org/tool/chou-fasman/]">http://www.biogem.org/tool/chou-fasman/]</a></li><li>SOPMA [<a href="https://npsa-prabi.ibcp.fr/cgi-bin/npsa_automat.pl?page=npsa_sopma.html%5D">https://npsa-prabi.ibcp.fr/cgi-bin/npsa_automat.pl?page=npsa_sopma.html]</a></li><li>PredictProtein [<a href="https://www.predictprotein.org/]">https://www.predictprotein.org/]</a></li><li>SWISS-MODEL [<a href="https://swissmodel.expasy.org/interactive]">https://swissmodel.expasy.org/interactive]</a></li></ul><h5 id="2-蛋白特性分析"><a href="#2-蛋白特性分析" class="headerlink" title="2.蛋白特性分析"></a>2.蛋白特性分析</h5><ul><li><p>ProtParam [<a href="http://web.expasy.org/protparam/]">http://web.expasy.org/protparam/]</a></p><p>蛋白特性分析是指蛋白的一些物理和化学参数，如分子量、等电点、氨基酸和原子组成、消光系数、半衰期、不稳定系数、脂肪族氨基酸指数、亲水性。这些参数，有助于进行蛋白的相关生化实验。比如在体外体系（大肠杆菌、酵母等）表达和纯化目的蛋白时，需要考虑蛋白的分子量、等电点、消光系数、不稳定系数和亲水性等。在酶活实验中，也需要根据这些参数优化实验体系。</p></li></ul><h5 id="3-蛋白亲疏水性分析"><a href="#3-蛋白亲疏水性分析" class="headerlink" title="3.蛋白亲疏水性分析"></a>3.蛋白亲疏水性分析</h5><ul><li><p>Protscale [<a href="https://web.expasy.org/protscale/]">https://web.expasy.org/protscale/]</a></p><p>蛋白氨基酸的亲疏水性主要由其侧链基团R，如果R只是H或是C、H两元素组成的话，都是疏水的，如果含有极性侧链基团，如-OH、-SH、-COOH、-NH2 等，则就是极性的（亲水的）。疏水性氨基酸有酪氨酸、色氨酸、苯丙氨酸、缬氨酸、亮氨酸、异亮氨酸、丙氨酸和蛋氨酸（甲硫氨酸）。疏水性氨基酸在蛋白质内部，在保持蛋白质的三级结构上，酶和基质、抗体和抗原间的相互作用等各种非共价键的分子结合方面，具有重要作用。</p></li></ul><h5 id="4-跨膜结构分析"><a href="#4-跨膜结构分析" class="headerlink" title="4.跨膜结构分析"></a>4.跨膜结构分析</h5><ul><li><p>TMHMM [<a href="http://www.cbs.dtu.dk/services/TMHMM/]">http://www.cbs.dtu.dk/services/TMHMM/]</a></p><p>蛋白的跨膜结构分析对于预测蛋白的亚细胞定位密切相关。如果具有跨膜结构，蛋白很可能定位于细胞中与膜相关的结构，如细胞质膜、叶绿体膜或线粒体膜等内膜系统。此外，蛋白跨膜结构分析对于蛋白功能分析也有一定的帮助。比如某蛋白没有跨膜结构，但是亚细胞定位实验显示其可定位于膜相关结构，这说明该蛋白可能通过其他膜定位蛋白招募过去的。</p></li></ul><h5 id="5-信号肽分析"><a href="#5-信号肽分析" class="headerlink" title="5.信号肽分析"></a>5.信号肽分析</h5><ul><li><p>SignalP [<a href="http://www.cbs.dtu.dk/services/SignalP/]">http://www.cbs.dtu.dk/services/SignalP/]</a></p><p>峰信号位置为信号肽切割点，峰之前的序列为信号肽</p><p>信号肽是指引导新合成的蛋白质向分泌通路转移的短肽链，常位于蛋白的N-末端，负责把蛋白质引导到不同膜结构的亚细胞器内。编码分泌蛋白的mRNA在翻译时首先合成N末端的信号肽，它被信号肽识别蛋白(SRP)所识别，SRP将核糖体携带至内质网上，内质网膜上的 SPR 受体识别并与之结合。新合成蛋白在信号肽引导下到达内质网内腔，而信号肽则在信号肽酶的作用下被切除。由于它的引导，新生的多肽就能够通过内质网膜进入腔内，最终被分泌到胞外。在宿主菌中表达外源蛋白时，可用信号肽引导外源蛋白定位分泌到胞外，提高蛋白可溶性，在原核表达系统（大肠杆菌、芽孢杆菌等）和真核表达系统（如毕赤酵母）中均有应用。</p></li></ul><h5 id="6-磷酸化位点分析"><a href="#6-磷酸化位点分析" class="headerlink" title="6.磷酸化位点分析"></a>6.磷酸化位点分析</h5><ul><li><p>NetPhos [<a href="http://www.cbs.dtu.dk/services/NetPhos/]">http://www.cbs.dtu.dk/services/NetPhos/]</a></p></li><li><p>KinasePhos-2.0 [<a href="http://kinasephos2.mbc.nctu.edu.tw/]">http://kinasephos2.mbc.nctu.edu.tw/]</a></p><p>蛋白质磷酸化指由蛋白质激酶催化的把 ATP 的磷酸基转移到底物蛋白质氨基酸残基（丝氨酸、苏氨酸、酪氨酸）上的过程，或者在信号作用下结合 GTP（通常以 GTP 取代 GDP），是生物体内一种普通的调节方式，在细胞信号转导的过程中起重要作用。在信号达到时通过获得一个或几个磷酸集团而被激活，而在信号减弱时能去除这些集团，从而失去活性。有时某个信号蛋白磷酸化通常造成下游的蛋白依次发生磷酸化，形成磷酸化级联反应。</p></li></ul><blockquote><p>参考:</p><p><a href="http://www.pathguide.org/">http://www.pathguide.org</a><br><a href="https://www.jianshu.com/p/e09dd3db76c3?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=weixin_timeline&from=timeline">https://www.jianshu.com/p/e09dd3db76c3?utm_campaign=haruki&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weixin_timeline&amp;from=timeline</a><br><a href="http://m.sohu.com/a/202115741_629408">http://m.sohu.com/a/202115741_629408</a><br><a href="https://bigd.big.ac.cn/?lang=zh">https://bigd.big.ac.cn/?lang=zh</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 在线工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请并设置 https 证书，开始网站安全之旅 (详细图文干货)</title>
      <link href="/posts/46027/"/>
      <url>/posts/46027/</url>
      
        <content type="html"><![CDATA[<p>进入阿里云证书购买页面 <a href="https://yundunnext.console.aliyun.com/">https://yundunnext.console.aliyun.com</a><br><img src="https://img-blog.csdnimg.cn/20190819193938242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>购买证书<br><img src="https://img-blog.csdnimg.cn/20190819194102737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190819194250965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190819194328734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按要求填写信息，下一步</p><blockquote><p>注意域名为 <code>www.ziptop.top</code>这样的格式不加协议名</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190819194633669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用DNS验证，申请完基本就可以下载啦<br><img src="https://img-blog.csdnimg.cn/20190819194821955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后刷新页面，会发现证书已经签发，点击<code>下载</code>备用<br><img src="https://img-blog.csdnimg.cn/20190819195149660.png" alt="在这里插入图片描述"><br>在宝塔中设置证书<br>进入网站设置<br><img src="https://img-blog.csdnimg.cn/20190819200351767.png" alt="在这里插入图片描述"><br>粘贴刚刚申请到的证书，并强制HTTPS<br><img src="https://img-blog.csdnimg.cn/20190819200300731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>回到浏览器查看是否已经生效<br><img src="https://img-blog.csdnimg.cn/20190819200504685.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> https </tag>
            
            <tag> https证书 </tag>
            
            <tag> 证书申请 </tag>
            
            <tag> 免费 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress 更新及主题更新的FTP问题</title>
      <link href="/posts/62343/"/>
      <url>/posts/62343/</url>
      
        <content type="html"><![CDATA[<ul><li>安装好 WordPress</li><li>进入网站根目录，新建<code>tmp</code>,赋权限  <figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">cd wp-content<br>mkdir tmp<br>chmod -R 777 tmp<br></code></pre></td></tr></table></figure></li><li>设置根目录配置文件<code>wp-config.php</code>：  <figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">vim wp-config.php<br></code></pre></td></tr></table></figure><ul><li>找到如下：  <figure class="highlight php"><table><tr><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/** WordPress目录的绝对路径。 */</span><br><span class="hljs-keyword">if</span> ( ! <span class="hljs-title function_ invoke__">defined</span>( <span class="hljs-string">&#x27;ABSPATH&#x27;</span> ) ) &#123;<br>        <span class="hljs-title function_ invoke__">define</span>( <span class="hljs-string">&#x27;ABSPATH&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>( <span class="hljs-keyword">__FILE__</span> ) . <span class="hljs-string"><code class="language-hljs php"><span class="hljs-comment">/** WordPress目录的绝对路径。 */</span><br><span class="hljs-keyword">if</span> ( ! <span class="hljs-title function_ invoke__">defined</span>( <span class="hljs-string">&#x27;ABSPATH&#x27;</span> ) ) &#123;<br>        <span class="hljs-title function_ invoke__">define</span>( <span class="hljs-string">&#x27;ABSPATH&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>( <span class="hljs-keyword">__FILE__</span> ) . <span class="hljs-string">&#x27;/&#x27;</span> );<br>&#125;<br></code></pre></td></tr></table></figure></li><li>注意我们添加的是四个<code>define ***</code>其他不用改动  <figure class="highlight php"><table><tr><td class="code"><pre class=" language-hljs php"><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WP_TEMP_DIR&#x27;</span>,ABSPATH.<span class="hljs-string">&#x27;wp-content/tmp&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_METHOD&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_CHMOD_DIR&quot;</span>,<span class="hljs-number">0777</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_CHMOD_FILE&quot;</span>,<span class="hljs-number"><code class="language-hljs php"><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WP_TEMP_DIR&#x27;</span>,ABSPATH.<span class="hljs-string">&#x27;wp-content/tmp&#x27;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_METHOD&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_CHMOD_DIR&quot;</span>,<span class="hljs-number">0777</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FS_CHMOD_FILE&quot;</span>,<span class="hljs-number">0777</span>);<br></code></pre></td></tr></table></figure></li><li>编辑完，保存，回车</li></ul></li><li>返回wp-content目录  <figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">cd wp-content<br>chmod -R 777 plugins<br>chmod -R 777 themes<br></code></pre></td></tr></table></figure></li><li>现在返回WordPress，就可以直接安装主题并更新<br><img src="https://img-blog.csdnimg.cn/20190819193336293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> WordPress </tag>
            
            <tag> ftp </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>version `ZLIB 1.2.3.3&#39; not found 解决</title>
      <link href="/posts/62644/"/>
      <url>/posts/62644/</url>
      
        <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>version &#96;ZLIB_1.2.3.3’ not found</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>下载 zlib-1.2.8.tar.gz<br>链接：<a href="https://pan.baidu.com/s/1SNP_BDvEi2cLs17Jx3Cl6w">https://pan.baidu.com/s/1SNP_BDvEi2cLs17Jx3Cl6w</a><br>提取码：w2kt </li><li>编译，安装，重写软链  <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar zxf zlib-1.2.8.tar.gz<br>cd zlib-1.2.8<br>./configure<br>make && make install<br>/usr/local/lib/libz.so.1.2.8 /lib64/<br>cd /lib64/<br>mv libz.so.1 libz.so.1_bk<br>ln -s libz.so.1.2.8 libz.so.1<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> zlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>version `GLIBC_2.14&#39; not found 问题解决</title>
      <link href="/posts/15313/"/>
      <url>/posts/15313/</url>
      
        <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>&#x2F;lib64&#x2F;libc.so.6: version &#96;GLIBC_2.14’ not found</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用命令查看是否存在GLIBC_2.14<br><code>strings /lib64/libc.so.6 | grep GLIBC</code><br>如果没有运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">wget http://ftp.gnu.org/gnu/glibc/glibc-2.17.tar.gz<br>tar -xf glibc-2.17.tar.gz<br>cd glibc-2.17<br>mkdir build<br>cd build<br>../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin<br>make -j 8<br>make install<br>strings /lib64/libc.so.6 | grep GLIBC<br></code></pre></td></tr></table></figure><p>如果显示如下，问题解决</p><blockquote><p>GLIBC_2.2.5<br>GLIBC_2.2.6<br>GLIBC_2.3<br>GLIBC_2.3.2<br>GLIBC_2.3.3<br>GLIBC_2.3.4<br>GLIBC_2.4<br>GLIBC_2.5<br>GLIBC_2.6<br>GLIBC_2.7<br>GLIBC_2.8<br>GLIBC_2.9<br>GLIBC_2.10<br>GLIBC_2.11<br>GLIBC_2.12<br>GLIBC_2.13<br>GLIBC_2.14<br>GLIBC_2.15<br>GLIBC_2.16<br>GLIBC_2.17<br>GLIBC_PRIVATE</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> libc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm + Git + Github 搭建版本控制环境</title>
      <link href="/posts/63813/"/>
      <url>/posts/63813/</url>
      
        <content type="html"><![CDATA[<h2 id="Git安装及设置"><a href="#Git安装及设置" class="headerlink" title="Git安装及设置"></a>Git安装及设置</h2><ol><li>下载<br><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装，这里需要记住安装目录，比如<code>D:\Program Files\Git</code><br><img src="https://img-blog.csdnimg.cn/20190727133004391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.生成SSH keys，它用于GitHub识别我们的电脑，建立安全的传输链接</li></ol><ul><li><code>cd ~/.ssh/</code><br><img src="https://img-blog.csdnimg.cn/20190727143305670.png" alt="在这里插入图片描述"><blockquote><p>如果没有该文件夹<code>mkdir ~/.ssh/</code></p></blockquote></li><li><code>git config --global user.name &quot;your_github_name&quot;</code><br> <code>git config --global user.email &quot;your_github_email&quot;</code></li><li>生成Key：<code>ssh-keygen -t rsa -C &quot;your_github_email&quot;</code><br>一直回车，默认就好 </li><li>下面的白字描述会有key的路径信息，后面设置需要用到<br><img src="https://img-blog.csdnimg.cn/20190727143246119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="GitHub设置"><a href="#GitHub设置" class="headerlink" title="GitHub设置"></a>GitHub设置</h2><ul><li>进入<a href="https://github.com/%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E7%9A%84%E8%AF%9D%E5%85%88%E6%B3%A8%E5%86%8C">https://github.com/，如果没有的话先注册</a></li><li>点击设置选项<br><img src="https://img-blog.csdnimg.cn/20190729093343828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>创建SSH keys<br><img src="https://img-blog.csdnimg.cn/2019072714062215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>进入生成key的路径，比如我的是<code>C:\Users\Administrator\.ssh</code>，找到<code>id_rsa.pub</code>文件，</li><li>用记事本或其他编辑器打开，将文本全部复制到<code>Key</code>文本框中，<code>Title</code>可以取个名字，比如我的是<code>BAIMOC</code>，保存<br><img src="https://img-blog.csdnimg.cn/20190727141202309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>我们就成功创建了一个SSH keys<br><img src="https://img-blog.csdnimg.cn/20190727142822356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>现在测试下远程的GitHub仓库可不可以和我们的本地电脑建立链接，在桌面右键进入<code>Git Bash</code><br> <img src="https://img-blog.csdnimg.cn/20190729094235661.png" alt="在这里插入图片描述"></li><li>如果显示如下信息，代表设置成功<br><img src="https://img-blog.csdnimg.cn/20190727143122575.png" alt="在这里插入图片描述"></li></ul><h2 id="Pycharm设置"><a href="#Pycharm设置" class="headerlink" title="Pycharm设置"></a>Pycharm设置</h2><ul><li>进入GitHub账户信息设置面板<br><img src="https://img-blog.csdnimg.cn/20190727131757670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>添加账户信息<br><img src="https://img-blog.csdnimg.cn/20190727132142334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>设置Git<br><img src="https://img-blog.csdnimg.cn/20190727133454718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="使用版本控制"><a href="#使用版本控制" class="headerlink" title="使用版本控制"></a>使用版本控制</h2><ul><li>将当前项目同步到GitHub仓库<br><img src="https://img-blog.csdnimg.cn/20190727133723789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>根据自己的实际情况，设置如下信息<code>baimoc</code>为GitHub的仓库名，<code>Private</code> 表示私有库（别人不可访问），<code>origin</code>远程仓库名<br><img src="https://img-blog.csdnimg.cn/20190727134056408.png" alt="在这里插入图片描述"></li><li>接着Pycharm会提示，要同步哪些文件，根据需要上传，默认全选<br><img src="https://img-blog.csdnimg.cn/20190727134251856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果上传成功，会显示<br><img src="https://img-blog.csdnimg.cn/20190729100327882.png" alt="在这里插入图片描述"></li><li>在GitHub仓库中<br><img src="https://img-blog.csdnimg.cn/20190729100215853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>一般的提交，拉取等操作在右上角<br><img src="https://img-blog.csdnimg.cn/20190729100504436.png" alt="在这里插入图片描述"></li><li>如果需要其他操作，可以右键项目<br><img src="https://img-blog.csdnimg.cn/2019072910063076.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pycharm </tag>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度搜索_屏蔽百家号</title>
      <link href="/posts/34628/"/>
      <url>/posts/34628/</url>
      
        <content type="html"><![CDATA[<p>搜索内容后加<code>-(baijiahao)</code>，会屏蔽大部分推广和百家号的连接，看到更加清爽的界面：<br><img src="https://img-blog.csdnimg.cn/2019072311583843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>原版的感受下：<br><img src="https://img-blog.csdnimg.cn/20190723120208765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 闲聊杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 百度 </tag>
            
            <tag> 百家号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔中部署 ThinkPHP5（tp5）</title>
      <link href="/posts/4477/"/>
      <url>/posts/4477/</url>
      
        <content type="html"><![CDATA[<h5 id="添加站点："><a href="#添加站点：" class="headerlink" title="添加站点："></a>添加站点：</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTIvU3pyUnp3aTFEbzhTLnBuZw" alt="mark"></p><h5 id="站点设置："><a href="#站点设置：" class="headerlink" title="站点设置："></a>站点设置：</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTIvNFU0dU1oS2dYTGhILnBuZw" alt="mark"></p><h5 id="设置运行目录："><a href="#设置运行目录：" class="headerlink" title="设置运行目录："></a>设置运行目录：</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTIvQ3pZc3E3R2FsTUxwLnBuZw" alt="mark"></p><h5 id="设置伪静态规则："><a href="#设置伪静态规则：" class="headerlink" title="设置伪静态规则："></a>设置伪静态规则：</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTIvRjdJRGVuNGlRTVdjLnBuZw" alt="mark"></p><p>填写规则如下（也可以点击左上角的下拉框选<code>thinkphp</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">location / &#123;<br>if (!-e $request_filename)&#123;<br>rewrite  ^(.*)$  /index.php?s=$1  last;   break;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTIvV21qaTJQd3N5c3A0LnBuZw" alt="mark"></p><h5 id="其他检测项："><a href="#其他检测项：" class="headerlink" title="其他检测项："></a>其他检测项：</h5><ul><li>thinkPHP 版本  &gt; 5</li><li>PHP 版本 5.4</li><li>ThinkPHP route.php 规则是否添加</li><li>ThinkPHP config.php 设置是否为<code>&#39;url_route_on&#39; =&gt; true</code></li><li>ThinkPHP 文件夹与文件命名大小写问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> thinkPHP5 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCBI生物分类数据库（Taxonomy）</title>
      <link href="/posts/11014/"/>
      <url>/posts/11014/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Taxonomy : NCBI公共序列数据库中所有生物的策划分类和命名法。目前包含地球上大概10%的物种。 我们现在查询到底包含有有多少物种，进入<a href="https://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/index.cgi?chapter=STATISTICS&uncultured=hide&unspecified=hide">统计页面</a>：。可以看到不同的分类下的分布情况，总体包含有<code>597658</code>条物种信息。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvb2pzQUdudTdNV3V3LnBuZw" alt="mark"></p><h4 id="查询某个物种的全部核酸序列和蛋白序列"><a href="#查询某个物种的全部核酸序列和蛋白序列" class="headerlink" title="查询某个物种的全部核酸序列和蛋白序列"></a>查询某个物种的全部核酸序列和蛋白序列</h4><ol><li><p>进入 <a href="https://www.ncbi.nlm.nih.gov/">NCBI 首页</a></p></li><li><p>点击<code>Taxonomy</code>，进入物种分类数据库</p></li></ol><p>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvV0J2T0tXTFZtemo4LnBuZw" alt="mark"></p><ol start="3"><li>进入 Taxonomy 首页，输入<code>human</code>，点击<code>Search</code></li></ol><p>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvSEVSdUdIRlhYTGxCLnBuZw" alt="mark"></p><ol start="4"><li><p>浏览该物种下的核酸序列或蛋白序列，直接点击<code>Nucleotide</code>或者<code>Protein</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvamp5eDZ6Ukk5blVwLnBuZw" alt="mark"></p></li><li><p>浏览核酸序列列表，数量远远超过了所预想的数量，因为这里包含的是与 Nucleotide 相关的该物种的信息</p></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvTkpuTjFYTXR2TnViLnBuZw" alt="mark"></p><ol start="6"><li><p>选择左栏的<code>Viruses</code>切换显示物种，可以看到有好多病毒的整合位点信息。你也可以点击左栏来筛选其他你想要的信息，比如<code>mRNA</code>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvcnBoSUtqb1VoNzM2LnBuZw" alt="mark"></p></li></ol><h4 id="查看某个物种的其他信息（蛋白结构，基因，测序数据，相关文献等）"><a href="#查看某个物种的其他信息（蛋白结构，基因，测序数据，相关文献等）" class="headerlink" title="查看某个物种的其他信息（蛋白结构，基因，测序数据，相关文献等）"></a>查看某个物种的其他信息（蛋白结构，基因，测序数据，相关文献等）</h4><blockquote><p><a href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Root">https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Root</a></p></blockquote><ol><li><p>进入首页，我们以人类为例：输入<code>human</code>，点击<code>Go</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvYjFtSlNISDNhR01hLnBuZw" alt="mark"></p></li><li><p>点击<code>Homo sapiens</code></p></li></ol><p>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvODIwcFZzbTBSbUs3LnBuZw" alt="mark"></p><ol start="3"><li>大家会看到在NCBI中关于人类的目前几乎全部的生物数据。左栏显示人类拉丁名<code>Homo sapiens</code>，Taxonomy编号为<code>txid9606</code>，基因密码子表，线粒体密码子表等。</li></ol><p>  右栏展示与人相关的数据，常用的包括</p><ul><li><code>Nucleotide</code>: 核酸序列</li><li><code>Protein</code>: 蛋白序列</li><li><code>Structure</code>: 蛋白结构（大部分来源于PDB数据库）</li><li><code>SNP</code>: 单位点突变数据</li><li><code>GEO Datasets</code>&#x2F;<code>SRA Experiments</code>&#x2F;<code>GEO Profiles</code>: 用于储存公共测序数据，这个包含之前的芯片数据，也有目前大部分的高通量测序</li><li><code>PubMed Central</code>: 文献</li><li><code>Gene</code>: 基因信息</li></ul><blockquote><p>Taxonomy 编号在查询和标注信息时候常常用到，比如，在<code>Nucleotide</code>中查询现代智人的时候：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvZmlVN0FlSDNPSmxRLnBuZw" alt="mark"></p></blockquote><p>  <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvYlJhMXd4eGtJcHRiLnBuZw" alt="mark"></p><h4 id="Taxonomy-的相关数据下载"><a href="#Taxonomy-的相关数据下载" class="headerlink" title="Taxonomy 的相关数据下载"></a>Taxonomy 的相关数据下载</h4><blockquote><p><a href="ftp://ftp.ncbi.nih.gov/pub/taxonomy/">ftp://ftp.ncbi.nih.gov/pub/taxonomy/</a></p></blockquote><h5 id="1-gi-taxid-标识的数据"><a href="#1-gi-taxid-标识的数据" class="headerlink" title="1. gi_taxid 标识的数据"></a>1. gi_taxid 标识的数据</h5><p>NCBI早在2016年已经宣布逐渐停用，这部分信息不再关注</p><h5 id="2-taxcat-标识的数据"><a href="#2-taxcat-标识的数据" class="headerlink" title="2. taxcat 标识的数据"></a>2. taxcat 标识的数据</h5><p>ncbi提供有不同格式的压缩包，解压后都只有一个<code>categories.dmp</code>文件。打开该文件，包含三列信息，三列代表的不同的分类层次。</p><ul><li><p>第一列：代表分类的顶级类别(top-level category)，字母分别代表不同分类名（古菌，细菌，真核生物，病毒和类病毒，未分类，其他）</p><blockquote><p>  A &#x3D; Archaea<br>  B &#x3D; Bacteria<br>  E &#x3D; Eukaryota<br>  V &#x3D; Viruses and Viroids<br>  U &#x3D; Unclassified<br>  O &#x3D; Other</p></blockquote></li><li><p>第二列：相应的物种级别(species-level)的<code>taxid</code></p></li><li><p>第三列：<code>taxid</code>本身</p></li></ul><h6 id="以尼安德特人（taxid：63221）为例"><a href="#以尼安德特人（taxid：63221）为例" class="headerlink" title="以尼安德特人（taxid：63221）为例"></a>以尼安德特人（taxid：63221）为例</h6><p>查看<code>categories.dmp</code>文件（下面命令代表去categories文件中查找63221并显示）:</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">cat categories.dmp | grep 63221<br></code></pre></td></tr></table></figure><p>结果如下，第一行即为63221（taxid）代表尼安德特人：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MDgvekI3YXdHRUFtcTFlLnBuZw" alt="mark"></p><p>我们现在可以描述尼安德特人（taxid：63221）属于真核生物（E）里的智人（taxid：9606）类的一个分支。</p><h5 id="3-taxdump-标识的数据"><a href="#3-taxdump-标识的数据" class="headerlink" title="3. taxdump 标识的数据"></a>3. taxdump 标识的数据</h5><p>同样提供不同格式的压缩包，解压<code>gunzip -c taxdump.tar.gz | tar xf - </code>后包含7个文件:</p><ul><li><p><code>citations.dmp</code>：与某个物种（taxid表示）的文献信息：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvdHlmYXhGNUxNbDF6LnBuZw" alt="mark"></p><ul><li>it_id：the unique id of citation</li><li>cit_key：citation key</li><li>medline_id：unique id in MedLine database (0 if not in MedLine)</li><li>pubmed_id：unique id in PubMed database (0 if not in PubMed)</li><li>url：URL associated with citation</li><li>text：any text (usually article name and authors)<br>：The following characters are escaped in this text by a backslash:<br>：newline (appear as “\n”),<br>：tab character (“\t”),<br>：double quotes (‘&quot;‘),<br>：backslash character (“\“).</li><li>taxid_list：list of node ids separated by a single space</li></ul></li><li><p><code>names.dmp</code>：存储 taxid 对应的物种名信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvNHF1QUtmTlcyMlRjLnBuZw" alt="mark"></p><ul><li>tax_id：the id of node associated with this name</li><li>name_txt：name itself</li><li>unique name：the unique variant of this name if name not unique</li><li>name class：(synonym, common name, …)</li></ul></li><li><p><code>nodes.dmp</code>：存储 taxid对应的多级节点信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvQ21TbGIwNUtoUGN6LnBuZw" alt="mark"></p><ul><li>tax_id：node id in GenBank taxonomy database</li><li>parent tax_id：parent node id in GenBank taxonomy database</li><li>rank：rank of this node (superkingdom, kingdom, …) </li><li>embl code：locus-name prefix; not unique</li><li>division id：see division.dmp file</li><li>inherited div flag  (1 or 0)： 1 if node inherits division from parent</li><li>genetic code id：see gencode.dmp file</li><li>inherited GC  flag  (1 or 0)：  if node inherits genetic code from parent</li><li>mitochondrial genetic code id： – see gencode.dmp file</li><li>inherited MGC flag  (1 or 0)： – 1 if node inherits mitochondrial gencode </li><li>GenBank hidden flag (1 or 0) ：  – 1 if name is suppressed in GenBank entry</li><li>hidden subtree root flag (1 or 0) ：  – 1 if this subtree has no sequence data yet</li><li>comments：free-text comments and citations</li></ul></li><li><p><code>delnodes.dmp</code>：已经删除不用的节点信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvM0pYVTR1NERkTlVELnBuZw" alt="mark"></p></li><li><p><code>division.dmp</code>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvYlBJWFA2QjQ0Q2ZTLnBuZw" alt="mark"></p><ul><li>division id：taxonomy database division id</li><li>division cde：GenBank division code (three characters)</li><li>division name：e.g. BCT, PLN, VRT, MAM, PRI…</li><li>comments</li></ul></li><li><p><code>gencode.dmp</code>：密码子表信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvV1hBSlNjR0RhV0hBLnBuZw" alt="mark"></p><ul><li>genetic code id：GenBank genetic code id</li><li>abbreviation：genetic code name abbreviation</li><li>name：genetic code name</li><li>cde：translation table for this genetic code</li><li>starts：start codons for this genetic code</li></ul></li><li><p><code>merged.dmp</code>：记录新taxid替换旧taxid的信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA3MTAvR1VOdE0xMFBReUFhLnBuZw" alt="mark"></p><ul><li>old_tax_id：id of nodes which has been merged</li><li>new_tax_id：id of nodes which is result of merging</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ncbi </tag>
            
            <tag> taxonomy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 技巧 （更新中）</title>
      <link href="/posts/37484/"/>
      <url>/posts/37484/</url>
      
        <content type="html"><![CDATA[<h4 id="获取数组键值"><a href="#获取数组键值" class="headerlink" title="获取数组键值"></a>获取数组键值</h4><figure class="highlight php"><table><tr><td class="code"><pre class=" language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span>=[<br><span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-string">&#x27;tom&#x27;</span>,<br><span class="hljs-string">&#x27;age&#x27;</span>=&gt;<span class="hljs-string">&#x27;12&#x27;</span>,<br><span class="hljs-string">&#x27;school&#x27;</span>=&gt;<span class="hljs-string">&#x27;&#x27;</span><br>];<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_keys</span>(<span class="hljs-variable">$arr</span>));  <span class="hljs-comment">//获取键</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_values</span>(<span class="hljs-variable">$arr</span>));<span class="hljs-comment"><code class="language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span>=[<br><span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-string">&#x27;tom&#x27;</span>,<br><span class="hljs-string">&#x27;age&#x27;</span>=&gt;<span class="hljs-string">&#x27;12&#x27;</span>,<br><span class="hljs-string">&#x27;school&#x27;</span>=&gt;<span class="hljs-string">&#x27;&#x27;</span><br>];<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_keys</span>(<span class="hljs-variable">$arr</span>));  <span class="hljs-comment">//获取键</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_values</span>(<span class="hljs-variable">$arr</span>));<span class="hljs-comment">//获取值</span><br></code></pre></td></tr></table></figure><h4 id="数组拼合字符串"><a href="#数组拼合字符串" class="headerlink" title="数组拼合字符串"></a>数组拼合字符串</h4><figure class="highlight php"><table><tr><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">to_line</span>(<span class="hljs-params"><span class="hljs-variable">$arrs</span></span>)</span>&#123;<br><span class="hljs-variable">$line</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$arrs</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$keys</span>=&gt;<span class="hljs-variable">$vals</span>)&#123;<br><span class="hljs-variable">$line</span> .= <span class="hljs-variable">$vals</span>.<span class="hljs-string">&#x27;\t&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">rtrim</span>(<span class="hljs-variable">$line</span>, <span class="hljs-string">&#x27;\t&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>.<span class="hljs-string"><code class="language-hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">to_line</span>(<span class="hljs-params"><span class="hljs-variable">$arrs</span></span>)</span>&#123;<br><span class="hljs-variable">$line</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$arrs</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$keys</span>=&gt;<span class="hljs-variable">$vals</span>)&#123;<br><span class="hljs-variable">$line</span> .= <span class="hljs-variable">$vals</span>.<span class="hljs-string">&#x27;\t&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">rtrim</span>(<span class="hljs-variable">$line</span>, <span class="hljs-string">&#x27;\t&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>.<span class="hljs-string">"\n"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h4><figure class="highlight php"><table><tr><td class="code"><pre class=" language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 把字符串 &quot;Name\tAge\n&quot; 中的字符 &quot;\t&quot; 替换为 &quot;,&quot;：</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;Name\tAge\n&quot;</span>);<br><span class="hljs-meta"><code class="language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 把字符串 &quot;Name\tAge\n&quot; 中的字符 &quot;\t&quot; 替换为 &quot;,&quot;：</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;Name\tAge\n&quot;</span>);<br><span class="hljs-meta">?></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 技巧合集 (更新)</title>
      <link href="/posts/61931/"/>
      <url>/posts/61931/</url>
      
        <content type="html"><![CDATA[<p>1、 统计每列不同值出现的频数<br><code>SELECT column_name,count(*) num  FROM table_name GROUP BY column_name</code></p><p>2、 查询所有字段名<br><code>select COLUMN_NAME,DATA_TYPE,COLUMN_COMMENT from information_schema.COLUMNS where table_name = &#39;表名&#39; and table_schema = &#39;数据库名称&#39;;</code></p><p>3、 将查询结果插入表<br><a href="https://blog.csdn.net/u011262253/article/details/87954421">https://blog.csdn.net/u011262253/article/details/87954421</a></p><p>4、 数据库的导入和导出<br><a href="https://blog.csdn.net/u011262253/article/details/78319341">https://blog.csdn.net/u011262253/article/details/78319341</a></p><p>5、 数据库密码重置<br><a href="https://blog.csdn.net/u011262253/article/details/72152639">https://blog.csdn.net/u011262253/article/details/72152639</a></p><p>6、 数据库去重查询<br><code>SELECT DISTINCT column_name FROM table_name</code><br><code>SELECT column_name FROM table_name GROUP BY column_name</code></p><p>7.去重留一<br><code>SELECT go_id, go_term, category,tax_id from ncbi_gene_go_hg_mm_main GROUP BY go_id HAVING count(*) &gt; 1</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql报错：1030 Got error 28 from storage engine</title>
      <link href="/posts/45803/"/>
      <url>/posts/45803/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>磁盘临时存储不够，&#x2F;tmp或者在my.cnf指定的目录满啦</li><li>还有可能是用户目录存储不够，可以运行<code>df -h</code>查看，如下可以看到100%爆满<br><img src="https://img-blog.csdnimg.cn/20190620100233682.png" alt="在这里插入图片描述"></li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>对于第一种问题解决方法：<br>方法一：清空&#x2F;tmp<br><code>rm -rf /tmp/*</code><br>方法二：修改my.cnf中的tmpdir参数，指向具有新的暂存目录<br>方法三：查找大文件<code>du -h --max-depth=1|grep G|sort -n</code></li><li>对于第二种问题解决方法：<br>方法一：查找该用户的家目录，删除没用的数据<br>方法二：<a href="https://www.jianshu.com/p/ed201ae501d8">https://www.jianshu.com/p/ed201ae501d8</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D3入门篇 01 | 选择集及数据处理</title>
      <link href="/posts/1551/"/>
      <url>/posts/1551/</url>
      
        <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>select()</td><td>匹配的<strong>第一个</strong>元素</td></tr><tr><td>selectAll()</td><td>匹配的<strong>所有</strong>元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre class=" language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>D3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap/bootstrap.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery/jquery-3.2.1.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap/bootstrap.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/d3/d3.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>D3 选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-success&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Well done!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-info&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Heads up!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-warning&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Warning!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Oh snap!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----select------</span></span><br><span class="language-javascript">body = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript">success = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;#success&quot;</span>);</span><br><span class="language-javascript">alert = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;.alert&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----selectAll------</span></span><br><span class="language-javascript">divs = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript">alerts = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;.alert&quot;</span>);</span><br><span class="language-javascript">lis = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;ul li&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----连缀语法------</span></span><br><span class="language-javascript">divs2 = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(success);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alert);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alerts);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs2);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alerts.<span class="hljs-title function_">empty</span>())</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>D3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap/bootstrap.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery/jquery-3.2.1.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap/bootstrap.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/d3/d3.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>D3 选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-success&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Well done!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-info&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Heads up!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-warning&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Warning!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>Oh snap!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>l3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----select------</span></span><br><span class="language-javascript">body = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript">success = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;#success&quot;</span>);</span><br><span class="language-javascript">alert = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;.alert&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----selectAll------</span></span><br><span class="language-javascript">divs = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript">alerts = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;.alert&quot;</span>);</span><br><span class="language-javascript">lis = d3.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;ul li&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//-----连缀语法------</span></span><br><span class="language-javascript">divs2 = d3.<span class="hljs-title function_">select</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(success);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alert);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alerts);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs2);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alerts.<span class="hljs-title function_">empty</span>())</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></table></figure><h2 id="选择集属性"><a href="#选择集属性" class="headerlink" title="选择集属性"></a>选择集属性</h2><blockquote><p>选择器返回结果即为选择集</p></blockquote><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>selection.<strong>empty</strong>()</td><td>选择集为空，返回Ture，反之亦然</td></tr><tr><td>selection.<strong>node</strong>()</td><td>选中集非空，返回第一个非空元素，选择集为空，返回null</td></tr><tr><td>selection.<strong>size</strong>()</td><td>选中集的元素个数</td></tr></tbody></table><h2 id="选择集操作"><a href="#选择集操作" class="headerlink" title="选择集操作"></a>选择集操作</h2><table><thead><tr><th>函数</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td>selection.<strong>attr</strong>(name,value)</td><td>name：属性名<br />value：属性值</td><td>value为空时，返回当前属性值<br />Value非空是，设置name属性改为value值</td></tr><tr><td>selection.<strong>classed</strong>(name,value)<br />selection.<strong>classed</strong>{“name1”：true，“name2”，false})</td><td>name：类名<br />value：布尔值</td><td>value为空时，返回当前类的布尔值<br />Value非空是，设置name类名改为value值</td></tr><tr><td>selection.<strong>style</strong>(name,value)</td><td>name：样式名<br />value：样式值</td><td>value为空时，返回当前样式值<br />Value非空是，设置name样式名改为value值</td></tr><tr><td>selection.<strong>property</strong>(name,value)</td><td>name：属性名<br />value：属性值</td><td>value为空时，返回当前属性值<br />Value非空是，设置name属性改为value值</td></tr><tr><td>selection.<strong>text</strong>()</td><td></td><td>文本内容，不包含其他元素标签</td></tr><tr><td>selection.<strong>html</strong>()</td><td></td><td>包括元素内部标签</td></tr><tr><td></td><td></td><td></td></tr><tr><td>selection.<strong>append</strong>(name)</td><td>name：元素名</td><td>在选择集末尾<strong>添加</strong>元素</td></tr><tr><td>selection.<strong>insert</strong>(name，before)</td><td>name：元素名<br />before：选择器名称</td><td>在选择集指定元素前<strong>插入</strong>元素</td></tr><tr><td>selection.<strong>remove</strong>()</td><td></td><td><strong>删除</strong>选择集选中元素</td></tr><tr><td></td><td></td><td></td></tr><tr><td>selection.<strong>filter</strong>(func)</td><td>func：函数</td><td>根据func函数条件获取选择集的子集</td></tr><tr><td>selection.<strong>each</strong>(func)</td><td>func：函数</td><td>在func函数里对选择集的各个元素进行处理</td></tr><tr><td>selection.<strong>call</strong>(func)</td><td>func：函数</td><td>将选择集自身传递给func函数</td></tr><tr><td>selection.<strong>sort</strong>(func)</td><td>func：函数</td><td>根据func函数规则来排序</td></tr></tbody></table><blockquote><p>attr() 不能应用到文本框，复选框等一部分组件中，需要用property来获取值和设置值</p><p>设置文本空的值 d3.select(“#email”).property(“value”,”<a href="mailto:&#x31;&#50;&#x33;&#52;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#50;&#x33;&#52;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a>“)</p></blockquote><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><table><thead><tr><th>函数</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td>selection**.datum**(value)</td><td>value：数据值</td><td>选择集中每个元素都绑定相同的数据value</td></tr><tr><td>selection.<strong>data</strong>(values,key)</td><td>values：数组<br />key：键函数</td><td>选择集中每个元素都分别绑定数组values<br />key非空时，以key定义规则绑定数据</td></tr></tbody></table><blockquote><p>update &#x3D; selection.data(dataset)</p></blockquote><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>update.enter()</td><td>元素少于数据，需要让元素多“enter”几个，以此让所有数据都可以绑定到元素</td></tr><tr><td>update.exit()</td><td>元素多于数据，需要让元素多“exit”几个，因为没有多余的数据来让元素绑定</td></tr></tbody></table><blockquote><p><strong>通用处理模板：</strong></p><p>var dataset &#x3D; [1, 2, 3];</p><p>var p &#x3D; d3.select(“body”).selectAll(“p”);</p><p>var update &#x3D; p.data(dataset):</p><p>var enter &#x3D; update.enter();</p><p>var exit &#x3D; update.exit();</p><p>update.text(function(d){ return d; });</p><p>enter.append(“p”)</p><p>​.text( function(d) { return d; } );</p></blockquote><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>dataset &#x3D; [1, 2, 3, 4, 5, 6]</p></blockquote><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>dataset.sort( d3.<strong>ascending</strong> )</td><td>递增排序，<strong>直接修改</strong>数组</td></tr><tr><td>dataset.sort( d3.<strong>descending</strong> )</td><td>递减排序，<strong>直接修改</strong>数组</td></tr><tr><td>d3.shuffle( dataset )</td><td>随机排列，<strong>直接修改</strong>数组</td></tr><tr><td>d3.permute(dataset, indexs)</td><td>根据indexs来排序数组</td></tr><tr><td>d3.pairs( dataset )</td><td>返回 i 项和 i-1 项组成的对的数组</td></tr><tr><td>d3.range( start, stop, step )</td><td>等差数列</td></tr><tr><td>d3.merge( dataset1, dataset2 )</td><td>两个数组合并为一个</td></tr><tr><td>d3.zip( dataset1, dataset2, … )</td><td>多个数组构成二维数组( 矩阵 )</td></tr><tr><td>d3.transpose( matrix )</td><td>转置矩阵</td></tr></tbody></table><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>d3.map( dataset ,key )</td><td>构造映射</td></tr><tr><td>d3.has(key)</td><td>key 非空，返回 true</td></tr><tr><td>map.get(key)</td><td>key 非空，返回 value</td></tr><tr><td>map.set(key, value)</td><td>设置 key 为 value</td></tr><tr><td>map.remove(key)</td><td>key 非空，删除后，返回 true</td></tr><tr><td>map.keys()</td><td>返回所有 key</td></tr><tr><td>map.values()</td><td>返回所有 value</td></tr><tr><td>map.entries()</td><td>返回所有 key，value</td></tr><tr><td>map.forEach(function(k,v){})</td><td>对映射中的每一项调用function函数</td></tr><tr><td>map.empty()</td><td>map非空，返回 true</td></tr><tr><td>map.size()</td><td>映射大小</td></tr></tbody></table><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td>d3.min( dataset, accessor )</td><td>最小值</td></tr><tr><td>d3.max( dataset, accessor )</td><td>最大值</td></tr><tr><td>d3.extent( dataset, accessor )</td><td>最小值和最大值</td></tr><tr><td>d3.sum( dataset, accessor )</td><td>总和</td></tr><tr><td>d3.mean( dataset, accessor )</td><td>平均值</td></tr><tr><td>d3.median( dataset, accessor )</td><td>数据集的中位数</td></tr><tr><td>d3.quantile( dataset, p)</td><td>p分之位数，p&#x3D;0.25就是上四分位数</td></tr><tr><td>d3.variance( dataset, accessor )</td><td>方差</td></tr><tr><td>d3.deviation( dataset, accessor )</td><td>标准差</td></tr></tbody></table><blockquote><p>Accessor:数据访问器</p><p>min &#x3D; d3.min( dataset, function(d) { return d*3 });</p></blockquote><blockquote><p>在所有的统计函数中,是将undefined和NaN去掉后,再计算返回值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 可视化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> D3 </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基因组注释文件(GFF,GTF)下载的五种方法</title>
      <link href="/posts/2529/"/>
      <url>/posts/2529/</url>
      
        <content type="html"><![CDATA[<p><strong>这里提供基因组文件及基因组注释文件的多种下载方法，如果想了解不同版本查看：</strong><a href="https://zhenglei.blog.csdn.net/article/details/117486244">https://zhenglei.blog.csdn.net/article/details/117486244</a></p><h3 id="1、NCBI"><a href="#1、NCBI" class="headerlink" title="1、NCBI"></a>1、NCBI</h3><p>这里提供两种下载方式，一种为网页界面下载，另一种为FTP下载。</p><p><strong>可视化下载</strong></p><ul><li>进入网址</li></ul><p><a href="https://www.ncbi.nlm.nih.gov/genome/browse#!/overview/">https://www.ncbi.nlm.nih.gov/genome/browse#!/overview/</a></p><ul><li>搜索物种</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/2e3c1ef04c05abb7f5616dde2043021f.png" alt="image.png"></p><ul><li>下载界面</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/b18afddb8d058c3a300c7b4fed229500.png" alt="image.png"></p><p><strong>FTP下载</strong></p><blockquote><p>随便提一下，Chrome 浏览器在18版本后由于安全原因已经不支持 ftp 协议，改用 https 协议，可以看到链接已经与之前的不同。</p></blockquote><p>这里以下载人的参考基因组 GRCh38 为例：</p><p><a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/reference/GCF_000001405.39_GRCh38.p13/">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian&#x2F;Homo_sapiens&#x2F;reference&#x2F;GCF_000001405.39_GRCh38.p13</a></p><p>人类基因组注释文件：</p><p>GTF 格式：<a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gtf.gz">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gtf.gz</a></p><p>GFF 格式：</p><p><a href="https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gff.gz">https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/annotation_releases/109/GCF_000001405.38_GRCh38.p12/GCF_000001405.38_GRCh38.p12_genomic.gff.gz</a></p><p>如果以这种方式下载，其实已经可以路径中大概看出相关物种的下载地址，可以自行查询及下载其他物种。</p><h3 id="2、Ensemble"><a href="#2、Ensemble" class="headerlink" title="2、Ensemble"></a>2、Ensemble</h3><p><strong>可视化下载</strong></p><ul><li>网址：<a href="http://asia.ensembl.org/">http://asia.ensembl.org</a></li><li>点击物种名，进入下载界面</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/a8c077b0f5a440c0a427ed28da5b4731.png" alt="image.png"></p><ul><li>点击对应名称，下载参考基因组和基因组注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/396a1dcf91806028db1b47022ce8d336.png" alt="image.png"></p><p><strong>FTP下载</strong></p><p>同样以下载人参考基因组 GRCh38 为例：</p><p><a href="http://ftp.ensembl.org/pub/current_fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.toplevel.fa.gz">http://ftp.ensembl.org/pub/current_fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.toplevel.fa.gz</a></p><p>GTF 文件：<a href="http://ftp.ensembl.org/pub/current_gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz">http://ftp.ensembl.org/pub/current_gtf/homo_sapiens/Homo_sapiens.GRCh38.104.gtf.gz</a></p><p>GTT 文件：<a href="http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/Homo_sapiens.GRCh38.104.gff3.gz">http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/Homo_sapiens.GRCh38.104.gff3.gz</a></p><h3 id="3、GENCODE"><a href="#3、GENCODE" class="headerlink" title="3、GENCODE"></a>3、GENCODE</h3><p>如果小伙伴研究的物种只涉及人类和小鼠，极力推荐 GENCOE，这里有着相较其他数据库，最新最全的基因组和其注释信息。</p><ul><li>网址：<a href="https://www.gencodegenes.org/">https://www.gencodegenes.org/</a></li><li>点击人类的最新版</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/04e9d2d248eff86645f35bc5b0ae624c.png" alt="image.png"></p><ul><li>点击下载基因组注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/8d8945546bcab1ceacccb6c79ae9a0cf.png" alt="image.png"></p><ul><li>点击下载参考基因组文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9b44df3dda1e3d1653586c4a09056a43.png" alt="image.png"></p><h3 id="4、UCSC"><a href="#4、UCSC" class="headerlink" title="4、UCSC"></a>4、UCSC</h3><p>相对其他下载方式，UCSC 本职的工作是做基因组浏览器的，因此也可以从下图看到，在这里可以根据自己定义来下载相对于的基因组区域，比如 prime，exon，gene，transcript等等。</p><ul><li>网址：<a href="http://genome.ucsc.edu/cgi-bin/hgTables">http://genome.ucsc.edu/cgi-bin/hgTables</a></li><li>下载：设置参数如下，然后点击下载参考基因组及注释文件</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/835956085051350cf86fc3beec9f92df.png" alt="image.png"></p><h3 id="5、iGenomes"><a href="#5、iGenomes" class="headerlink" title="5、iGenomes"></a>5、iGenomes</h3><p>iGenomes是常见分析生物的参考序列和注释文件的集合。这些文件已从Ensembl，NCBI或UCSC下载。染色体名称已更改为简单且与下载源一致。每个iGenome都可以作为压缩文件使用，其中包含生物体的单个基因组构建的序列和注释文件。</p><p>网址：<a href="https://support.illumina.com/sequencing/sequencing_software/igenome.html">https://support.illumina.com/sequencing/sequencing_software/igenome.html</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/19712a471e44969c273c91b8ba2ff5a3.png" alt="image.png"></p><p>由亚马逊资助的生物信息参考基因组下载站点，有各种参考基因组，注释文件，软件索引等常用文件，并且有着极快的下载速度，但是缺点是只有常用的物种。</p><p><strong>站点：</strong><a href="https://ewels.github.io/AWS-iGenomes/">https://ewels.github.io/AWS-iGenomes/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0387a13f1c694ccd3461a975460e2909.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 基因组注释文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | Trimmomati （质量控制，修剪低质和接头序列）</title>
      <link href="/posts/22896/"/>
      <url>/posts/22896/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>Trimmomati 用于去除 <strong>Illumina</strong>平台的FASTQ序列中的<strong>Adapter</strong>，根据碱基质量值修整FASTQ序列文件</li><li>支持单末端（<strong>SE</strong>），双末端（<strong>PE</strong>）测序数据</li><li>支持多线程，<strong>gzip，bzip2</strong>压缩的FASTQ文件</li><li>支持phred-33 和 phred-64 格式互相转化，目前多数Illumina测序数据为<strong>phred-33</strong>格式</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>conda install -c trimmomati</code></p><blockquote><p>这里需要安装Conda (一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件的依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a></p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h6 id="单末端测序数据"><a href="#单末端测序数据" class="headerlink" title="单末端测序数据"></a>单末端测序数据</h6><p><code>trimmomatic SE -phred33 input.fq.gz output.fq.gz ILLUMINACLIP:TruSeq3-SE:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 </code></p><h6 id="双末端测序数据"><a href="#双末端测序数据" class="headerlink" title="双末端测序数据"></a>双末端测序数据</h6><p><code>trimmomatic PE -phred33 input_forward.fq.gz input_reverse.fq.gz output_forward_paired.fq.gz output_forward_unpaired.fq.gz output_reverse_paired.fq.gz output_reverse_unpaired.fq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 </code></p><blockquote><p>常用参数：</p><p>-threads 线程数，最大是CPU核数</p><p>-trimlog 生成日志名，强烈建议不开这个参数，生成的log文件巨大且大多数情况下，你是不会看的</p><p>-quiet 静默模式</p></blockquote><blockquote><p>与其他软件命令不同，Trimmomatic提供了多种修整步骤：</p><ul><li>ILLUMINACLIP：从reads中剪切adapter和其他Illumina特定序列。</li><li>SLIDINGWINDOW：执行滑动窗口修剪，一旦窗口内的平均质量低于阈值，则切割。</li><li>LEADING：如果低于阈值质量，则在reads起始处剪切碱基</li><li>TRAILING：如果低于阈值质量，则在reads末尾处剪切碱基</li><li>CROP：将reads从末尾切割为指定长度</li><li>HEADCROP：从reads剪切后低于指定长度，则删除</li><li>MINLEN：如果reads低于指定长度，则删除</li><li>TOPHRED33：将质量得分转换为Phred-33</li><li>TOPHRED64：将质量得分转换为Phred-64</li></ul></blockquote><blockquote><p>文档：<a href="http://www.usadellab.org/cms/index.php?page=trimmomatic">http://www.usadellab.org/cms/index.php?page=trimmomatic</a></p></blockquote><h6 id="双末端测序命令解释"><a href="#双末端测序命令解释" class="headerlink" title="双末端测序命令解释"></a>双末端测序命令解释</h6><p>PE模式中，输入文件有两个<code>input_forward.fq.gz</code> <code>input_reverse.fq.gz</code>输出文件有四个（<code>output_forward_paired.fq.gz</code> <code>output_forward_unpaired.fq.gz</code> <code>output_reverse_paired.fq.gz</code> <code>output_reverse_unpaired.fq.gz</code>），其中过滤之后双末端序列都保留的是paired,只保留一端序列的就是unpaired</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTAzMjUvcksxOWtNZ2hMdndLLnBuZw?x-oss-process=image/format,png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> Trimmomati </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda 安装使用图文详解（2022版）</title>
      <link href="/posts/25294/"/>
      <url>/posts/25294/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>开源包管理系统和环境管理系统 ，包括多种语言的包安装，运行，更新，删除，最重要的是可以解决包依赖问题</li><li>支持语言包括 Python，R，Ruby，Lua，Scala，Java，JavaScript，C &#x2F; C ++，FORTRAN</li><li>支持在Windows，macOS和Linux上运行 </li><li>Conda可以构建不同的环境，同时可以对环境进行保存，加载和切换操作</li><li>conda包和环境管理器包含在所有版本的Anaconda和Miniconda中</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p><strong>下载 (Linux 64位系统为例)</strong><br><code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></p><blockquote><p><strong>清华镜像</strong>：<code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ </code><br><strong>anaconda：</strong><code>https://www.anaconda.com/products/individual</code><br><strong>miniconda</strong>：<code>https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh </code><br><strong>miniconda 与 anaconda 的区别</strong>：minicoda 是只有conda基础功能的软件，相当于毛坯房。anaconda 除了 minicoda 功能外，加入了大量常用的包，相当于精装房。</p></blockquote></li><li><p><strong>安装</strong> </p><p><code>bash Anaconda3-2021.11-Linux-x86_64.sh</code></p></li><li><p><strong>配置环境</strong></p></li><li><p>查看是否安装成功,如果安装没问题会显示conda版本号</p><p> <code>conda --version</code></p></li><li><pre><code>配置镜像</code></pre><p>   <code>conda config --set show_channel_urls yes</code></p><p>   Linux：<code>vim ~/.condarc</code></p><p>   Windows：文件在 <code>C:\Users\你的用户名\.condarc</code></p><blockquote><p>如果没有<code>.condarc</code>文件，可以先执行<code> conda config --set show_channel_urls yes</code> 生成该文件</p></blockquote><p>   替换原文件内容为：</p>   <figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br></code></pre></td></tr></table></figure><ul><li><p>清除缓存 <code>conda clean -i</code></p></li><li><p>新建环境</p><p><code>conda create --name your_env_name</code></p><blockquote><p>your_env_name是环境名称，对环境的操作后面会详述</p></blockquote></li><li><p>激活环境</p><p><code>conda activate </code></p></li></ul></li><li><p>pip 镜像配置</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U<br>pip config set global.index-url https://pypi.douban.com/simple<br></code></pre></td></tr></table></figure><p>其他镜像地址</p><table><thead><tr><th>镜像</th><th>地址</th></tr></thead><tbody><tr><td>阿里云</td><td><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td></tr><tr><td>豆瓣</td><td><a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></td></tr><tr><td>清华大学</td><td>httpss:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</td></tr><tr><td>中国科学技术大学</td><td><a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></td></tr><tr><td>华中科技大学</td><td><a href="https://pypi.hustunique.com/">https://pypi.hustunique.com/</a></td></tr></tbody></table></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>文档：<a href="https://conda.io/en/latest/">https://conda.io/en/latest/</a></p></blockquote><h3 id="包管理功能"><a href="#包管理功能" class="headerlink" title="包管理功能"></a>包管理功能</h3><ul><li><p><strong>搜索包</strong></p><ul><li><p>查看特定包</p><p><code>conda search fastqc</code></p></li></ul></li><li><p><strong>安装包</strong></p><ul><li><p>安装特定包（需要确认安装，可以看到conda已经将包依赖问题，环境问题已经解决）</p><p><code>conda install fastqc</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTAzMjYvSFVMZTBvTFhiUktYLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装特定版本的软件包（查看软件版本可以使用<code>conda search fastqc</code>）</p><p><code>conda install fastqc=0.11.6</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTAzMjYvbllmdm9JU1Z5YVBJLnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p>安装多个包</p><p><code>conda install fastqc multiqc</code></p></li></ul></li><li><p><strong>包更新</strong></p><ul><li><p>更新特定包</p><p><code>conda update fastqc</code></p></li><li><p>更新Python</p><p><code>conda update python</code></p></li><li><p>更新conda本身及Anaconda元数据包</p><p><code>conda update conda</code></p><p><code>conda update anaconda</code></p></li><li><p>防止包更新</p><p><code>conda update fastqc --no-pin</code></p><blockquote><p>在环境的<code>conda-meta</code>目录中，添加一个名为<code>pinned</code>的文件，其中包含您不想更新的软件包列表。</p></blockquote></li></ul></li><li><p><strong>包删除</strong></p><ul><li><p>删除当前环境中的包</p><p><code>conda remove pkg_name</code></p></li><li><p>删除特定环境中的包</p><p><code>conda remove -n env_name pkg_name</code></p></li><li><p>删除多个包</p><p><code>conda remove pkg_name1 pkg_name2</code></p></li><li><p>确认删除的包</p><p><code>conda list</code></p></li></ul></li><li><p><strong>包列表</strong></p><ul><li><p>当前环境所有包</p><p><code>conda list</code></p></li><li><p>特定环境所有包</p><p><code>conda list -n env_name</code></p></li></ul></li></ul><h3 id="环境管理功能"><a href="#环境管理功能" class="headerlink" title="环境管理功能"></a>环境管理功能</h3><ul><li><p><strong>创建环境</strong></p><ul><li><p>创建特定名字的环境</p><p><code>conda create -n env_name</code></p></li><li><p>使用特定版本的Python创建环境</p><p><code>conda create -n env_name python=3.4</code></p></li><li><p>使用特定包创建环境</p><p><code>conda create -n env_name pandas</code></p></li><li><p>用 environment.yml 配置文件创建环境</p><p><code>conda env create -f nvironment.yml</code></p><blockquote><p>environment.yml 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">name: stats2<br>channels:<br>  - javascript<br>dependencies:<br>  - python=3.4   # or 2.7<br>  - bokeh=0.9.2<br>  - numpy=1.9.*<br>  - nodejs=0.10.*<br>  - flask<br>  - pip:<br>    - Flask-Testing<br></code></pre></td></tr></table></figure></blockquote></li></ul></li><li><p><strong>导出环境文件</strong><code>environment</code></p><ul><li><p>导出<code>environment.yml</code>环境文件</p><ul><li><p>激活需要导出文件的环境</p><p><code>conda activate env_name</code></p></li><li><p>导出</p><p><code>conda env export &gt; environment.yml</code></p></li></ul></li></ul></li><li><p><strong>激活环境</strong></p><p><code>conda activate env_name  </code></p></li><li><p><strong>停用环境</strong></p><p><code>conda deactivate env_name</code></p></li><li><p><strong>查看环境</strong>（当前环境用*表示）</p><p><code>conda info -envs</code><br>或<code>conda env list</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTAzMjYvajg4TEN0aUxBaU9ULnBuZw?x-oss-process=image/format,png" alt="mark"></p></li><li><p><strong>删除环境</strong></p><p><code>conda remove -n env_name --all</code></p></li><li><p><strong>构建相同的conda环境（不同机器间的环境复制）</strong></p><ul><li><p>激活需要导出配置文件的环境</p><p><code>conda list --explicit &gt; files.txt</code></p></li><li><p>在同系统的不同机器执行</p><p><code>conda create --name env_name -f files.txt</code></p></li></ul></li><li><p><strong>克隆环境（同一台机器的环境复制</strong></p><p><code>conda create --name clone_env_name --clone env_name</code></p></li></ul><h3 id="渠道管理"><a href="#渠道管理" class="headerlink" title="渠道管理"></a>渠道管理</h3><ul><li><p>添加新渠道到顶部，最高优先级</p><p><code>conda config --add channels new_channel</code></p><p>或者<code>conda config --prepend channels new_channel</code></p></li><li><p>添加新渠道到底部，最低优先级</p><p><code>conda config --append channels new_channel</code></p></li></ul><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>直接卸载会有配置文件，注册表等残留</p><ul><li><code>conda install anaconda-clean</code></li><li><code>anaconda-clean --yes</code></li><li>进入安装目录执行 <code>Uninstall_Anaconda3.exe</code></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>创建不同版本的Python环境</strong></p><ul><li><p>Python 3.6 的 Anaconda 环境</p><p><code>conda create -n py36 python=3.6 anaconda</code></p></li><li><p>Python 2.7 的 Anaconda 环境</p><p><code>conda create -n py27 python=2.7 anaconda</code></p></li></ul><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p>1、conda activate 后报找不到路径错误<br>解决：修改用户名为英文，参考：<a href="https://blog.csdn.net/weixin_44815511/article/details/121549369">https://blog.csdn.net/weixin_44815511/article/details/121549369</a><br>2、安装或卸载anaconda 后打不开cmd<br>解决：打开注册表，Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Command Processor，删除 AutoRun 项</p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> conda </tag>
            
            <tag> anaconda </tag>
            
            <tag> 生物信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 远程开发调试环境搭建（图文详解）</title>
      <link href="/posts/10725/"/>
      <url>/posts/10725/</url>
      
        <content type="html"><![CDATA[<h3 id="配置远程目录"><a href="#配置远程目录" class="headerlink" title="配置远程目录"></a>配置远程目录</h3><ul><li>打开Tools -&gt; Deployment -&gt; Configuration</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/1af8445c3c98a6b240b1a7b558ce433e.png" alt="mark"></p><ul><li><p>点击左上角<code>+</code>新建一个远程连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/304bf34067174326a6c103e0dbf941a6.png" alt="mark"></p></li><li><p>填写连接名和连接协议</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4ea9764f79366048dd1ca5a774d8f9db.png" alt="mark"></p></li><li><p>填写远程连接参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1b6bed619be36e56484e1afbef9aaf6c.png" alt="mark"></p></li><li><p>设置编码格式<code>UTF-8</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/398accffa0d5713a4e6abf6b85801676.png" alt="mark"></p></li><li><p>填写本地与远程目录，需要注意的是这里的远程目录是相对上一步的<code>Root path</code>，如果上一步已经是工作目录，这步默认<code>\</code>就好![mark]</p><p>(<a href="http://baimoc.ziptop.top/blog/20190318/PzLqvT7HFjps.png">http://baimoc.ziptop.top/blog/20190318/PzLqvT7HFjps.png</a>)</p></li><li><p>打开远程文件目录，测试工作成果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92cc336c07f7f91757414c2b9d7472e9.png" alt="mark"></p></li><li><p>如果显示出远程文件目录，配置成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5db8130990fd9a33987a77cf01ff5afb.png" alt="mark"></p></li></ul><h3 id="配置远程环境"><a href="#配置远程环境" class="headerlink" title="配置远程环境"></a>配置远程环境</h3><ul><li>打开设置<br><img src="https://img-blog.csdnimg.cn/img_convert/be4d3fd8b94a9260963d0a19d9ebdceb.png" alt="mark"></li><li>加入新配置<br><img src="https://img-blog.csdnimg.cn/img_convert/c6edd8dca8a2a1b0381b5f1e4356e5a4.png" alt="mark"></li><li>配置参数，这里需要注意你编译器的路径是否正确（如果不确定位置，使用 shell 命令<code>which python</code> 查询）<br><img src="https://img-blog.csdnimg.cn/img_convert/04a660814c371c4551d53ab611f9ee90.png" alt="mark"></li><li>测试是否配置成功，点击下拉框，选择刚刚配置好的编译器，如果没问题会显示包名<img src="https://img-blog.csdnimg.cn/img_convert/27c2bdd0ab4ee6af816a92588346b633.png" alt="mark"></li></ul><h3 id="配置Python-Console-和-Shell-Terminal"><a href="#配置Python-Console-和-Shell-Terminal" class="headerlink" title="配置Python Console 和 Shell Terminal"></a>配置Python Console 和 Shell Terminal</h3><ul><li><p>打开设置<br><img src="https://img-blog.csdnimg.cn/img_convert/9ecfcd2931211fd20b63cb20d4e116fc.png" alt="mark"></p></li><li><p>配置参数<br><img src="https://img-blog.csdnimg.cn/img_convert/35bdc280653295d2906609cf6268d38e.png" alt="mark"></p></li><li><p>测试是否配置成功，打开 Python 控制台<br><img src="https://img-blog.csdnimg.cn/img_convert/79336817e70370ad4991982c73709957.png" alt="mark"></p></li><li><p>打开 Shell 终端<br><img src="https://img-blog.csdnimg.cn/img_convert/1573180d2e2bee0dac5ddb9d0cd59b4e.png" alt="mark"></p></li><li><p>左上角会显示终端ip</p><p><img src="https://img-blog.csdnimg.cn/img_convert/509e3b7dcc05a419bb4de61bdb348978.png" alt="mark"></p></li><li><p>收工</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pycharm </tag>
            
            <tag> 远程开发 </tag>
            
            <tag> 远程调试 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息中的Python 04 | 批量下载基因与文献</title>
      <link href="/posts/64993/"/>
      <url>/posts/64993/</url>
      
        <content type="html"><![CDATA[<p>相信 Entrez 的强大是有目共睹的，BioPython 将它几乎所有操作都封装为方法，使我们可以更加方便的利用这个强悍工具。对于分析比对多个序列文件时的工作量说多了都是泪。比如，老板让你比对自己测定序列与 NCBI 库中序列，并构建相应的进化树，而这个序列需要大于100条。我想你的心情不会和下载一条序列时那么平静，那么，接下来通过BioPython提供的接口来实现快速的自动化序列下载。 </p><h3 id="一、自动获取氨基酸序列数据"><a href="#一、自动获取氨基酸序列数据" class="headerlink" title="一、自动获取氨基酸序列数据"></a>一、自动获取氨基酸序列数据</h3><h5 id="1-利用-Nucleotide-数据库来查询所有-oct4-基因的序列数据，为了展示基础的流程，这里采用逐条下载的方式"><a href="#1-利用-Nucleotide-数据库来查询所有-oct4-基因的序列数据，为了展示基础的流程，这里采用逐条下载的方式" class="headerlink" title="1. 利用 Nucleotide 数据库来查询所有 oct4 基因的序列数据，为了展示基础的流程，这里采用逐条下载的方式"></a>1. 利用 Nucleotide 数据库来查询所有 oct4 基因的序列数据，为了展示基础的流程，这里采用逐条下载的方式</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez,SeqIO<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 查询 oct4 基因的在 Nucleotide 中的总数</span><br>hd_egquery = Entrez.egquery(term=<span class="hljs-string">&quot;oct4&quot;</span>)<br>read_egquery = Entrez.read(hd_egquery)<br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> read_egquery[<span class="hljs-string">&quot;eGQueryResult&quot;</span>]:<br>    <span class="hljs-keyword">if</span> ele[<span class="hljs-string">&quot;MenuName&quot;</span>] == <span class="hljs-string">&quot;Nucleotide&quot;</span>:<br>        total = ele[<span class="hljs-string">&quot;Count&quot;</span>]<br><br><span class="hljs-comment"># 得到查询 id 列表</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, term=<span class="hljs-string">&quot;oct4&quot;</span>, retmax=total)<br>read_esearch = Entrez.read(hd_esearch)<br><span class="hljs-comment"># 这里我们只取前两个序列</span><br>ids = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>][:<span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># 用得到的 id 列表去下载每一条 fasta 文件，并合并，以便后续分析使用（比如进化树构建）</span><br>hd_efetch_fa = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&#x27;fasta&#x27;</span>)<br>read_efetch_fa = hd_efetch_fa.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/oct4.fasta&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(read_efetch_fa)<br><span class="hljs-comment"># 同理你可以得到 xml 格式的序列信息</span><br>hd_efetch_xml = Entrez.efetch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, <span class="hljs-built_in">id</span>=ids, retmode=<span class="hljs-string">&quot;xml&quot;</span>)<br>read_efetch_xml = Entrez.read(hd_efetch_xml)<br><span class="hljs-built_in">print</span>(read_efetch_xml)<br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&quot;nuccore&quot;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&quot;gb&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>)<br><span class="hljs-comment"># 这里读取的是文本文件，保存为本地数据</span><br>read_efetch_gb = hd_efetch_gb.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/oct4.gb&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(read_efetch_gb)<br><br><span class="hljs-comment"># 如果需要提取其中一些信息，可以按照以下步骤, 这里需要注意需要重新得到 efetch 句柄</span><br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&quot;nuccore&quot;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&quot;gb&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>)<br>parse_efetch_gb = SeqIO.parse(hd_efetch_gb, <span class="hljs-string">&quot;gb&quot;</span>)<br><span class="hljs-comment"># 这里可以保存为 xls 或者 csv 格式</span><br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> parse_efetch_gb:<br>    <span class="hljs-built_in">print</span>(ele.name, ele.annotations[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez,SeqIO<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 查询 oct4 基因的在 Nucleotide 中的总数</span><br>hd_egquery = Entrez.egquery(term=<span class="hljs-string">&quot;oct4&quot;</span>)<br>read_egquery = Entrez.read(hd_egquery)<br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> read_egquery[<span class="hljs-string">&quot;eGQueryResult&quot;</span>]:<br>    <span class="hljs-keyword">if</span> ele[<span class="hljs-string">&quot;MenuName&quot;</span>] == <span class="hljs-string">&quot;Nucleotide&quot;</span>:<br>        total = ele[<span class="hljs-string">&quot;Count&quot;</span>]<br><br><span class="hljs-comment"># 得到查询 id 列表</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, term=<span class="hljs-string">&quot;oct4&quot;</span>, retmax=total)<br>read_esearch = Entrez.read(hd_esearch)<br><span class="hljs-comment"># 这里我们只取前两个序列</span><br>ids = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>][:<span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># 用得到的 id 列表去下载每一条 fasta 文件，并合并，以便后续分析使用（比如进化树构建）</span><br>hd_efetch_fa = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&#x27;fasta&#x27;</span>)<br>read_efetch_fa = hd_efetch_fa.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/oct4.fasta&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(read_efetch_fa)<br><span class="hljs-comment"># 同理你可以得到 xml 格式的序列信息</span><br>hd_efetch_xml = Entrez.efetch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, <span class="hljs-built_in">id</span>=ids, retmode=<span class="hljs-string">&quot;xml&quot;</span>)<br>read_efetch_xml = Entrez.read(hd_efetch_xml)<br><span class="hljs-built_in">print</span>(read_efetch_xml)<br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&quot;nuccore&quot;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&quot;gb&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>)<br><span class="hljs-comment"># 这里读取的是文本文件，保存为本地数据</span><br>read_efetch_gb = hd_efetch_gb.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/oct4.gb&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(read_efetch_gb)<br><br><span class="hljs-comment"># 如果需要提取其中一些信息，可以按照以下步骤, 这里需要注意需要重新得到 efetch 句柄</span><br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&quot;nuccore&quot;</span>, <span class="hljs-built_in">id</span>=ids, rettype=<span class="hljs-string">&quot;gb&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>)<br>parse_efetch_gb = SeqIO.parse(hd_efetch_gb, <span class="hljs-string">&quot;gb&quot;</span>)<br><span class="hljs-comment"># 这里可以保存为 xls 或者 csv 格式</span><br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> parse_efetch_gb:<br>    <span class="hljs-built_in">print</span>(ele.name, ele.annotations[<span class="hljs-string">&#x27;molecule_type&#x27;</span>], ele.seq)<br></code></pre></td></tr></table></figure><h5 id="1-2-用历史记录特性提高效率"><a href="#1-2-用历史记录特性提高效率" class="headerlink" title="1.2 用历史记录特性提高效率"></a>1.2 用历史记录特性提高效率</h5><blockquote><p>还记得上一篇教程中提到的历史记录吗？</p><p>利用这个特性，不仅可以减轻 Entrez 服务器的负载，更可以同时获取多条数据，节省大量时间精力</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br>hd_search = Entrez.esearch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, term=<span class="hljs-string">&quot;oct4&quot;</span>, usehistory=<span class="hljs-string">&quot;y&quot;</span>)<br>read_search = Entrez.read(hd_search)<br>webenv = read_search[<span class="hljs-string">&quot;WebEnv&quot;</span>]<br>query_key = read_search[<span class="hljs-string">&quot;QueryKey&quot;</span>]<br><br><span class="hljs-comment"># 使用历史记录特性来进行搜索。</span><br><span class="hljs-comment"># Entrez 将会提前进行缓冲，提高查询效率</span><br>step = <span class="hljs-number">5</span><br>total = <span class="hljs-number">10</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/res_env_oct4.fasta&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> res_file:<br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, total, step):<br>        end = <span class="hljs-built_in">min</span>(total, start+step)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Download record %i to %i&quot;</span> % (start+<span class="hljs-number">1</span>, end))<br>        hd_fetch = Entrez.efetch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, rettype=<span class="hljs-string">&quot;fasta&quot;</span>, retmode=<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br>hd_search = Entrez.esearch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, term=<span class="hljs-string">&quot;oct4&quot;</span>, usehistory=<span class="hljs-string">&quot;y&quot;</span>)<br>read_search = Entrez.read(hd_search)<br>webenv = read_search[<span class="hljs-string">&quot;WebEnv&quot;</span>]<br>query_key = read_search[<span class="hljs-string">&quot;QueryKey&quot;</span>]<br><br><span class="hljs-comment"># 使用历史记录特性来进行搜索。</span><br><span class="hljs-comment"># Entrez 将会提前进行缓冲，提高查询效率</span><br>step = <span class="hljs-number">5</span><br>total = <span class="hljs-number">10</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/res_env_oct4.fasta&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> res_file:<br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, total, step):<br>        end = <span class="hljs-built_in">min</span>(total, start+step)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Download record %i to %i&quot;</span> % (start+<span class="hljs-number">1</span>, end))<br>        hd_fetch = Entrez.efetch(db=<span class="hljs-string">&quot;nucleotide&quot;</span>, rettype=<span class="hljs-string">&quot;fasta&quot;</span>, retmode=<span class="hljs-string">"text"</span>, retstart=start, retmax=step, webenv=webenv, query_key=query_key)<br>        records = hd_fetch.read()<br>        res_file.write(records)<br></code></pre></td></tr></table></figure><h3 id="二、自动获取参考文献"><a href="#二、自动获取参考文献" class="headerlink" title="二、自动获取参考文献"></a>二、自动获取参考文献</h3><h5 id="1-利用PubMed数据库来查询所有关于小鼠的文献资料，为了展示基础的流程，这里采用逐条下载的方式"><a href="#1-利用PubMed数据库来查询所有关于小鼠的文献资料，为了展示基础的流程，这里采用逐条下载的方式" class="headerlink" title="1. 利用PubMed数据库来查询所有关于小鼠的文献资料，为了展示基础的流程，这里采用逐条下载的方式"></a>1. 利用PubMed数据库来查询所有关于小鼠的文献资料，为了展示基础的流程，这里采用逐条下载的方式</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Medline<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 用 esearch 在 pubmed 库中搜索关键字为 &quot;mouse&quot; 的文章</span><br><span class="hljs-comment"># RetMax 这个参数为每次返回的最大个数，因此如果把Count的值赋给RetMax就会获取全部的mouse的文章，这里为实例设置为100</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, term=<span class="hljs-string">&quot;mouse&quot;</span>, RetMax=<span class="hljs-string">&quot;100&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br>idlist = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Total: &quot;</span>, read_esearch[<span class="hljs-string">&quot;Count&quot;</span>])<br><span class="hljs-comment"># 用 efetch下载</span><br>hd_efetch = Entrez.efetch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, <span class="hljs-built_in">id</span>=idlist, rettype=<span class="hljs-string">&quot;medline&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>, )<br><span class="hljs-comment"># 用 Medline 来解析</span><br>parse_medline = Medline.parse(hd_efetch)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/mouse_pubmed.xls&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">&quot;title\tauthors\tsource\tPubMed\n&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, ele <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>(parse_medline)):<br>        line = ele[<span class="hljs-string">&#x27;TI&#x27;</span>] + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;,&quot;</span>.join(ele[<span class="hljs-string">&#x27;AU&#x27;</span>]) + <span class="hljs-string">&quot;\t&quot;</span> + ele[<span class="hljs-string">&#x27;SO&#x27;</span>] + <span class="hljs-string">&quot;\t&quot;</span> + ele[<span class="hljs-string">&#x27;PMID&#x27;</span>] + <span class="hljs-string">&quot;\n&quot;</span><br>        file.write(line)<br>        <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Medline<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 用 esearch 在 pubmed 库中搜索关键字为 &quot;mouse&quot; 的文章</span><br><span class="hljs-comment"># RetMax 这个参数为每次返回的最大个数，因此如果把Count的值赋给RetMax就会获取全部的mouse的文章，这里为实例设置为100</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, term=<span class="hljs-string">&quot;mouse&quot;</span>, RetMax=<span class="hljs-string">&quot;100&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br>idlist = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Total: &quot;</span>, read_esearch[<span class="hljs-string">&quot;Count&quot;</span>])<br><span class="hljs-comment"># 用 efetch下载</span><br>hd_efetch = Entrez.efetch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, <span class="hljs-built_in">id</span>=idlist, rettype=<span class="hljs-string">&quot;medline&quot;</span>, retmode=<span class="hljs-string">&quot;text&quot;</span>, )<br><span class="hljs-comment"># 用 Medline 来解析</span><br>parse_medline = Medline.parse(hd_efetch)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/mouse_pubmed.xls&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">&quot;title\tauthors\tsource\tPubMed\n&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, ele <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>(parse_medline)):<br>        line = ele[<span class="hljs-string">&#x27;TI&#x27;</span>] + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;,&quot;</span>.join(ele[<span class="hljs-string">&#x27;AU&#x27;</span>]) + <span class="hljs-string">&quot;\t&quot;</span> + ele[<span class="hljs-string">&#x27;SO&#x27;</span>] + <span class="hljs-string">&quot;\t&quot;</span> + ele[<span class="hljs-string">&#x27;PMID&#x27;</span>] + <span class="hljs-string">&quot;\n&quot;</span><br>        file.write(line)<br>        <span class="hljs-built_in">print</span> (i, line)<br></code></pre></td></tr></table></figure><h5 id="2-提高上面脚本的效率，这里我们来查询近一年的关于-Sus-scrofa-的综述"><a href="#2-提高上面脚本的效率，这里我们来查询近一年的关于-Sus-scrofa-的综述" class="headerlink" title="2. 提高上面脚本的效率，这里我们来查询近一年的关于 Sus scrofa 的综述"></a>2. 提高上面脚本的效率，这里我们来查询近一年的关于 Sus scrofa 的综述</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 搜索</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, term=<span class="hljs-string">&quot;Sus scrofa&quot;</span>, reldate=<span class="hljs-number">365</span>, ptyp=<span class="hljs-string">&quot;Review&quot;</span>, usehistory=<span class="hljs-string">&quot;y&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br>total = <span class="hljs-built_in">int</span>(read_esearch[<span class="hljs-string">&quot;Count&quot;</span>])<br>webenv = read_esearch[<span class="hljs-string">&quot;WebEnv&quot;</span>]<br>query_key = read_esearch[<span class="hljs-string">&quot;QueryKey&quot;</span>]<br><br><span class="hljs-comment"># 这里演示设定total为 10</span><br>total = <span class="hljs-number">10</span><br>step = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Result items: &quot;</span>, total)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/recent_review_sus_scrofa.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, total, step):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Download record %i to %i&quot;</span> % (start + <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(start+step)))<br>        hd_efetch = Entrez.efetch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, retstart=start, retmax=step, webenv=webenv, query_key=query_key, rettype=<span class="hljs-string">&quot;medline&quot;</span>, retmode=<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 搜索</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, term=<span class="hljs-string">&quot;Sus scrofa&quot;</span>, reldate=<span class="hljs-number">365</span>, ptyp=<span class="hljs-string">&quot;Review&quot;</span>, usehistory=<span class="hljs-string">&quot;y&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br>total = <span class="hljs-built_in">int</span>(read_esearch[<span class="hljs-string">&quot;Count&quot;</span>])<br>webenv = read_esearch[<span class="hljs-string">&quot;WebEnv&quot;</span>]<br>query_key = read_esearch[<span class="hljs-string">&quot;QueryKey&quot;</span>]<br><br><span class="hljs-comment"># 这里演示设定total为 10</span><br>total = <span class="hljs-number">10</span><br>step = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Result items: &quot;</span>, total)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/recent_review_sus_scrofa.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, total, step):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Download record %i to %i&quot;</span> % (start + <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(start+step)))<br>        hd_efetch = Entrez.efetch(db=<span class="hljs-string">&quot;pubmed&quot;</span>, retstart=start, retmax=step, webenv=webenv, query_key=query_key, rettype=<span class="hljs-string">&quot;medline&quot;</span>, retmode=<span class="hljs-string">"text"</span>)<br>        file.write(hd_efetch.read())<br></code></pre></td></tr></table></figure><h4 id="三、获取物种谱系"><a href="#三、获取物种谱系" class="headerlink" title="三、获取物种谱系"></a>三、获取物种谱系</h4><blockquote><p>NCBI 提供了很多生物相关数据库，用法几乎差不多，可以根据自身研究或者感兴趣的方向自行选择。</p><p>下面的例子是利用NCBI中的分类库 Taxonomy 来查询我们人类在分类学中的位置。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># =====查看物种谱系=====</span><br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 在 Taxonomy 库中搜索 Homo sapiens</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;Taxonomy&quot;</span>, term=<span class="hljs-string">&quot;Homo sapiens&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br><span class="hljs-built_in">id</span> = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>][<span class="hljs-number">0</span>]<br>hd_eftech = Entrez.efetch(db=<span class="hljs-string">&quot;Taxonomy&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, retmode=<span class="hljs-string">&quot;xml&quot;</span>)<br>read_eftech = Entrez.read(hd_eftech)<br><span class="hljs-built_in">print</span>(read_eftech[<span class="hljs-number">0</span>][<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># =====查看物种谱系=====</span><br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><br><span class="hljs-comment"># 参数设置</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br>Entrez.tool  = <span class="hljs-string">&quot;exampleScript&quot;</span><br><br><span class="hljs-comment"># 在 Taxonomy 库中搜索 Homo sapiens</span><br>hd_esearch = Entrez.esearch(db=<span class="hljs-string">&quot;Taxonomy&quot;</span>, term=<span class="hljs-string">&quot;Homo sapiens&quot;</span>)<br>read_esearch = Entrez.read(hd_esearch)<br><span class="hljs-built_in">id</span> = read_esearch[<span class="hljs-string">&quot;IdList&quot;</span>][<span class="hljs-number">0</span>]<br>hd_eftech = Entrez.efetch(db=<span class="hljs-string">&quot;Taxonomy&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, retmode=<span class="hljs-string">&quot;xml&quot;</span>)<br>read_eftech = Entrez.read(hd_eftech)<br><span class="hljs-built_in">print</span>(read_eftech[<span class="hljs-number">0</span>][<span class="hljs-string">"Lineage"</span>])<br></code></pre></td></tr></table></figure><h2 id="生物信息中的Python-01-从零开始处理基因序列"><a href="#生物信息中的Python-01-从零开始处理基因序列" class="headerlink" title="生物信息中的Python 01 | 从零开始处理基因序列"></a><a href="https://blog.csdn.net/u011262253/article/details/88542804">生物信息中的Python 01 | 从零开始处理基因序列</a></h2><h2 id="生物信息中的Python-02-用biopython解析序列"><a href="#生物信息中的Python-02-用biopython解析序列" class="headerlink" title="生物信息中的Python 02 | 用biopython解析序列"></a><a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的Python 02 | 用biopython解析序列</a></h2><h2 id="生物信息中的Python-03-自动化操作NCBI"><a href="#生物信息中的Python-03-自动化操作NCBI" class="headerlink" title="生物信息中的Python 03 | 自动化操作NCBI"></a><a href="https://blog.csdn.net/u011262253/article/details/88542879">生物信息中的Python 03 | 自动化操作NCBI</a></h2>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 基因 </tag>
            
            <tag> Entrez </tag>
            
            <tag> NCBI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息中的Python 03 | 自动化操作NCBI</title>
      <link href="/posts/64681/"/>
      <url>/posts/64681/</url>
      
        <content type="html"><![CDATA[<p>相信大家在上一文中下载fasta的时候还没有感觉到下载是多么复杂，但是对于分析比对多个序列文件时，这个工作量说多了都是泪。比如，老板让你比对自己测定序列与 NCBI 库中序列，并构建相应的进化树，而这个序列需要大于100条。我想你的心情不会和下载一条序列时那么平静，那么，接下来通过BioPython提供的接口来实现快速的自动化序列下载。</p><h3 id="一、Entrez-库"><a href="#一、Entrez-库" class="headerlink" title="一、Entrez 库"></a>一、Entrez 库</h3><h4 id="1-1-Entrez-介绍"><a href="#1-1-Entrez-介绍" class="headerlink" title="1.1 Entrez 介绍"></a>1.1 Entrez 介绍</h4><blockquote><p>Entrez 在线资源检索器是一组服务器端程序，为国家生物技术信息中心（NCBI）的Entrez查询和数据库系统提供稳定的接口。使用固定的URL语法，将一组标准输入参数转换为各种NCBI软件组件搜索和检索所请求数据所需的值。目前包括38个数据库，涵盖各种生物医学数据，包括核苷酸和蛋白质序列，基因记录，三维分子结构和生物医学文献。该在线资源检索器可以使用任何计算机语言（Perl，Python，Java和C ++等）将URL发送到应用程序服务器并解析响应。</p></blockquote><h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><ul><li><h5 id="最小化请求数"><a href="#最小化请求数" class="headerlink" title="最小化请求数"></a>最小化请求数</h5><ul><li>如果任务需要搜索和&#x2F;或下载大量记录，则使用Entrez历史记录批量上载和&#x2F;或检索这些记录而不是对每条记录使用单独的请求会更有效</li><li>可以使用单个EPost请求上载数千个ID</li><li>可以使用一个EFetch请求下载数百个记录</li></ul></li><li><h5 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h5><ul><li>为了不使服务器过载，NCBI建议用户每秒发布不超过三个URL请求 </li><li>将大型作业限制在工作日的周末或东部时间晚上9:00到凌晨5:00之间</li></ul></li><li><h5 id="设置邮箱"><a href="#设置邮箱" class="headerlink" title="设置邮箱"></a>设置邮箱</h5><ul><li>使用email参数，这样如果遇到什么问题，NCBI可以通过邮件联系到你</li><li>邮件的参数从2010年6月1日是强制的参数，所以每次必须告诉 NCBI 是谁在访问</li></ul></li><li><h5 id="URL字符处理"><a href="#URL字符处理" class="headerlink" title="URL字符处理"></a>URL字符处理</h5><ul><li>所有参数使用小写字符 </li><li>参数没有必需的顺序，通常会忽略空值或不适当的参数 </li><li>避免在URL中放置空格，尤其是在查询中。如果需要空格，请使用加号（+）代替空格 </li><li>其他特殊字符（例如引号（“）或用于引用历史记录服务器上的查询键的＃符号）应由其URL编码表示（％22表示”;％23表示＃）</li></ul></li></ul><h3 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h3><h4 id="2-1-参数设置"><a href="#2-1-参数设置" class="headerlink" title="2.1 参数设置"></a>2.1 参数设置</h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># =====一般参数设置=====</span><br><span class="hljs-comment"># 设置 email 参数，为了方便 NCBI 的工作人员可以联系到你</span><br><span class="hljs-comment"># 邮件的参数从2010年6月1日是强制的参数，所以每次必须告诉 NCBI 是谁在访问</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br><span class="hljs-comment"># 如果你是通过其他脚本调用，可以设定 tool 的名字，默认为 `Biopython`</span><br>Entrez.tool = <span class="hljs-string">&quot;exampleScript&quot;</span><br><span class="hljs-comment"># 可选参数，使用代理，一般在无法正常访问时设置</span><br>os.environ[<span class="hljs-string">&quot;http_proxy&quot;</span>] = <span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># =====一般参数设置=====</span><br><span class="hljs-comment"># 设置 email 参数，为了方便 NCBI 的工作人员可以联系到你</span><br><span class="hljs-comment"># 邮件的参数从2010年6月1日是强制的参数，所以每次必须告诉 NCBI 是谁在访问</span><br>Entrez.email = <span class="hljs-string">&quot;example@163.com&quot;</span><br><span class="hljs-comment"># 如果你是通过其他脚本调用，可以设定 tool 的名字，默认为 `Biopython`</span><br>Entrez.tool = <span class="hljs-string">&quot;exampleScript&quot;</span><br><span class="hljs-comment"># 可选参数，使用代理，一般在无法正常访问时设置</span><br>os.environ[<span class="hljs-string">&quot;http_proxy&quot;</span>] = <span class="hljs-string">"http://proxyhost.example.com:8080"</span><br></code></pre></td></tr></table></figure><h4 id="2-2-查看概况"><a href="#2-2-查看概况" class="headerlink" title="2.2 查看概况"></a>2.2 查看概况</h4><h5 id="2-2-1-查看目前-NCBI-所有数据库"><a href="#2-2-1-查看目前-NCBI-所有数据库" class="headerlink" title="2.2.1 查看目前 NCBI 所有数据库"></a>2.2.1 查看目前 NCBI 所有数据库</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====查看数据库概况=====</span><br><span class="hljs-comment"># 获取 Entrez 所有数据库的句柄</span><br>hd_info = Entrez.einfo()<br><span class="hljs-comment"># 获取所有数据库列表</span><br>read_info = Entrez.read(hd_info)<br><span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> read_info[<span class="hljs-string">&#x27;DbList&#x27;</span>]:<br>    <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====查看数据库概况=====</span><br><span class="hljs-comment"># 获取 Entrez 所有数据库的句柄</span><br>hd_info = Entrez.einfo()<br><span class="hljs-comment"># 获取所有数据库列表</span><br>read_info = Entrez.read(hd_info)<br><span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> read_info[<span class="hljs-string">&#x27;DbList&#x27;</span>]:<br>    <span class="hljs-built_in">print</span> (db)<br></code></pre></td></tr></table></figure><h5 id="2-2-2-查看单个数据库概况"><a href="#2-2-2-查看单个数据库概况" class="headerlink" title="2.2.2 查看单个数据库概况"></a>2.2.2 查看单个数据库概况</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># 获取 Entrez 的 gene 数据库句柄</span><br>hd_info_gene = Entrez.einfo(db=<span class="hljs-string">&quot;gene&quot;</span>)<br>read_info_gene = Entrez.read(hd_info_gene)<br><span class="hljs-comment"># 数据库名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;DbName     : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;DbName&quot;</span>])<br><span class="hljs-comment"># 在 NCBI 首页顶部下拉菜单栏中的命名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;MenuName   : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;MenuName&quot;</span>])<br><span class="hljs-comment"># 数据库描述</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Description: &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;Description&quot;</span>])<br><span class="hljs-comment"># 数据库收录总数</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Count      : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;Count&quot;</span>])<br><span class="hljs-comment"># 最新更新时间</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LastUpdate : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;LastUpdate&quot;</span>])<br><span class="hljs-comment"># Gene 数据库中可用的搜索关键字列表</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;FieldList  : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;FieldList&quot;</span>])<br><span class="hljs-comment"># 我们把它遍历下</span><br><span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;FieldList&quot;</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># 获取 Entrez 的 gene 数据库句柄</span><br>hd_info_gene = Entrez.einfo(db=<span class="hljs-string">&quot;gene&quot;</span>)<br>read_info_gene = Entrez.read(hd_info_gene)<br><span class="hljs-comment"># 数据库名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;DbName     : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;DbName&quot;</span>])<br><span class="hljs-comment"># 在 NCBI 首页顶部下拉菜单栏中的命名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;MenuName   : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;MenuName&quot;</span>])<br><span class="hljs-comment"># 数据库描述</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Description: &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;Description&quot;</span>])<br><span class="hljs-comment"># 数据库收录总数</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Count      : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;Count&quot;</span>])<br><span class="hljs-comment"># 最新更新时间</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LastUpdate : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;LastUpdate&quot;</span>])<br><span class="hljs-comment"># Gene 数据库中可用的搜索关键字列表</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;FieldList  : &quot;</span>, read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;FieldList&quot;</span>])<br><span class="hljs-comment"># 我们把它遍历下</span><br><span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> read_info_gene[<span class="hljs-string">&quot;DbInfo&quot;</span>][<span class="hljs-string">&quot;FieldList&quot;</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"%(Name)s\t %(FullName)s\t %(Description)s"</span> % field)<br></code></pre></td></tr></table></figure><h4 id="2-3-查询"><a href="#2-3-查询" class="headerlink" title="2.3 查询"></a>2.3 查询</h4><h5 id="2-3-1-全局搜索-EGQuery"><a href="#2-3-1-全局搜索-EGQuery" class="headerlink" title="2.3.1 全局搜索 | EGQuery"></a>2.3.1 全局搜索 | EGQuery</h5><blockquote><p>EGQuery：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESummary">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESummary</a></p><p> 这里只关注搜索关键字在数据库中所有的个数，而不关注它的具体内容</p><p>在实际使用中我们可以通过在这里得到的数字来确定下载策略</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====全局搜索=====</span><br>hd_egquery = Entrez.egquery(term=<span class="hljs-string">&quot;oct4&quot;</span>)<br>read_egquery = Entrez.read(hd_egquery)<br><span class="hljs-built_in">print</span>(read_egquery)<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> read_egquery[<span class="hljs-string">&quot;eGQueryResult&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (ele[<span class="hljs-string">&quot;DbName&quot;</span>], ele[<span class="hljs-string">&quot;Count&quot;</span>], ele[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====全局搜索=====</span><br>hd_egquery = Entrez.egquery(term=<span class="hljs-string">&quot;oct4&quot;</span>)<br>read_egquery = Entrez.read(hd_egquery)<br><span class="hljs-built_in">print</span>(read_egquery)<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> read_egquery[<span class="hljs-string">&quot;eGQueryResult&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (ele[<span class="hljs-string">&quot;DbName&quot;</span>], ele[<span class="hljs-string">&quot;Count&quot;</span>], ele[<span class="hljs-string">"Status"</span>])<br></code></pre></td></tr></table></figure><h5 id="2-3-2-查询单个数据库中的基因-ESearch"><a href="#2-3-2-查询单个数据库中的基因-ESearch" class="headerlink" title="2.3.2 查询单个数据库中的基因 | ESearch"></a>2.3.2 查询单个数据库中的基因 | ESearch</h5><blockquote><p>关于 ESearch 的官方文档 <a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESearch">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESearch</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====在数据库搜索基因=====</span><br><span class="hljs-comment"># 搜索 Xenopus laevis 物种中名为 oct4 的基因</span><br>handle = Entrez.esearch(db=<span class="hljs-string">&quot;gene&quot;</span>, term=<span class="hljs-string">&quot;oct4[Gene] AND Xenopus laevis[ORGN]&quot;</span>)<br>read_gene = Entrez.read(handle)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====在数据库搜索基因=====</span><br><span class="hljs-comment"># 搜索 Xenopus laevis 物种中名为 oct4 的基因</span><br>handle = Entrez.esearch(db=<span class="hljs-string">&quot;gene&quot;</span>, term=<span class="hljs-string">&quot;oct4[Gene] AND Xenopus laevis[ORGN]&quot;</span>)<br>read_gene = Entrez.read(handle)<br><span class="hljs-built_in">print</span>(read_gene)<br></code></pre></td></tr></table></figure><h5 id="2-3-3-查询基因详细描述信息-Esummary"><a href="#2-3-3-查询基因详细描述信息-Esummary" class="headerlink" title="2.3.3 查询基因详细描述信息 | Esummary"></a>2.3.3 查询基因详细描述信息 | Esummary</h5><blockquote><p>ESummary ：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESummary">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESummary</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====获取摘要=====</span><br><span class="hljs-comment"># 通过 id 来获取 item 的详细信息</span><br>hd_esummary = Entrez.esummary(db=<span class="hljs-string">&quot;gene&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>)<br>read_esummary = Entrez.read(hd_esummary)<br><span class="hljs-comment"># 获取该基因的详细描述</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> read_esummary[<span class="hljs-string">&#x27;DocumentSummarySet&#x27;</span>][<span class="hljs-string">&#x27;DocumentSummary&#x27;</span>][<span class="hljs-number">0</span>].items():<br>    <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====获取摘要=====</span><br><span class="hljs-comment"># 通过 id 来获取 item 的详细信息</span><br>hd_esummary = Entrez.esummary(db=<span class="hljs-string">&quot;gene&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>)<br>read_esummary = Entrez.read(hd_esummary)<br><span class="hljs-comment"># 获取该基因的详细描述</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> read_esummary[<span class="hljs-string">&#x27;DocumentSummarySet&#x27;</span>][<span class="hljs-string">&#x27;DocumentSummary&#x27;</span>][<span class="hljs-number">0</span>].items():<br>    <span class="hljs-built_in">print</span>(key, value)<br></code></pre></td></tr></table></figure><h5 id="2-3-4-查询交叉引用条目-Elink"><a href="#2-3-4-查询交叉引用条目-Elink" class="headerlink" title="2.3.4 查询交叉引用条目 | Elink"></a>2.3.4 查询交叉引用条目 | Elink</h5><blockquote><p>Elink：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ELink">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ELink</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====搜索交叉引用条目=====</span><br><span class="hljs-comment"># 接下来我们看看 id 为 5460 的基因相关的文献资料</span><br>read_elink = Entrez.read(Entrez.elink(dbfrom=<span class="hljs-string">&quot;gene&quot;</span>, db=<span class="hljs-string">&quot;pubmed&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;5460&quot;</span>))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LinkSetDb: &quot;</span>, read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>])<br><span class="hljs-comment"># 查看所有相关的目标库</span><br><span class="hljs-keyword">for</span> lsd <span class="hljs-keyword">in</span> read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (lsd[<span class="hljs-string">&quot;DbTo&quot;</span>], lsd[<span class="hljs-string">&quot;LinkName&quot;</span>], <span class="hljs-built_in">len</span>(lsd[<span class="hljs-string">&quot;Link&quot;</span>]))<br><span class="hljs-comment"># 查看相关的所有文献 Id</span><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;Link&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (link[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====搜索交叉引用条目=====</span><br><span class="hljs-comment"># 接下来我们看看 id 为 5460 的基因相关的文献资料</span><br>read_elink = Entrez.read(Entrez.elink(dbfrom=<span class="hljs-string">&quot;gene&quot;</span>, db=<span class="hljs-string">&quot;pubmed&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;5460&quot;</span>))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LinkSetDb: &quot;</span>, read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>])<br><span class="hljs-comment"># 查看所有相关的目标库</span><br><span class="hljs-keyword">for</span> lsd <span class="hljs-keyword">in</span> read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (lsd[<span class="hljs-string">&quot;DbTo&quot;</span>], lsd[<span class="hljs-string">&quot;LinkName&quot;</span>], <span class="hljs-built_in">len</span>(lsd[<span class="hljs-string">&quot;Link&quot;</span>]))<br><span class="hljs-comment"># 查看相关的所有文献 Id</span><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> read_elink[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;LinkSetDb&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;Link&quot;</span>]:<br>    <span class="hljs-built_in">print</span> (link[<span class="hljs-string">"Id"</span>])<br></code></pre></td></tr></table></figure><h4 id="2-4-其他操作"><a href="#2-4-其他操作" class="headerlink" title="2.4 其他操作"></a>2.4 其他操作</h4><h5 id="2-4-1-上传id列表到服务器-EPost"><a href="#2-4-1-上传id列表到服务器-EPost" class="headerlink" title="2.4.1 上传id列表到服务器 | EPost"></a>2.4.1 上传id列表到服务器 | EPost</h5><blockquote><p>EPost ：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EPost">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EPost</a></p><p><strong>为什么要上传列表到服务器？</strong></p><p>你要上传的 id 的列表会以 url 的形式上传到服务器，这里有一个问题，如果 id 很多，就会导致url很长。但是在 HTTP 的协议中，上传一般以 GET 形式，这种方式会限制 url 的长度，也就是说如果用户上传的 URL 太长就会只能局限在一定的长度内，而不能完整的上传到服务器。 为了解决这个问题，只能使用 POST 方式上传，它没有限制文本长度，随后以 HTTP 头文件的形式上传服务器，并以历史记录的形式存储在服务器</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====上传历史记录=====</span><br><span class="hljs-comment"># EPost ：https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EPost</span><br><span class="hljs-comment"># </span><br>id_list = [<span class="hljs-string">&#x27;379522&#x27;</span>, <span class="hljs-string">&#x27;397784&#x27;</span>, <span class="hljs-string">&#x27;398336&#x27;</span>]<br>hd_epost = Entrez.epost(<span class="hljs-string">&quot;gene&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;,&quot;</span>.join(id_list))<br>read_epost = Entrez.read(hd_epost)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;web_env: &quot;</span>, read_epost[<span class="hljs-string">&quot;WebEnv&quot;</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;query_key: &quot;</span>, read_epost[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====上传历史记录=====</span><br><span class="hljs-comment"># EPost ：https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EPost</span><br><span class="hljs-comment"># </span><br>id_list = [<span class="hljs-string">&#x27;379522&#x27;</span>, <span class="hljs-string">&#x27;397784&#x27;</span>, <span class="hljs-string">&#x27;398336&#x27;</span>]<br>hd_epost = Entrez.epost(<span class="hljs-string">&quot;gene&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;,&quot;</span>.join(id_list))<br>read_epost = Entrez.read(hd_epost)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;web_env: &quot;</span>, read_epost[<span class="hljs-string">&quot;WebEnv&quot;</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;query_key: &quot;</span>, read_epost[<span class="hljs-string">"QueryKey"</span>])<br></code></pre></td></tr></table></figure><h5 id="2-4-2-拼写建议与纠正-Espell"><a href="#2-4-2-拼写建议与纠正-Espell" class="headerlink" title="2.4.2 拼写建议与纠正 | Espell"></a>2.4.2 拼写建议与纠正 | Espell</h5><blockquote><p>这个模块用来纠正输入的查询词条</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====拼写建议=====</span><br>hd_espell = Entrez.espell(term=<span class="hljs-string">&quot;steem cell&quot;</span>)<br>read_espell = Entrez.read(hd_espell)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Query: &quot;</span>, read_espell[<span class="hljs-string">&quot;Query&quot;</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;CorrectedQuery: &quot;</span>, read_espell[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====拼写建议=====</span><br>hd_espell = Entrez.espell(term=<span class="hljs-string">&quot;steem cell&quot;</span>)<br>read_espell = Entrez.read(hd_espell)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Query: &quot;</span>, read_espell[<span class="hljs-string">&quot;Query&quot;</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;CorrectedQuery: &quot;</span>, read_espell[<span class="hljs-string">"CorrectedQuery"</span>])<br></code></pre></td></tr></table></figure><h5 id="2-4-3-下载-EFetch"><a href="#2-4-3-下载-EFetch" class="headerlink" title="2.4.3 下载 | EFetch"></a>2.4.3 下载 | EFetch</h5><blockquote><p>EFetch：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch">https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.EFetch</a><br>所有参数组合：<a href="https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly">https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====下载=====</span><br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;gb&#x27;</span>, retmode=<span class="hljs-string">&#x27;text&#x27;</span>)<br>hd_efetch_fa = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;fasta&#x27;</span>)<br><span class="hljs-built_in">print</span> (hd_efetch_gb.read())<br><span class="hljs-built_in">print</span> (hd_efetch_fa.read())<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/397784.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    hd_efetch_ml = Entrez.efetch(db=<span class="hljs-string">&#x27;pubmed&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;medline&#x27;</span>, retmode=<span class="hljs-string">&#x27;text&#x27;</span>)<br>    file.write(hd_efetch_ml.read())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/397784.txt&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    read_medline = Medline.read(file)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;PMID&quot;</span>, read_medline[<span class="hljs-string">&quot;PMID&quot;</span>])<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;TI&quot;</span>, read_medline[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====下载=====</span><br>hd_efetch_gb = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;gb&#x27;</span>, retmode=<span class="hljs-string">&#x27;text&#x27;</span>)<br>hd_efetch_fa = Entrez.efetch(db=<span class="hljs-string">&#x27;nucleotide&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;fasta&#x27;</span>)<br><span class="hljs-built_in">print</span> (hd_efetch_gb.read())<br><span class="hljs-built_in">print</span> (hd_efetch_fa.read())<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/397784.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    hd_efetch_ml = Entrez.efetch(db=<span class="hljs-string">&#x27;pubmed&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;397784&quot;</span>, rettype=<span class="hljs-string">&#x27;medline&#x27;</span>, retmode=<span class="hljs-string">&#x27;text&#x27;</span>)<br>    file.write(hd_efetch_ml.read())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res/397784.txt&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    read_medline = Medline.read(file)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;PMID&quot;</span>, read_medline[<span class="hljs-string">&quot;PMID&quot;</span>])<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;TI&quot;</span>, read_medline[<span class="hljs-string">"TI"</span>])<br></code></pre></td></tr></table></figure><h5 id="2-4-4-解析大文件-parse"><a href="#2-4-4-解析大文件-parse" class="headerlink" title="2.4.4 解析大文件| parse"></a>2.4.4 解析大文件| parse</h5><blockquote><p>一般在 NCBI 中的资源会有较大的内存占用，</p><p>这里的parse使用迭代器的方式，而不是像列表全部加载，因此了避免了大文件读取时占满内存</p></blockquote><ul><li>Linux 系统下准备工作</li></ul><blockquote><p>下载实例文件：<a href="ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/ASN_BINARY/Mammalia/Homo_sapiens.ags.gz">ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/ASN_BINARY/Mammalia/Homo_sapiens.ags.gz</a></p><p>下载格式转换工具：<a href="ftp://ftp.ncbi.nlm.nih.gov/toolbox/ncbi_tools/converters/by_program/gene2xml/linux64.gene2xml.gz">ftp://ftp.ncbi.nlm.nih.gov/toolbox/ncbi_tools/converters/by_program/gene2xml/linux64.gene2xml.gz</a></p></blockquote><ul><li>在终端依次运行下列命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">mkdir ncbi<br>cd ncbi<br>mkdir ags<br>mkdir tool<br>cd tool<br>wget ftp://ftp.ncbi.nlm.nih.gov/toolbox/ncbi_tools/converters/by_program/gene2xml/linux64.gene2xml.gz<br>gunzip linux64.gene2xml.gz<br>mv linux64.gene2xml gene2xml<br>cd ../ags<br>wget ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/ASN_BINARY/Mammalia/Homo_sapiens.ags.gz<br>gunzip Homo_sapiens.ags.gz<br>../tool/gene2xml -b T -i Homo_sapiens.ags -o Homo_sapiens.xml<br></code></pre></td></tr></table></figure><ul><li>下载你的目录结构类似这样，这里的Homo_sapiens.xml 大约有15G（2018.09）</li></ul><p><img src="http://baimoc.ziptop.top/blog/180912/7a788i6Hf1.png?imageslim" alt="mark"></p><ul><li>使用 BioPython 解析</li></ul><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====解析大文件=====</span><br>hd_parse = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Homo_sapiens.xml&quot;</span>)<br>res_parse = Entrez.parse(hd_parse)<br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> res_parse:<br>     status = record[<span class="hljs-string">&#x27;Entrezgene_track-info&#x27;</span>][<span class="hljs-string">&#x27;Gene-track&#x27;</span>][<span class="hljs-string">&#x27;Gene-track_status&#x27;</span>]<br>     <span class="hljs-keyword">if</span> status.attributes[<span class="hljs-string">&#x27;value&#x27;</span>]==<span class="hljs-string">&#x27;discontinued&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>     geneid = record[<span class="hljs-string">&#x27;Entrezgene_track-info&#x27;</span>][<span class="hljs-string">&#x27;Gene-track&#x27;</span>][<span class="hljs-string">&#x27;Gene-track_geneid&#x27;</span>]<br>     genename = record[<span class="hljs-string">&#x27;Entrezgene_gene&#x27;</span>][<span class="hljs-string">&#x27;Gene-ref&#x27;</span>][<span class="hljs-string">&#x27;Gene-ref_locus&#x27;</span>]<br>     <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> Entrez<br><span class="hljs-comment"># =====解析大文件=====</span><br>hd_parse = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Homo_sapiens.xml&quot;</span>)<br>res_parse = Entrez.parse(hd_parse)<br><span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> res_parse:<br>     status = record[<span class="hljs-string">&#x27;Entrezgene_track-info&#x27;</span>][<span class="hljs-string">&#x27;Gene-track&#x27;</span>][<span class="hljs-string">&#x27;Gene-track_status&#x27;</span>]<br>     <span class="hljs-keyword">if</span> status.attributes[<span class="hljs-string">&#x27;value&#x27;</span>]==<span class="hljs-string">&#x27;discontinued&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>     geneid = record[<span class="hljs-string">&#x27;Entrezgene_track-info&#x27;</span>][<span class="hljs-string">&#x27;Gene-track&#x27;</span>][<span class="hljs-string">&#x27;Gene-track_geneid&#x27;</span>]<br>     genename = record[<span class="hljs-string">&#x27;Entrezgene_gene&#x27;</span>][<span class="hljs-string">&#x27;Gene-ref&#x27;</span>][<span class="hljs-string">&#x27;Gene-ref_locus&#x27;</span>]<br>     <span class="hljs-built_in">print</span> (geneid, genename)<br></code></pre></td></tr></table></figure><hr><h2 id="生物信息中的Python-01-从零开始处理基因序列"><a href="#生物信息中的Python-01-从零开始处理基因序列" class="headerlink" title="生物信息中的Python 01 | 从零开始处理基因序列"></a><a href="https://blog.csdn.net/u011262253/article/details/88542804">生物信息中的Python 01 | 从零开始处理基因序列</a></h2><h2 id="生物信息中的Python-02-用biopython解析序列"><a href="#生物信息中的Python-02-用biopython解析序列" class="headerlink" title="生物信息中的Python 02 | 用biopython解析序列"></a><a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的Python 02 | 用biopython解析序列</a></h2><h2 id="生物信息中的Python-04-批量下载基因与文献"><a href="#生物信息中的Python-04-批量下载基因与文献" class="headerlink" title="生物信息中的Python 04 | 批量下载基因与文献"></a><a href="https://blog.csdn.net/u011262253/article/details/88542910">生物信息中的Python 04 | 批量下载基因与文献</a></h2>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 基因 </tag>
            
            <tag> 序列 </tag>
            
            <tag> NCBI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息中的Python 02 | 用biopython解析序列</title>
      <link href="/posts/50324/"/>
      <url>/posts/50324/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章<a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的Python 01 | 从零开始处理基因序列</a>自己造轮子实现了序列的基础操作，但是在Python的世界里，一项工作只要重复的次数多了，那么一定就会有大神来开发相应的包来解决，这个包名就是 <strong>Biopython</strong> 。接下来我们试着使用它来实现简单的序列处理。</p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1、-按照上一篇下载fasta文件的步骤，可以同理得到GeneBank的数据格式"><a href="#1、-按照上一篇下载fasta文件的步骤，可以同理得到GeneBank的数据格式" class="headerlink" title="1、 按照上一篇下载fasta文件的步骤，可以同理得到GeneBank的数据格式"></a>1、 按照上一篇下载fasta文件的步骤，可以同理得到GeneBank的数据格式</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTA1LzltYmNpYzNlYWUucG5n?x-oss-process=image/format,png" alt="mark"></p><h4 id="2、现在我们的目录结构是这样的"><a href="#2、现在我们的目录结构是这样的" class="headerlink" title="2、现在我们的目录结构是这样的"></a>2、现在我们的目录结构是这样的</h4><blockquote><p>搭建下面的目录结构参考：<a href="https://blog.csdn.net/u011262253/article/details/105902060">搭建 Python 高效开发环境： Pycharm + Anaconda </a> </p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTA1LzRtMDVFaWYwMmcucG5n?x-oss-process=image/format,png" alt="mark"></p><h4 id="3、安装Biopython，这里有两种方案："><a href="#3、安装Biopython，这里有两种方案：" class="headerlink" title="3、安装Biopython，这里有两种方案："></a>3、安装Biopython，这里有两种方案：</h4><h5 id="3-1-用pip安装Biopython，在cmd命令窗口输入"><a href="#3-1-用pip安装Biopython，在cmd命令窗口输入" class="headerlink" title="3.1 用pip安装Biopython，在cmd命令窗口输入"></a>3.1 用pip安装Biopython，在cmd命令窗口输入</h5><ul><li>下载Python的包管理工具：pip</li></ul><blockquote><p><a href="https://pypi.org/project/pip/#files">https://pypi.org/project/pip/#files</a></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTE3L0tsajRDSmVFM0IucG5n?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>下载完，解压，进入解压目录</p><ul><li>Linux 下输入</li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo python setup.py install<br></code></pre></td></tr></table></figure><ul><li><p>windows 下，在下载目录，<code>Shift</code>+右键</p></li><li><p>如下图所示，点击在此处打开命令窗口</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTE3LzUyOTlqNzdla0QucG5n?x-oss-process=image/format,png" alt="mark"></p></li><li><p>输入如下命令</p></li></ul> <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">python setup.py install<br></code></pre></td></tr></table></figure><p> <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTE3LzVraUxrS2tJZGEucG5n?x-oss-process=image/format,png" alt="mark"></p></li><li><p>测试是否安装成功，出现下图所示的提示即表示安装成功</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">pip -v<br></code></pre></td></tr></table></figure><p> <img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTE3L0tlRENGbGdMN2YucG5n?x-oss-process=image/format,png" alt="mark"></p></li><li><p>进入 Pycharm 的Terminal 窗口，输入以下命令来安装 Biopython</p></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre class=" language-hljs cmd"><code class="language-hljs cmd">pip install biopython<br></code></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTA1L0VobExqTEYwSTIucG5n?x-oss-process=image/format,png" alt="mark"></p><h5 id="3-2-直接用安装包安装"><a href="#3-2-直接用安装包安装" class="headerlink" title="3.2 直接用安装包安装"></a>3.2 直接用安装包安装</h5><ul><li><p><strong>window系统</strong>：</p><ul><li>下载地址：<a href="http://biopython.org/DIST/biopython-1.72.tar.gz">http://biopython.org/DIST/biopython-1.72.tar.gz</a></li><li>解压</li><li>按住<code>shift</code>并点击右键</li><li>在菜单栏点击在此处打开命令窗口，并输入如下命令：<code>python setup.py install</code></li></ul></li><li><p><strong>Linux系统</strong>：</p><ul><li><p>打开终端 （快捷键：<code>Ctrl+Alt+T </code>）</p></li><li><p>在终端输入以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre class=" language-hljs bash">$ wget http://biopython.org/DIST/biopython-1.72.tar.gz<br>$ tar -zxvf biopython-1.72.tar.gz<br>$ <span class="hljs-built_in"><code class="language-hljs bash">$ wget http://biopython.org/DIST/biopython-1.72.tar.gz<br>$ tar -zxvf biopython-1.72.tar.gz<br>$ <span class="hljs-built_in">cd</span> biopython-1.72/<br>$ sudo python setup.py install<br></code></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from Bio.Seq import Seq</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="hljs-built_in">seq</span> = Seq(<span class="hljs-string">&#x27;ATCG&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from Bio.Seq import Seq</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="hljs-built_in">seq</span> = Seq(<span class="hljs-string">&#x27;ATCG&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="hljs-built_in">seq</span></span><br>Seq(&#x27;ATCG&#x27;)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="二、Biopython-基础用法"><a href="#二、Biopython-基础用法" class="headerlink" title="二、Biopython 基础用法"></a>二、Biopython 基础用法</h3><h5 id="1-读取常见的序列文件格式（fasta，gb）"><a href="#1-读取常见的序列文件格式（fasta，gb）" class="headerlink" title="1 读取常见的序列文件格式（fasta，gb）"></a>1 读取常见的序列文件格式（fasta，gb）</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列 Fasta 格式文件</span><br>fa_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>)<br><span class="hljs-comment"># print fa_seq</span><br><span class="hljs-comment"># 读取包含多个序列的 fasta 格式文件</span><br><span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>):<br>    <span class="hljs-built_in">print</span> (fa.seq)<br><span class="hljs-comment"># 一个多序列文件中的所有序列</span><br>seqs = [fa.seq <span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>,  <span class="hljs-string">&quot;fasta&quot;</span>)]<br><span class="hljs-built_in">print</span> (seqs)<br><span class="hljs-comment"># 如果不想要seq对象中的字母表，可以用str()来强制类型转换</span><br>seqs = [<span class="hljs-built_in">str</span>(fa.seq) <span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>,  <span class="hljs-string">&quot;fasta&quot;</span>)]<br><span class="hljs-built_in">print</span> (seqs)<br><br><span class="hljs-comment"># 读取包含单个序列的 gb 格式文件</span><br>gb_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.gb&quot;</span>, <span class="hljs-string">&quot;genbank&quot;</span>)<br><span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列 Fasta 格式文件</span><br>fa_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>)<br><span class="hljs-comment"># print fa_seq</span><br><span class="hljs-comment"># 读取包含多个序列的 fasta 格式文件</span><br><span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>):<br>    <span class="hljs-built_in">print</span> (fa.seq)<br><span class="hljs-comment"># 一个多序列文件中的所有序列</span><br>seqs = [fa.seq <span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>,  <span class="hljs-string">&quot;fasta&quot;</span>)]<br><span class="hljs-built_in">print</span> (seqs)<br><span class="hljs-comment"># 如果不想要seq对象中的字母表，可以用str()来强制类型转换</span><br>seqs = [<span class="hljs-built_in">str</span>(fa.seq) <span class="hljs-keyword">for</span> fa <span class="hljs-keyword">in</span> SeqIO.parse(<span class="hljs-string">&quot;res/multi.fasta&quot;</span>,  <span class="hljs-string">&quot;fasta&quot;</span>)]<br><span class="hljs-built_in">print</span> (seqs)<br><br><span class="hljs-comment"># 读取包含单个序列的 gb 格式文件</span><br>gb_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.gb&quot;</span>, <span class="hljs-string">&quot;genbank&quot;</span>)<br><span class="hljs-built_in">print</span> (gb_seq)<br></code></pre></td></tr></table></figure><h5 id="2-浏览-fasta-序列文件内容"><a href="#2-浏览-fasta-序列文件内容" class="headerlink" title="2 浏览 fasta 序列文件内容"></a>2 浏览 fasta 序列文件内容</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列 Fasta 格式文件</span><br>fa_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>)<br><br><span class="hljs-comment"># =====获取详细的信息=====</span><br><span class="hljs-comment"># 提取基因ID，name</span><br><span class="hljs-comment"># Fasta 文件中序列名所在行的第一个词被作为 id 和 name</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;id: &quot;</span>, fa_seq.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, fa_seq.name)<br><span class="hljs-comment"># 基因 Description 是fasta文件格式中的第一行</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;description: &quot;</span>, fa_seq.description)<br><span class="hljs-comment"># 序列</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;seq: &quot;</span>, fa_seq.seq)<br><span class="hljs-comment"># 序列来源库信息（NCBI的数据库信息会包括数据库交叉引用）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;dbxrefs: &quot;</span>, fa_seq.dbxrefs)<br><span class="hljs-comment"># 全部序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;annotations: &quot;</span>, fa_seq.annotations)<br><span class="hljs-comment"># 序列中每个字母的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;letter_annotations: &quot;</span>, fa_seq.letter_annotations)<br><span class="hljs-comment"># 部分序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列 Fasta 格式文件</span><br>fa_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.fasta&quot;</span>, <span class="hljs-string">&quot;fasta&quot;</span>)<br><br><span class="hljs-comment"># =====获取详细的信息=====</span><br><span class="hljs-comment"># 提取基因ID，name</span><br><span class="hljs-comment"># Fasta 文件中序列名所在行的第一个词被作为 id 和 name</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;id: &quot;</span>, fa_seq.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, fa_seq.name)<br><span class="hljs-comment"># 基因 Description 是fasta文件格式中的第一行</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;description: &quot;</span>, fa_seq.description)<br><span class="hljs-comment"># 序列</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;seq: &quot;</span>, fa_seq.seq)<br><span class="hljs-comment"># 序列来源库信息（NCBI的数据库信息会包括数据库交叉引用）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;dbxrefs: &quot;</span>, fa_seq.dbxrefs)<br><span class="hljs-comment"># 全部序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;annotations: &quot;</span>, fa_seq.annotations)<br><span class="hljs-comment"># 序列中每个字母的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;letter_annotations: &quot;</span>, fa_seq.letter_annotations)<br><span class="hljs-comment"># 部分序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"features: "</span>, fa_seq.features)<br></code></pre></td></tr></table></figure><h5 id="3-浏览-genebank-序列文件内容"><a href="#3-浏览-genebank-序列文件内容" class="headerlink" title="3 浏览 genebank 序列文件内容"></a>3 浏览 genebank 序列文件内容</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列的 gb 格式文件</span><br>gb_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.gb&quot;</span>, <span class="hljs-string">&quot;genbank&quot;</span>)    <br><span class="hljs-built_in">print</span> (gb_seq)<br><br><span class="hljs-comment"># =====获取详细的信息=====</span><br><span class="hljs-comment"># 提取基因ID，name</span><br><span class="hljs-comment"># gb文件中序列名包含比fasta更加详细的序列信息，下面分别是 id 和 name</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;id: &quot;</span>, gb_seq.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, gb_seq.name)<br><span class="hljs-comment"># 基因 Description 是fasta文件格式中的第一行</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;description: &quot;</span>,  gb_seq.description)<br><span class="hljs-comment"># 序列信息, 这里的序列信息是以 bioPython 中的seq对象存储</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;seq: &quot;</span>, gb_seq.seq)<br><span class="hljs-comment"># 序列来源库信息（NCBI的数据库信息会包括数据库交叉引用）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;dbxrefs: &quot;</span>, gb_seq.dbxrefs)<br><span class="hljs-comment"># 全部序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;annotations: &quot;</span>, gb_seq.annotations)<br><span class="hljs-comment"># 序列中每个字母的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;letter_annotations: &quot;</span>, gb_seq.letter_annotations)<br><span class="hljs-comment"># 部分序列的注释信息,SeqFeature 对象的形式保存了features table中的所有entries（如genes和CDS等）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;features: &quot;</span>, gb_seq.features)<br><span class="hljs-comment"># 该基因的物种信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;organism: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;organism&quot;</span>])<br><span class="hljs-comment"># 关于序列的注释信息，相关数据库的交叉引用号</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;comment: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;comment&quot;</span>])<br><span class="hljs-comment"># 序列来源的物种名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;source: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;source&quot;</span>])<br><span class="hljs-comment"># 该基因的分类学信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;taxonomy: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;taxonomy&quot;</span>])<br><span class="hljs-comment"># 该基因的整理后的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;structured_comment: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;structured_comment&quot;</span>])<br><span class="hljs-comment"># 该基因序列相关的关键词</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;keywords: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;keywords&quot;</span>])<br><span class="hljs-comment"># 该基因的相关文献编号，或递交序列的注册信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;references: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;references&quot;</span>])<br><span class="hljs-comment"># 该基因的入库时，给的基因编号，以及在染色体上的位点信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;accessions: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;accessions&quot;</span>])<br><span class="hljs-comment"># 该基因的分子类型，一般为 DNA</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;molecule_type: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;molecule_type&quot;</span>])<br><span class="hljs-comment"># 该基因的数据文件划分方式</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;data_file_division: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;data_file_division&quot;</span>])<br><span class="hljs-comment"># 基因发布时间</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;date: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;date&quot;</span>])<br><span class="hljs-comment"># 该基因的更新版本</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;sequence_version: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;sequence_version&quot;</span>])<br><span class="hljs-comment"># 该基因的拓扑结构</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;topology: &quot;</span>, gb_seq.annotations[<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><span class="hljs-comment"># 读取包含单个序列的 gb 格式文件</span><br>gb_seq = SeqIO.read(<span class="hljs-string">&quot;res/sequence1.gb&quot;</span>, <span class="hljs-string">&quot;genbank&quot;</span>)    <br><span class="hljs-built_in">print</span> (gb_seq)<br><br><span class="hljs-comment"># =====获取详细的信息=====</span><br><span class="hljs-comment"># 提取基因ID，name</span><br><span class="hljs-comment"># gb文件中序列名包含比fasta更加详细的序列信息，下面分别是 id 和 name</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;id: &quot;</span>, gb_seq.<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, gb_seq.name)<br><span class="hljs-comment"># 基因 Description 是fasta文件格式中的第一行</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;description: &quot;</span>,  gb_seq.description)<br><span class="hljs-comment"># 序列信息, 这里的序列信息是以 bioPython 中的seq对象存储</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;seq: &quot;</span>, gb_seq.seq)<br><span class="hljs-comment"># 序列来源库信息（NCBI的数据库信息会包括数据库交叉引用）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;dbxrefs: &quot;</span>, gb_seq.dbxrefs)<br><span class="hljs-comment"># 全部序列的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;annotations: &quot;</span>, gb_seq.annotations)<br><span class="hljs-comment"># 序列中每个字母的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;letter_annotations: &quot;</span>, gb_seq.letter_annotations)<br><span class="hljs-comment"># 部分序列的注释信息,SeqFeature 对象的形式保存了features table中的所有entries（如genes和CDS等）</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;features: &quot;</span>, gb_seq.features)<br><span class="hljs-comment"># 该基因的物种信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;organism: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;organism&quot;</span>])<br><span class="hljs-comment"># 关于序列的注释信息，相关数据库的交叉引用号</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;comment: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;comment&quot;</span>])<br><span class="hljs-comment"># 序列来源的物种名</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;source: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;source&quot;</span>])<br><span class="hljs-comment"># 该基因的分类学信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;taxonomy: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;taxonomy&quot;</span>])<br><span class="hljs-comment"># 该基因的整理后的注释信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;structured_comment: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;structured_comment&quot;</span>])<br><span class="hljs-comment"># 该基因序列相关的关键词</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;keywords: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;keywords&quot;</span>])<br><span class="hljs-comment"># 该基因的相关文献编号，或递交序列的注册信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;references: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;references&quot;</span>])<br><span class="hljs-comment"># 该基因的入库时，给的基因编号，以及在染色体上的位点信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;accessions: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;accessions&quot;</span>])<br><span class="hljs-comment"># 该基因的分子类型，一般为 DNA</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;molecule_type: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;molecule_type&quot;</span>])<br><span class="hljs-comment"># 该基因的数据文件划分方式</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;data_file_division: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;data_file_division&quot;</span>])<br><span class="hljs-comment"># 基因发布时间</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;date: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;date&quot;</span>])<br><span class="hljs-comment"># 该基因的更新版本</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;sequence_version: &quot;</span>, gb_seq.annotations[<span class="hljs-string">&quot;sequence_version&quot;</span>])<br><span class="hljs-comment"># 该基因的拓扑结构</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;topology: &quot;</span>, gb_seq.annotations[<span class="hljs-string">"topology"</span>])<br></code></pre></td></tr></table></figure><blockquote><p>相信大家可以看到 GeneBank 比 fasta 格式更加详细和贴心，但是对于序列处理来说内存占用和运行时间比这些信息更加重要。这就使fasta成为我们一般在序列分析中常用的格式。</p></blockquote><h5 id="4-新建序列文件"><a href="#4-新建序列文件" class="headerlink" title="4 新建序列文件"></a>4 新建序列文件</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio.Seq <span class="hljs-keyword">import</span> Seq<br><br><span class="hljs-comment"># 新建一个DNA序列对象</span><br>dna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_dna)<br><span class="hljs-comment"># 新建一个RNA序列对象</span><br>rna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_rna)<br><span class="hljs-comment"># # 新建一个蛋白质序列对象</span><br>protein_seq = Seq(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio.Seq <span class="hljs-keyword">import</span> Seq<br><br><span class="hljs-comment"># 新建一个DNA序列对象</span><br>dna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_dna)<br><span class="hljs-comment"># 新建一个RNA序列对象</span><br>rna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_rna)<br><span class="hljs-comment"># # 新建一个蛋白质序列对象</span><br>protein_seq = Seq(<span class="hljs-string">"GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA"</span>, IUPAC.protein)<br></code></pre></td></tr></table></figure><p>序列对象由一段字符串和其对应的编码表所定义。我们可以从上述的代码中看到，字符串内容一样，唯一不同的就是第二个参数IUPAC值不一样。IUPAC (International Union of Pure and Applied Chemistry ) 是一个制定化学相关标准的组织，Biopython 所使用的编码表就是由它制定的，想了解详细细节可以参考<a href="http://www.bioinformatics.org/sms2/iupac.html">http://www.bioinformatics.org/sms2/iupac.html</a> ，详细定义如下：</p><table><thead><tr><th>名称</th><th>编码表</th></tr></thead><tbody><tr><td>ambiguous_dna_letters</td><td>GATCRYWSMKHBVDN</td></tr><tr><td>unambiguous_dna_letters</td><td>GATC</td></tr><tr><td>ambiguous_rna_letters</td><td>GAUCRYWSMKHBVDN</td></tr><tr><td>unambiguous_rna_letters</td><td>GAUC</td></tr><tr><td>protein</td><td>ARNDCQEGHILKMFPSTWYV</td></tr></tbody></table><h5 id="5-修改序列文件"><a href="#5-修改序列文件" class="headerlink" title="5 修改序列文件"></a>5 修改序列文件</h5><p>在生物学意义上，序列是不可以随便更改的，也就是不可变的。如果强行修改，那么就会报错<code>TypeError: &#39;Seq&#39; object does not support item assignment</code></p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">dna_seq[<span class="hljs-number">0</span>] = <span class="hljs-string"><code class="language-hljs python">dna_seq[<span class="hljs-number">0</span>] = <span class="hljs-string">"G"</span><br></code></pre></td></tr></table></figure><p>如果你执意修改也是可以的，但是不建议这么做</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">dna_seq_mutable = dna_seq.tomutable()<br>dna_seq_mutable[<span class="hljs-number">0</span>] = <span class="hljs-string"><code class="language-hljs python">dna_seq_mutable = dna_seq.tomutable()<br>dna_seq_mutable[<span class="hljs-number">0</span>] = <span class="hljs-string">"G"</span><br></code></pre></td></tr></table></figure><h5 id="6-操作序列文件"><a href="#6-操作序列文件" class="headerlink" title="6 操作序列文件"></a>6 操作序列文件</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">from</span> Bio.Seq <span class="hljs-keyword">import</span> Seq<br><br><span class="hljs-comment"># 新建一个DNA序列对象</span><br>dna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_dna)<br><span class="hljs-comment"># 序列信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Sequence: &quot;</span>, dna_seq）<br><span class="hljs-comment"># 序列长度</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Length : &quot;</span>, <span class="hljs-built_in">len</span>(dna_seq)）<br><span class="hljs-comment"># 单个核苷酸计数</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;G Counts: &quot;</span>, dna_seq.count(<span class="hljs-string">&quot;G&quot;</span>)）<br><span class="hljs-comment"># 获取反向序列</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;reverse: &quot;</span>, dna_seq[::-<span class="hljs-number">1</span>]）<br><span class="hljs-comment"># 获取反向互补序列</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Reverse complement: &quot;</span>, dna_seq.complement()）<br><span class="hljs-comment"># 获取蛋白质的反向互补序列，这里显然是报错的，因为蛋白序列没有这一属性</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">from</span> Bio.Seq <span class="hljs-keyword">import</span> Seq<br><br><span class="hljs-comment"># 新建一个DNA序列对象</span><br>dna_seq = Seq(<span class="hljs-string">&quot;GGATGGTTGTCTATTAACTTGTTCAAAAAAGTATCAGGAGTTGTCAAGGCAGAGAAGAGAGTGTTTGCA&quot;</span>, IUPAC.unambiguous_dna)<br><span class="hljs-comment"># 序列信息</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Sequence: &quot;</span>, dna_seq）<br><span class="hljs-comment"># 序列长度</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Length : &quot;</span>, <span class="hljs-built_in">len</span>(dna_seq)）<br><span class="hljs-comment"># 单个核苷酸计数</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;G Counts: &quot;</span>, dna_seq.count(<span class="hljs-string">&quot;G&quot;</span>)）<br><span class="hljs-comment"># 获取反向序列</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;reverse: &quot;</span>, dna_seq[::-<span class="hljs-number">1</span>]）<br><span class="hljs-comment"># 获取反向互补序列</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Reverse complement: &quot;</span>, dna_seq.complement()）<br><span class="hljs-comment"># 获取蛋白质的反向互补序列，这里显然是报错的，因为蛋白序列没有这一属性</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"Protein reverse complement: "</span>, protein_seq.complement()）       <br><br></code></pre></td></tr></table></figure><h5 id="7-用-Biopython-将-DNA-翻译为-RNA"><a href="#7-用-Biopython-将-DNA-翻译为-RNA" class="headerlink" title="7 用 Biopython 将 DNA 翻译为 RNA"></a>7 用 Biopython 将 DNA 翻译为 RNA</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># =====转录=====</span><br><span class="hljs-comment"># 如果序列为编码链，那么直接转换</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;rna: &quot;</span>, dna_seq.transcribe())<br><span class="hljs-comment"># 如果序列为模板链，就需要先转为编码链</span><br>transcribe_seq = dna_seq.reverse_complement().transcribe()<br><span class="hljs-built_in">print</span> (<span class="hljs-string"><code class="language-hljs python"><span class="hljs-comment"># =====转录=====</span><br><span class="hljs-comment"># 如果序列为编码链，那么直接转换</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;rna: &quot;</span>, dna_seq.transcribe())<br><span class="hljs-comment"># 如果序列为模板链，就需要先转为编码链</span><br>transcribe_seq = dna_seq.reverse_complement().transcribe()<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"rna: "</span>, transcribe_seq)<br></code></pre></td></tr></table></figure><h5 id="8-用BioPython-将-RNA-翻译为-蛋白质"><a href="#8-用BioPython-将-RNA-翻译为-蛋白质" class="headerlink" title="8 用BioPython 将 RNA 翻译为 蛋白质"></a>8 用BioPython 将 RNA 翻译为 蛋白质</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># =====翻译=====</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate())<br><span class="hljs-comment"># 如果翻译的是线粒体密码子，那么在参数中需要输入，其他参考 https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?mode=c or ftp://ftp.ncbi.nlm.nih.gov/entrez/misc/data/gc.prt</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate(table=<span class="hljs-string">&quot;Vertebrate Mitochondrial&quot;</span>))<br><span class="hljs-comment"># 在现实生物世界中，一般在遇到终止密码子之后的序列不用翻译</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate(table=<span class="hljs-string">&quot;Vertebrate Mitochondrial&quot;</span>, to_stop=<span class="hljs-literal">True</span>))<br><span class="hljs-comment"># 如果DNA序列为编码序列，可以直接翻译，DNA序列不是3的倍数时，报错</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, dna_seq.translate())<br><span class="hljs-comment"># 在细菌世界中，在细菌遗传密码中 GTG 是个有效的起始密码子，注意第一个密码子（正常情况下 GTG编码缬氨酸， 但是如果作为起始密码子，则翻译成甲硫氨酸）</span><br>bacterial_dna = Seq(<span class="hljs-string">&quot;GTGAAAAAGATGCAATCTATCGTACTCGCACTTTCCCTGGTTCTGGTCGCTCCCATGGCATAA&quot;</span>, generic_dna)<br><span class="hljs-built_in">print</span>  (<span class="hljs-string">&quot;protein: &quot;</span>, bacterial_dna.translate(table=<span class="hljs-string">&quot;Bacterial&quot;</span>, to_stop=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>  (<span class="hljs-string">&quot;protein: &quot;</span>, bacterial_dna.translate(table=<span class="hljs-string">&quot;Bacterial&quot;</span>, cds=<span class="hljs-literal"><code class="language-hljs python"><span class="hljs-comment"># =====翻译=====</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate())<br><span class="hljs-comment"># 如果翻译的是线粒体密码子，那么在参数中需要输入，其他参考 https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?mode=c or ftp://ftp.ncbi.nlm.nih.gov/entrez/misc/data/gc.prt</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate(table=<span class="hljs-string">&quot;Vertebrate Mitochondrial&quot;</span>))<br><span class="hljs-comment"># 在现实生物世界中，一般在遇到终止密码子之后的序列不用翻译</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, transcribe_seq.translate(table=<span class="hljs-string">&quot;Vertebrate Mitochondrial&quot;</span>, to_stop=<span class="hljs-literal">True</span>))<br><span class="hljs-comment"># 如果DNA序列为编码序列，可以直接翻译，DNA序列不是3的倍数时，报错</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, dna_seq.translate())<br><span class="hljs-comment"># 在细菌世界中，在细菌遗传密码中 GTG 是个有效的起始密码子，注意第一个密码子（正常情况下 GTG编码缬氨酸， 但是如果作为起始密码子，则翻译成甲硫氨酸）</span><br>bacterial_dna = Seq(<span class="hljs-string">&quot;GTGAAAAAGATGCAATCTATCGTACTCGCACTTTCCCTGGTTCTGGTCGCTCCCATGGCATAA&quot;</span>, generic_dna)<br><span class="hljs-built_in">print</span>  (<span class="hljs-string">&quot;protein: &quot;</span>, bacterial_dna.translate(table=<span class="hljs-string">&quot;Bacterial&quot;</span>, to_stop=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>  (<span class="hljs-string">&quot;protein: &quot;</span>, bacterial_dna.translate(table=<span class="hljs-string">&quot;Bacterial&quot;</span>, cds=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h5 id="7-做一些有意思的事"><a href="#7-做一些有意思的事" class="headerlink" title="7 做一些有意思的事"></a>7 做一些有意思的事</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># =====寻找TATA框=====</span><br><span class="hljs-comment"># TATA框约在多数真核生物基因转录起始点上游约-30bp（-25~-32bp）处，基本上由A-T碱基对组成，是决定基因转录始的选择，为RNA聚合酶的结合处之一</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;TA Counts: &quot;</span>, dna_seq.count(<span class="hljs-string">&quot;TA&quot;</span>)）<br><br><span class="hljs-comment"># =====GC含量=====</span><br><span class="hljs-comment"># （A+T）/（G+C）之比随DNA的种类不同而异。GC含量愈高，DNA的密度也愈高，同时热及碱不易使之变性，因此利用这一特性便可进行DNA的分离或测定。</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;GC Contenten&quot;</span>, <span class="hljs-number">100</span> * <span class="hljs-built_in">float</span>(dna_seq.count(<span class="hljs-string">&quot;G&quot;</span>) + dna_seq.count(<span class="hljs-string">&quot;C&quot;</span>)) / <span class="hljs-built_in">len</span>(dna_seq)）<br><br><span class="hljs-comment"># =====得到promoter序列=====</span><br><span class="hljs-comment"># 在寻找基因的promoter时(一般promoter的位点不确定)，但是可以通过将起始位点左右2kb基因视为promoter</span><br><span class="hljs-comment"># 这里训练切取，将切取设起始位点为前10bp</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;Promoter seq: &quot;</span>,dna_seq[:<span class="hljs-number"><code class="language-hljs python"><span class="hljs-comment"># =====寻找TATA框=====</span><br><span class="hljs-comment"># TATA框约在多数真核生物基因转录起始点上游约-30bp（-25~-32bp）处，基本上由A-T碱基对组成，是决定基因转录始的选择，为RNA聚合酶的结合处之一</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;TA Counts: &quot;</span>, dna_seq.count(<span class="hljs-string">&quot;TA&quot;</span>)）<br><br><span class="hljs-comment"># =====GC含量=====</span><br><span class="hljs-comment"># （A+T）/（G+C）之比随DNA的种类不同而异。GC含量愈高，DNA的密度也愈高，同时热及碱不易使之变性，因此利用这一特性便可进行DNA的分离或测定。</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;GC Contenten&quot;</span>, <span class="hljs-number">100</span> * <span class="hljs-built_in">float</span>(dna_seq.count(<span class="hljs-string">&quot;G&quot;</span>) + dna_seq.count(<span class="hljs-string">&quot;C&quot;</span>)) / <span class="hljs-built_in">len</span>(dna_seq)）<br><br><span class="hljs-comment"># =====得到promoter序列=====</span><br><span class="hljs-comment"># 在寻找基因的promoter时(一般promoter的位点不确定)，但是可以通过将起始位点左右2kb基因视为promoter</span><br><span class="hljs-comment"># 这里训练切取，将切取设起始位点为前10bp</span><br><span class="hljs-built_in">print</span> （<span class="hljs-string">&quot;Promoter seq: &quot;</span>,dna_seq[:<span class="hljs-number">10</span>]）<br></code></pre></td></tr></table></figure><hr><h2 id="生物信息中的Python-03-自动化操作NCBI"><a href="#生物信息中的Python-03-自动化操作NCBI" class="headerlink" title="生物信息中的Python 03 | 自动化操作NCBI"></a><a href="https://blog.csdn.net/u011262253/article/details/88542879">生物信息中的Python 03 | 自动化操作NCBI</a></h2><h2 id="生物信息中的Python-04-批量下载基因与文献"><a href="#生物信息中的Python-04-批量下载基因与文献" class="headerlink" title="生物信息中的Python 04 | 批量下载基因与文献"></a><a href="https://blog.csdn.net/u011262253/article/details/88542910">生物信息中的Python 04 | 批量下载基因与文献</a></h2>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 基因 </tag>
            
            <tag> 序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息中的Python 01 | 从零开始处理基因序列</title>
      <link href="/posts/9206/"/>
      <url>/posts/9206/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-序列数据的下载"><a href="#一、-序列数据的下载" class="headerlink" title="一、 序列数据的下载"></a>一、 序列数据的下载</h3><p>在开始了解序列的处理流程时，我们先要知道序列下载网址。其中一个知名的网站就是NCBI （National Center for Biotechnology Information）美国国立生物技术信息中心。</p><h5 id="1、通过如下的网站进入-NCBI-，可以看到它包含许多的子库，其中-Gene-就是我们一般下载基因序列的库，接下来，在后面的输入框输入-oct4-并点击-Search。"><a href="#1、通过如下的网站进入-NCBI-，可以看到它包含许多的子库，其中-Gene-就是我们一般下载基因序列的库，接下来，在后面的输入框输入-oct4-并点击-Search。" class="headerlink" title="1、通过如下的网站进入 NCBI ，可以看到它包含许多的子库，其中 Gene 就是我们一般下载基因序列的库，接下来，在后面的输入框输入 oct4 并点击 Search。"></a>1、通过如下的网站进入 NCBI ，可以看到它包含许多的子库，其中 Gene 就是我们一般下载基因序列的库，接下来，在后面的输入框输入 <code>oct4</code> 并点击 <code>Search</code>。</h5><blockquote><p>NCBI: <a href="https://www.ncbi.nlm.nih.gov/">https://www.ncbi.nlm.nih.gov/</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/3e60c518ed817dfd7e4cc1465dd98fe8.png" alt="mark"></p><h5 id="2、可以看到该基因在不同物种和实验中所测得的相同基因序列，我们选择其中智人的POU5F1基因。"><a href="#2、可以看到该基因在不同物种和实验中所测得的相同基因序列，我们选择其中智人的POU5F1基因。" class="headerlink" title="2、可以看到该基因在不同物种和实验中所测得的相同基因序列，我们选择其中智人的POU5F1基因。"></a>2、可以看到该基因在不同物种和实验中所测得的相同基因序列，我们选择其中智人的POU5F1基因。</h5><blockquote><p>值得注意的是 POU5F1 是 Oct4 基因的别名，本质上指的一个基因</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/f6d1c91e2d9a47bbd327bd6c642b94a4.png" alt="mark"></p><h5 id="3、向下滚动，直到看到如下图所示的-FASTA-链接，点击进入。"><a href="#3、向下滚动，直到看到如下图所示的-FASTA-链接，点击进入。" class="headerlink" title="3、向下滚动，直到看到如下图所示的 FASTA 链接，点击进入。"></a>3、向下滚动，直到看到如下图所示的 <code>FASTA</code> 链接，点击进入。</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/4ed8a6bf5947d0f4f1aaef2563dc3504.png" alt="mark"></p><h5 id="4、在这个页面就可以看到通过测序技术所得到的DNA序列。"><a href="#4、在这个页面就可以看到通过测序技术所得到的DNA序列。" class="headerlink" title="4、在这个页面就可以看到通过测序技术所得到的DNA序列。"></a>4、在这个页面就可以看到通过测序技术所得到的DNA序列。</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/3a3ed728eb8d8a8638fa2c3873301927.png" alt="mark"></p><h5 id="5、通过如下步骤我们可以得到该基因序列的-fasta-格式文件"><a href="#5、通过如下步骤我们可以得到该基因序列的-fasta-格式文件" class="headerlink" title="5、通过如下步骤我们可以得到该基因序列的 fasta 格式文件"></a>5、通过如下步骤我们可以得到该基因序列的 fasta 格式文件</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/772d4a5589939a233ee0e241aec607e1.png" alt="mark"></p><h5 id="6、你也可以按照上述步骤尝试获取-Mus-musculus-的-fasta-序列，我们后面的分析需要用到"><a href="#6、你也可以按照上述步骤尝试获取-Mus-musculus-的-fasta-序列，我们后面的分析需要用到" class="headerlink" title="6、你也可以按照上述步骤尝试获取[ Mus musculus ] 的 fasta 序列，我们后面的分析需要用到"></a>6、你也可以按照上述步骤尝试获取[ <em>Mus musculus</em> ] 的 fasta 序列，我们后面的分析需要用到</h5><h3 id="二、-DNA序列基本处理"><a href="#二、-DNA序列基本处理" class="headerlink" title="二、 DNA序列基本处理"></a>二、 DNA序列基本处理</h3><blockquote><p>Python版本：Python 3.6</p><p>IDE：Pycharm (<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a>)  下载 Pycharm 的免费社区版就足够我们学习使用</p><p>操作系统：Win7</p></blockquote><h5 id="0、在Pycharm里新建如下目录的项目"><a href="#0、在Pycharm里新建如下目录的项目" class="headerlink" title="0、在Pycharm里新建如下目录的项目"></a>0、在Pycharm里新建如下目录的项目</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/a8ba922ba653101ff60bb1c9b67c7829.png" alt="mark"></p><h5 id="1、进入main-py文件，我们先把序列文件读取出来看看，到底是怎样的结果"><a href="#1、进入main-py文件，我们先把序列文件读取出来看看，到底是怎样的结果" class="headerlink" title="1、进入main.py文件，我们先把序列文件读取出来看看，到底是怎样的结果"></a>1、进入<code>main.py</code>文件，我们先把序列文件读取出来看看，到底是怎样的结果</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-built_in"><code class="language-hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-built_in">print</span> (line)<br></code></pre></td></tr></table></figure><h5 id="2、可以看到Fasta格式开始于一个标识符-gt-，然后是一行描述，下面是序列，直到下一个-gt-表示下一条序列"><a href="#2、可以看到Fasta格式开始于一个标识符-gt-，然后是一行描述，下面是序列，直到下一个-gt-表示下一条序列" class="headerlink" title="2、可以看到Fasta格式开始于一个标识符&gt;，然后是一行描述，下面是序列，直到下一个&gt;,表示下一条序列"></a>2、可以看到Fasta格式开始于一个标识符<code>&gt;</code>，然后是一行描述，下面是序列，直到下一个<code>&gt;</code>,表示下一条序列</h5><h5 id="这些字符串看起来和下载-Fasta-文件页面显示的差不多，但是这不是我们想要的结果"><a href="#这些字符串看起来和下载-Fasta-文件页面显示的差不多，但是这不是我们想要的结果" class="headerlink" title="这些字符串看起来和下载 Fasta 文件页面显示的差不多，但是这不是我们想要的结果"></a>这些字符串看起来和下载 Fasta 文件页面显示的差不多，但是这不是我们想要的结果</h5><blockquote><p><a href="https://blog.csdn.net/u011262253/article/details/51164756">Fasta 格式详解</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/49529ec7aa39482419315fab69b756e4.png" alt="mark"></p><h5 id="3、接下来我们把描述字段和序列分别提取并存储在字典中"><a href="#3、接下来我们把描述字段和序列分别提取并存储在字典中" class="headerlink" title="3、接下来我们把描述字段和序列分别提取并存储在字典中"></a>3、接下来我们把描述字段和序列分别提取并存储在字典中</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">fasta = &#123;&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    sequence = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;&gt;&quot;</span>):<br>            <span class="hljs-comment"># 去除描述字段行中的\n和&gt;</span><br>            name = line[<span class="hljs-number">1</span>:].rstrip()<br>            fasta[name] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># 去除序列字段行中的\n，并将所有字符规范为大写字符</span><br>        fasta[name] += line.rstrip().upper()<br><span class="hljs-built_in"><code class="language-hljs python">fasta = &#123;&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    sequence = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;&gt;&quot;</span>):<br>            <span class="hljs-comment"># 去除描述字段行中的\n和&gt;</span><br>            name = line[<span class="hljs-number">1</span>:].rstrip()<br>            fasta[name] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># 去除序列字段行中的\n，并将所有字符规范为大写字符</span><br>        fasta[name] += line.rstrip().upper()<br><span class="hljs-built_in">print</span> (fasta)<br></code></pre></td></tr></table></figure><p>用函数把上面的代码装起来，方便后续调用</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_fasta</span>(<span class="hljs-params">fasta_path</span>):<br>fasta = &#123;&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fasta_path) <span class="hljs-keyword">as</span> file:<br>    sequence = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;&gt;&quot;</span>):<br>            <span class="hljs-comment"># 去除描述字段行中的\n和&gt;</span><br>            name = line[<span class="hljs-number">1</span>:].rstrip()<br>            fasta[name] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># 去除序列字段行中的\n，并将所有字符规范为大写字符</span><br>        fasta[name] += line.rstrip().upper()<br><span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_fasta</span>(<span class="hljs-params">fasta_path</span>):<br>fasta = &#123;&#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fasta_path) <span class="hljs-keyword">as</span> file:<br>    sequence = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;&gt;&quot;</span>):<br>            <span class="hljs-comment"># 去除描述字段行中的\n和&gt;</span><br>            name = line[<span class="hljs-number">1</span>:].rstrip()<br>            fasta[name] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># 去除序列字段行中的\n，并将所有字符规范为大写字符</span><br>        fasta[name] += line.rstrip().upper()<br><span class="hljs-keyword">return</span> fasta<br></code></pre></td></tr></table></figure><h5 id="4、拿到规范化的数据，我们现在来看看具有它具有的生物学意义，这里为了以后方便调用，使用函数的形式来实现"><a href="#4、拿到规范化的数据，我们现在来看看具有它具有的生物学意义，这里为了以后方便调用，使用函数的形式来实现" class="headerlink" title="4、拿到规范化的数据，我们现在来看看具有它具有的生物学意义，这里为了以后方便调用，使用函数的形式来实现"></a>4、拿到规范化的数据，我们现在来看看具有它具有的生物学意义，这里为了以后方便调用，使用函数的形式来实现</h5><h5 id="4-1-核苷酸计数，碱基偏好性："><a href="#4-1-核苷酸计数，碱基偏好性：" class="headerlink" title="4.1 核苷酸计数，碱基偏好性："></a>4.1 核苷酸计数，碱基偏好性：</h5><blockquote><p>这里的统计数值可以查看碱基偏好性。比如， 一定类型的小RNA会有特定的碱基偏好性，它的第一个碱基偏好U。可以用于评价数据质量。如果miRNA 第一碱基不是U偏好，说明数据或分析过程有问题。 </p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 核苷酸计数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nt_count</span>(<span class="hljs-params">seq</span>):<br>    ntCounts = []<br>    <span class="hljs-keyword">for</span> nt <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>]:<br>        ntCounts.append(seq.count(nt))<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># 核苷酸计数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nt_count</span>(<span class="hljs-params">seq</span>):<br>    ntCounts = []<br>    <span class="hljs-keyword">for</span> nt <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>]:<br>        ntCounts.append(seq.count(nt))<br>    <span class="hljs-keyword">return</span> ntCounts<br></code></pre></td></tr></table></figure><h5 id="4-2-GC含量："><a href="#4-2-GC含量：" class="headerlink" title="4.2 GC含量："></a>4.2 GC含量：</h5><blockquote><p>（A+T）&#x2F;（G+C）之比随DNA的种类不同而异。GC含量愈高，DNA的密度也愈高，同时热及碱不易使之变性，因此利用这一特性便可进行DNA的分离或测定。同时，物种的GC含量有着特异性，以此可以判断测序后的数据是否合格。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># CG 含量</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cg_content</span>(<span class="hljs-params">seq</span>):<br>    total = <span class="hljs-built_in">len</span>(seq)<br>    gcCount = seq.count(<span class="hljs-string">&#x27;G&#x27;</span>) + seq.count(<span class="hljs-string">&#x27;C&#x27;</span>)<br>    gcContent = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>(gcCount / total * <span class="hljs-number">100</span>), <span class="hljs-string">&#x27;.6f&#x27;</span>)<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># CG 含量</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cg_content</span>(<span class="hljs-params">seq</span>):<br>    total = <span class="hljs-built_in">len</span>(seq)<br>    gcCount = seq.count(<span class="hljs-string">&#x27;G&#x27;</span>) + seq.count(<span class="hljs-string">&#x27;C&#x27;</span>)<br>    gcContent = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>(gcCount / total * <span class="hljs-number">100</span>), <span class="hljs-string">&#x27;.6f&#x27;</span>)<br>    <span class="hljs-keyword">return</span> gcContent    <br></code></pre></td></tr></table></figure><h5 id="4-3-DNA-翻译为-RNA："><a href="#4-3-DNA-翻译为-RNA：" class="headerlink" title="4.3 DNA 翻译为 RNA："></a>4.3 DNA 翻译为 RNA：</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># DNA 翻译为 RNA</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dna_trans_rna</span>(<span class="hljs-params">seq</span>):<br>    rnaSeq = re.sub(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, seq)<br>    <span class="hljs-comment"># method2: rnaSeq = dnaSeq.replace(&#x27;T&#x27;, &#x27;U&#x27;)</span><br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># DNA 翻译为 RNA</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dna_trans_rna</span>(<span class="hljs-params">seq</span>):<br>    rnaSeq = re.sub(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, seq)<br>    <span class="hljs-comment"># method2: rnaSeq = dnaSeq.replace(&#x27;T&#x27;, &#x27;U&#x27;)</span><br>    <span class="hljs-keyword">return</span> rnaSeq<br></code></pre></td></tr></table></figure><h5 id="4-4-RNA-翻译为-蛋白质："><a href="#4-4-RNA-翻译为-蛋白质：" class="headerlink" title="4.4 RNA 翻译为 蛋白质："></a>4.4 RNA 翻译为 蛋白质：</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rna_trans_protein</span>(<span class="hljs-params">rnaSeq</span>):<br>    codonTable = &#123;<br>        <span class="hljs-string">&#x27;AUA&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUC&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUU&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUG&#x27;</span>:<span class="hljs-string">&#x27;M&#x27;</span>,<br>        <span class="hljs-string">&#x27;ACA&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACC&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACG&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACU&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>,<br>        <span class="hljs-string">&#x27;AAC&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;AAU&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;AAA&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;AAG&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>,<br>        <span class="hljs-string">&#x27;AGC&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;AGU&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;AGA&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;AGG&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br>        <span class="hljs-string">&#x27;CUA&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUC&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUG&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUU&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br>        <span class="hljs-string">&#x27;CCA&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCC&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCG&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCU&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>,<br>        <span class="hljs-string">&#x27;CAC&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;CAU&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;CAA&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;CAG&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>,<br>        <span class="hljs-string">&#x27;CGA&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGC&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGG&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGU&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br>        <span class="hljs-string">&#x27;GUA&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUC&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUG&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUU&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>,<br>        <span class="hljs-string">&#x27;GCA&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCC&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCG&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCU&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;GAC&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;GAU&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;GAA&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;GAG&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>,<br>        <span class="hljs-string">&#x27;GGA&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGC&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGG&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGU&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>,<br>        <span class="hljs-string">&#x27;UCA&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCC&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCG&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCU&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>,<br>        <span class="hljs-string">&#x27;UUC&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;UUU&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;UUA&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;UUG&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br>        <span class="hljs-string">&#x27;UAC&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;UAU&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;UAA&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;UAG&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;UGC&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;UGU&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;UGA&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;UGG&#x27;</span>:<span class="hljs-string">&#x27;W&#x27;</span>,<br>    &#125;<br>    proteinSeq = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> codonStart <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(rnaSeq), <span class="hljs-number">3</span>):<br>        codon = rnaSeq[codonStart:codonStart + <span class="hljs-number">3</span>]<br>        <span class="hljs-keyword">if</span> codon <span class="hljs-keyword">in</span> codonTable:<br>            proteinSeq += codonTable[codon]<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rna_trans_protein</span>(<span class="hljs-params">rnaSeq</span>):<br>    codonTable = &#123;<br>        <span class="hljs-string">&#x27;AUA&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUC&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUU&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;AUG&#x27;</span>:<span class="hljs-string">&#x27;M&#x27;</span>,<br>        <span class="hljs-string">&#x27;ACA&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACC&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACG&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;ACU&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>,<br>        <span class="hljs-string">&#x27;AAC&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;AAU&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;AAA&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;AAG&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>,<br>        <span class="hljs-string">&#x27;AGC&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;AGU&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;AGA&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;AGG&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br>        <span class="hljs-string">&#x27;CUA&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUC&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUG&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;CUU&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br>        <span class="hljs-string">&#x27;CCA&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCC&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCG&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;CCU&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>,<br>        <span class="hljs-string">&#x27;CAC&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;CAU&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;CAA&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;CAG&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>,<br>        <span class="hljs-string">&#x27;CGA&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGC&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGG&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;CGU&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br>        <span class="hljs-string">&#x27;GUA&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUC&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUG&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;GUU&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>,<br>        <span class="hljs-string">&#x27;GCA&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCC&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCG&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;GCU&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;GAC&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;GAU&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;GAA&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;GAG&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>,<br>        <span class="hljs-string">&#x27;GGA&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGC&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGG&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;GGU&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>,<br>        <span class="hljs-string">&#x27;UCA&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCC&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCG&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;UCU&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>,<br>        <span class="hljs-string">&#x27;UUC&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;UUU&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;UUA&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;UUG&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br>        <span class="hljs-string">&#x27;UAC&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;UAU&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;UAA&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;UAG&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;UGC&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;UGU&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;UGA&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;UGG&#x27;</span>:<span class="hljs-string">&#x27;W&#x27;</span>,<br>    &#125;<br>    proteinSeq = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> codonStart <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(rnaSeq), <span class="hljs-number">3</span>):<br>        codon = rnaSeq[codonStart:codonStart + <span class="hljs-number">3</span>]<br>        <span class="hljs-keyword">if</span> codon <span class="hljs-keyword">in</span> codonTable:<br>            proteinSeq += codonTable[codon]<br>    <span class="hljs-keyword">return</span> proteinSeq<br></code></pre></td></tr></table></figure><h5 id="4-5-获取反向序列："><a href="#4-5-获取反向序列：" class="headerlink" title="4.5 获取反向序列："></a>4.5 获取反向序列：</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-comment"># 获取反向序列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_comple</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>, seq</span>):<br>    seq = seq[::-<span class="hljs-number">1</span>]<br>    dnaTable = &#123;<br>        <span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>:<span class="hljs-string">&quot;C&quot;</span><br>    &#125;<br>    rnaTable = &#123;<br>        <span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;U&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>: <span class="hljs-string">&quot;C&quot;</span><br>    &#125;<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;dna&quot;</span>:<br>        <span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> seq:<br>            <span class="hljs-keyword">if</span> ele <span class="hljs-keyword">in</span> seq:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;dna&quot;</span>:<br>                    res += dnaTable[ele]<br>                <span class="hljs-keyword">else</span>:<br>                    res += rnaTable[ele]<br>    <span class="hljs-keyword"><code class="language-hljs python"><span class="hljs-comment"># 获取反向序列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_comple</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>, seq</span>):<br>    seq = seq[::-<span class="hljs-number">1</span>]<br>    dnaTable = &#123;<br>        <span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>:<span class="hljs-string">&quot;C&quot;</span><br>    &#125;<br>    rnaTable = &#123;<br>        <span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;U&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>: <span class="hljs-string">&quot;C&quot;</span><br>    &#125;<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;dna&quot;</span>:<br>        <span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> seq:<br>            <span class="hljs-keyword">if</span> ele <span class="hljs-keyword">in</span> seq:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;dna&quot;</span>:<br>                    res += dnaTable[ele]<br>                <span class="hljs-keyword">else</span>:<br>                    res += rnaTable[ele]<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h5 id="4-6-最后我们来一个main来把上面的函数统统运行一遍"><a href="#4-6-最后我们来一个main来把上面的函数统统运行一遍" class="headerlink" title="4.6 最后我们来一个main来把上面的函数统统运行一遍"></a>4.6 最后我们来一个main来把上面的函数统统运行一遍</h5><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    oct4 = get_fasta(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>)<br>    <span class="hljs-keyword">for</span> name, sequence <span class="hljs-keyword">in</span> oct4.items():<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, name)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;sequence: &quot;</span>, sequence)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;nt_count: &quot;</span>, nt_count(sequence))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;cg_content: &quot;</span>, cg_content(sequence))<br>        rna = dna_trans_rna(sequence)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;rna: &quot;</span>, rna)<br>        protein = rna_trans_protein(rna)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, protein)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;reverse_comple: &quot;</span>, reverse_comple(<span class="hljs-string"><code class="language-hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    oct4 = get_fasta(<span class="hljs-string">&#x27;res/sequence1.fasta&#x27;</span>)<br>    <span class="hljs-keyword">for</span> name, sequence <span class="hljs-keyword">in</span> oct4.items():<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;name: &quot;</span>, name)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;sequence: &quot;</span>, sequence)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;nt_count: &quot;</span>, nt_count(sequence))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;cg_content: &quot;</span>, cg_content(sequence))<br>        rna = dna_trans_rna(sequence)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;rna: &quot;</span>, rna)<br>        protein = rna_trans_protein(rna)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;protein: &quot;</span>, protein)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;reverse_comple: &quot;</span>, reverse_comple(<span class="hljs-string">"dna"</span>, sequence))<br></code></pre></td></tr></table></figure><p>部分结果如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2f341cd6a8a706750e2a3b36741d1f1c.png" alt="mark"></p><h2 id="了解基因结构"><a href="#了解基因结构" class="headerlink" title="了解基因结构"></a><a href="https://zhuanlan.zhihu.com/p/49601643">了解基因结构</a></h2><h2 id="生物信息中的Python-02-用biopython解析序列"><a href="#生物信息中的Python-02-用biopython解析序列" class="headerlink" title="生物信息中的Python 02 | 用biopython解析序列"></a><a href="https://blog.csdn.net/u011262253/article/details/88542836">生物信息中的Python 02 | 用biopython解析序列</a></h2><h2 id="生物信息中的Python-03-自动化操作NCBI"><a href="#生物信息中的Python-03-自动化操作NCBI" class="headerlink" title="生物信息中的Python 03 | 自动化操作NCBI"></a><a href="https://blog.csdn.net/u011262253/article/details/88542879">生物信息中的Python 03 | 自动化操作NCBI</a></h2><h2 id="生物信息中的Python-04-批量下载基因与文献"><a href="#生物信息中的Python-04-批量下载基因与文献" class="headerlink" title="生物信息中的Python 04 | 批量下载基因与文献"></a><a href="https://blog.csdn.net/u011262253/article/details/88542910">生物信息中的Python 04 | 批量下载基因与文献</a></h2>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 生物信息 </tag>
            
            <tag> 基因 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL datatime与timestamp设置自动更新</title>
      <link href="/posts/56058/"/>
      <url>/posts/56058/</url>
      
        <content type="html"><![CDATA[<h2 id="datetime-的自动更新"><a href="#datetime-的自动更新" class="headerlink" title="datetime 的自动更新"></a>datetime 的自动更新</h2><p><strong>增加一列并设置自动更新</strong><br><code>ALTER TABLE &#39;table_name&#39; ADD COLUMN  &#39;date&#39; datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT create time&#39; ;</code><br><strong>修改已有列为自动更新</strong><br><code>ALTER TABLE &#39;table_name&#39; MODIFY COLUMN  &#39;date&#39; datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT create time&#39; ;</code></p><h2 id="timestamp-的自动更新"><a href="#timestamp-的自动更新" class="headerlink" title="timestamp 的自动更新"></a>timestamp 的自动更新</h2><p><strong>增加一列并设置自动更新</strong><br><code>ALTER TABLE &#39;table_name&#39; ADD COLUMN  &#39;date&#39;  timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT create time&#39; ;</code><br><strong>修改已有列为自动更新</strong><br><code>ALTER TABLE &#39;table_name&#39; MODIFY COLUMN  &#39;date&#39;  timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT create time&#39; ;</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> datetime </tag>
            
            <tag> timestamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 大数据量导入时：MySQL_server_has_gone_away</title>
      <link href="/posts/45800/"/>
      <url>/posts/45800/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>导入大数据量的 sql 文件时，出现<br><code>MySQL server has gone away</code><br>配置文件对导入文件大小有限制</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>修改配置文件(my.ini 或者 my.cnf)<br><code>max_allowed_packet = 100000</code></p><blockquote><p>后面数值因需求而定</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 远程连接及错误的解决</title>
      <link href="/posts/38188/"/>
      <url>/posts/38188/</url>
      
        <content type="html"><![CDATA[<h2 id="设置可远程连接账户"><a href="#设置可远程连接账户" class="headerlink" title="设置可远程连接账户"></a>设置可远程连接账户</h2><p><code>mysql -uroot -p</code><br><code>grant all on *.* to baimoc@&#39;%&#39; identified by &#39;123456&#39; with grant option; </code><br><code>flush privileges;</code></p><blockquote><p>baimoc这个用户不一定要存在（可以按需要去取名），%表示可任意ip访问</p></blockquote><h2 id="查看设置是否成功"><a href="#查看设置是否成功" class="headerlink" title="查看设置是否成功"></a>查看设置是否成功</h2><p><code>use mysql;</code><br><code>select user, host from user;</code></p><blockquote><p>如果用户baimoc的host为%，则表示可远程ip访问</p></blockquote><h2 id="修改mysql配置文件-my-cnf"><a href="#修改mysql配置文件-my-cnf" class="headerlink" title="修改mysql配置文件(my.cnf)"></a>修改mysql配置文件(my.cnf)</h2><p>skip-networking #注释掉 ,它是屏蔽掉一切TCP&#x2F;IP连接<br>bind-address &#x3D; 127.0.0.1 #注释掉 , 它指定只能本地连接</p><h2 id="尝试远程连接（注意，这里需要在另一台服务器远程连接测试）"><a href="#尝试远程连接（注意，这里需要在另一台服务器远程连接测试）" class="headerlink" title="尝试远程连接（注意，这里需要在另一台服务器远程连接测试）"></a>尝试远程连接（注意，这里需要在另一台服务器远程连接测试）</h2><p>$ <code>mysql -h xxx.xxx.xxx.xxx -P 3306 -u admin -p123456</code><br>如果报错:ERROR 2003 (HY000): Can’t connect to MySQL server on ‘xxx.xxx.xxx.xxx’ (113)</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>关闭防火墙<br> <code>/etc/rc.d/init.d/iptables stop </code></li><li>重启mysql服务<br><code>service mysql restart</code></li></ul><h1 id="值得注意的是这样设置对于服务器安全存在隐患，应该尽量避免"><a href="#值得注意的是这样设置对于服务器安全存在隐患，应该尽量避免" class="headerlink" title="值得注意的是这样设置对于服务器安全存在隐患，应该尽量避免"></a>值得注意的是这样设置对于服务器安全存在隐患，应该尽量避免</h1>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> 远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 将查询结果创建表_插入表</title>
      <link href="/posts/2042/"/>
      <url>/posts/2042/</url>
      
        <content type="html"><![CDATA[<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h3><p><code>create table new_table_name as select * from (your_sql) as sql_table;</code></p><p>new_table_name  替换为创建表名<br>your_sql  替换为sql语句</p><hr><h3 id="插入表"><a href="#插入表" class="headerlink" title="插入表"></a><strong>插入表</strong></h3><p><code>insert into old_table_name select * from  (your_sql) as sql_table;</code></p><p>old_table_name  替换为已经存在的表名<br>your_sql  替换为sql语句</p><blockquote><p>语句最后的<code>sql_table</code>是给your_sql 生成的暂存表起个别名，避免出现[Err] 1248 - Every derived table must have its own alias</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询mysql数据库中表的所有字段名</title>
      <link href="/posts/1232/"/>
      <url>/posts/1232/</url>
      
        <content type="html"><![CDATA[<p><code>select COLUMN_NAME,DATA_TYPE,COLUMN_COMMENT from information_schema.COLUMNS where table_name = &#39;表名&#39; and table_schema = &#39;数据库名称&#39;;</code></p><p><strong>得到结果：</strong><br><img src="http://baimoc.ziptop.top/blog/20190226/NotMJmcwUhlk.png" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 添加环境变量的五种方法</title>
      <link href="/posts/9938/"/>
      <url>/posts/9938/</url>
      
        <content type="html"><![CDATA[<h5 id="只对当前shell生效（shell脚本中常用）"><a href="#只对当前shell生效（shell脚本中常用）" class="headerlink" title="只对当前shell生效（shell脚本中常用）"></a>只对当前shell生效（shell脚本中常用）</h5><p>方法一：</p><p><code>$PATH=&quot;$PATH&quot;:YOUR_PATH</code></p><p>方法二：</p><p><code>export PATH=&quot;$PATH:YOUR_PATH&quot;</code></p><h5 id="对所有用户所有shell都生效-需要root权限（管理员常用）"><a href="#对所有用户所有shell都生效-需要root权限（管理员常用）" class="headerlink" title="对所有用户所有shell都生效, 需要root权限（管理员常用）"></a>对所有用户所有shell都生效, 需要root权限（管理员常用）</h5><p>方法一（修改environment文件）：</p><ul><li><p>打开environment文件</p><p><code> vim /etc/environment</code></p></li><li><p>修改PATH变量，在变量字符串末尾加<code>:</code>和 <code>YOUR_PATH</code></p><p><code> PATH=&quot;...:YOUR_PATH&quot;</code></p></li><li><p>使配置立即生效</p><p><code> source /etc/environment</code></p></li></ul><blockquote><p>如果设置后，系统重启后不可登录的解决方法：</p><ul><li>在登录界面进入命令行模式：按组合键 alt +ctrl+f1 </li><li><code>/usr/bin/sudo /usr/bin/vi /etc/environment  </code></li><li>修改为正确配置，或者直接删除为空</li><li>保存退出后重启</li></ul></blockquote><p>方法二（修改profile文件）：</p><ul><li><p>打开文件</p><p><code>vim /etc/profile</code></p></li><li><p>在打开的文件末添加</p><p><code>export PATH =&quot;$PATH:YOUR_PATH&quot;</code></p></li></ul><h5 id="只对某个用户的所有shell生效，只需要用户权限即可（用户常用）"><a href="#只对某个用户的所有shell生效，只需要用户权限即可（用户常用）" class="headerlink" title="只对某个用户的所有shell生效，只需要用户权限即可（用户常用）"></a>只对某个用户的所有shell生效，只需要用户权限即可（用户常用）</h5><ul><li><p>打开设置文件</p><p><code> vim ~/.bashrc</code></p></li><li><p>在打开的文件末添加</p><p><code>export PATH =&quot;$PATH:YOUR_PATH&quot;</code></p></li><li><p>使文件配置立即生效</p><p><code>source ~/.bashrc</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Linux 下 Aspera 获取 SRA 数据</title>
      <link href="/posts/22943/"/>
      <url>/posts/22943/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><blockquote><p>官网下载：<a href="http://downloads.asperasoft.com/en/downloads/8?list">http://downloads.asperasoft.com/en/downloads/8?list</a> </p><p>csdn下载：<a href="https://download.csdn.net/download/u011262253/10402259">https://download.csdn.net/download/u011262253/10402259</a></p></blockquote><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf aspera-connect-3.7.4.147727-linux-64.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./aspera-connect-3.7.4.147727-linux-64.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf aspera-connect-3.7.4.147727-linux-64.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./aspera-connect-3.7.4.147727-linux-64.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> ~/.aspera/connect/etc/aspera-license /usr/local/bin/</span><br></code></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h3><p>NCBI的FTP下载链接：<code>ftp://ftp.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/SRR507/SRR5077625/SRR5077625.sra</code></p><p>EBI的aspera下载链接<code>era-fasp@fasp.sra.ebi.ac.uk:/vol1/ERA012/ERA012008/sff/library08_GJ6U61T06.sff</code></p><p>NCBI的aspera下载链接：<code>anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/SRR/SRR507/SRR5077625/SRR5077625.sra</code></p><p>通过观察可以发现只需要把<code>ftp://ftp.ncbi.nlm.nih.gov</code>换为<code>era-fasp@fasp.sra.ebi.ac.uk:</code>或<code>anonftp@ftp-private.ncbi.nlm.nih.gov:</code></p><h3 id="3-2-输入命令"><a href="#3-2-输入命令" class="headerlink" title="3.2 输入命令"></a>3.2 输入命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">~/.aspera/connect/bin/ascp -k 1 -QT -l 100M -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -T anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/SRR/SRR507/SRR5077625/SRR5077625.sra .</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>~&#x2F;.aspera&#x2F;connect&#x2F;bin&#x2F;ascp</td><td>aspera的可执行文件</td></tr><tr><td>-k 1</td><td>断点续传</td></tr><tr><td>-QT 100M</td><td>提高下载速度</td></tr><tr><td>-i ~&#x2F;.aspera&#x2F;connect&#x2F;etc&#x2F;asperaweb_id_dsa.openssh</td><td>密钥文件路径</td></tr><tr><td>-T <a href="mailto:&#x61;&#110;&#x6f;&#x6e;&#x66;&#x74;&#112;&#x40;&#102;&#116;&#112;&#x2d;&#x70;&#114;&#x69;&#118;&#97;&#x74;&#x65;&#x2e;&#x6e;&#99;&#98;&#x69;&#46;&#110;&#108;&#109;&#x2e;&#x6e;&#105;&#x68;&#x2e;&#103;&#111;&#x76;">&#x61;&#110;&#x6f;&#x6e;&#x66;&#x74;&#112;&#x40;&#102;&#116;&#112;&#x2d;&#x70;&#114;&#x69;&#118;&#97;&#x74;&#x65;&#x2e;&#x6e;&#99;&#98;&#x69;&#46;&#110;&#108;&#109;&#x2e;&#x6e;&#105;&#x68;&#x2e;&#103;&#111;&#x76;</a>:&#x2F;sra&#x2F;sra-instant&#x2F;reads&#x2F;ByRun&#x2F;sra&#x2F;SRR&#x2F;SRR507&#x2F;SRR5077625&#x2F;SRR5077625.sra</td><td>下载路径</td></tr><tr><td>.</td><td>表示当前目录</td></tr></tbody></table><blockquote><p>需要注意的是命令末尾的 <code>.</code></p><p>密钥文件：终端执行使用~&#x2F;asperaweb_id_dsa.putty，ssh终端执行使用asperaweb_id_dsa.openssh</p></blockquote><h3 id="3-3-批量下载"><a href="#3-3-批量下载" class="headerlink" title="3.3 批量下载"></a>3.3 批量下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">~/.aspera/connect/bin/ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.putty --mode recv --host ftp-private.ncbi.nlm.nih.gov --user anonftp   --file-list aspera_download.txt</span><br></code></pre></td></tr></table></figure><h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><table><thead><tr><th>错误</th><th>Server unable to hear from client (check UDP port and firewall)<br />Client unable to connect to server (check UDP port and firewall)</th></tr></thead><tbody><tr><td>原因</td><td>aspera 需要的端口<code>33001</code>被防火墙禁止</td></tr><tr><td>解决</td><td><code># iptables -I INPUT -p udp --dport 33001 -j ACCEPT</code><br /><code># iptables -I OUTPUT -p udp --dport 33001 -j ACCEPT</code></td></tr></tbody></table><table><thead><tr><th>错误</th><th>Session Stop  (Error: Server aborted session: Client requests stronger encryption than server allows)</th></tr></thead><tbody><tr><td>原因</td><td>使用ssh登录服务器，密钥文件错误</td></tr><tr><td>解决</td><td>秘钥文件改成<em>asperaweb_id_dsa.openssh</em></td></tr></tbody></table><hr><p><a href="https://www.plob.org/article/3013.html">https://www.plob.org/article/3013.html</a></p><p><a href="https://www.plob.org/article/7338.html">https://www.plob.org/article/7338.html</a></p><p><a href="https://support.asperasoft.com/hc/en-us/articles/216125578-Resuming-file-transfers-with-ascp">https://support.asperasoft.com/hc/en-us/articles/216125578-Resuming-file-transfers-with-ascp</a></p><p><a href="https://blog.csdn.net/jiangpeng59/article/details/72902218">https://blog.csdn.net/jiangpeng59/article/details/72902218</a></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 基因组 </tag>
            
            <tag> Aspera </tag>
            
            <tag> sra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 归档，压缩，解压命令速查</title>
      <link href="/posts/62529/"/>
      <url>/posts/62529/</url>
      
        <content type="html"><![CDATA[<h1 id="example-tar-类型文件"><a href="#example-tar-类型文件" class="headerlink" title="example.tar 类型文件"></a>example.tar 类型文件</h1><p> 打包</p><blockquote><p>-c 表示创建包 ，-f指定包的文件名 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar -cf all.tar *.jpg<br></code></pre></td></tr></table></figure><p> 增加到包</p><blockquote><p>-r 表示增加文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar -rf all.tar *.gif<br></code></pre></td></tr></table></figure><p> 替换包中文件</p><blockquote><p>-u 表示更新文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar -uf all.tar logo.gif<br></code></pre></td></tr></table></figure><p> 列出所有文件</p><blockquote><p>-t 表示列出文件 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar -tf all.tar<br></code></pre></td></tr></table></figure><p> 解压文件</p><blockquote><p>-x 表示解开 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">tar -xf all.tar<br></code></pre></td></tr></table></figure><h1 id="example-tar-gz-x2F-example-tgz-类型文件"><a href="#example-tar-gz-x2F-example-tgz-类型文件" class="headerlink" title="example.tar.gz &#x2F; example.tgz 类型文件"></a>example.tar.gz &#x2F; example.tgz 类型文件</h1><p>压缩</p><blockquote><p>-c 表示压缩文件，-z表示gzip文件格式，-f 指定包名</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -czf all.tar.gz *.jpg<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>-x 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -xzf all.tar.gz<br></code></pre></td></tr></table></figure><h1 id="example-tar-bz2-类型文件"><a href="#example-tar-bz2-类型文件" class="headerlink" title="example.tar.bz2 类型文件"></a>example.tar.bz2 类型文件</h1><p>压缩</p><blockquote><p>-c 表示压缩文件， -j 表示bzip2文件格式，-f 指定包名</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -cjf all.tar.bz2 *.jpg<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>-x 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -xjf all.tar.bz2<br></code></pre></td></tr></table></figure><h1 id="example-tar-Z-类型文件"><a href="#example-tar-Z-类型文件" class="headerlink" title="example.tar.Z 类型文件"></a>example.tar.Z 类型文件</h1><p>压缩</p><blockquote><p>-c 表示压缩文件， -Z表示bzip2文件格式，-f 指定包名</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -cZf all.tar.Z *.jpg<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>-x 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">tar -xZf all.tar.Z<br></code></pre></td></tr></table></figure><h1 id="example-gz-类型文件"><a href="#example-gz-类型文件" class="headerlink" title="example.gz 类型文件"></a>example.gz 类型文件</h1><p>压缩</p><blockquote><p>gzip 压缩</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">gzip *.txt<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>gunzip 表示解压 , -d 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">gunzip all.gz<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">gzip -d all.gz<br></code></pre></td></tr></table></figure><h1 id="example-bz2-类型文件"><a href="#example-bz2-类型文件" class="headerlink" title="example.bz2 类型文件"></a>example.bz2 类型文件</h1><p>压缩</p><blockquote><p>bzip2 压缩</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">bzip2 *.txt<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>bunzip2 表示解压，-d 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">bunzip2 all.bz2<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">bzip2 -d all.bz2<br></code></pre></td></tr></table></figure><h1 id="example-zip-类型文件"><a href="#example-zip-类型文件" class="headerlink" title="example.zip 类型文件"></a>example.zip 类型文件</h1><p>压缩</p><blockquote><p>zip 表示压缩文件</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">zip all.zip *.jpg<br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>unzip 表示解压</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">unzip all.zip<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 压缩 </tag>
            
            <tag> 解压 </tag>
            
            <tag> 归档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息中的Python 05 | 从 Genbank 文件中提取 CDS 等其他特征序列</title>
      <link href="/posts/3347/"/>
      <url>/posts/3347/</url>
      
        <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h3><p>在基因结构分析或其他生物功能分析中会时常用到 CDS 序列，以及其他诸如 mRNA 序列，misc RNA序列等具有生物意义的序列片段。而NCBI 的基因库中已经包含有这些的信息，但是只有一部分是整理可下载的。而剩下的一部分可以通过 genbank给出的位点信息来提取，个人能力有限，这里只做抛转之用。下面以提取 CDS 为例，记录提取序列过程，其他特征序列类似。</p><h3 id="2-结构目录"><a href="#2-结构目录" class="headerlink" title="2 结构目录"></a>2 结构目录</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTIwL2dJa2o2Yzk3aTAucG5n?x-oss-process=image/format,png" alt="mark"></p><h3 id="3-Python代码"><a href="#3-Python代码" class="headerlink" title="3 Python代码"></a>3 Python代码</h3><blockquote><p>序列自动下载可以通过 Biopython 的 Entrez.efetch 方法来实现，这里以本地文件为例</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2018\9\20 0020 18:32</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @File    : main.py</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_fasta</span>(<span class="hljs-params">ana, seq, num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    格式化文本为 fasta格式</span><br><span class="hljs-string">    :param ana: 注释信息</span><br><span class="hljs-string">    :param seq: 序列</span><br><span class="hljs-string">    :param num: 序列换行时的字符个数</span><br><span class="hljs-string">    :return: fasta格式文本</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    format_seq = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(seq):<br>        format_seq += char<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % num == <span class="hljs-number">0</span>:<br>            format_seq += <span class="hljs-string">&quot;\n&quot;</span><br>    <span class="hljs-keyword">return</span> ana + format_seq + <span class="hljs-string">&quot;\n&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cds</span>(<span class="hljs-params">gb_file, f_cds</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从 genbank 文件中提取 cds 序列及其完整序列</span><br><span class="hljs-string">    :param gb_file: genbank文件路径</span><br><span class="hljs-string">    :param f_cds: 是否只获取一个 CDS 序列</span><br><span class="hljs-string">    :return: fasta 格式的 CDS 序列， fasta 格式的完整序列 </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 提取完整序列并格式为 fasta</span><br>    gb_seq = SeqIO.read(gb_file, <span class="hljs-string">&quot;genbank&quot;</span>)<br>    complete_seq = <span class="hljs-built_in">str</span>(gb_seq.seq)<br>    complete_ana = <span class="hljs-string">&quot;&gt;&quot;</span> + gb_seq.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot;:&quot;</span> + gb_seq.annotations[<span class="hljs-string">&quot;accessions&quot;</span>][<span class="hljs-number">2</span>] + <span class="hljs-string">&quot; &quot;</span> + gb_seq.description + <span class="hljs-string">&quot;\n&quot;</span><br>    complete_fasta = format_fasta(complete_ana, complete_seq, <span class="hljs-number">70</span>)<br><br>    <span class="hljs-comment"># 提取 CDS 序列并格式为 fasta</span><br>    cds_num = <span class="hljs-number">1</span><br>    cds_fasta = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> gb_seq.features:<br>        <span class="hljs-keyword">if</span> ele.<span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;CDS&quot;</span>:<br>            cds_seq = <span class="hljs-string">&quot;&quot;</span><br>            cds_ana = <span class="hljs-string">&quot;&gt;lcl|&quot;</span> + gb_seq.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot;_cds_&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;protein_id&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">str</span>(cds_num) + <span class="hljs-string">&quot; [gene=&quot;</span> + \<br>                      ele.qualifiers[<span class="hljs-string">&#x27;gene&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + \<br>                      <span class="hljs-string">&quot; [db_xref=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;db_xref&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + <span class="hljs-string">&quot; [protein=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;product&#x27;</span>][<br>                          <span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + \<br>                      <span class="hljs-string">&quot; [protein_id=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;protein_id&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + <span class="hljs-string">&quot; [gbkey=CDS]\n&quot;</span><br>            cds_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> ele1 <span class="hljs-keyword">in</span> ele.location.parts:<br>                cds_seq += complete_seq[ele1.start:ele1.end]<br>            cds_fasta += format_fasta(cds_ana, cds_seq, <span class="hljs-number">70</span>)<br>            <span class="hljs-keyword">if</span> (f_cds):<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> cds_fasta, complete_fasta<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 文件输出路径</span><br>    cds_file = <span class="hljs-string">&quot;out/cds.fasta&quot;</span><br>    complete_file = <span class="hljs-string">&quot;out/complete.fasta&quot;</span><br>    <span class="hljs-comment"># genbank 文件路径</span><br>    res_dir = <span class="hljs-string">&quot;res&quot;</span><br>    cds_file_obj = <span class="hljs-built_in">open</span>(cds_file, <span class="hljs-string">&quot;w&quot;</span>)<br>    complete_file_obj = <span class="hljs-built_in">open</span>(complete_file, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(res_dir):<br>        cds_fasta, complete_fasta = get_cds(res_dir + os.sep + file, <span class="hljs-literal"><code class="language-hljs Python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2018\9\20 0020 18:32</span><br><span class="hljs-comment"># @Author  : Baimoc</span><br><span class="hljs-comment"># @Email   : baimoc@163.com</span><br><span class="hljs-comment"># @File    : main.py</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_fasta</span>(<span class="hljs-params">ana, seq, num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    格式化文本为 fasta格式</span><br><span class="hljs-string">    :param ana: 注释信息</span><br><span class="hljs-string">    :param seq: 序列</span><br><span class="hljs-string">    :param num: 序列换行时的字符个数</span><br><span class="hljs-string">    :return: fasta格式文本</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    format_seq = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(seq):<br>        format_seq += char<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % num == <span class="hljs-number">0</span>:<br>            format_seq += <span class="hljs-string">&quot;\n&quot;</span><br>    <span class="hljs-keyword">return</span> ana + format_seq + <span class="hljs-string">&quot;\n&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cds</span>(<span class="hljs-params">gb_file, f_cds</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从 genbank 文件中提取 cds 序列及其完整序列</span><br><span class="hljs-string">    :param gb_file: genbank文件路径</span><br><span class="hljs-string">    :param f_cds: 是否只获取一个 CDS 序列</span><br><span class="hljs-string">    :return: fasta 格式的 CDS 序列， fasta 格式的完整序列 </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 提取完整序列并格式为 fasta</span><br>    gb_seq = SeqIO.read(gb_file, <span class="hljs-string">&quot;genbank&quot;</span>)<br>    complete_seq = <span class="hljs-built_in">str</span>(gb_seq.seq)<br>    complete_ana = <span class="hljs-string">&quot;&gt;&quot;</span> + gb_seq.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot;:&quot;</span> + gb_seq.annotations[<span class="hljs-string">&quot;accessions&quot;</span>][<span class="hljs-number">2</span>] + <span class="hljs-string">&quot; &quot;</span> + gb_seq.description + <span class="hljs-string">&quot;\n&quot;</span><br>    complete_fasta = format_fasta(complete_ana, complete_seq, <span class="hljs-number">70</span>)<br><br>    <span class="hljs-comment"># 提取 CDS 序列并格式为 fasta</span><br>    cds_num = <span class="hljs-number">1</span><br>    cds_fasta = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> gb_seq.features:<br>        <span class="hljs-keyword">if</span> ele.<span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;CDS&quot;</span>:<br>            cds_seq = <span class="hljs-string">&quot;&quot;</span><br>            cds_ana = <span class="hljs-string">&quot;&gt;lcl|&quot;</span> + gb_seq.<span class="hljs-built_in">id</span> + <span class="hljs-string">&quot;_cds_&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;protein_id&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">str</span>(cds_num) + <span class="hljs-string">&quot; [gene=&quot;</span> + \<br>                      ele.qualifiers[<span class="hljs-string">&#x27;gene&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + \<br>                      <span class="hljs-string">&quot; [db_xref=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;db_xref&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + <span class="hljs-string">&quot; [protein=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;product&#x27;</span>][<br>                          <span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + \<br>                      <span class="hljs-string">&quot; [protein_id=&quot;</span> + ele.qualifiers[<span class="hljs-string">&#x27;protein_id&#x27;</span>][<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;]&quot;</span> + <span class="hljs-string">&quot; [gbkey=CDS]\n&quot;</span><br>            cds_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> ele1 <span class="hljs-keyword">in</span> ele.location.parts:<br>                cds_seq += complete_seq[ele1.start:ele1.end]<br>            cds_fasta += format_fasta(cds_ana, cds_seq, <span class="hljs-number">70</span>)<br>            <span class="hljs-keyword">if</span> (f_cds):<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> cds_fasta, complete_fasta<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 文件输出路径</span><br>    cds_file = <span class="hljs-string">&quot;out/cds.fasta&quot;</span><br>    complete_file = <span class="hljs-string">&quot;out/complete.fasta&quot;</span><br>    <span class="hljs-comment"># genbank 文件路径</span><br>    res_dir = <span class="hljs-string">&quot;res&quot;</span><br>    cds_file_obj = <span class="hljs-built_in">open</span>(cds_file, <span class="hljs-string">&quot;w&quot;</span>)<br>    complete_file_obj = <span class="hljs-built_in">open</span>(complete_file, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(res_dir):<br>        cds_fasta, complete_fasta = get_cds(res_dir + os.sep + file, <span class="hljs-literal">True</span>)<br>        cds_file_obj.write(cds_fasta)<br>        complete_file_obj.write(complete_fasta)<br></code></pre></td></tr></table></figure><h4 id="4-其他方法获取"><a href="#4-其他方法获取" class="headerlink" title="4 其他方法获取"></a>4 其他方法获取</h4><table><thead><tr><th>类型</th><th>编号</th></tr></thead><tbody><tr><td>AY，AP</td><td>同一个基因存在多个提交版本时的序列编号</td></tr><tr><td>NC，NM</td><td>NCBI 官方推荐及使用的序列编号</td></tr><tr><td>IMAGE等</td><td>针对特定物种，或特定组织提供的序列编号</td></tr></tbody></table><h5 id="4-1-对于AY，AP，可以用下面的方式来实现-CDS-序列下载，但是对于样本量大的序列分析比较低效"><a href="#4-1-对于AY，AP，可以用下面的方式来实现-CDS-序列下载，但是对于样本量大的序列分析比较低效" class="headerlink" title="4.1 对于AY，AP，可以用下面的方式来实现 CDS 序列下载，但是对于样本量大的序列分析比较低效"></a>4.1 对于AY，AP，可以用下面的方式来实现 CDS 序列下载，但是对于样本量大的序列分析比较低效</h5><ul><li>这里的cds是可以点击的链接，点击</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTIwL2toQWFCSWNHM0sucG5n?x-oss-process=image/format,png" alt="mark"></p><ul><li><p>会有详细信息展示，点击 fasta 链接来下载序列</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTIwL2Q4R2xrSUoxYmUucG5n?x-oss-process=image/format,png" alt="mark"></p></li></ul><h5 id="4-2-对于NC，NM，可以用下面的方式来实现-CDS-序列下载，同样对于样本量大的序列分析比较低效"><a href="#4-2-对于NC，NM，可以用下面的方式来实现-CDS-序列下载，同样对于样本量大的序列分析比较低效" class="headerlink" title="4.2 对于NC，NM，可以用下面的方式来实现 CDS 序列下载，同样对于样本量大的序列分析比较低效"></a>4.2 对于NC，NM，可以用下面的方式来实现 CDS 序列下载，同样对于样本量大的序列分析比较低效</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwOTIwL0c4MmdFOGwybUgucG5n?x-oss-process=image/format,png" alt="mark"></p><h5 id="4-3-通过爬虫实现自动化，但是成本比较高，而且加重-NCBI-服务器负担，搞不好IP就会被封掉"><a href="#4-3-通过爬虫实现自动化，但是成本比较高，而且加重-NCBI-服务器负担，搞不好IP就会被封掉" class="headerlink" title="4.3 通过爬虫实现自动化，但是成本比较高，而且加重 NCBI 服务器负担，搞不好IP就会被封掉"></a>4.3 通过爬虫实现自动化，但是成本比较高，而且加重 NCBI 服务器负担，搞不好IP就会被封掉</h5><h5 id="4-4-用-BioPython-的-Entrez-efetch-db-x3D-”nuccore”-id-x3D-ids-rettype-x3D-”fasta-cds-na-“-retmode-x3D-”text”-方法实现。但是经过实际调用，并没有什么效果。但是可以利用它来下载genbank序列后续实现自动化提取"><a href="#4-4-用-BioPython-的-Entrez-efetch-db-x3D-”nuccore”-id-x3D-ids-rettype-x3D-”fasta-cds-na-“-retmode-x3D-”text”-方法实现。但是经过实际调用，并没有什么效果。但是可以利用它来下载genbank序列后续实现自动化提取" class="headerlink" title="4.4 用 BioPython 的 Entrez.efetch(db&#x3D;”nuccore”, id&#x3D;ids, rettype&#x3D;”fasta_cds_na “, retmode&#x3D;”text”) 方法实现。但是经过实际调用，并没有什么效果。但是可以利用它来下载genbank序列后续实现自动化提取"></a>4.4 用 BioPython 的 Entrez.efetch(db&#x3D;”nuccore”, id&#x3D;ids, rettype&#x3D;”fasta_cds_na “, retmode&#x3D;”text”) 方法实现。但是经过实际调用，并没有什么效果。但是可以利用它来下载genbank序列后续实现自动化提取</h5>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> CDS </tag>
            
            <tag> Genbank </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 挂载2TB以上硬盘</title>
      <link href="/posts/1812/"/>
      <url>/posts/1812/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-检测硬盘设备"><a href="#一、-检测硬盘设备" class="headerlink" title="一、 检测硬盘设备"></a>一、 检测硬盘设备</h3><p><code>ls /dev |grep sd </code><br><img src="https://img-blog.csdnimg.cn/img_convert/0649e4a21ca6ff062ff4efc36debec80.png" alt="mark"><br>以上代表：</p><ul><li>sda：第一块硬盘<ul><li>sda1：sda的第一个分区</li><li>sda2：sda的第二个分区</li><li>sda3：以此类推</li></ul></li><li>sdb：第二块硬盘</li><li>sdc：第三块硬盘，以此类推</li></ul><h4 id="二、新硬盘分区"><a href="#二、新硬盘分区" class="headerlink" title="二、新硬盘分区"></a>二、新硬盘分区</h4><p>给第二块硬盘（sdb）分区，构建 gpt 分区<br><img src="https://img-blog.csdnimg.cn/img_convert/2a3b2e0a1a107102ca69ed9b1457df46.png" alt="mark"><br>命令：</p><ul><li><code>parted /dev/sdb</code></li><li><code>mklabel gpt</code></li><li><code>print</code></li><li><code>mkpart primary 0KB 80TB</code></li><li><code>Yes</code></li><li><code>Ignore</code></li><li><code>quit</code></li></ul><h3 id="2-格式化硬盘"><a href="#2-格式化硬盘" class="headerlink" title="2. 格式化硬盘"></a>2. 格式化硬盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">mkfs.xfs -f /dev/sdb<br></code></pre></td></tr></table></figure><h3 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3. 挂载"></a>3. 挂载</h3><h4 id="3-1-命令"><a href="#3-1-命令" class="headerlink" title="3.1 命令"></a>3.1 命令</h4><p><strong>挂载</strong> <code>mount DECE MOUNT_POINT</code></p><p><strong>例子</strong>：<code>mount /dev/sdb /data</code></p><p><strong>卸载</strong> <code>umount DEVICE</code> 和 <code>umount MOUNT_POINT</code></p><p><strong>例子：</strong><code>unmount /dev/sdb /data</code></p><h4 id="3-2-开机自启设置"><a href="#3-2-开机自启设置" class="headerlink" title="3.2 开机自启设置"></a>3.2 开机自启设置</h4><p><code>vim /etc/fstab</code></p><p>打开文件输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">UUID=bb0ba765-95c3-4dba-9db9-0d220879ee5e       /www    xfs     defaults        0       1<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>要挂载的设备或伪文件系统</strong></th><th><strong>挂载点</strong></th><th><strong>文件系统类型</strong></th><th><strong>挂载选项</strong></th><th><strong>转储频率</strong></th><th><strong>自检次序</strong></th></tr></thead><tbody><tr><td>&#x2F;dev&#x2F;sdb</td><td>&#x2F;opt&#x2F;sdb</td><td>ext4</td><td>auto</td><td>0</td><td>0</td></tr></tbody></table><blockquote><p><strong>挂载的设备：</strong></p><p>(1) <strong>设备文件</strong>：例如&#x2F;dev&#x2F;sda5</p><p>(2) <strong>卷标</strong>：-L ‘LABEL’, 例如 -L ‘MYDATA’</p><p>(3) <strong>UUID</strong>, -U ‘UUID’：例如 -U ‘0c50523c-43f1-45e7-85c0-a126711d406e’</p><p>(4) <strong>伪文件系统名称</strong>：proc, sysfs, devtmpfs, configfs</p><p><strong>挂载点</strong>：</p><p>事先存在；建议使用空目录；</p><p>进程正在使用中的设备无法被卸载；</p><p><strong>挂载选项</strong>：defaults</p><p><strong>转储频率</strong>：</p><p><strong>0</strong>：不做备份</p><p><strong>1</strong>：每天转储</p><p><strong>2</strong>：每隔一天转储</p><p><strong>自检次序</strong>：</p><p><strong>0</strong>：不自检</p><p><strong>1</strong>：首先自检；一般只有rootfs才用1；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 大硬盘挂载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 MySQL 用户和权限</title>
      <link href="/posts/33573/"/>
      <url>/posts/33573/</url>
      
        <content type="html"><![CDATA[<h2 id="一-用户"><a href="#一-用户" class="headerlink" title="一. 用户"></a>一. 用户</h2><h5 id="1-创建用户-这里的用户不可使用，在分配权限后可正常登陆"><a href="#1-创建用户-这里的用户不可使用，在分配权限后可正常登陆" class="headerlink" title="1 创建用户(这里的用户不可使用，在分配权限后可正常登陆)"></a>1 创建用户(这里的用户不可使用，在分配权限后可正常登陆)</h5><ul><li><p>只创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">CREATE USER username IDENTIFIED BY &#x27;password&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>创建用户的同时授予权限</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL ON databasename.* TO username@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2 删除用户"></a>2 删除用户</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">DROP USER username@localhost;<br></code></pre></td></tr></table></figure><h5 id="3-修改用户密码"><a href="#3-修改用户密码" class="headerlink" title="3 修改用户密码"></a>3 修改用户密码</h5><ul><li>命令修改</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">SET PASSWORD FOR username@localhost = password(&#x27;newpassword&#x27;); <br></code></pre></td></tr></table></figure><ul><li>更新 User 表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">use mysql;<br>UPDATE USER SET password=password(&#x27;newpassword&#x27;) WHERE user=&#x27;username&#x27; and host=&#x27;localhost&#x27;;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><ul><li>mysqladmin</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">mysqladmin -uroot -pold_password password new_password<br></code></pre></td></tr></table></figure><h5 id="4-解决忘记root密码"><a href="#4-解决忘记root密码" class="headerlink" title="4 解决忘记root密码"></a>4 解决忘记root密码</h5><ul><li><p>关闭 mysql 服务</p></li><li><p>进入mysql&#x2F;bin 目录</p></li><li><p>输入<code>mysqld --skip-grant-tables</code></p><ul><li>–skip-grant-tables ：启动MySQL服务的时候跳过权限表认证</li></ul></li><li><p>打开新终端，进入mysql&#x2F;bin 目录</p></li><li><p>打开mysql命令行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">use mysql;<br>UPDATE USER SET password=password(&#x27;newpassword&#x27;) WHERE user=&#x27;username&#x27; and host=&#x27;localhost&#x27;;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二-权限"><a href="#二-权限" class="headerlink" title="二. 权限"></a>二. 权限</h2><blockquote><p>！！！注意：在每次执行完分配权限命令后，需要刷新权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-在多个层次上授予权限"><a href="#1-在多个层次上授予权限" class="headerlink" title="1 在多个层次上授予权限"></a>1 在多个层次上授予权限</h5><ul><li><p>服务器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL PRIVILEGES ON *.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL PRIVILEGES ON databasename.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>数据表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL PRIVILEGES ON databasename.tablename TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>数据表的列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT SELECT(id, col1, col2) ON databasename.tablename TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>存储过程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT EXECUTE ON PROCEDURE databasename.tablename TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT EXECUTE ON FUNCTION databasename.tablename TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-对不同用户角色的授权（权限可自选，这里只是参考）"><a href="#2-对不同用户角色的授权（权限可自选，这里只是参考）" class="headerlink" title="2 对不同用户角色的授权（权限可自选，这里只是参考）"></a>2 对不同用户角色的授权（权限可自选，这里只是参考）</h5><ul><li><p>为普通用户添加权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT SELECT, INSERT, UPDATE, DELETE ON databasename.* TO &#x27;username&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>为开发者添加权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT CREATE, ALTER, DROP, REFERENCES ON databasename.* TO &#x27;username&#x27;@&#x27;192.168.0.%&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>为普通 DBA 添加权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL PRIVILEGES ON databasename.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>为高级 DBA 添加权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">GRANT ALL PRIVILEGES ON *.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure></li></ul><h5 id="3-查看授权"><a href="#3-查看授权" class="headerlink" title="3 查看授权"></a>3 查看授权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">SHOW GRANTS FOR username;<br></code></pre></td></tr></table></figure><h5 id="4-撤销在所有数据库上的权限"><a href="#4-撤销在所有数据库上的权限" class="headerlink" title="4 撤销在所有数据库上的权限"></a>4 撤销在所有数据库上的权限</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs mysql"><code class="language-hljs mysql">REVOKE ALL PRIVILEGES ON *.* FROM &#x27;username&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure><h5 id="5-命令分析"><a href="#5-命令分析" class="headerlink" title="5 命令分析"></a>5 命令分析</h5><ul><li><code>GRANT</code> ：执行命令词，一般为动词</li><li><code>ALL</code>：赋予权限名，参考下面的权限列表</li><li><code>*.*</code>：前者表示数据库名，后者表示数据表名<ul><li><code>databasename.*</code>：表示在databasename中的所有表</li><li><code>databasename.tablename</code>：表示在databasename中的tablename表</li></ul></li><li><code>&#39;username&#39;@&#39;localhost&#39;</code>：前者为用户名，后者为接入的IP<ul><li><p><code>&#39;username&#39;@&#39;%&#39;</code>：可以从任何地点接入</p></li><li><p><code>&#39;username&#39;@&#39;192.168.1.%&#39; </code>：192.168.1 IP下的局域网都可接入</p></li><li><p><code>&#39;username&#39;@&#39;%.website.com&#39; </code>：可以从website.com接入</p></li><li><p><code>&#39;username&#39;@&#39;localhost&#39;</code>: 只可以本机登录</p></li><li><blockquote><p>localhost 通过UNIXsocket连接，不会被解析为IP地址</p><p>127.0.0.1 通过TCP&#x2F;IP协议连接，只能本机访问</p><p>::1 ::1 支持ipv6，等同于ipv4的127.0.0.1</p></blockquote></li></ul></li></ul><h5 id="6-权限列表"><a href="#6-权限列表" class="headerlink" title="6 权限列表"></a>6 权限列表</h5><table><thead><tr><th>权限名</th><th>含义</th></tr></thead><tbody><tr><td>ALTER</td><td>修改表和索引</td></tr><tr><td>CREATE</td><td>创建数据库和表</td></tr><tr><td>DELETE</td><td>删除表中已有的记录</td></tr><tr><td>DROP</td><td>抛弃(删除)数据库和表</td></tr><tr><td>INDEX</td><td>创建或抛弃索引</td></tr><tr><td>INSERT</td><td>向表中插入新行</td></tr><tr><td>REFERENCE</td><td>外键权限</td></tr><tr><td>SELECT</td><td>检索表中的记录</td></tr><tr><td>UPDATE</td><td>修改现存表记录</td></tr><tr><td>FILE</td><td>读或写服务器上的文件</td></tr><tr><td>PROCESS</td><td>查看服务器中执行的线程信息或杀死线程</td></tr><tr><td>RELOAD</td><td>重载授权表或清空日志、主机缓存或表缓存</td></tr><tr><td>SHUTDOWN</td><td>关闭服务器</td></tr><tr><td>ALL</td><td>所有权限，ALL PRIVILEGES同义词</td></tr><tr><td>USAGE</td><td>特殊的 “无权限” 权限</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 权限 </tag>
            
            <tag> 用户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建进化树常用方法：生物进化距离（NJ）、统计特征（ML）和离散特征（MP）</title>
      <link href="/posts/21348/"/>
      <url>/posts/21348/</url>
      
        <content type="html"><![CDATA[<h1 id="常用方法列表"><a href="#常用方法列表" class="headerlink" title="常用方法列表"></a>常用方法列表</h1><table><thead><tr><th>方法名</th><th>方法名</th></tr></thead><tbody><tr><td><strong>ML</strong>，Maximum likelihood</td><td>最大似然法</td></tr><tr><td><strong>NJ</strong>，Neighbor-Joining</td><td>邻接法</td></tr><tr><td><strong>MP</strong>，Maximum parsimony</td><td>最大简约法</td></tr><tr><td>ME，Minimum Evolution</td><td>最小进化法</td></tr><tr><td>Bayesian</td><td>贝叶斯推断</td></tr><tr><td>UPGMA</td><td>不常用</td></tr></tbody></table><blockquote><p>一篇综述（Hall BG. Mol Biol Evol 2005, 22(3):792-802）认为贝叶斯的方法最好，其次是ML，然后是MP </p></blockquote><h1 id="常用方法介绍"><a href="#常用方法介绍" class="headerlink" title="常用方法介绍"></a>常用方法介绍</h1><h2 id="1、最大似然法（Maximum-likelihood，ML）："><a href="#1、最大似然法（Maximum-likelihood，ML）：" class="headerlink" title="1、最大似然法（Maximum likelihood，ML）："></a>1、最大似然法（Maximum likelihood，ML）：</h2><p> <strong>1.1 依据：</strong><br>这个方法最早是遗传学家以及统计学家罗纳德·费雪爵士在 1912 年至1922 年间开始使用的 。基本思想是：当从模型总体随机抽取n组样本观测值后，最合理的参数估计量应该使得从模型中抽取该n组样本观测值的概率最大，而不是像最小二乘估计法旨在得到使得模型能最好地拟合样本数据的参数估计量。 </p><p> <strong>1.2 方法：</strong><br>选取一个特定的替代模型来分析给定的一组序列数据，使得获得的每一个拓扑结构的似然率都为最大值，然后再挑出其中似然率最大的拓扑结构作为最优树（所以分析时间比较长）</p><p> <strong>1.3 特点：</strong><br>最大似然法具有很好的统计学理论基础，是一个比较成熟的统计学方法。选择合理的模型后，最大似然法可以推导出一个效果很好的进化树结果。但是对于相似度很低的序列，NJ往往出现Long-branch attraction（LBA，长枝吸引现象），有时严重干扰进化树的构建。</p><h2 id="2、邻接法（Neighbor-Joining，NJ）："><a href="#2、邻接法（Neighbor-Joining，NJ）：" class="headerlink" title="2、邻接法（Neighbor-Joining，NJ）："></a>2、邻接法（Neighbor-Joining，NJ）：</h2><p> <strong>2.1 依据：</strong><br>1987 由 Naruya Saitou， Masatoshi Neiin  提出的方法，该算法需要知道每一对之间的距离分类单元 (例如,物种或序列) 来使系统树的总距离达到最小，来形成树。。通过，就可以建立一个相应的拓扑树。</p><p> <strong>2.2 方法：</strong><br>邻接连接将距离矩阵作为输入，指定每对分类群之间的距离。该算法以完全未解析的树开始，其拓扑对应于星型网络的拓扑，并迭代地将相邻点合并成新的点（相邻是指两个分类单位在某一无根分叉树中仅通过一个节点相连），直到树完全解析并且所有分支长度都已知。</p><p><img src="http://baimoc.ziptop.top/blog/180827/all2F68EeD.png?imageslim" alt="mark"></p><p> <strong>2.3 特点</strong><br>与其他方法相比，优点就是速度快，所以可以快速分析大型数据集。</p><h2 id="3、最大简约法（Maximum-parsimony，MP）："><a href="#3、最大简约法（Maximum-parsimony，MP）：" class="headerlink" title="3、最大简约法（Maximum parsimony，MP）："></a>3、最大简约法（Maximum parsimony，MP）：</h2><p> <strong>3.1 依据</strong><br>基于奥卡姆（Ockham）哲学原则，这个原则认为：解释一个过程的最好理论是所需假设数目最少的那一个。</p><p> <strong>3.2 方法</strong></p><ol><li>计算所有可能的拓扑结构</li><li>计算出所需替代数最小的那个拓扑结构，作为最优树。</li></ol><p> <strong>3.3 特点</strong><br>用于分析如插入、缺失等序列。在分析序列上存在较多的回复突变或平行突变，而被检验的序列位点数又比较少的时候，最大简约法可能会给出一个不合理的或者错误的进化树推导结果。</p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 进化树 </tag>
            
            <tag> NJ </tag>
            
            <tag> MP </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL报错解决：MySQL server has gone away</title>
      <link href="/posts/54680/"/>
      <url>/posts/54680/</url>
      
        <content type="html"><![CDATA[<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><p><code>[Err] 2006 - MySQL server has gone away</code></p><h1 id="原因及解决"><a href="#原因及解决" class="headerlink" title="原因及解决"></a>原因及解决</h1><h4 id="原因一：-在数据库应用中执行长时间执行MySQL语句"><a href="#原因一：-在数据库应用中执行长时间执行MySQL语句" class="headerlink" title="原因一： 在数据库应用中执行长时间执行MySQL语句"></a>原因一： 在数据库应用中执行长时间执行MySQL语句</h4><h4 id="解决：1-1-打开-my-ini-my-cnf-文件修改以下变量："><a href="#解决：1-1-打开-my-ini-my-cnf-文件修改以下变量：" class="headerlink" title="解决：1.1 打开 my.ini (my.cnf) 文件修改以下变量："></a>解决：1.1 打开 my.ini (my.cnf) 文件修改以下变量：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">wait_timeout=2880000 <br>interactive_timeout = 2880000 <br></code></pre></td></tr></table></figure><hr><h4 id="原因二：在导入数据库或数据库应用执行较长语句"><a href="#原因二：在导入数据库或数据库应用执行较长语句" class="headerlink" title="原因二：在导入数据库或数据库应用执行较长语句"></a>原因二：在导入数据库或数据库应用执行较长语句</h4><h4 id="解决：修改my-ini-my-cnf-文件修改以下变量："><a href="#解决：修改my-ini-my-cnf-文件修改以下变量：" class="headerlink" title="解决：修改my.ini (my.cnf) 文件修改以下变量："></a>解决：修改my.ini (my.cnf) 文件修改以下变量：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">max_allowed_packet = 10M<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库开发 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索中文与外文数据库中的综述类文献</title>
      <link href="/posts/17177/"/>
      <url>/posts/17177/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索中文与外文数据库中的综述类文献"><a href="#搜索中文与外文数据库中的综述类文献" class="headerlink" title="搜索中文与外文数据库中的综述类文献"></a>搜索中文与外文数据库中的综述类文献</h1><hr><h3 id="1-中文数据库搜索"><a href="#1-中文数据库搜索" class="headerlink" title="1. 中文数据库搜索"></a>1. 中文数据库搜索</h3><blockquote><p>知网网址：<a href="http://www.cnki.net/">http://www.cnki.net/</a></p></blockquote><h5 id="1-1-进入高级搜索"><a href="#1-1-进入高级搜索" class="headerlink" title="1.1 进入高级搜索"></a>1.1 进入高级搜索</h5><p><img src="https://img-blog.csdn.net/20180525094949486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="1-2-筛查文献"><a href="#1-2-筛查文献" class="headerlink" title="1.2 筛查文献"></a>1.2 筛查文献</h5><p><img src="https://img-blog.csdn.net/20180525095001621?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="1-3-获取综述类文献"><a href="#1-3-获取综述类文献" class="headerlink" title="1.3 获取综述类文献"></a>1.3 获取综述类文献</h5><p><img src="https://img-blog.csdn.net/2018052509501181?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><hr><h3 id="2-外文数据库搜索"><a href="#2-外文数据库搜索" class="headerlink" title="2. 外文数据库搜索"></a>2. 外文数据库搜索</h3><blockquote><p>Web of Science 网址：<a href="http://apps.webofknowledge.com/">http://apps.webofknowledge.com</a></p></blockquote><h5 id="2-1-筛查文献"><a href="#2-1-筛查文献" class="headerlink" title="2.1 筛查文献"></a>2.1 筛查文献</h5><p><img src="https://img-blog.csdn.net/2018052509503095?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="2-2-查找高质量文献"><a href="#2-2-查找高质量文献" class="headerlink" title="2.2 查找高质量文献"></a>2.2 查找高质量文献</h5><p><img src="https://img-blog.csdn.net/20180525095040758?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="2-3-获取综述类文献"><a href="#2-3-获取综述类文献" class="headerlink" title="2.3 获取综述类文献"></a>2.3 获取综述类文献</h5><p><img src="https://img-blog.csdn.net/20180525095050392?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNjIyNTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 闲聊杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文相关 </tag>
            
            <tag> 文献 </tag>
            
            <tag> 综述 </tag>
            
            <tag> 论文数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Pandas 用法速查表</title>
      <link href="/posts/49240/"/>
      <url>/posts/49240/</url>
      
        <content type="html"><![CDATA[<h1 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df &#x3D; pd.DataFrame(pd.read_csv(‘input.csv’,header&#x3D;1))</td><td>读取csv</td></tr><tr><td>df &#x3D; pd.DataFrame(pd.read_excel(‘input.xlsx’))</td><td>读取xlsx</td></tr><tr><td>df_inner.to_csv(‘output.csv’)</td><td>写入CSV</td></tr><tr><td>df_inner.to_excel(‘output.xlsx’, sheet_name&#x3D;’sheet1’)</td><td>写入Excel</td></tr></tbody></table><p>设置列名<code>dataframe.columns=[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;]</code></p><p>设置索引<code>dataframe.set_index(&quot;col_name&quot;)</code></p><p>读取行数<code>pd.read_csv(file_path,skiprows=9,nrows=10) </code></p><h1 id="数据创建"><a href="#数据创建" class="headerlink" title="数据创建"></a>数据创建</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>pd.Series([1, 2, 3, 4, 5])</td><td>list创建Series</td></tr><tr><td>pd.date_range(‘20171022’, periods&#x3D;6)</td><td>时间索引</td></tr><tr><td>pd.DataFrame(np.random.randn(6, 4), index&#x3D;dates, columns&#x3D;list([‘c1’, ‘c2’, ‘c3’, ‘c4’]))</td><td>列标签</td></tr><tr><td>pd.DataFrame.from_dict({“A”:1, “B”:2, “C”:3}, orient&#x3D;’index’).T</td><td>字典创建</td></tr></tbody></table><h1 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df.shape</td><td>维度</td></tr><tr><td>df.info()</td><td>数据表基本信息（维度、列名称、数据格式、所占空间等）</td></tr><tr><td>df.dtypes</td><td>列数据的格式</td></tr><tr><td>df[‘Name’].dtype</td><td>某一列格式</td></tr><tr><td>df.isnull()</td><td>空值</td></tr><tr><td>df.isnull()</td><td>查看某一列空值</td></tr><tr><td>df[Name’].unique()</td><td>某一列的唯一值</td></tr><tr><td>df.values</td><td>数据表的值</td></tr><tr><td>df.columns</td><td>列名称</td></tr><tr><td>df.head()</td><td>查看前10行数据</td></tr><tr><td>df.tail()</td><td>查看后10行数据</td></tr></tbody></table><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df.fillna(value&#x3D;0)</td><td>数字0填充空值</td></tr><tr><td>df[‘prince’].fillna(df[‘prince’].mean())</td><td>使用列prince的均值对NA进行填充</td></tr><tr><td>df[‘city’]&#x3D;df[‘city’].map(str.strip)</td><td>清除city字段的字符空格</td></tr><tr><td>df[‘city’]&#x3D;df[‘city’].str.lower()</td><td>大小写转换</td></tr><tr><td>df[‘price’].astype(‘int’)</td><td>更改数据格式</td></tr><tr><td>df.rename(columns&#x3D;{‘category’: ‘category-size’})</td><td>更改列名称</td></tr><tr><td>df[‘city’].replace(‘sh’, ‘shanghai’)</td><td>数据替换</td></tr><tr><td>df1.dropna(how&#x3D;’any’)</td><td>去掉包含缺失值的行</td></tr><tr><td>df1.fillna(5)</td><td>对缺失值进行填充</td></tr><tr><td>pd.isnull(df1)</td><td>对缺失值进行布尔填充</td></tr></tbody></table><h1 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df_csv.loc[:, [‘chrom’, ‘q_value’]]</td><td>索引+列标签切片</td></tr><tr><td>df_csv.loc[0, [‘chrom’]]<br />df_csv.loc[0, ‘chrom’]<br />df_csv.at[0, ‘chrom’]<br />df_csv.iloc[1, 1]<br />df_csv.iat[1, 1]</td><td>提取一个标量</td></tr><tr><td>df_csv.iloc[3]<br />df_inner.loc[3]</td><td>提取一行</td></tr><tr><td>df_inner.iloc[0:5]<br />df_csv.iloc[3:5, 0:2]<br />df_csv.iloc[[1, 2, 4], [0, 2]]<br />df_csv.iloc[1:3, :]<br />df_inner.ix[:’2013-01-03’,:4]</td><td>提取区域</td></tr><tr><td>df_inner[‘city’].isin([‘beijing’])</td><td>判断city列的值是否为北京</td></tr><tr><td>df_inner.loc[df_inner[‘city’].isin([‘beijing’,’shanghai’])]</td><td>判断city列里是否包含beijing和shanghai，然后将符合条件的数据提取出来</td></tr><tr><td>pd.DataFrame(category.str[:3])</td><td>提取前三个字符，并生成数据表</td></tr><tr><td>df_csv.loc[:, [‘chrom’, ‘q_value’]]</td><td>索引+列标签切片</td></tr></tbody></table><h1 id="数据筛选"><a href="#数据筛选" class="headerlink" title="数据筛选"></a>数据筛选</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df_inner.loc[(df_inner[‘age’] &gt; 25) &amp; (df_inner[‘city’] &#x3D;&#x3D; ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]]</td><td>使用“与”进行筛选</td></tr><tr><td>&#96;df_inner.loc[(df_inner[‘age’] &gt; 25)</td><td>(df_inner[‘city’] &#x3D;&#x3D; ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]].sort([‘age’]) &#96;&#96;&#96;</td></tr><tr><td>df_inner.loc[(df_inner[‘city’] !&#x3D; ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]].sort([‘id’])</td><td>使用“非”条件进行筛选</td></tr><tr><td>df_inner.loc[(df_inner[‘city’] !&#x3D; ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]].sort([‘id’]).city.count()</td><td>对筛选后的数据按city列进行计数</td></tr><tr><td>df_inner.query(‘city &#x3D;&#x3D; [“beijing”, “shanghai”]’)</td><td>使用query函数进行筛选</td></tr><tr><td>df_inner.query(‘city &#x3D;&#x3D; [“beijing”, “shanghai”]’).price.sum()</td><td>对筛选后的结果按prince进行求和</td></tr></tbody></table><h1 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df_inner.groupby(‘city’).count()</td><td>对所有的列进行计数汇总</td></tr><tr><td>df_inner.groupby(‘city’)[‘id’].count()</td><td>按城市对id字段进行计数</td></tr><tr><td>df_inner.groupby([‘city’,’size’])[‘id’].count()</td><td>对两个字段进行汇总计数</td></tr><tr><td>df_inner.groupby(‘city’)[‘price’].agg([len,np.sum, np.mean])</td><td>对city字段进行汇总，并分别计算prince的合计和均值</td></tr><tr><td>df_inner.sample(n&#x3D;3)</td><td>简单的数据采样</td></tr><tr><td>weights &#x3D; [0, 0, 0, 0, 0.5, 0.5]df_inner.sample(n&#x3D;2, weights&#x3D;weights)</td><td>手动设置采样权重</td></tr><tr><td>df_inner.sample(n&#x3D;6, replace&#x3D;False)</td><td>采样后不放回</td></tr><tr><td>df_inner.sample(n&#x3D;6, replace&#x3D;True)</td><td>采样后放回</td></tr><tr><td>df_inner.describe().round(2).T</td><td>数据表描述性统计</td></tr><tr><td>df_inner[‘price’].std()</td><td>计算列的标准差</td></tr><tr><td>df_inner[‘price’].cov(df_inner[‘m-point’])</td><td>计算两个字段间的协方差</td></tr><tr><td>df_inner.cov()</td><td>数据表中所有字段间的协方差</td></tr><tr><td>df_inner[‘price’].corr(df_inner[‘m-point’])</td><td>两个字段的相关性分析<br /> 相关系数在-1到1之间，接近1为正相关，接近-1为负相关，0为不相关</td></tr><tr><td>df_inner.corr()</td><td>数据表的相关性分析</td></tr></tbody></table><h1 id="操作数据表结构"><a href="#操作数据表结构" class="headerlink" title="操作数据表结构"></a>操作数据表结构</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df_inner.set_index(‘id’)</td><td>设置索引列</td></tr><tr><td>df_inner.sort_values(by&#x3D;[‘age’])</td><td>按照 age 列排序</td></tr><tr><td>df_inner.sort_index()</td><td>按照索引列排序</td></tr><tr><td>df_inner[‘group’] &#x3D; np.where(df_inner[‘price’] &gt; 3000,’high’,’low’)</td><td>如果prince列的值&gt;3000，group列显示high，否则显示low</td></tr><tr><td>df_inner.loc[(df_inner[‘city’] &#x3D;&#x3D; ‘beijing’) &amp; (df_inner[‘price’] &gt;&#x3D; 4000), ‘sign’]&#x3D;1</td><td>对复合多个条件的数据进行分组标记</td></tr><tr><td>pd.DataFrame((x.split(‘-‘) for x in df_inner[‘category’]),index&#x3D;df_inner.index,columns&#x3D;[‘category’,’size’]))</td><td>对category字段的值依次进行分列，并创建数据表，索引值为df_inner的索引列，列名称为category和size</td></tr><tr><td>df_inner&#x3D;pd.merge(df_inner,split,right_index&#x3D;True, left_index&#x3D;True)</td><td>将完成分裂后的数据表和原df_inner数据表进行匹配</td></tr><tr><td>df_inner.reset_index()</td><td>重设索引</td></tr><tr><td>df_inner&#x3D;df_inner.set_index(‘date’)</td><td>设置日期为索引</td></tr></tbody></table><h1 id="数据表合并"><a href="#数据表合并" class="headerlink" title="数据表合并"></a>数据表合并</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>df_inner&#x3D;pd.merge(df,df1,how&#x3D;’inner’)</td><td>内连接（取两个集合的交集）</td></tr><tr><td>df_left&#x3D;pd.merge(df,df1,how&#x3D;’left’)</td><td>左连接（以 df 为基准，df1 在 df 中无匹配则为空）</td></tr><tr><td>df_right&#x3D;pd.merge(df,df1,how&#x3D;’right’)</td><td>右连接（以 df1 为基准，df 在 df1 中无匹配则为空）</td></tr><tr><td>df_outer&#x3D;pd.merge(df,df1,how&#x3D;’outer’)</td><td>全连接（取两个集合的并集，包含有 df ， df1 的全部数据行，无匹配则填充空）</td></tr></tbody></table><h1 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>a.columns &#x3D; [‘a’,’b’,’c’]</td><td>列名全部修改</td></tr><tr><td>a.rename(columns&#x3D;{‘A’:’a’}, inplace &#x3D; True)</td><td>修改部分列名</td></tr></tbody></table><h1 id="插入一列"><a href="#插入一列" class="headerlink" title="插入一列"></a>插入一列</h1><table><thead><tr><th>代码</th><th>作用</th></tr></thead><tbody><tr><td>frame.insert(0, ‘num’, 1)</td><td>在第一列插入名为num的列，值为1</td></tr><tr><td>frame.insert(0, ‘num’, np.[i for i in rang(10)], allow_duplicates&#x3D;True)</td><td>在第一列插入名为num的列，值为1..10，允许有重复列</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pandas </tag>
            
            <tag> 速查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | bowtie2（测序序列与参考序列比对）</title>
      <link href="/posts/48200/"/>
      <url>/posts/48200/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><ul><li>Bowtie2 是将测序后的 reads 与长参考组的比对工具 (适用于将长度大约为50~1000bp的reads与相对较长的基因组, 如哺乳动物,进行比对)。</li><li>通常是比较基因组学(包括 variation calling，ChIP-seq，RNA-seq，BS-seq)管道的第一步。</li><li>可以处理非常长的 Reads（即10~100kb），但它针对近期测序仪产生的 Reads 长度和误差模式进行了优化，如Illumina HiSeq 2000，Roche 454和Ion Torrent仪器。</li><li>Bowtie2使用FM索引（基于Burrows-Wheeler Transform 或 BWT）对基因组进行索引，以此来保持其占用较小内存。对于人类基因组来说，内存占用在3.2G左右。Bowtie2 支持间隔，局部和双端对齐模式。可以同时使用多个处理器来极大的提升比对速度。<blockquote><p>如果目的是对齐两个非常大的序列（例如两个基因组），请考虑使用<a href="http://mummer.sourceforge.net/">MUMmer</a>。<br>如果目的是与相对较短的参考序列（如细菌基因组）非常灵敏的比对，可以使用Bowtie 2完成，但也可以考虑使用<a href="http://mummer.sourceforge.net/manual/#nucmer">NUCmer</a>，<a href="http://genome.ucsc.edu/cgi-bin/hgBlat?command=start">BLAT</a>或<a href="http://blast.ncbi.nlm.nih.gov/Blast.cgi">BLAST</a>等工具。当参考基因组很长时，这些工具可能会非常缓慢，但当参考基因组很短时通常就足够了。</p></blockquote></li></ul><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p><strong>这里提供两种方法，选择一种安装即可，强烈建议使用Conda方式安装</strong></p><h2 id="1-Conda-安装"><a href="#1-Conda-安装" class="headerlink" title="1. Conda 安装"></a>1. Conda 安装</h2><p><code>conda install -y bowtie2  </code></p><blockquote><p>这里需要安装Conda (一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件的依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a></p></blockquote><h2 id="2-传统安装"><a href="#2-传统安装" class="headerlink" title="2. 传统安装"></a>2. 传统安装</h2><p><strong>下载</strong></p><blockquote><p><a href="http://bowtie-bio.sourceforge.net/bowtie2/index.shtml">http://bowtie-bio.sourceforge.net/bowtie2/index.shtml</a></p></blockquote><p>在Linux系统下将上述的链接下载到本地</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">sudo wget https://jaist.dl.sourceforge.net/project/bowtie-bio/bowtie2/2.3.4.1/bowtie2-2.3.4.1-linux-x86_64.zip<br></code></pre></td></tr></table></figure><p><strong>解压</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">unzip bowtie2-2.3.4.1-linux-x86_64.zip<br></code></pre></td></tr></table></figure><p><strong>设置环境变量</strong></p><ul><li>打开环境变量设置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo vim /etc/environment<br></code></pre></td></tr></table></figure><ul><li><p>添加软件 bin 目录的路径，并用 <code>:</code> 隔开，如下图</p></li><li><p>执行source命令，使配置立即生效</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">sudo source /etc/enviroment<br></code></pre></td></tr></table></figure><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h2 id="1、参考基因组比对"><a href="#1、参考基因组比对" class="headerlink" title="1、参考基因组比对"></a>1、参考基因组比对</h2><p><strong>单末端</strong></p><p><code>&quot;bowtie2 -p 10 -x genome_index -U input.fq | samtools sort  -O bam  -@ 10 -o - &gt; output.bam</code></p><p><strong>双末端</strong></p><p><code>bowtie2 -p 10 -x genome_index -1 input_1.fq -2 input_2.fq | samtools sort  -O bam  -@ 10 -o - &gt; output.bam</code></p><blockquote><p>需要注意的是：</p><ul><li>这条命令把bowtie2 生成的sam文件通过管道<code>|</code>传递到samtools，将sam转换为bam文件，省去中间sam文件的空间占用</li><li>genome_index 指的是用于bowtie2的索引文件（如下图），而不是参考基因组本身，构建过程参考后文。</li><li>genome_index 需要指定路径及其共用文件名，比如我的索引文件放在<code>/data/ref/bowtie2/mm10</code>目录下，但是需要输入的参数为<code>/data/ref/bowtie2/mm10/mm10</code>。最后一个<code>mm10</code>指的是共用文件名。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAxOTA0MTcvNmhRaW12NkJYNU1vLnBuZw?x-oss-process=image/format,png" alt="mark"></li></ul></blockquote><h3 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-x <bt2-idx></td><td>参考基因组索引的基名。基本名称是任何索引文件的名称，但不包括最终的<code>.1.bt2</code>&#x2F; <code>.rev.1.bt2</code>&#x2F;等。<code>bowtie2</code>在当前目录中首先查找指定的索引，然后在<code>BOWTIE2_INDEXES</code>环境变量中指定的目录中查找。</td></tr><tr><td>-1 <m1></td><td>以逗号分隔的包含队友1的文件列表（文件名通常包含<code>_1</code>），例如<code>-1 flyA_1.fq,flyB_1.fq</code>。使用此选项指定的序列必须与文件中的文件和读取的文件一致<code>&lt;m2&gt;</code>。读数可能是不同长度的混合。如果<code>-</code>指定，<code>bowtie2</code>将从“标准输入”或“标准输入”文件句柄读取队友1。</td></tr><tr><td>-2 <m2></td><td>逗号分隔的包含队友2（文件名通常包括<code>_2</code>）的文件列表，例如<code>-2 flyA_2.fq,flyB_2.fq</code>。使用此选项指定的序列必须与文件中的文件和读取的文件一致<code>&lt;m1&gt;</code>。读数可能是不同长度的混合。如果<code>-</code>指定，<code>bowtie2</code>将从“标准输入”或“标准输入”文件句柄中读取队友2。</td></tr><tr><td>-U <r></td><td>逗号分隔的包含未配对读取的文件列表要对齐，例如<code>lane1.fq,lane2.fq,lane3.fq,lane4.fq</code>。读数可能是不同长度的混合。如果<code>-</code>指定，<code>bowtie2</code>则从“标准输入”或“标准输入”文件句柄中读取数据。</td></tr><tr><td>-S <sam></td><td>将SAM对齐文件写入。默认情况下，对齐被写入“标准输出”或“标准输出”文件句柄（即控制台）。</td></tr></tbody></table><h3 id="可选参数（常用）"><a href="#可选参数（常用）" class="headerlink" title="可选参数（常用）"></a>可选参数（常用）</h3><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-q</td><td>读取（与指定<code>&lt;m1&gt;</code>，<code>&lt;m2&gt;</code>，<code>&lt;s&gt;</code>）是FASTQ文件。FASTQ文件通常有扩展名<code>.fq</code>或<code>.fastq</code>。FASTQ是默认格式。另见：<a href="http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#bowtie2-options-solexa-quals"><code>--solexa-quals</code></a>和<a href="http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#bowtie2-options-int-quals"><code>--int-quals</code></a>。</td></tr><tr><td>-p&#x2F;–threads NTHREADS</td><td>启动<code>NTHREADS</code>并行搜索线程（默认值：1）。线程将在单独的处理器&#x2F;内核上运行，并在解析读取和输出对齐时进行同步。搜索对齐高度平行，加速接近线性。提高<code>-p</code>增加的蝴蝶结2的内存占用。例如，当与人类基因组索引对齐时，<code>-p</code>从1增加到8会将内存占用增加数百兆字节。该选项仅在<code>bowtie</code>与<code>pthreads</code>库链接时才可用（即，如果<code>BOWTIE_PTHREADS=0</code>未在构建时指定）。</td></tr><tr><td>–local</td><td>在这种模式下，Bowtie 2不要求整个读取从一端到另一端对齐。相反，为了达到最大可能的对齐分数，可以从末端省略一些字符（“软裁剪”）</td></tr></tbody></table><h2 id="2、构建索引"><a href="#2、构建索引" class="headerlink" title="2、构建索引"></a>2、构建索引</h2><h3 id="官方索引"><a href="#官方索引" class="headerlink" title="官方索引"></a>官方索引</h3><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wget ftp://ftp.ccb.jhu.edu/pub/data/bowtie2_indexes/mm10.zip<br>unzip mm10.zip<br>rm mm10.zip make_mm10.sh<br></code></pre></td></tr></table></figure><blockquote><p>其他物种的索引：<a href="https://benlangmead.github.io/aws-indexes/bowtie">https://benlangmead.github.io/aws-indexes/bowtie</a></p></blockquote><h3 id="自建索引"><a href="#自建索引" class="headerlink" title="自建索引"></a>自建索引</h3><p>这里以构建 <code>*M. musculus*, UCSC mm10</code> 为例         </p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wget http://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/chromFa.tar.gz <br>tar -zxvf chromFa.tar.gz <br>cat *.fa > mm10.fa<br>bowtie2-build mm10.fa mm10<br></code></pre></td></tr></table></figure><h2 id="3、一个完整例子"><a href="#3、一个完整例子" class="headerlink" title="3、一个完整例子"></a>3、一个完整例子</h2><ul><li>下载参考基因组</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wget http://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/chromFa.tar.gz <br>tar -zxvf chromFa.tar.gz <br>cat *.fa > mm10.fa<br></code></pre></td></tr></table></figure><ul><li>构建bowtie2索引文件<figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">bowtie2-build mm10.fa mm10<br></code></pre></td></tr></table></figure></li><li>运行bowtie2 获取 SAM 文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">bowtie2 -p 6 -3 5 --local -x mm10 -1 example_1.fastq -2 example_2.fastq -S example.sam<br></code></pre></td></tr></table></figure><blockquote><p>这行命令表示使用–local的比对模式，使用 mm10 的索引；这里是双末端测序，所以将待比对文件 example_1.fq example_2.fa 分别输入，以 example.sam 的文件输出</p><p>如果为单末端测序的话，上述命令换为：</p><p>bowtie2 -p 6 -3 5 –local -x mm10 -U &#x2F;opt&#x2F;sdc&#x2F;SRR&#x2F;example.fastq -S example.sam</p></blockquote><ul><li>SAM 文件转为 BAM 文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">samtools sort example.sam > example.bam<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> Linux </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> chip-seq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计-范式</title>
      <link href="/posts/45392/"/>
      <url>/posts/45392/</url>
      
        <content type="html"><![CDATA[<p>#范式</p><p>范式就是数据库的构建规则，目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、第四范式（4NF）、第五范式（5NF）和第六范式（6NF）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式（3NF）就行了。</p><hr><p>#1NF（第一范式）</p><p>###特征：<strong>无重复列</strong><br><strong>官方解释</strong>：在关系模式R中的每一个具体关系r中，如果每个属性值 都是不可再分的最小数据单位，则称R是第一范式的关系<br><strong>目的</strong>：消除实体中列中的重复值或实体的重复属性</p><blockquote><p>例：如职工号，姓名，电话号码组成一个表（一个人可能有一个办公室电话 和一个家里电话号码） 规范成为1NF有三种方法：<br>一是重复存储职工号和姓名。这样，关键字只能是电话号码。<br>二是职工号为关键字，电话号码分为单位电话和住宅电话两个属性<br>三是职工号为关键字，但强制每条记录只能有一个电话号码。<br>以上三个方法，第一种方法最不可取，按实际情况选取后两种情况。</p></blockquote><hr><p>#2NF（第二范式）</p><p>###<strong>特征：完全依赖</strong><br><strong>官方解释</strong>：如果关系模式R（U，F）中的所有非主属性都<strong>完全依赖</strong>于任意一个候选关键字，则称关系R 属于第二范式<br><strong>目的</strong>：消除非主属性对主码的部分函数依赖</p><blockquote><p>例：选课关系 SCI（SNO，CNO，GRADE，CREDIT）其中SNO为学号， CNO为课程号，GRADEGE 为成绩，CREDIT 为学分。 由以上条件，关键字为组合关键字（SNO，CNO）<br>在应用中使用以上关系模式有以下问题：<br>a.数据冗余，假设同一门课由40个学生选修，课程号就 重复40次。<br>b.更新异常，若调整了某课程的学分，相应的元组CREDIT值都要更新，有可能会出现同一门课学分不同。<br>c.插入异常，如计划开新课，由于没人选修，没有学号关键字，只能等有人选修才能把课程和学分存入。<br>d.删除异常，若学生已经结业，从当前数据库删除选修记录。某些门课程新生尚未选修，则此门课程及学分记录无法保存。<br>原因：<br>非关键字属性CREDIT仅函数依赖于CNO，也就是CREDIT部分依赖组合关键字（SNO，CNO）而不是完全依赖。<br>解决方法<br>分成两个关系模式 SC1（SNO，CNO，GRADE），C2（CNO，CREDIT）。新关系包括两个关系模式，它们之间通过SC1中的外关键字CNO相联系，需要时再进行自然联接，恢复了原来的关系</p></blockquote><hr><p>#3NF（第三范式）</p><p>###<strong>特征：传递依赖</strong><br><strong>官方解释</strong>：如果关系模式R（U，F）中的所有非主属性对任何候选关键字都不存在<strong>传递依赖</strong>，则称关系R是属于第三范式的。<br>目的：消除传递依赖</p><blockquote><p>例：如S1（SNO，SNAME，DNO，DNAME，LOCATION） 各属性分别代表学号，<br>姓名，所在系，系名称，系地址。<br>关键字SNO决定各个属性。由于是单个关键字，没有部分依赖的问题，肯定是2NF。但这关系肯定有大量的冗余，有关学生所在的几个属性DNO，DNAME，LOCATION将重复存储，插入，删除和修改时也将产生类似以上例的情况。<br>原因<br>关系中存在传递依赖造成的。即SNO -&gt; DNO。 而DNO -&gt; SNO却不存在，DNO -&gt; LOCATION, 因此关键字 SNO 对 LOCATION 函数决定是通过传递依赖 SNO -&gt; LOCATION 实现的。也就是说，SNO不直接决定非主属性LOCATION。<br>解决目地<br>每个关系模式中不能留有传递依赖。<br>解决方法<br>分为两个关系 S（SNO，SNAME，DNO），D（DNO，DNAME，LOCATION）<br>注意<br>关系S中不能没有外关键字DNO。否则两个关系之间失去联系。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 范式 </tag>
            
            <tag> 1NF </tag>
            
            <tag> 2NF </tag>
            
            <tag> 3NF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 之 在IDEA中的热部署</title>
      <link href="/posts/18193/"/>
      <url>/posts/18193/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA中Spring-Boot的热部署"><a href="#IDEA中Spring-Boot的热部署" class="headerlink" title="IDEA中Spring Boot的热部署"></a>IDEA中Spring Boot的热部署</h1><h2 id="设置自动编译"><a href="#设置自动编译" class="headerlink" title="设置自动编译"></a>设置自动编译</h2><p><img src="C:\Users\baimoc\Pictures\a1缓存\Snipaste_2018-01-19_16-53-50.png" alt="Snipaste_2018-01-19_16-53-50"></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><blockquote><p>pom.xml文件</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.ziptop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 热部署需要引入的依赖文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 热部署需要引入的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.ziptop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-mysql<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 热部署需要引入的依赖文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 热部署需要引入的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>></span><br><br></code></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p><code>Ctrl</code> + <code>F9</code></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 之 使用 MySQL</title>
      <link href="/posts/63106/"/>
      <url>/posts/63106/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-中使用-MySQL"><a href="#Spring-Boot-中使用-MySQL" class="headerlink" title="Spring Boot 中使用 MySQL"></a>Spring Boot 中使用 MySQL</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><blockquote><p>JPA( Java Persistence API) 资源库，就是为 POJO （Plain Ordinary Java Object）提供持久化的标准规范，然后将 POJO 通过 ORM（Object-Relational Mapping）持久化到数据库中。</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/spring_boot?characterEncoding=utf8</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">database-platform:</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/spring_boot?characterEncoding=utf8</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">database-platform:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5Dialect</span><br></code></pre></td></tr></table></figure><h2 id="实体建模"><a href="#实体建模" class="headerlink" title="实体建模"></a>实体建模</h2><blockquote><p>这个实体用来与数据库中的表建立映射关系</p></blockquote><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Table</td><td>指定关联的数据库的表名</td></tr><tr><td>@Id</td><td>唯一标识</td></tr><tr><td>@GeneratedValue</td><td>自动生成</td></tr><tr><td>@Entity</td><td>表明这是一个实体类，如果表名和实体类名相同的话，@Table可以省略</td></tr></tbody></table><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p><strong>Java中的对象：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.domain;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.domain;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据库中的User表</strong></p><p><img src="C:\Users\baimoc\Pictures\a1缓存\engine.png" alt="engine"></p><h2 id="实体的持久化"><a href="#实体的持久化" class="headerlink" title="实体的持久化"></a>实体的持久化</h2><p><strong>Java中用接口来实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.repository;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findByAge</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.repository;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findByAge</span><span class="hljs-params">(Integer age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新建Controller实现增删改查"><a href="#新建Controller实现增删改查" class="headerlink" title="新建Controller实现增删改查"></a>新建Controller实现增删改查</h2><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.controller;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> top.baimoc.mocdb.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询单条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findOne(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping(&quot;/updata/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(id);<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        userRepository.delete(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据Age查询多条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;searchbyage/&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchByAge</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.controller;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> top.baimoc.mocdb.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询单条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findOne(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping(&quot;/updata/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(id);<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        userRepository.delete(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据Age查询多条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;searchbyage/&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchByAge</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>        <span class="hljs-keyword">return</span> userRepository.findByAge(age);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 之 使用Thymeleaf</title>
      <link href="/posts/57425/"/>
      <url>/posts/57425/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-中使用Thymeleaf"><a href="#Spring-Boot-中使用Thymeleaf" class="headerlink" title="Spring Boot 中使用Thymeleaf"></a>Spring Boot 中使用Thymeleaf</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><blockquote><p>JPA( Java Persistence API) 资源库，就是为 POJO （Plain Ordinary Java Object）提供持久化的标准规范，然后将 POJO 通过 ORM（Object-Relational Mapping）持久化到数据库中。</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML5</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal"><code class="language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML5</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="新建控制器"><a href="#新建控制器" class="headerlink" title="新建控制器"></a>新建控制器</h2><blockquote><p>这个实体用来与数据库中的表建立映射关系</p></blockquote><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Table</td><td>指定关联的数据库的表名</td></tr><tr><td>@Id</td><td>唯一标识</td></tr><tr><td>@GeneratedValue</td><td>自动生成</td></tr><tr><td>@Entity</td><td>表明这是一个实体类，如果表名和实体类名相同的话，@Table可以省略</td></tr></tbody></table><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p><strong>Java中的对象：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloController.class);<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 测试hello</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span> &#123;<br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Dear&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string"><code class="language-hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloController.class);<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 测试hello</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>  <span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span> &#123;<br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Dear&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 之 报错记录</title>
      <link href="/posts/8798/"/>
      <url>/posts/8798/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">org.xml.sax.SAXParseException: 对实体 "tag" 的引用必须以 &#x27;;&#x27; 分隔符结尾。<br></code></pre></td></tr></table></figure><h2 id="重现步骤"><a href="#重现步骤" class="headerlink" title="重现步骤"></a>重现步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"><a class="nav-link" th:href="/blogs?order=hot&tag=2">hot</a><br></code></pre></td></tr></table></figure><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p><strong>Themleaf 是xml模板不能输入 &amp; 符号   应该用 <code>&amp;amp; </code>代替</strong>  </p><blockquote><p>HTML的 <code>&amp;lt;</code>, <code> &amp;gt;</code>, <code>&amp;amp;</code> ,<code>&amp;quot; </code>,<code>&amp;copy;</code> 分别是&lt;，&gt;，&amp;，”，© 的转义字符</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 之 MySQL数据库使用</title>
      <link href="/posts/14268/"/>
      <url>/posts/14268/</url>
      
        <content type="html"><![CDATA[<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure><blockquote><p>JPA( Java Persistence API) 资源库，就是为 POJO （Plain Ordinary Java Object）提供持久化的标准规范，然后将 POJO 通过 ORM（Object-Relational Mapping）持久化到数据库中。</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre class=" language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/spring_boot?characterEncoding=utf8</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">database-platform:</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/spring_boot?characterEncoding=utf8</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">database-platform:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5Dialect</span><br></code></pre></td></tr></table></figure><h2 id="实体建模"><a href="#实体建模" class="headerlink" title="实体建模"></a>实体建模</h2><blockquote><p>这个实体用来与数据库中的表建立映射关系</p></blockquote><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Table</td><td>指定关联的数据库的表名</td></tr><tr><td>@Id</td><td>唯一标识</td></tr><tr><td>@GeneratedValue</td><td>自动生成</td></tr><tr><td>@Entity</td><td>表明这是一个实体类，如果表名和实体类名相同的话，@Table可以省略</td></tr></tbody></table><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p><strong>Java中的对象：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.domain;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.domain;<br><br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据库中的User表</strong></p><p><img src="http://img.blog.csdn.net/20180119115938155?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><h2 id="实体的持久化"><a href="#实体的持久化" class="headerlink" title="实体的持久化"></a>实体的持久化</h2><p><strong>Java中用接口来实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.repository;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findByAge</span><span class="hljs-params"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.repository;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findByAge</span><span class="hljs-params">(Integer age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新建Controller实现增删改查"><a href="#新建Controller实现增删改查" class="headerlink" title="新建Controller实现增删改查"></a>新建Controller实现增删改查</h2><figure class="highlight java"><table><tr><td class="code"><pre class=" language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.controller;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> top.baimoc.mocdb.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询单条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findOne(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping(&quot;/updata/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(id);<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        userRepository.delete(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据Age查询多条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;searchbyage/&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchByAge</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>        <span class="hljs-keyword"><code class="language-hljs java"><span class="hljs-keyword">package</span> top.baimoc.mocdb.controller;<br><br><span class="hljs-keyword">import</span> top.baimoc.mocdb.domain.User;<br><span class="hljs-keyword">import</span> top.baimoc.mocdb.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询单条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/search/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findOne(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping(&quot;/updata/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(id);<br>        user.setName(name);<br>        user.setAge(age);<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        userRepository.delete(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据Age查询多条数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;searchbyage/&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchByAge</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>        <span class="hljs-keyword">return</span> userRepository.findByAge(age);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows，Linux指定端口查看及关闭</title>
      <link href="/posts/52180/"/>
      <url>/posts/52180/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ul><li>查看所有</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">> netstat -ano<br></code></pre></td></tr></table></figure><ul><li>查看指定</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">> netstat -ano|findstr "8080"<br></code></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20180118161716555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>列表表头依次为：协议，本地地址，外部地址，状态，PID</p></blockquote><ul><li>查找对应进程，输入对应的PID</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">> tasklist|findstr "8968"<br></code></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20180118161731082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>关闭进程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">> tastkill /f /t /im java.exe<br></code></pre></td></tr></table></figure><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>查找指定端口</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$ netstat -anp|grep 8080<br></code></pre></td></tr></table></figure><ul><li>关闭进程，参数为上面的PID</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">$ kill -9 PID<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫之selenium</title>
      <link href="/posts/40396/"/>
      <url>/posts/40396/</url>
      
        <content type="html"><![CDATA[<h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a><strong>下载与安装</strong></h3><hr><h4 id="selenium-安装"><a href="#selenium-安装" class="headerlink" title="selenium 安装"></a>selenium 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">pip install selenium<br></code></pre></td></tr></table></figure><h4 id="chromedriver-下载地址"><a href="#chromedriver-下载地址" class="headerlink" title="chromedriver 下载地址"></a>chromedriver 下载地址</h4><blockquote><p><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a><br><a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p></blockquote><p><em>注意: 这里需要将Chrome的版本与chromedriver的版本相对应</em><br><img src="https://img-blog.csdnimg.cn/e846a2bee92645f8ae341f874f2a1afd.png" alt="在这里插入图片描述"></p><h3 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a><strong>使用举例</strong></h3><hr><h4 id="打开链接"><a href="#打开链接" class="headerlink" title="打开链接"></a><strong>打开链接</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">dr = webdriver.Chrome(<span class="hljs-string">r&quot;D:\Tools\BrowserDriver\chromedriver\2.33\chromedriver.exe&quot;</span>)<br>url = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string"><code class="language-hljs Python">dr = webdriver.Chrome(<span class="hljs-string">r&quot;D:\Tools\BrowserDriver\chromedriver\2.33\chromedriver.exe&quot;</span>)<br>url = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">"now access %s"</span> %(url)<br>dr.get(url)<br>dr.quit()<br></code></pre></td></tr></table></figure><p><em>注意: 将chromedriver路径前加 <code>r</code> 防止转义</em> </p><h4 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a><strong>元素获取</strong></h4><p>页面中的元素</p><figure class="highlight html"><table><tr><td class="code"><pre class=" language-hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string"><code class="language-hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"passwd-id"</span> /></span><br></code></pre></td></tr></table></figure><p> 使用selenium获取</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">element = driver.find_element_by_id(<span class="hljs-string">&quot;passwd-id&quot;</span>)<br>element = driver.find_element_by_name(<span class="hljs-string">&quot;passwd&quot;</span>)<br>element = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;input&quot;</span>)<br>element = driver.find_element_by_xpath(<span class="hljs-string"><code class="language-hljs Python">element = driver.find_element_by_id(<span class="hljs-string">&quot;passwd-id&quot;</span>)<br>element = driver.find_element_by_name(<span class="hljs-string">&quot;passwd&quot;</span>)<br>element = driver.find_elements_by_tag_name(<span class="hljs-string">&quot;input&quot;</span>)<br>element = driver.find_element_by_xpath(<span class="hljs-string">"//input[@id=&#x27;passwd-id&#x27;]"</span>)<br></code></pre></td></tr></table></figure><p><em>注意：用 xpath时，如果有多个元素匹配了 xpath，它只会返回第一个匹配的元素。如果没有找到，那么会抛出 NoSuchElementException 的异常</em></p><p> 单个元素获取</p><ul><li>find_element_by_id</li><li>find_element_by_name</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li></ul><p>多个元素获取</p><ul><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li></ul><h4 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a><strong>元素操作</strong></h4><p>文本框</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">element.send_keys(<span class="hljs-string">&quot;some text&quot;</span>) <span class="hljs-comment"># 输入文本</span><br>element.send_keys(<span class="hljs-string">&quot;and some&quot;</span>, Keys.ARROW_DOWN) <span class="hljs-comment"># 模拟按键</span><br>element.clear() <span class="hljs-comment"><code class="language-hljs Python">element.send_keys(<span class="hljs-string">&quot;some text&quot;</span>) <span class="hljs-comment"># 输入文本</span><br>element.send_keys(<span class="hljs-string">&quot;and some&quot;</span>, Keys.ARROW_DOWN) <span class="hljs-comment"># 模拟按键</span><br>element.clear() <span class="hljs-comment"># 文本清除</span><br></code></pre></td></tr></table></figure><p>下拉选项</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"># 方法一：</span><br>element = driver.find_element_by_xpath(<span class="hljs-string">&quot;//select[@name=&#x27;name&#x27;]&quot;</span>)<br>all_options = element.find_elements_by_tag_name(<span class="hljs-string">&quot;option&quot;</span>)<br><span class="hljs-keyword">for</span> option <span class="hljs-keyword">in</span> all_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value is: %s&quot;</span> % option.get_attribute(<span class="hljs-string">&quot;value&quot;</span>))<br>    option.click()<br><br><span class="hljs-comment"># 方法二：</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> Select<br>select = Select(driver.find_element_by_name(<span class="hljs-string">&#x27;name&#x27;</span>))<br>select.select_by_index(index)<br>select.select_by_visible_text(<span class="hljs-string">&quot;text&quot;</span>)<br>select.select_by_value(value)<br><br>select.deselect_all() <span class="hljs-comment"># 全部取消</span><br>all_selected_options = select.all_selected_options <span class="hljs-comment"># 获取已选</span><br>options = select.options <span class="hljs-comment"><code class="language-hljs Python"><span class="hljs-comment"># 方法一：</span><br>element = driver.find_element_by_xpath(<span class="hljs-string">&quot;//select[@name=&#x27;name&#x27;]&quot;</span>)<br>all_options = element.find_elements_by_tag_name(<span class="hljs-string">&quot;option&quot;</span>)<br><span class="hljs-keyword">for</span> option <span class="hljs-keyword">in</span> all_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value is: %s&quot;</span> % option.get_attribute(<span class="hljs-string">&quot;value&quot;</span>))<br>    option.click()<br><br><span class="hljs-comment"># 方法二：</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> Select<br>select = Select(driver.find_element_by_name(<span class="hljs-string">&#x27;name&#x27;</span>))<br>select.select_by_index(index)<br>select.select_by_visible_text(<span class="hljs-string">&quot;text&quot;</span>)<br>select.select_by_value(value)<br><br>select.deselect_all() <span class="hljs-comment"># 全部取消</span><br>all_selected_options = select.all_selected_options <span class="hljs-comment"># 获取已选</span><br>options = select.options <span class="hljs-comment"># 获取可选选项</span><br></code></pre></td></tr></table></figure><p>按钮</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">btn = driver.find_element_by_id(<span class="hljs-string"><code class="language-hljs Python">btn = driver.find_element_by_id(<span class="hljs-string">"submit"</span>)<br>btn.click()<br></code></pre></td></tr></table></figure><p>拖拽</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">element = driver.find_element_by_name(<span class="hljs-string">&quot;source&quot;</span>)<br>target = driver.find_element_by_name(<span class="hljs-string">&quot;target&quot;</span>)<br> <br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword"><code class="language-hljs Python">element = driver.find_element_by_name(<span class="hljs-string">&quot;source&quot;</span>)<br>target = driver.find_element_by_name(<span class="hljs-string">&quot;target&quot;</span>)<br> <br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> ActionChains<br>action_chains = ActionChains(driver)<br>action_chains.drag_and_drop(element, target).perform()<br></code></pre></td></tr></table></figure><h4 id="浏览器操作"><a href="#浏览器操作" class="headerlink" title="浏览器操作"></a><strong>浏览器操作</strong></h4><p>页面切换</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"># 切换到windowName窗口</span><br>driver.switch_to_window(<span class="hljs-string">&quot;windowName&quot;</span>)<br><br><span class="hljs-comment"># 获取每个窗口对象</span><br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> driver.window_handles:<br>    driver.switch_to_window(handle)<br><br><span class="hljs-comment"># 切换到frameName窗口</span><br>driver.switch_to_frame(<span class="hljs-string"><code class="language-hljs Python"><span class="hljs-comment"># 切换到windowName窗口</span><br>driver.switch_to_window(<span class="hljs-string">&quot;windowName&quot;</span>)<br><br><span class="hljs-comment"># 获取每个窗口对象</span><br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> driver.window_handles:<br>    driver.switch_to_window(handle)<br><br><span class="hljs-comment"># 切换到frameName窗口</span><br>driver.switch_to_frame(<span class="hljs-string">"frameName.0.child"</span>)<br></code></pre></td></tr></table></figure><p>弹窗</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"><code class="language-hljs Python"><span class="hljs-comment"># 获取弹窗对象</span><br>alert = driver.switch_to_alert()<br></code></pre></td></tr></table></figure><p>历史记录</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><code class="language-hljs Python">driver.forward()<br>driver.back()<br></code></pre></td></tr></table></figure><p>Cookies</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"># 添加Cookie</span><br>cookie = &#123;‘name’ : ‘foo’, ‘value’ : ‘bar’&#125;<br>driver.add_cookie(cookie)<br><br><span class="hljs-comment"><code class="language-hljs Python"><span class="hljs-comment"># 添加Cookie</span><br>cookie = &#123;‘name’ : ‘foo’, ‘value’ : ‘bar’&#125;<br>driver.add_cookie(cookie)<br><br><span class="hljs-comment"># 获取Cookie</span><br>driver.get_cookies()<br></code></pre></td></tr></table></figure><p>定时等待</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python">driver = webdriver.Chrome()<br>driver.implicitly_wait(<span class="hljs-number">1</span>) <span class="hljs-comment"><code class="language-hljs Python">driver = webdriver.Chrome()<br>driver.implicitly_wait(<span class="hljs-number">1</span>) <span class="hljs-comment"># seconds</span><br></code></pre></td></tr></table></figure><p>等待元素加载完成</p><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"># 方法一：</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br> <br>wait = WebDriverWait(driver, <span class="hljs-number">10</span>)<br>element = wait.until(EC.element_to_be_clickable((By.ID,<span class="hljs-string"><code class="language-hljs Python"><span class="hljs-comment"># 方法一：</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br> <br>wait = WebDriverWait(driver, <span class="hljs-number">10</span>)<br>element = wait.until(EC.element_to_be_clickable((By.ID,<span class="hljs-string">&#x27;someid&#x27;</span>)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs Python"><span class="hljs-comment"># 方法二：</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br> <br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    element = WebDriverWait(driver, <span class="hljs-number">10</span>).until(<br>        EC.presence_of_element_located((By.ID, <span class="hljs-string">&quot;myDynamicElement&quot;</span>))<br>    )<br><span class="hljs-keyword"><code class="language-hljs Python"><span class="hljs-comment"># 方法二：</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br> <br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    element = WebDriverWait(driver, <span class="hljs-number">10</span>).until(<br>        EC.presence_of_element_located((By.ID, <span class="hljs-string">&quot;myDynamicElement&quot;</span>))<br>    )<br><span class="hljs-keyword">finally</span>:<br>    driver.quit()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> 爬虫技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫技术 </tag>
            
            <tag> selenium </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生物信息之多序列比对，进化树分析，保守位点分析</title>
      <link href="/posts/45513/"/>
      <url>/posts/45513/</url>
      
        <content type="html"><![CDATA[<h1 id="一、序列下载与整理"><a href="#一、序列下载与整理" class="headerlink" title="一、序列下载与整理"></a>一、序列下载与整理</h1><hr><h3 id="下载fasta格式序列"><a href="#下载fasta格式序列" class="headerlink" title="下载fasta格式序列"></a>下载fasta格式序列</h3><p>0、输入网址：<a href="https://www.ncbi.nlm.nih.gov/gene">https://www.ncbi.nlm.nih.gov/gene</a></p><p>1、输入你想查找的序列，比如Syp基因 <code>可以点击图片来查看高清图</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTA0OTQxMjcx?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>2、进入基因详细信息页面<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTA0OTU5OTY0?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>3、点击Genbank<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTA1MDE1NjQ2?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>4、如图所示可以下载到fasta格式的序列，注意这里下载的是基因或者蛋白质的全序列</p><blockquote><p>如果你有一定的Python编程基础，可以查看这篇文章来批量下载大量基因序列：<a href="https://blog.csdn.net/u011262253/article/details/88542910">生物信息中的Python 04 | 批量下载基因与文献</a></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTA1MDM2ODUz?x-oss-process=image/format,png" alt="这里写图片描述"></p><blockquote><p>当然，你也可以直接用CDS，各种基因元件来做进化树。</p><p>如果你有编程基础，可以参考这篇<a href="https://blog.csdn.net/u011262253/article/details/82794678">从 Genbank 文件中提取 CDS 等其他特征序列</a> 来提取基因特征序列。</p><p><strong>这里提供一种提取基因启动子区域的方法</strong></p><ul><li>假如你希望得到promoter的基因，可以在如图所示的位置输入起始位点和终止位点</li><li>一般promoter的位点不确定，可以通过将起始位点左右2kb基因视为promoter</li><li>比如：如图起始位点为7638580，那么起始位点要减500，终止位点加1499，这时需要在from输入7638080，to输入7640079（得到长度为2kb的序列）</li><li>点击<code>Update view</code> 按钮</li><li>然后和同上一步下载fasta序列<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTA1MDUyMjE3?x-oss-process=image/format,png" alt="这里写图片描述"></li></ul></blockquote><h3 id="合并多个fasta文件"><a href="#合并多个fasta文件" class="headerlink" title="合并多个fasta文件"></a>合并多个fasta文件</h3><p>1、下载多个序列后，我们将下载的序列整理到特定文件夹下，比如<code>D:\Download\fasta_files</code>，就像这样：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwODI3L0Y4REVIOTRLRjMucG5n?x-oss-process=image/format,png" alt="mark"></p><p>2、你的<code>fasta_files</code>文件夹里应该是这样的<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTEwNTI3Mjcy?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>3、返回<code>D:\Download</code>路径下，在文件夹空白地方<code>Shift+右键</code>，点击在此处打开命令窗口<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTEwNzA5ODQ1?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>4、输入<br><code>type fasta_files\*.fasta &gt; all_sequence.fasta</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwODI3L2JnNkNJaGVnMWcucG5n?x-oss-process=image/format,png" alt="mark"></p><p>5、现在，在你的文件夹下应该类似这样的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMTgwODI3L2FMaERFaTVGNEgucG5n?x-oss-process=image/format,png" alt="mark"></p><p>6、得到整合文件 all_sequence.fasta（这个文件也可以通过记事本打开，下面软件为UE）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTEyMDQ5MTE3?x-oss-process=image/format,png" alt="这里写图片描述"></p><h1 id="二、多序列比对"><a href="#二、多序列比对" class="headerlink" title="二、多序列比对"></a>二、多序列比对</h1><hr><h3 id="软件下载安装"><a href="#软件下载安装" class="headerlink" title="软件下载安装"></a>软件下载安装</h3><p>Clustalw 下载链接：<a href="http://www.clustal.org/download/current/clustalw-2.1-win.msi">http://www.clustal.org/download/current/clustalw-2.1-win.msi</a></p><p>Clustalx 下载链接：<a href="http://www.clustal.org/download/current/clustalx-2.1-win.msi">http://www.clustal.org/download/current/clustalx-2.1-win.msi</a></p><p>MEGA 下载链接：<a href="http://www.megasoftware.net/releases/MEGA7.0.26_win64_setup.exe">http://www.megasoftware.net/releases/MEGA7.0.26_win64_setup.exe</a></p><h3 id="序列比对"><a href="#序列比对" class="headerlink" title="序列比对"></a>序列比对</h3><p>1、打开MEGA，进入序列比对分析<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE0MjIyODg5?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>2、载入fasta序列<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE0MjU5MTk2?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>3、使用Clustalw 比对序列，参数默认点OK<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE0NDE1MzE2?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>4、跑出来的结果需要编辑第一列只留下物种名，序列去掉5’,3’端的空序列（因为要比对序列同源性，最好把显示 <code>-</code> 的序列去掉，使多序列的两端整齐，类似矩阵）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2JhaW1vYy56aXB0b3AudG9wL2Jsb2cvMjAyMDA5MDgvUEJHcUVEQXU2TEpOLnBuZw?x-oss-process=image/format,png" alt="mark"></p><p>5、导出fasta格式和MEGA格式两种格式<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1MDE1Mjk3?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>6、打开Clustalx 加载刚刚比对完的fasta格式（注意是比对完的，文件后缀名为.fas）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1MTA3Nzkx?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>7、导出可视化文件，参数默认点OK<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1MjQ5Njcx?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>8、得到可视化的多序列比对结果，打开类似这样（打开用到的软件为Adobe Acrobat）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1MzQ4ODUz?x-oss-process=image/format,png" alt="这里写图片描述"></p><h1 id="三、进化树分析"><a href="#三、进化树分析" class="headerlink" title="三、进化树分析"></a>三、进化树分析</h1><hr><p>1、打开MEGA，载入meg文件<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1NzMwNjMx?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>2、参数设置（这里是核酸序列）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTE1ODA4OTE4?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>3、得到进化树<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTUyNDA1NDcz?x-oss-process=image/format,png" alt="这里写图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTUyNDE3NzU0?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>4、导出与美化<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTUzNTE1OTMz?x-oss-process=image/format,png" alt="这里写图片描述"></p><blockquote><p>美化参考：<a href="http://www.sohu.com/a/130616941_278730">http://www.sohu.com/a/130616941_278730</a></p></blockquote><h1 id="四、保守位点分析"><a href="#四、保守位点分析" class="headerlink" title="四、保守位点分析"></a>四、保守位点分析</h1><hr><p>1、输入网址</p><p>MEME : <a href="http://meme-suite.org/tools/meme">http://meme-suite.org/tools/meme</a></p><p>2、上传fasta序列（这里的序列是整合后的文件，文件后缀.fasta）,并输入参数（这里设置motif为10）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTU0NDQ0Mjk4?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>3、得到保守位点分析结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTExMTU0NTM4MTEz?x-oss-process=image/format,png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | FastQC（质量控制，查看测序质量）</title>
      <link href="/posts/17531/"/>
      <url>/posts/17531/</url>
      
        <content type="html"><![CDATA[<h1 id="生信软件-FastQC"><a href="#生信软件-FastQC" class="headerlink" title="生信软件 | FastQC"></a>生信软件 | FastQC</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>高通量测序数据的高级质控工具</li><li>输入FastQ，SAM，BAM文件，输出对测序数据评估的网页报告</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>conda install fastqc</code></p><blockquote><p>这里需要安装Conda (这是一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a></p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>fastqc -t 12 -o out_path sample1_1.fq sample1_2.fq</code></p><blockquote><p>-o –outdir:输出路径<br> –extract：结果文件解压缩<br> –noextract：结果文件压缩<br> -f –format:输入文件格式.支持bam,sam,fastq文件格式<br> -t –threads:线程数<br> -c –contaminants：制定污染序列。文件格式 name[tab]sequence<br> -a –adapters：指定接头序列。文件格式name[tab]sequence<br> -k –kmers：指定kmers长度（2-10bp,默认7bp）<br> -q –quiet： 安静模式</p></blockquote><blockquote><p>文档：<a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/">http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/</a></p></blockquote><h4 id="结果解读"><a href="#结果解读" class="headerlink" title="结果解读"></a>结果解读</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/aee92521b2a3d3bbac8e97d1cbd3ec7a.png" alt="mark"></p><p>完全正常（绿），略有异常（橙） ）或异常（红） </p><ol><li><p>Basic Statistics （基础统计）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a17c2f6e3d7c4d0cdb1cda32bced202a.png" alt="mark"></p></li><li><p>Per base sequence quality</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c91a9285646a76d09f2e76e89ca73e6.png" alt="mark"></p><ul><li>这是 read length &#x3D; 100 的scRNAseq数据，横轴为read位置，纵轴是quality。</li><li>quality &#x3D; -10*log10(p)，p为测错的概率。</li><li>根据quality给出质量结果：正常区间（28 - 40），警告区间（20-28），错误区间（0-20）。</li><li>比如，当read的某一位置的p&#x3D;0.01,quality&#x3D;20，那么它就处于错误区间。</li></ul></li><li><p>Per tile sequence quality</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9137bdaae1d071467c85aa03a100b9c4.png" alt="mark"></p></li><li><p>Per base quality scores</p><p><img src="https://img-blog.csdnimg.cn/img_convert/14c56e20d4b941cbb18de798d0f5c75c.png" alt="mark"></p><ul><li>横轴为quality，纵轴为reads计数。</li><li>当峰值处于quality为0-20时，报错。</li></ul></li><li><p>Per sequence sequence content</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fd615744c4197a517fb11201c84520d8.png" alt="mark"></p><ul><li>横轴为位置，纵轴为百分比</li><li>正常测序数据为频率相近的四种碱基，无位置差异。表现在图上的话，四条线应该是平行且接近。</li><li>当任意位置A&#x2F;T与G&#x2F;C相差大于10%报警告，大于20%报错</li></ul></li><li><p>Per base GC content</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e9536ea7fc026ddf7dfdd25208049f16.png" alt="mark"></p><ul><li>横轴为GC含量，纵轴为read计数。红色为实际测得，蓝色为理论分布。</li><li>如果曲线形状不符，代表文库污染</li><li>偏离大于15%，报警告；大于30%，报错</li></ul></li><li><p>Per base N content</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9fbeef78a04c6f694bdf1d6d28f2c621.png" alt="mark"></p><ul><li>N 代表测序仪不能识别的碱基，横轴代表read位置，纵轴代表占比</li><li>如果正常测序，红线应该是趋近与0的直线</li><li>当任意位置N占比大于5%，报警告；大于20%，报错</li></ul></li><li><p>Sequence Length Distribution</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7f29431cc87328d85adb7549233001a1.png" alt="mark"></p><ul><li>reads 长度不一致报警告；reads长度为0是报错</li></ul></li><li><p>Sequence Duplication Levels</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c348218a8d9235407d0cd8264cf696d.png" alt="mark"></p><ul><li>横坐标为重复（duplication）的次数，纵坐标为reads的数目，以unique reads的总数作为100% </li><li>比如，当unique reads数大约为10%时，有两个重复；正常测序开始较高，后续趋近0%</li></ul></li><li><p>Adapter Content</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/47cd706255bddae79aa7ac115381a0d0.png" alt="·mark"></p><ul><li>横坐标为read位置，纵坐标为Adapter序列占比；如果fastqc默认参数会将所有的常见的Adapter都列出</li><li>正常情况是趋于0的直线，也就是说序列两端Adapter已经去除干净；如果有Adapter，需要先用cutadapt去接头</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信情报站 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | Sratools (操作SRA文件)</title>
      <link href="/posts/42909/"/>
      <url>/posts/42909/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><ul><li>Sratools是NCBI官方提供，用于操作SRA (reads and reference alignments) 数据的工具集合</li><li>一般常用于下载SRA文件，从SRA文件中提取fastq，sam文件，查看SRA文件信息等</li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p><strong>这里提供两种方法，选择一种安装即可，强烈建议使用Conda方式安装</strong></p><h2 id="2-1-Conda-安装"><a href="#2-1-Conda-安装" class="headerlink" title="2.1 Conda 安装"></a>2.1 Conda 安装</h2><p><code>conda install -y sra-tools  </code></p><blockquote><p>这里需要安装Conda (一款用于安装多数生物信息分析软件的管理软件，重要的是可以解决软件的依赖问题) ： <a href="https://blog.csdn.net/u011262253/article/details/88828229">Conda 安装使用图文详解</a></p></blockquote><h2 id="2-2-传统安装"><a href="#2-2-传统安装" class="headerlink" title="2.2 传统安装"></a>2.2 传统安装</h2><p><strong>下载</strong></p><blockquote><p>下载地址1：<a href="https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?cmd=show&f=software&m=software&s=software">https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?cmd=show&amp;f=software&amp;m=software&amp;s=software</a><br>下载地址2：<a href="https://github.com/ncbi/sra-tools/wiki/Downloads">https://github.com/ncbi/sra-tools/wiki/Downloads</a></p></blockquote><p>在Linux系统（以CentOS为例）下将上述的链接下载到本地</p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">wget http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.9.6-1/sratoolkit.2.9.6-1-centos_linux64.tar.gz<br></code></pre></td></tr></table></figure><p><strong>解压</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">gunzip -c sratoolkit.2.9.6-1-centos_linux64.tar.gz | tar xf -<br></code></pre></td></tr></table></figure><p><strong>设置环境变量</strong></p><blockquote><p>所有的可执行文件均在<code>sratoolkit.2.9.6-1-centos_linux64/bin</code>目录下</p><p>环境变量添加的详细方法：<a href="https://blog.csdn.net/u011262253/article/details/86083351">Linux 添加环境变量的五种方法</a></p></blockquote><ul><li>打开环境变量设置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">sudo vim /etc/environment<br></code></pre></td></tr></table></figure><ul><li><p>添加软件 bin 目录的路径，并用 <code>:</code> 隔开</p></li><li><p>执行source命令，使配置立即生效</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">sudo source /etc/enviroment<br></code></pre></td></tr></table></figure><h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h1><blockquote><p>官方文档：<a href="https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc">https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc</a> </p></blockquote><h2 id="3-1-下载SRA"><a href="#3-1-下载SRA" class="headerlink" title="3.1 下载SRA"></a>3.1 下载SRA</h2><blockquote><p><a href="https://github.com/ncbi/sra-tools/wiki/HowTo:-Access-SRA-Data">https://github.com/ncbi/sra-tools/wiki/HowTo:-Access-SRA-Data</a></p></blockquote><p><strong>下载单个文件</strong></p><p><code>prefetch SRR390728</code></p><p><strong>下载多个文件</strong></p><p><code>prefetch cart_0.krt</code></p><h2 id="3-2-抽取fastq文件"><a href="#3-2-抽取fastq文件" class="headerlink" title="3.2 抽取fastq文件"></a>3.2 抽取fastq文件</h2><p><code>fastq-dump --split-3  SRR893046 -O fastq</code></p><p><strong>注意：</strong>NCBI其实已经更新了一个多线程抽取工具<code>fasterq-dump</code>，可以在sratools的bin目录里找到，但是文档没有写，没有特殊需求的话，可以考虑直接用新工具替代。</p><p>这个<code>fasterq-dump</code>与<code>fastq-dump</code>相比，就像动车碾压绿皮火车，用法如下：</p><p><code>fasterq-dump --split-3  SRR893046 -O fastq</code></p><blockquote><p>详情查看：<a href="https://www.jianshu.com/p/5c97a34cc1ad">https://www.jianshu.com/p/5c97a34cc1ad</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> SRA </tag>
            
            <tag> Sratools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装Java</title>
      <link href="/posts/62994/"/>
      <url>/posts/62994/</url>
      
        <content type="html"><![CDATA[<h3 id="检测是否安装Java"><a href="#检测是否安装Java" class="headerlink" title="检测是否安装Java"></a>检测是否安装Java</h3><hr><ul><li><p>未安装Java<br><img src="http://img.blog.csdn.net/20171106155048726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>已经安装Java<br> <img src="http://img.blog.csdn.net/20171106155154618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li></ul><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><p><img src="http://img.blog.csdn.net/20171106155342292?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 实现 SpringBoot 热部署</title>
      <link href="/posts/11918/"/>
      <url>/posts/11918/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h1><ul><li><code>CTRL + SHIFT + A</code></li></ul><p>  <img src="http://img.blog.csdn.net/20171031221138414?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><ul><li>查找  make project automatically 并选中</li></ul><p> <img src="http://img.blog.csdn.net/20171031221434024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><code>CTRL + SHIFT + A</code> 查找 Registry</li></ul><p>  <img src="http://img.blog.csdn.net/20171031221655452?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>找到并勾选compiler.automake.allow.when.app.running<br>  <img src="http://img.blog.csdn.net/20171031222901498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ul><h1 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h1><ul><li>在pom.xml文件中添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>></span><br></code></pre></td></tr></table></figure></li><li>开启热部署<figure class="highlight xml"><table><tr><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span>//该配置必须<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span>//该配置必须<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>></span><br></code></pre></td></tr></table></figure></li></ul><h1 id="浏览器缓存配置"><a href="#浏览器缓存配置" class="headerlink" title="浏览器缓存配置"></a>浏览器缓存配置</h1><ul><li>Google Chrome</li></ul><p> <img src="http://img.blog.csdn.net/20171031222808550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p> <img src="http://img.blog.csdn.net/20171031222824373?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><p>FireFox<br><img src="http://img.blog.csdn.net/20171031223538191?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>IE<br> <img src="http://img.blog.csdn.net/20171031223930048?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li></ul><p> <img src="http://img.blog.csdn.net/20171031223942290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p> <img src="http://img.blog.csdn.net/20171031223958783?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTI2MjI1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> idea </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库的导入导出</title>
      <link href="/posts/7188/"/>
      <url>/posts/7188/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><hr><p>[TOC]</p><hr><h2 id="导出数据库："><a href="#导出数据库：" class="headerlink" title="导出数据库："></a><strong>导出数据库：</strong></h2><h3 id="导出数据和表结构："><a href="#导出数据和表结构：" class="headerlink" title="导出数据和表结构："></a>导出数据和表结构：</h3><p><strong>格式：</strong><br><code>mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.sql</code><br><strong>举例：</strong><br><code>/usr/local/mysql/bin/   mysqldump -uroot -p abc &gt; abc.sql</code><br>敲回车后会提示输入密码</p><h3 id="只导出表结构"><a href="#只导出表结构" class="headerlink" title="只导出表结构"></a>只导出表结构</h3><p>格式：<code>mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.sql</code><br>举例：<code>/usr/local/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.sql</code><br>注：&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;  —&gt;  mysql的data目录</p><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a><strong>导入数据库</strong></h2><p>###首先建空数据库<br>mysql&gt;create database abc;</p><h3 id="导入数据库-1"><a href="#导入数据库-1" class="headerlink" title="导入数据库"></a>导入数据库</h3><ul><li><strong>方法一：</strong></li><li>选择数据库<br><code>mysql&gt;use abc;</code></li><li>设置数据库编码<br><code>mysql&gt;set names utf8;</code></li><li>导入数据（注意sql文件的路径）<br><code>mysql&gt;source /home/abc/abc.sql;</code></li><li><strong>方法二：</strong><br>mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql<br><code>mysql -uabc_f -p abc &lt; abc.sql</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用技巧集合</title>
      <link href="/posts/59279/"/>
      <url>/posts/59279/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h1><hr><p>[TOC]</p><hr><h2 id="enumerate遍历可迭代对象"><a href="#enumerate遍历可迭代对象" class="headerlink" title="enumerate遍历可迭代对象"></a><strong>enumerate遍历可迭代对象</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">iterable = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(iterable):<br>    <span class="hljs-built_in">print</span> i, item<br>    <br><span class="hljs-comment"># 同时参数二可以指定开始索引</span><br><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(iterable, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in"><code class="language-hljs python">iterable = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(iterable):<br>    <span class="hljs-built_in">print</span> i, item<br>    <br><span class="hljs-comment"># 同时参数二可以指定开始索引</span><br><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(iterable, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span> i, item<br></code></pre></td></tr></table></figure><h2 id="生成器创建列表，字典，集合"><a href="#生成器创建列表，字典，集合" class="headerlink" title="生成器创建列表，字典，集合"></a><strong>生成器创建列表，字典，集合</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python">my_list = [i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>my_dict = &#123;i: i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">10</span>)&#125;<br>my_set = &#123;i * <span class="hljs-number">15</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">10</span>)&#125;<br><span class="hljs-built_in">print</span> my_list<br><span class="hljs-built_in">print</span> my_dict<br><span class="hljs-built_in"><code class="language-hljs python">my_list = [i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>my_dict = &#123;i: i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">10</span>)&#125;<br>my_set = &#123;i * <span class="hljs-number">15</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">10</span>)&#125;<br><span class="hljs-built_in">print</span> my_list<br><span class="hljs-built_in">print</span> my_dict<br><span class="hljs-built_in">print</span> my_set<br></code></pre></td></tr></table></figure><h2 id="强制浮点数除法"><a href="#强制浮点数除法" class="headerlink" title="强制浮点数除法"></a><strong>强制浮点数除法</strong></h2><ul><li>方法一<figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-built_in">print</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>, <span class="hljs-number">1.0</span>/<span class="hljs-number"><code class="language-hljs python"><span class="hljs-built_in">print</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>, <span class="hljs-number">1.0</span>/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li>方法二<blockquote><p>只用在Python2中，在Python3中默认导入</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre class=" language-hljs python"><span class="hljs-keyword">import</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-built_in">print</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>, <span class="hljs-number">1.0</span>/<span class="hljs-number"><code class="language-hljs python"><span class="hljs-keyword">import</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-built_in">print</span> <span class="hljs-number">1</span>/<span class="hljs-number">2</span>, <span class="hljs-number">1.0</span>/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="if-结构简化"><a href="#if-结构简化" class="headerlink" title="if 结构简化"></a><strong>if 结构简化</strong></h2><ul><li>or判断<figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">if n in [1, 3, 5, 7]:<br>pass<br><br># 相当于下边的表达式<br>if n==1 or n==3 or n==5 or n==7:<br>pass<br></code></pre></td></tr></table></figure></li><li>三元运算<figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># [on_true] if [expression] else [on_false]<br>x, y = 50, 25<br>small = x if x< y else y<br></code></pre></td></tr></table></figure></li><li>链式比较操作符<figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext"># 这样的表达式在Python中是可行的<br>num = 2<br>if 1 < num < 3:<br>print num<br></code></pre></td></tr></table></figure></li></ul><h2 id="字符串逆序"><a href="#字符串逆序" class="headerlink" title="字符串逆序"></a><strong>字符串逆序</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">my_list = [1, 2, 3, 4]<br>print my_list[::-1]<br><br># 下边的表达式会改变my_list本身<br>my_list.reverse()<br>print my_list<br></code></pre></td></tr></table></figure><h2 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a><strong>交换变量</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">a = &#x27;apple&#x27;<br>b = &#x27;banana&#x27;<br>print a, b<br># 在Python中这种表达式可行<br>a, b = b, a<br>print a, b<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows，PHP下MongoDB扩展安装</title>
      <link href="/posts/17590/"/>
      <url>/posts/17590/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB常用操作</title>
      <link href="/posts/37776/"/>
      <url>/posts/37776/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb安装配置详细图文教程</title>
      <link href="/posts/51692/"/>
      <url>/posts/51692/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 爬虫技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础之http协议</title>
      <link href="/posts/24609/"/>
      <url>/posts/24609/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> 爬虫技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫技术 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过js获取IP及物理地址</title>
      <link href="/posts/53092/"/>
      <url>/posts/53092/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> javascript </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xampp-MySQL-重置密码</title>
      <link href="/posts/41351/"/>
      <url>/posts/41351/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站搭建，远程操作，文件上传，问题汇总</title>
      <link href="/posts/16470/"/>
      <url>/posts/16470/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> xampp </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复：XAMPP与VMware端口443占用问题“Port_443_in_use_by_...”</title>
      <link href="/posts/21104/"/>
      <url>/posts/21104/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> xampp </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm自动添加文件头注释</title>
      <link href="/posts/25498/"/>
      <url>/posts/25498/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy中文乱码解决</title>
      <link href="/posts/27045/"/>
      <url>/posts/27045/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> 爬虫技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python库文件安装</title>
      <link href="/posts/58178/"/>
      <url>/posts/58178/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy报错及解决方案集锦</title>
      <link href="/posts/35653/"/>
      <url>/posts/35653/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> 爬虫技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 6.5 图形界面安装及后续补充：</title>
      <link href="/posts/16054/"/>
      <url>/posts/16054/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP技巧--去除index.php</title>
      <link href="/posts/57331/"/>
      <url>/posts/57331/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 归档压缩命令详解</title>
      <link href="/posts/39261/"/>
      <url>/posts/39261/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
            <tag> 压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux find exec 记录</title>
      <link href="/posts/57795/"/>
      <url>/posts/57795/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
            <tag> find </tag>
            
            <tag> exec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下导入与导出SQL文件</title>
      <link href="/posts/60173/"/>
      <url>/posts/60173/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp发送邮件_图文教程</title>
      <link href="/posts/5141/"/>
      <url>/posts/5141/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> thinkphp </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基本语句记录</title>
      <link href="/posts/38610/"/>
      <url>/posts/38610/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库开发 </tag>
            
            <tag> mysql </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装lxml及各种问题的解决</title>
      <link href="/posts/47755/"/>
      <url>/posts/47755/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> centos </tag>
            
            <tag> red hat </tag>
            
            <tag> yum </tag>
            
            <tag> lxml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 让进程在关闭终端后继续执行</title>
      <link href="/posts/26863/"/>
      <url>/posts/26863/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
            <tag> 终端 </tag>
            
            <tag> 后台执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 字符操作记录</title>
      <link href="/posts/25356/"/>
      <url>/posts/25356/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件及文件夹操作记录</title>
      <link href="/posts/11353/"/>
      <url>/posts/11353/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> 文件 </tag>
            
            <tag> 文件夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件读写操作记录</title>
      <link href="/posts/3414/"/>
      <url>/posts/3414/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件读写 </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件读写</title>
      <link href="/posts/3881/"/>
      <url>/posts/3881/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> python </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | needleall (多对多序列比对)</title>
      <link href="/posts/24164/"/>
      <url>/posts/24164/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> 多对多序列比对 </tag>
            
            <tag> needleall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信软件 | Blast (序列比对)</title>
      <link href="/posts/63324/"/>
      <url>/posts/63324/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> blast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信格式 | Fasta格式 图解</title>
      <link href="/posts/50295/"/>
      <url>/posts/50295/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生物信息 </category>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
            <tag> 生信情报站 </tag>
            
            <tag> fasta </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 究极技巧2 - 开启Project文件视图，文件检索</title>
      <link href="/posts/53318/"/>
      <url>/posts/53318/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 究极技巧1 - 彻底解决中文乱码</title>
      <link href="/posts/62993/"/>
      <url>/posts/62993/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 常用插件包</title>
      <link href="/posts/3919/"/>
      <url>/posts/3919/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 究极技巧4 - 构建Python，php运行及调试环境</title>
      <link href="/posts/53714/"/>
      <url>/posts/53714/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 数据库记录</title>
      <link href="/posts/2679/"/>
      <url>/posts/2679/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-sublime构建Python运行，调试环境</title>
      <link href="/posts/6631/"/>
      <url>/posts/6631/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网站开发 </tag>
            
            <tag> python </tag>
            
            <tag> 调试 </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP学习笔记-Mysql概念及命令整理</title>
      <link href="/posts/27210/"/>
      <url>/posts/27210/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>joomla学习笔记-MySql数据库Plugin_&#39;FEDERATED&#39;_is_disabled.错误解决方法</title>
      <link href="/posts/368/"/>
      <url>/posts/368/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
            <tag> joomla </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>joomla学习笔记-备份与还原</title>
      <link href="/posts/15817/"/>
      <url>/posts/15817/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> joomla </tag>
            
            <tag> 备份 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>joomla本地安装全过程</title>
      <link href="/posts/42556/"/>
      <url>/posts/42556/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> 安装 </tag>
            
            <tag> joomla </tag>
            
            <tag> xampp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache+PHP+VC14环境搭建及测试</title>
      <link href="/posts/1776/"/>
      <url>/posts/1776/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站开发 </tag>
            
            <tag> apache </tag>
            
            <tag> php </tag>
            
            <tag> mysql </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记，Linux文件系统，文件管理，目录管理</title>
      <link href="/posts/35130/"/>
      <url>/posts/35130/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
            <tag> Linux文件系统 </tag>
            
            <tag> Linux文件管理 </tag>
            
            <tag> Linux目录管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统启动，命令，文件详解（更新）</title>
      <link href="/posts/53397/"/>
      <url>/posts/53397/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> Linux命令 </tag>
            
            <tag> Linux命令例子 </tag>
            
            <tag> Linux命令全称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux fedora flash player安装</title>
      <link href="/posts/40540/"/>
      <url>/posts/40540/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> fedora </tag>
            
            <tag> flash </tag>
            
            <tag> linux </tag>
            
            <tag> 64位 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
